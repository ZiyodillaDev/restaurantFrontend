/*!
 * jQuery JavaScript Library v3.6.0
 * https://jquery.com/
 *
 * Includes Sizzle.js
 * https://sizzlejs.com/
 *
 * Copyright OpenJS Foundation and other contributors
 * Released under the MIT license
 * https://jquery.org/license
 *
 * Date: 2021-03-02T17:08Z
 */
!(function (t, e) {
  "use strict";
  "object" == typeof module && "object" == typeof module.exports
    ? (module.exports = t.document
        ? e(t, !0)
        : function (t) {
            if (!t.document)
              throw new Error("jQuery requires a window with a document");
            return e(t);
          })
    : e(t);
})("undefined" != typeof window ? window : this, function (t, e) {
  "use strict";
  var i = [],
    n = Object.getPrototypeOf,
    a = i.slice,
    s = i.flat
      ? function (t) {
          return i.flat.call(t);
        }
      : function (t) {
          return i.concat.apply([], t);
        },
    r = i.push,
    o = i.indexOf,
    l = {},
    c = l.toString,
    h = l.hasOwnProperty,
    d = h.toString,
    u = d.call(Object),
    f = {},
    p = function (t) {
      return (
        "function" == typeof t &&
        "number" != typeof t.nodeType &&
        "function" != typeof t.item
      );
    },
    g = function (t) {
      return null != t && t === t.window;
    },
    x = t.document,
    m = { type: !0, src: !0, nonce: !0, noModule: !0 };
  function v(t, e, i) {
    var n,
      a,
      s = (i = i || x).createElement("script");
    if (((s.text = t), e))
      for (n in m)
        (a = e[n] || (e.getAttribute && e.getAttribute(n))) &&
          s.setAttribute(n, a);
    i.head.appendChild(s).parentNode.removeChild(s);
  }
  function b(t) {
    return null == t
      ? t + ""
      : "object" == typeof t || "function" == typeof t
      ? l[c.call(t)] || "object"
      : typeof t;
  }
  var y = "3.6.0",
    w = function (t, e) {
      return new w.fn.init(t, e);
    };
  function k(t) {
    var e = !!t && "length" in t && t.length,
      i = b(t);
    return (
      !p(t) &&
      !g(t) &&
      ("array" === i ||
        0 === e ||
        ("number" == typeof e && e > 0 && e - 1 in t))
    );
  }
  (w.fn = w.prototype =
    {
      jquery: y,
      constructor: w,
      length: 0,
      toArray: function () {
        return a.call(this);
      },
      get: function (t) {
        return null == t
          ? a.call(this)
          : t < 0
          ? this[t + this.length]
          : this[t];
      },
      pushStack: function (t) {
        var e = w.merge(this.constructor(), t);
        return (e.prevObject = this), e;
      },
      each: function (t) {
        return w.each(this, t);
      },
      map: function (t) {
        return this.pushStack(
          w.map(this, function (e, i) {
            return t.call(e, i, e);
          })
        );
      },
      slice: function () {
        return this.pushStack(a.apply(this, arguments));
      },
      first: function () {
        return this.eq(0);
      },
      last: function () {
        return this.eq(-1);
      },
      even: function () {
        return this.pushStack(
          w.grep(this, function (t, e) {
            return (e + 1) % 2;
          })
        );
      },
      odd: function () {
        return this.pushStack(
          w.grep(this, function (t, e) {
            return e % 2;
          })
        );
      },
      eq: function (t) {
        var e = this.length,
          i = +t + (t < 0 ? e : 0);
        return this.pushStack(i >= 0 && i < e ? [this[i]] : []);
      },
      end: function () {
        return this.prevObject || this.constructor();
      },
      push: r,
      sort: i.sort,
      splice: i.splice,
    }),
    (w.extend = w.fn.extend =
      function () {
        var t,
          e,
          i,
          n,
          a,
          s,
          r = arguments[0] || {},
          o = 1,
          l = arguments.length,
          c = !1;
        for (
          "boolean" == typeof r && ((c = r), (r = arguments[o] || {}), o++),
            "object" == typeof r || p(r) || (r = {}),
            o === l && ((r = this), o--);
          o < l;
          o++
        )
          if (null != (t = arguments[o]))
            for (e in t)
              (n = t[e]),
                "__proto__" !== e &&
                  r !== n &&
                  (c && n && (w.isPlainObject(n) || (a = Array.isArray(n)))
                    ? ((i = r[e]),
                      (s =
                        a && !Array.isArray(i)
                          ? []
                          : a || w.isPlainObject(i)
                          ? i
                          : {}),
                      (a = !1),
                      (r[e] = w.extend(c, s, n)))
                    : void 0 !== n && (r[e] = n));
        return r;
      }),
    w.extend({
      expando: "jQuery" + (y + Math.random()).replace(/\D/g, ""),
      isReady: !0,
      error: function (t) {
        throw new Error(t);
      },
      noop: function () {},
      isPlainObject: function (t) {
        var e, i;
        return (
          !(!t || "[object Object]" !== c.call(t)) &&
          (!(e = n(t)) ||
            ("function" ==
              typeof (i = h.call(e, "constructor") && e.constructor) &&
              d.call(i) === u))
        );
      },
      isEmptyObject: function (t) {
        var e;
        for (e in t) return !1;
        return !0;
      },
      globalEval: function (t, e, i) {
        v(t, { nonce: e && e.nonce }, i);
      },
      each: function (t, e) {
        var i,
          n = 0;
        if (k(t))
          for (i = t.length; n < i && !1 !== e.call(t[n], n, t[n]); n++);
        else for (n in t) if (!1 === e.call(t[n], n, t[n])) break;
        return t;
      },
      makeArray: function (t, e) {
        var i = e || [];
        return (
          null != t &&
            (k(Object(t))
              ? w.merge(i, "string" == typeof t ? [t] : t)
              : r.call(i, t)),
          i
        );
      },
      inArray: function (t, e, i) {
        return null == e ? -1 : o.call(e, t, i);
      },
      merge: function (t, e) {
        for (var i = +e.length, n = 0, a = t.length; n < i; n++) t[a++] = e[n];
        return (t.length = a), t;
      },
      grep: function (t, e, i) {
        for (var n = [], a = 0, s = t.length, r = !i; a < s; a++)
          !e(t[a], a) !== r && n.push(t[a]);
        return n;
      },
      map: function (t, e, i) {
        var n,
          a,
          r = 0,
          o = [];
        if (k(t))
          for (n = t.length; r < n; r++)
            null != (a = e(t[r], r, i)) && o.push(a);
        else for (r in t) null != (a = e(t[r], r, i)) && o.push(a);
        return s(o);
      },
      guid: 1,
      support: f,
    }),
    "function" == typeof Symbol && (w.fn[Symbol.iterator] = i[Symbol.iterator]),
    w.each(
      "Boolean Number String Function Array Date RegExp Object Error Symbol".split(
        " "
      ),
      function (t, e) {
        l["[object " + e + "]"] = e.toLowerCase();
      }
    );
  var A =
    /*!
     * Sizzle CSS Selector Engine v2.3.6
     * https://sizzlejs.com/
     *
     * Copyright JS Foundation and other contributors
     * Released under the MIT license
     * https://js.foundation/
     *
     * Date: 2021-02-16
     */
    (function (t) {
      var e,
        i,
        n,
        a,
        s,
        r,
        o,
        l,
        c,
        h,
        d,
        u,
        f,
        p,
        g,
        x,
        m,
        v,
        b,
        y = "sizzle" + 1 * new Date(),
        w = t.document,
        k = 0,
        A = 0,
        S = lt(),
        C = lt(),
        T = lt(),
        E = lt(),
        _ = function (t, e) {
          return t === e && (d = !0), 0;
        },
        L = {}.hasOwnProperty,
        P = [],
        M = P.pop,
        I = P.push,
        O = P.push,
        D = P.slice,
        z = function (t, e) {
          for (var i = 0, n = t.length; i < n; i++) if (t[i] === e) return i;
          return -1;
        },
        N =
          "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",
        X = "[\\x20\\t\\r\\n\\f]",
        H =
          "(?:\\\\[\\da-fA-F]{1,6}[\\x20\\t\\r\\n\\f]?|\\\\[^\\r\\n\\f]|[\\w-]|[^\0-\\x7f])+",
        R =
          "\\[[\\x20\\t\\r\\n\\f]*(" +
          H +
          ")(?:" +
          X +
          "*([*^$|!~]?=)" +
          X +
          "*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" +
          H +
          "))|)" +
          X +
          "*\\]",
        F =
          ":(" +
          H +
          ")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|" +
          R +
          ")*)|.*)\\)|)",
        Y = new RegExp(X + "+", "g"),
        W = new RegExp(
          "^[\\x20\\t\\r\\n\\f]+|((?:^|[^\\\\])(?:\\\\.)*)[\\x20\\t\\r\\n\\f]+$",
          "g"
        ),
        B = new RegExp("^[\\x20\\t\\r\\n\\f]*,[\\x20\\t\\r\\n\\f]*"),
        j = new RegExp(
          "^[\\x20\\t\\r\\n\\f]*([>+~]|[\\x20\\t\\r\\n\\f])[\\x20\\t\\r\\n\\f]*"
        ),
        V = new RegExp(X + "|>"),
        G = new RegExp(F),
        q = new RegExp("^" + H + "$"),
        U = {
          ID: new RegExp("^#(" + H + ")"),
          CLASS: new RegExp("^\\.(" + H + ")"),
          TAG: new RegExp("^(" + H + "|[*])"),
          ATTR: new RegExp("^" + R),
          PSEUDO: new RegExp("^" + F),
          CHILD: new RegExp(
            "^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\([\\x20\\t\\r\\n\\f]*(even|odd|(([+-]|)(\\d*)n|)[\\x20\\t\\r\\n\\f]*(?:([+-]|)[\\x20\\t\\r\\n\\f]*(\\d+)|))[\\x20\\t\\r\\n\\f]*\\)|)",
            "i"
          ),
          bool: new RegExp("^(?:" + N + ")$", "i"),
          needsContext: new RegExp(
            "^[\\x20\\t\\r\\n\\f]*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\([\\x20\\t\\r\\n\\f]*((?:-\\d)?\\d*)[\\x20\\t\\r\\n\\f]*\\)|)(?=[^-]|$)",
            "i"
          ),
        },
        $ = /HTML$/i,
        Z = /^(?:input|select|textarea|button)$/i,
        Q = /^h\d$/i,
        K = /^[^{]+\{\s*\[native \w/,
        J = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,
        tt = /[+~]/,
        et = new RegExp(
          "\\\\[\\da-fA-F]{1,6}[\\x20\\t\\r\\n\\f]?|\\\\([^\\r\\n\\f])",
          "g"
        ),
        it = function (t, e) {
          var i = "0x" + t.slice(1) - 65536;
          return (
            e ||
            (i < 0
              ? String.fromCharCode(i + 65536)
              : String.fromCharCode((i >> 10) | 55296, (1023 & i) | 56320))
          );
        },
        nt = /([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,
        at = function (t, e) {
          return e
            ? "\0" === t
              ? "�"
              : t.slice(0, -1) +
                "\\" +
                t.charCodeAt(t.length - 1).toString(16) +
                " "
            : "\\" + t;
        },
        st = function () {
          u();
        },
        rt = yt(
          function (t) {
            return !0 === t.disabled && "fieldset" === t.nodeName.toLowerCase();
          },
          { dir: "parentNode", next: "legend" }
        );
      try {
        O.apply((P = D.call(w.childNodes)), w.childNodes),
          P[w.childNodes.length].nodeType;
      } catch (t) {
        O = {
          apply: P.length
            ? function (t, e) {
                I.apply(t, D.call(e));
              }
            : function (t, e) {
                for (var i = t.length, n = 0; (t[i++] = e[n++]); );
                t.length = i - 1;
              },
        };
      }
      function ot(t, e, n, a) {
        var s,
          o,
          c,
          h,
          d,
          p,
          m,
          v = e && e.ownerDocument,
          w = e ? e.nodeType : 9;
        if (
          ((n = n || []),
          "string" != typeof t || !t || (1 !== w && 9 !== w && 11 !== w))
        )
          return n;
        if (!a && (u(e), (e = e || f), g)) {
          if (11 !== w && (d = J.exec(t)))
            if ((s = d[1])) {
              if (9 === w) {
                if (!(c = e.getElementById(s))) return n;
                if (c.id === s) return n.push(c), n;
              } else if (
                v &&
                (c = v.getElementById(s)) &&
                b(e, c) &&
                c.id === s
              )
                return n.push(c), n;
            } else {
              if (d[2]) return O.apply(n, e.getElementsByTagName(t)), n;
              if (
                (s = d[3]) &&
                i.getElementsByClassName &&
                e.getElementsByClassName
              )
                return O.apply(n, e.getElementsByClassName(s)), n;
            }
          if (
            i.qsa &&
            !E[t + " "] &&
            (!x || !x.test(t)) &&
            (1 !== w || "object" !== e.nodeName.toLowerCase())
          ) {
            if (((m = t), (v = e), 1 === w && (V.test(t) || j.test(t)))) {
              for (
                ((v = (tt.test(t) && mt(e.parentNode)) || e) === e &&
                  i.scope) ||
                  ((h = e.getAttribute("id"))
                    ? (h = h.replace(nt, at))
                    : e.setAttribute("id", (h = y))),
                  o = (p = r(t)).length;
                o--;

              )
                p[o] = (h ? "#" + h : ":scope") + " " + bt(p[o]);
              m = p.join(",");
            }
            try {
              return O.apply(n, v.querySelectorAll(m)), n;
            } catch (e) {
              E(t, !0);
            } finally {
              h === y && e.removeAttribute("id");
            }
          }
        }
        return l(t.replace(W, "$1"), e, n, a);
      }
      function lt() {
        var t = [];
        return function e(i, a) {
          return (
            t.push(i + " ") > n.cacheLength && delete e[t.shift()],
            (e[i + " "] = a)
          );
        };
      }
      function ct(t) {
        return (t[y] = !0), t;
      }
      function ht(t) {
        var e = f.createElement("fieldset");
        try {
          return !!t(e);
        } catch (t) {
          return !1;
        } finally {
          e.parentNode && e.parentNode.removeChild(e), (e = null);
        }
      }
      function dt(t, e) {
        for (var i = t.split("|"), a = i.length; a--; ) n.attrHandle[i[a]] = e;
      }
      function ut(t, e) {
        var i = e && t,
          n =
            i &&
            1 === t.nodeType &&
            1 === e.nodeType &&
            t.sourceIndex - e.sourceIndex;
        if (n) return n;
        if (i) for (; (i = i.nextSibling); ) if (i === e) return -1;
        return t ? 1 : -1;
      }
      function ft(t) {
        return function (e) {
          return "input" === e.nodeName.toLowerCase() && e.type === t;
        };
      }
      function pt(t) {
        return function (e) {
          var i = e.nodeName.toLowerCase();
          return ("input" === i || "button" === i) && e.type === t;
        };
      }
      function gt(t) {
        return function (e) {
          return "form" in e
            ? e.parentNode && !1 === e.disabled
              ? "label" in e
                ? "label" in e.parentNode
                  ? e.parentNode.disabled === t
                  : e.disabled === t
                : e.isDisabled === t || (e.isDisabled !== !t && rt(e) === t)
              : e.disabled === t
            : "label" in e && e.disabled === t;
        };
      }
      function xt(t) {
        return ct(function (e) {
          return (
            (e = +e),
            ct(function (i, n) {
              for (var a, s = t([], i.length, e), r = s.length; r--; )
                i[(a = s[r])] && (i[a] = !(n[a] = i[a]));
            })
          );
        });
      }
      function mt(t) {
        return t && void 0 !== t.getElementsByTagName && t;
      }
      for (e in ((i = ot.support = {}),
      (s = ot.isXML =
        function (t) {
          var e = t && t.namespaceURI,
            i = t && (t.ownerDocument || t).documentElement;
          return !$.test(e || (i && i.nodeName) || "HTML");
        }),
      (u = ot.setDocument =
        function (t) {
          var e,
            a,
            r = t ? t.ownerDocument || t : w;
          return r != f && 9 === r.nodeType && r.documentElement
            ? ((p = (f = r).documentElement),
              (g = !s(f)),
              w != f &&
                (a = f.defaultView) &&
                a.top !== a &&
                (a.addEventListener
                  ? a.addEventListener("unload", st, !1)
                  : a.attachEvent && a.attachEvent("onunload", st)),
              (i.scope = ht(function (t) {
                return (
                  p.appendChild(t).appendChild(f.createElement("div")),
                  void 0 !== t.querySelectorAll &&
                    !t.querySelectorAll(":scope fieldset div").length
                );
              })),
              (i.attributes = ht(function (t) {
                return (t.className = "i"), !t.getAttribute("className");
              })),
              (i.getElementsByTagName = ht(function (t) {
                return (
                  t.appendChild(f.createComment("")),
                  !t.getElementsByTagName("*").length
                );
              })),
              (i.getElementsByClassName = K.test(f.getElementsByClassName)),
              (i.getById = ht(function (t) {
                return (
                  (p.appendChild(t).id = y),
                  !f.getElementsByName || !f.getElementsByName(y).length
                );
              })),
              i.getById
                ? ((n.filter.ID = function (t) {
                    var e = t.replace(et, it);
                    return function (t) {
                      return t.getAttribute("id") === e;
                    };
                  }),
                  (n.find.ID = function (t, e) {
                    if (void 0 !== e.getElementById && g) {
                      var i = e.getElementById(t);
                      return i ? [i] : [];
                    }
                  }))
                : ((n.filter.ID = function (t) {
                    var e = t.replace(et, it);
                    return function (t) {
                      var i =
                        void 0 !== t.getAttributeNode &&
                        t.getAttributeNode("id");
                      return i && i.value === e;
                    };
                  }),
                  (n.find.ID = function (t, e) {
                    if (void 0 !== e.getElementById && g) {
                      var i,
                        n,
                        a,
                        s = e.getElementById(t);
                      if (s) {
                        if ((i = s.getAttributeNode("id")) && i.value === t)
                          return [s];
                        for (a = e.getElementsByName(t), n = 0; (s = a[n++]); )
                          if ((i = s.getAttributeNode("id")) && i.value === t)
                            return [s];
                      }
                      return [];
                    }
                  })),
              (n.find.TAG = i.getElementsByTagName
                ? function (t, e) {
                    return void 0 !== e.getElementsByTagName
                      ? e.getElementsByTagName(t)
                      : i.qsa
                      ? e.querySelectorAll(t)
                      : void 0;
                  }
                : function (t, e) {
                    var i,
                      n = [],
                      a = 0,
                      s = e.getElementsByTagName(t);
                    if ("*" === t) {
                      for (; (i = s[a++]); ) 1 === i.nodeType && n.push(i);
                      return n;
                    }
                    return s;
                  }),
              (n.find.CLASS =
                i.getElementsByClassName &&
                function (t, e) {
                  if (void 0 !== e.getElementsByClassName && g)
                    return e.getElementsByClassName(t);
                }),
              (m = []),
              (x = []),
              (i.qsa = K.test(f.querySelectorAll)) &&
                (ht(function (t) {
                  var e;
                  (p.appendChild(t).innerHTML =
                    "<a id='" +
                    y +
                    "'></a><select id='" +
                    y +
                    "-\r\\' msallowcapture=''><option selected=''></option></select>"),
                    t.querySelectorAll("[msallowcapture^='']").length &&
                      x.push("[*^$]=[\\x20\\t\\r\\n\\f]*(?:''|\"\")"),
                    t.querySelectorAll("[selected]").length ||
                      x.push("\\[[\\x20\\t\\r\\n\\f]*(?:value|" + N + ")"),
                    t.querySelectorAll("[id~=" + y + "-]").length ||
                      x.push("~="),
                    (e = f.createElement("input")).setAttribute("name", ""),
                    t.appendChild(e),
                    t.querySelectorAll("[name='']").length ||
                      x.push(
                        "\\[[\\x20\\t\\r\\n\\f]*name[\\x20\\t\\r\\n\\f]*=[\\x20\\t\\r\\n\\f]*(?:''|\"\")"
                      ),
                    t.querySelectorAll(":checked").length || x.push(":checked"),
                    t.querySelectorAll("a#" + y + "+*").length ||
                      x.push(".#.+[+~]"),
                    t.querySelectorAll("\\\f"),
                    x.push("[\\r\\n\\f]");
                }),
                ht(function (t) {
                  t.innerHTML =
                    "<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>";
                  var e = f.createElement("input");
                  e.setAttribute("type", "hidden"),
                    t.appendChild(e).setAttribute("name", "D"),
                    t.querySelectorAll("[name=d]").length &&
                      x.push("name[\\x20\\t\\r\\n\\f]*[*^$|!~]?="),
                    2 !== t.querySelectorAll(":enabled").length &&
                      x.push(":enabled", ":disabled"),
                    (p.appendChild(t).disabled = !0),
                    2 !== t.querySelectorAll(":disabled").length &&
                      x.push(":enabled", ":disabled"),
                    t.querySelectorAll("*,:x"),
                    x.push(",.*:");
                })),
              (i.matchesSelector = K.test(
                (v =
                  p.matches ||
                  p.webkitMatchesSelector ||
                  p.mozMatchesSelector ||
                  p.oMatchesSelector ||
                  p.msMatchesSelector)
              )) &&
                ht(function (t) {
                  (i.disconnectedMatch = v.call(t, "*")),
                    v.call(t, "[s!='']:x"),
                    m.push("!=", F);
                }),
              (x = x.length && new RegExp(x.join("|"))),
              (m = m.length && new RegExp(m.join("|"))),
              (e = K.test(p.compareDocumentPosition)),
              (b =
                e || K.test(p.contains)
                  ? function (t, e) {
                      var i = 9 === t.nodeType ? t.documentElement : t,
                        n = e && e.parentNode;
                      return (
                        t === n ||
                        !(
                          !n ||
                          1 !== n.nodeType ||
                          !(i.contains
                            ? i.contains(n)
                            : t.compareDocumentPosition &&
                              16 & t.compareDocumentPosition(n))
                        )
                      );
                    }
                  : function (t, e) {
                      if (e)
                        for (; (e = e.parentNode); ) if (e === t) return !0;
                      return !1;
                    }),
              (_ = e
                ? function (t, e) {
                    if (t === e) return (d = !0), 0;
                    var n =
                      !t.compareDocumentPosition - !e.compareDocumentPosition;
                    return (
                      n ||
                      (1 &
                        (n =
                          (t.ownerDocument || t) == (e.ownerDocument || e)
                            ? t.compareDocumentPosition(e)
                            : 1) ||
                      (!i.sortDetached && e.compareDocumentPosition(t) === n)
                        ? t == f || (t.ownerDocument == w && b(w, t))
                          ? -1
                          : e == f || (e.ownerDocument == w && b(w, e))
                          ? 1
                          : h
                          ? z(h, t) - z(h, e)
                          : 0
                        : 4 & n
                        ? -1
                        : 1)
                    );
                  }
                : function (t, e) {
                    if (t === e) return (d = !0), 0;
                    var i,
                      n = 0,
                      a = t.parentNode,
                      s = e.parentNode,
                      r = [t],
                      o = [e];
                    if (!a || !s)
                      return t == f
                        ? -1
                        : e == f
                        ? 1
                        : a
                        ? -1
                        : s
                        ? 1
                        : h
                        ? z(h, t) - z(h, e)
                        : 0;
                    if (a === s) return ut(t, e);
                    for (i = t; (i = i.parentNode); ) r.unshift(i);
                    for (i = e; (i = i.parentNode); ) o.unshift(i);
                    for (; r[n] === o[n]; ) n++;
                    return n
                      ? ut(r[n], o[n])
                      : r[n] == w
                      ? -1
                      : o[n] == w
                      ? 1
                      : 0;
                  }),
              f)
            : f;
        }),
      (ot.matches = function (t, e) {
        return ot(t, null, null, e);
      }),
      (ot.matchesSelector = function (t, e) {
        if (
          (u(t),
          i.matchesSelector &&
            g &&
            !E[e + " "] &&
            (!m || !m.test(e)) &&
            (!x || !x.test(e)))
        )
          try {
            var n = v.call(t, e);
            if (
              n ||
              i.disconnectedMatch ||
              (t.document && 11 !== t.document.nodeType)
            )
              return n;
          } catch (t) {
            E(e, !0);
          }
        return ot(e, f, null, [t]).length > 0;
      }),
      (ot.contains = function (t, e) {
        return (t.ownerDocument || t) != f && u(t), b(t, e);
      }),
      (ot.attr = function (t, e) {
        (t.ownerDocument || t) != f && u(t);
        var a = n.attrHandle[e.toLowerCase()],
          s = a && L.call(n.attrHandle, e.toLowerCase()) ? a(t, e, !g) : void 0;
        return void 0 !== s
          ? s
          : i.attributes || !g
          ? t.getAttribute(e)
          : (s = t.getAttributeNode(e)) && s.specified
          ? s.value
          : null;
      }),
      (ot.escape = function (t) {
        return (t + "").replace(nt, at);
      }),
      (ot.error = function (t) {
        throw new Error("Syntax error, unrecognized expression: " + t);
      }),
      (ot.uniqueSort = function (t) {
        var e,
          n = [],
          a = 0,
          s = 0;
        if (
          ((d = !i.detectDuplicates),
          (h = !i.sortStable && t.slice(0)),
          t.sort(_),
          d)
        ) {
          for (; (e = t[s++]); ) e === t[s] && (a = n.push(s));
          for (; a--; ) t.splice(n[a], 1);
        }
        return (h = null), t;
      }),
      (a = ot.getText =
        function (t) {
          var e,
            i = "",
            n = 0,
            s = t.nodeType;
          if (s) {
            if (1 === s || 9 === s || 11 === s) {
              if ("string" == typeof t.textContent) return t.textContent;
              for (t = t.firstChild; t; t = t.nextSibling) i += a(t);
            } else if (3 === s || 4 === s) return t.nodeValue;
          } else for (; (e = t[n++]); ) i += a(e);
          return i;
        }),
      (n = ot.selectors =
        {
          cacheLength: 50,
          createPseudo: ct,
          match: U,
          attrHandle: {},
          find: {},
          relative: {
            ">": { dir: "parentNode", first: !0 },
            " ": { dir: "parentNode" },
            "+": { dir: "previousSibling", first: !0 },
            "~": { dir: "previousSibling" },
          },
          preFilter: {
            ATTR: function (t) {
              return (
                (t[1] = t[1].replace(et, it)),
                (t[3] = (t[3] || t[4] || t[5] || "").replace(et, it)),
                "~=" === t[2] && (t[3] = " " + t[3] + " "),
                t.slice(0, 4)
              );
            },
            CHILD: function (t) {
              return (
                (t[1] = t[1].toLowerCase()),
                "nth" === t[1].slice(0, 3)
                  ? (t[3] || ot.error(t[0]),
                    (t[4] = +(t[4]
                      ? t[5] + (t[6] || 1)
                      : 2 * ("even" === t[3] || "odd" === t[3]))),
                    (t[5] = +(t[7] + t[8] || "odd" === t[3])))
                  : t[3] && ot.error(t[0]),
                t
              );
            },
            PSEUDO: function (t) {
              var e,
                i = !t[6] && t[2];
              return U.CHILD.test(t[0])
                ? null
                : (t[3]
                    ? (t[2] = t[4] || t[5] || "")
                    : i &&
                      G.test(i) &&
                      (e = r(i, !0)) &&
                      (e = i.indexOf(")", i.length - e) - i.length) &&
                      ((t[0] = t[0].slice(0, e)), (t[2] = i.slice(0, e))),
                  t.slice(0, 3));
            },
          },
          filter: {
            TAG: function (t) {
              var e = t.replace(et, it).toLowerCase();
              return "*" === t
                ? function () {
                    return !0;
                  }
                : function (t) {
                    return t.nodeName && t.nodeName.toLowerCase() === e;
                  };
            },
            CLASS: function (t) {
              var e = S[t + " "];
              return (
                e ||
                ((e = new RegExp(
                  "(^|[\\x20\\t\\r\\n\\f])" + t + "(" + X + "|$)"
                )) &&
                  S(t, function (t) {
                    return e.test(
                      ("string" == typeof t.className && t.className) ||
                        (void 0 !== t.getAttribute &&
                          t.getAttribute("class")) ||
                        ""
                    );
                  }))
              );
            },
            ATTR: function (t, e, i) {
              return function (n) {
                var a = ot.attr(n, t);
                return null == a
                  ? "!=" === e
                  : !e ||
                      ((a += ""),
                      "=" === e
                        ? a === i
                        : "!=" === e
                        ? a !== i
                        : "^=" === e
                        ? i && 0 === a.indexOf(i)
                        : "*=" === e
                        ? i && a.indexOf(i) > -1
                        : "$=" === e
                        ? i && a.slice(-i.length) === i
                        : "~=" === e
                        ? (" " + a.replace(Y, " ") + " ").indexOf(i) > -1
                        : "|=" === e &&
                          (a === i || a.slice(0, i.length + 1) === i + "-"));
              };
            },
            CHILD: function (t, e, i, n, a) {
              var s = "nth" !== t.slice(0, 3),
                r = "last" !== t.slice(-4),
                o = "of-type" === e;
              return 1 === n && 0 === a
                ? function (t) {
                    return !!t.parentNode;
                  }
                : function (e, i, l) {
                    var c,
                      h,
                      d,
                      u,
                      f,
                      p,
                      g = s !== r ? "nextSibling" : "previousSibling",
                      x = e.parentNode,
                      m = o && e.nodeName.toLowerCase(),
                      v = !l && !o,
                      b = !1;
                    if (x) {
                      if (s) {
                        for (; g; ) {
                          for (u = e; (u = u[g]); )
                            if (
                              o
                                ? u.nodeName.toLowerCase() === m
                                : 1 === u.nodeType
                            )
                              return !1;
                          p = g = "only" === t && !p && "nextSibling";
                        }
                        return !0;
                      }
                      if (((p = [r ? x.firstChild : x.lastChild]), r && v)) {
                        for (
                          b =
                            (f =
                              (c =
                                (h =
                                  (d = (u = x)[y] || (u[y] = {}))[u.uniqueID] ||
                                  (d[u.uniqueID] = {}))[t] || [])[0] === k &&
                              c[1]) && c[2],
                            u = f && x.childNodes[f];
                          (u = (++f && u && u[g]) || (b = f = 0) || p.pop());

                        )
                          if (1 === u.nodeType && ++b && u === e) {
                            h[t] = [k, f, b];
                            break;
                          }
                      } else if (
                        (v &&
                          (b = f =
                            (c =
                              (h =
                                (d = (u = e)[y] || (u[y] = {}))[u.uniqueID] ||
                                (d[u.uniqueID] = {}))[t] || [])[0] === k &&
                            c[1]),
                        !1 === b)
                      )
                        for (
                          ;
                          (u = (++f && u && u[g]) || (b = f = 0) || p.pop()) &&
                          ((o
                            ? u.nodeName.toLowerCase() !== m
                            : 1 !== u.nodeType) ||
                            !++b ||
                            (v &&
                              ((h =
                                (d = u[y] || (u[y] = {}))[u.uniqueID] ||
                                (d[u.uniqueID] = {}))[t] = [k, b]),
                            u !== e));

                        );
                      return (b -= a) === n || (b % n == 0 && b / n >= 0);
                    }
                  };
            },
            PSEUDO: function (t, e) {
              var i,
                a =
                  n.pseudos[t] ||
                  n.setFilters[t.toLowerCase()] ||
                  ot.error("unsupported pseudo: " + t);
              return a[y]
                ? a(e)
                : a.length > 1
                ? ((i = [t, t, "", e]),
                  n.setFilters.hasOwnProperty(t.toLowerCase())
                    ? ct(function (t, i) {
                        for (var n, s = a(t, e), r = s.length; r--; )
                          t[(n = z(t, s[r]))] = !(i[n] = s[r]);
                      })
                    : function (t) {
                        return a(t, 0, i);
                      })
                : a;
            },
          },
          pseudos: {
            not: ct(function (t) {
              var e = [],
                i = [],
                n = o(t.replace(W, "$1"));
              return n[y]
                ? ct(function (t, e, i, a) {
                    for (var s, r = n(t, null, a, []), o = t.length; o--; )
                      (s = r[o]) && (t[o] = !(e[o] = s));
                  })
                : function (t, a, s) {
                    return (
                      (e[0] = t), n(e, null, s, i), (e[0] = null), !i.pop()
                    );
                  };
            }),
            has: ct(function (t) {
              return function (e) {
                return ot(t, e).length > 0;
              };
            }),
            contains: ct(function (t) {
              return (
                (t = t.replace(et, it)),
                function (e) {
                  return (e.textContent || a(e)).indexOf(t) > -1;
                }
              );
            }),
            lang: ct(function (t) {
              return (
                q.test(t || "") || ot.error("unsupported lang: " + t),
                (t = t.replace(et, it).toLowerCase()),
                function (e) {
                  var i;
                  do {
                    if (
                      (i = g
                        ? e.lang
                        : e.getAttribute("xml:lang") || e.getAttribute("lang"))
                    )
                      return (
                        (i = i.toLowerCase()) === t || 0 === i.indexOf(t + "-")
                      );
                  } while ((e = e.parentNode) && 1 === e.nodeType);
                  return !1;
                }
              );
            }),
            target: function (e) {
              var i = t.location && t.location.hash;
              return i && i.slice(1) === e.id;
            },
            root: function (t) {
              return t === p;
            },
            focus: function (t) {
              return (
                t === f.activeElement &&
                (!f.hasFocus || f.hasFocus()) &&
                !!(t.type || t.href || ~t.tabIndex)
              );
            },
            enabled: gt(!1),
            disabled: gt(!0),
            checked: function (t) {
              var e = t.nodeName.toLowerCase();
              return (
                ("input" === e && !!t.checked) ||
                ("option" === e && !!t.selected)
              );
            },
            selected: function (t) {
              return (
                t.parentNode && t.parentNode.selectedIndex, !0 === t.selected
              );
            },
            empty: function (t) {
              for (t = t.firstChild; t; t = t.nextSibling)
                if (t.nodeType < 6) return !1;
              return !0;
            },
            parent: function (t) {
              return !n.pseudos.empty(t);
            },
            header: function (t) {
              return Q.test(t.nodeName);
            },
            input: function (t) {
              return Z.test(t.nodeName);
            },
            button: function (t) {
              var e = t.nodeName.toLowerCase();
              return ("input" === e && "button" === t.type) || "button" === e;
            },
            text: function (t) {
              var e;
              return (
                "input" === t.nodeName.toLowerCase() &&
                "text" === t.type &&
                (null == (e = t.getAttribute("type")) ||
                  "text" === e.toLowerCase())
              );
            },
            first: xt(function () {
              return [0];
            }),
            last: xt(function (t, e) {
              return [e - 1];
            }),
            eq: xt(function (t, e, i) {
              return [i < 0 ? i + e : i];
            }),
            even: xt(function (t, e) {
              for (var i = 0; i < e; i += 2) t.push(i);
              return t;
            }),
            odd: xt(function (t, e) {
              for (var i = 1; i < e; i += 2) t.push(i);
              return t;
            }),
            lt: xt(function (t, e, i) {
              for (var n = i < 0 ? i + e : i > e ? e : i; --n >= 0; ) t.push(n);
              return t;
            }),
            gt: xt(function (t, e, i) {
              for (var n = i < 0 ? i + e : i; ++n < e; ) t.push(n);
              return t;
            }),
          },
        }),
      (n.pseudos.nth = n.pseudos.eq),
      { radio: !0, checkbox: !0, file: !0, password: !0, image: !0 }))
        n.pseudos[e] = ft(e);
      for (e in { submit: !0, reset: !0 }) n.pseudos[e] = pt(e);
      function vt() {}
      function bt(t) {
        for (var e = 0, i = t.length, n = ""; e < i; e++) n += t[e].value;
        return n;
      }
      function yt(t, e, i) {
        var n = e.dir,
          a = e.next,
          s = a || n,
          r = i && "parentNode" === s,
          o = A++;
        return e.first
          ? function (e, i, a) {
              for (; (e = e[n]); ) if (1 === e.nodeType || r) return t(e, i, a);
              return !1;
            }
          : function (e, i, l) {
              var c,
                h,
                d,
                u = [k, o];
              if (l) {
                for (; (e = e[n]); )
                  if ((1 === e.nodeType || r) && t(e, i, l)) return !0;
              } else
                for (; (e = e[n]); )
                  if (1 === e.nodeType || r)
                    if (
                      ((h =
                        (d = e[y] || (e[y] = {}))[e.uniqueID] ||
                        (d[e.uniqueID] = {})),
                      a && a === e.nodeName.toLowerCase())
                    )
                      e = e[n] || e;
                    else {
                      if ((c = h[s]) && c[0] === k && c[1] === o)
                        return (u[2] = c[2]);
                      if (((h[s] = u), (u[2] = t(e, i, l)))) return !0;
                    }
              return !1;
            };
      }
      function wt(t) {
        return t.length > 1
          ? function (e, i, n) {
              for (var a = t.length; a--; ) if (!t[a](e, i, n)) return !1;
              return !0;
            }
          : t[0];
      }
      function kt(t, e, i, n, a) {
        for (var s, r = [], o = 0, l = t.length, c = null != e; o < l; o++)
          (s = t[o]) && ((i && !i(s, n, a)) || (r.push(s), c && e.push(o)));
        return r;
      }
      function At(t, e, i, n, a, s) {
        return (
          n && !n[y] && (n = At(n)),
          a && !a[y] && (a = At(a, s)),
          ct(function (s, r, o, l) {
            var c,
              h,
              d,
              u = [],
              f = [],
              p = r.length,
              g =
                s ||
                (function (t, e, i) {
                  for (var n = 0, a = e.length; n < a; n++) ot(t, e[n], i);
                  return i;
                })(e || "*", o.nodeType ? [o] : o, []),
              x = !t || (!s && e) ? g : kt(g, u, t, o, l),
              m = i ? (a || (s ? t : p || n) ? [] : r) : x;
            if ((i && i(x, m, o, l), n))
              for (c = kt(m, f), n(c, [], o, l), h = c.length; h--; )
                (d = c[h]) && (m[f[h]] = !(x[f[h]] = d));
            if (s) {
              if (a || t) {
                if (a) {
                  for (c = [], h = m.length; h--; )
                    (d = m[h]) && c.push((x[h] = d));
                  a(null, (m = []), c, l);
                }
                for (h = m.length; h--; )
                  (d = m[h]) &&
                    (c = a ? z(s, d) : u[h]) > -1 &&
                    (s[c] = !(r[c] = d));
              }
            } else (m = kt(m === r ? m.splice(p, m.length) : m)), a ? a(null, r, m, l) : O.apply(r, m);
          })
        );
      }
      function St(t) {
        for (
          var e,
            i,
            a,
            s = t.length,
            r = n.relative[t[0].type],
            o = r || n.relative[" "],
            l = r ? 1 : 0,
            h = yt(
              function (t) {
                return t === e;
              },
              o,
              !0
            ),
            d = yt(
              function (t) {
                return z(e, t) > -1;
              },
              o,
              !0
            ),
            u = [
              function (t, i, n) {
                var a =
                  (!r && (n || i !== c)) ||
                  ((e = i).nodeType ? h(t, i, n) : d(t, i, n));
                return (e = null), a;
              },
            ];
          l < s;
          l++
        )
          if ((i = n.relative[t[l].type])) u = [yt(wt(u), i)];
          else {
            if ((i = n.filter[t[l].type].apply(null, t[l].matches))[y]) {
              for (a = ++l; a < s && !n.relative[t[a].type]; a++);
              return At(
                l > 1 && wt(u),
                l > 1 &&
                  bt(
                    t
                      .slice(0, l - 1)
                      .concat({ value: " " === t[l - 2].type ? "*" : "" })
                  ).replace(W, "$1"),
                i,
                l < a && St(t.slice(l, a)),
                a < s && St((t = t.slice(a))),
                a < s && bt(t)
              );
            }
            u.push(i);
          }
        return wt(u);
      }
      return (
        (vt.prototype = n.filters = n.pseudos),
        (n.setFilters = new vt()),
        (r = ot.tokenize =
          function (t, e) {
            var i,
              a,
              s,
              r,
              o,
              l,
              c,
              h = C[t + " "];
            if (h) return e ? 0 : h.slice(0);
            for (o = t, l = [], c = n.preFilter; o; ) {
              for (r in ((i && !(a = B.exec(o))) ||
                (a && (o = o.slice(a[0].length) || o), l.push((s = []))),
              (i = !1),
              (a = j.exec(o)) &&
                ((i = a.shift()),
                s.push({ value: i, type: a[0].replace(W, " ") }),
                (o = o.slice(i.length))),
              n.filter))
                !(a = U[r].exec(o)) ||
                  (c[r] && !(a = c[r](a))) ||
                  ((i = a.shift()),
                  s.push({ value: i, type: r, matches: a }),
                  (o = o.slice(i.length)));
              if (!i) break;
            }
            return e ? o.length : o ? ot.error(t) : C(t, l).slice(0);
          }),
        (o = ot.compile =
          function (t, e) {
            var i,
              a = [],
              s = [],
              o = T[t + " "];
            if (!o) {
              for (e || (e = r(t)), i = e.length; i--; )
                (o = St(e[i]))[y] ? a.push(o) : s.push(o);
              (o = T(
                t,
                (function (t, e) {
                  var i = e.length > 0,
                    a = t.length > 0,
                    s = function (s, r, o, l, h) {
                      var d,
                        p,
                        x,
                        m = 0,
                        v = "0",
                        b = s && [],
                        y = [],
                        w = c,
                        A = s || (a && n.find.TAG("*", h)),
                        S = (k += null == w ? 1 : Math.random() || 0.1),
                        C = A.length;
                      for (
                        h && (c = r == f || r || h);
                        v !== C && null != (d = A[v]);
                        v++
                      ) {
                        if (a && d) {
                          for (
                            p = 0,
                              r || d.ownerDocument == f || (u(d), (o = !g));
                            (x = t[p++]);

                          )
                            if (x(d, r || f, o)) {
                              l.push(d);
                              break;
                            }
                          h && (k = S);
                        }
                        i && ((d = !x && d) && m--, s && b.push(d));
                      }
                      if (((m += v), i && v !== m)) {
                        for (p = 0; (x = e[p++]); ) x(b, y, r, o);
                        if (s) {
                          if (m > 0)
                            for (; v--; ) b[v] || y[v] || (y[v] = M.call(l));
                          y = kt(y);
                        }
                        O.apply(l, y),
                          h &&
                            !s &&
                            y.length > 0 &&
                            m + e.length > 1 &&
                            ot.uniqueSort(l);
                      }
                      return h && ((k = S), (c = w)), b;
                    };
                  return i ? ct(s) : s;
                })(s, a)
              )),
                (o.selector = t);
            }
            return o;
          }),
        (l = ot.select =
          function (t, e, i, a) {
            var s,
              l,
              c,
              h,
              d,
              u = "function" == typeof t && t,
              f = !a && r((t = u.selector || t));
            if (((i = i || []), 1 === f.length)) {
              if (
                (l = f[0] = f[0].slice(0)).length > 2 &&
                "ID" === (c = l[0]).type &&
                9 === e.nodeType &&
                g &&
                n.relative[l[1].type]
              ) {
                if (
                  !(e = (n.find.ID(c.matches[0].replace(et, it), e) || [])[0])
                )
                  return i;
                u && (e = e.parentNode), (t = t.slice(l.shift().value.length));
              }
              for (
                s = U.needsContext.test(t) ? 0 : l.length;
                s-- && ((c = l[s]), !n.relative[(h = c.type)]);

              )
                if (
                  (d = n.find[h]) &&
                  (a = d(
                    c.matches[0].replace(et, it),
                    (tt.test(l[0].type) && mt(e.parentNode)) || e
                  ))
                ) {
                  if ((l.splice(s, 1), !(t = a.length && bt(l))))
                    return O.apply(i, a), i;
                  break;
                }
            }
            return (
              (u || o(t, f))(
                a,
                e,
                !g,
                i,
                !e || (tt.test(t) && mt(e.parentNode)) || e
              ),
              i
            );
          }),
        (i.sortStable = y.split("").sort(_).join("") === y),
        (i.detectDuplicates = !!d),
        u(),
        (i.sortDetached = ht(function (t) {
          return 1 & t.compareDocumentPosition(f.createElement("fieldset"));
        })),
        ht(function (t) {
          return (
            (t.innerHTML = "<a href='#'></a>"),
            "#" === t.firstChild.getAttribute("href")
          );
        }) ||
          dt("type|href|height|width", function (t, e, i) {
            if (!i)
              return t.getAttribute(e, "type" === e.toLowerCase() ? 1 : 2);
          }),
        (i.attributes &&
          ht(function (t) {
            return (
              (t.innerHTML = "<input/>"),
              t.firstChild.setAttribute("value", ""),
              "" === t.firstChild.getAttribute("value")
            );
          })) ||
          dt("value", function (t, e, i) {
            if (!i && "input" === t.nodeName.toLowerCase())
              return t.defaultValue;
          }),
        ht(function (t) {
          return null == t.getAttribute("disabled");
        }) ||
          dt(N, function (t, e, i) {
            var n;
            if (!i)
              return !0 === t[e]
                ? e.toLowerCase()
                : (n = t.getAttributeNode(e)) && n.specified
                ? n.value
                : null;
          }),
        ot
      );
    })(t);
  (w.find = A),
    (w.expr = A.selectors),
    (w.expr[":"] = w.expr.pseudos),
    (w.uniqueSort = w.unique = A.uniqueSort),
    (w.text = A.getText),
    (w.isXMLDoc = A.isXML),
    (w.contains = A.contains),
    (w.escapeSelector = A.escape);
  var S = function (t, e, i) {
      for (var n = [], a = void 0 !== i; (t = t[e]) && 9 !== t.nodeType; )
        if (1 === t.nodeType) {
          if (a && w(t).is(i)) break;
          n.push(t);
        }
      return n;
    },
    C = function (t, e) {
      for (var i = []; t; t = t.nextSibling)
        1 === t.nodeType && t !== e && i.push(t);
      return i;
    },
    T = w.expr.match.needsContext;
  function E(t, e) {
    return t.nodeName && t.nodeName.toLowerCase() === e.toLowerCase();
  }
  var _ = /^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i;
  function L(t, e, i) {
    return p(e)
      ? w.grep(t, function (t, n) {
          return !!e.call(t, n, t) !== i;
        })
      : e.nodeType
      ? w.grep(t, function (t) {
          return (t === e) !== i;
        })
      : "string" != typeof e
      ? w.grep(t, function (t) {
          return o.call(e, t) > -1 !== i;
        })
      : w.filter(e, t, i);
  }
  (w.filter = function (t, e, i) {
    var n = e[0];
    return (
      i && (t = ":not(" + t + ")"),
      1 === e.length && 1 === n.nodeType
        ? w.find.matchesSelector(n, t)
          ? [n]
          : []
        : w.find.matches(
            t,
            w.grep(e, function (t) {
              return 1 === t.nodeType;
            })
          )
    );
  }),
    w.fn.extend({
      find: function (t) {
        var e,
          i,
          n = this.length,
          a = this;
        if ("string" != typeof t)
          return this.pushStack(
            w(t).filter(function () {
              for (e = 0; e < n; e++) if (w.contains(a[e], this)) return !0;
            })
          );
        for (i = this.pushStack([]), e = 0; e < n; e++) w.find(t, a[e], i);
        return n > 1 ? w.uniqueSort(i) : i;
      },
      filter: function (t) {
        return this.pushStack(L(this, t || [], !1));
      },
      not: function (t) {
        return this.pushStack(L(this, t || [], !0));
      },
      is: function (t) {
        return !!L(this, "string" == typeof t && T.test(t) ? w(t) : t || [], !1)
          .length;
      },
    });
  var P,
    M = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/;
  ((w.fn.init = function (t, e, i) {
    var n, a;
    if (!t) return this;
    if (((i = i || P), "string" == typeof t)) {
      if (
        !(n =
          "<" === t[0] && ">" === t[t.length - 1] && t.length >= 3
            ? [null, t, null]
            : M.exec(t)) ||
        (!n[1] && e)
      )
        return !e || e.jquery ? (e || i).find(t) : this.constructor(e).find(t);
      if (n[1]) {
        if (
          ((e = e instanceof w ? e[0] : e),
          w.merge(
            this,
            w.parseHTML(n[1], e && e.nodeType ? e.ownerDocument || e : x, !0)
          ),
          _.test(n[1]) && w.isPlainObject(e))
        )
          for (n in e) p(this[n]) ? this[n](e[n]) : this.attr(n, e[n]);
        return this;
      }
      return (
        (a = x.getElementById(n[2])) && ((this[0] = a), (this.length = 1)), this
      );
    }
    return t.nodeType
      ? ((this[0] = t), (this.length = 1), this)
      : p(t)
      ? void 0 !== i.ready
        ? i.ready(t)
        : t(w)
      : w.makeArray(t, this);
  }).prototype = w.fn),
    (P = w(x));
  var I = /^(?:parents|prev(?:Until|All))/,
    O = { children: !0, contents: !0, next: !0, prev: !0 };
  function D(t, e) {
    for (; (t = t[e]) && 1 !== t.nodeType; );
    return t;
  }
  w.fn.extend({
    has: function (t) {
      var e = w(t, this),
        i = e.length;
      return this.filter(function () {
        for (var t = 0; t < i; t++) if (w.contains(this, e[t])) return !0;
      });
    },
    closest: function (t, e) {
      var i,
        n = 0,
        a = this.length,
        s = [],
        r = "string" != typeof t && w(t);
      if (!T.test(t))
        for (; n < a; n++)
          for (i = this[n]; i && i !== e; i = i.parentNode)
            if (
              i.nodeType < 11 &&
              (r
                ? r.index(i) > -1
                : 1 === i.nodeType && w.find.matchesSelector(i, t))
            ) {
              s.push(i);
              break;
            }
      return this.pushStack(s.length > 1 ? w.uniqueSort(s) : s);
    },
    index: function (t) {
      return t
        ? "string" == typeof t
          ? o.call(w(t), this[0])
          : o.call(this, t.jquery ? t[0] : t)
        : this[0] && this[0].parentNode
        ? this.first().prevAll().length
        : -1;
    },
    add: function (t, e) {
      return this.pushStack(w.uniqueSort(w.merge(this.get(), w(t, e))));
    },
    addBack: function (t) {
      return this.add(null == t ? this.prevObject : this.prevObject.filter(t));
    },
  }),
    w.each(
      {
        parent: function (t) {
          var e = t.parentNode;
          return e && 11 !== e.nodeType ? e : null;
        },
        parents: function (t) {
          return S(t, "parentNode");
        },
        parentsUntil: function (t, e, i) {
          return S(t, "parentNode", i);
        },
        next: function (t) {
          return D(t, "nextSibling");
        },
        prev: function (t) {
          return D(t, "previousSibling");
        },
        nextAll: function (t) {
          return S(t, "nextSibling");
        },
        prevAll: function (t) {
          return S(t, "previousSibling");
        },
        nextUntil: function (t, e, i) {
          return S(t, "nextSibling", i);
        },
        prevUntil: function (t, e, i) {
          return S(t, "previousSibling", i);
        },
        siblings: function (t) {
          return C((t.parentNode || {}).firstChild, t);
        },
        children: function (t) {
          return C(t.firstChild);
        },
        contents: function (t) {
          return null != t.contentDocument && n(t.contentDocument)
            ? t.contentDocument
            : (E(t, "template") && (t = t.content || t),
              w.merge([], t.childNodes));
        },
      },
      function (t, e) {
        w.fn[t] = function (i, n) {
          var a = w.map(this, e, i);
          return (
            "Until" !== t.slice(-5) && (n = i),
            n && "string" == typeof n && (a = w.filter(n, a)),
            this.length > 1 &&
              (O[t] || w.uniqueSort(a), I.test(t) && a.reverse()),
            this.pushStack(a)
          );
        };
      }
    );
  var z = /[^\x20\t\r\n\f]+/g;
  function N(t) {
    return t;
  }
  function X(t) {
    throw t;
  }
  function H(t, e, i, n) {
    var a;
    try {
      t && p((a = t.promise))
        ? a.call(t).done(e).fail(i)
        : t && p((a = t.then))
        ? a.call(t, e, i)
        : e.apply(void 0, [t].slice(n));
    } catch (t) {
      i.apply(void 0, [t]);
    }
  }
  (w.Callbacks = function (t) {
    t =
      "string" == typeof t
        ? (function (t) {
            var e = {};
            return (
              w.each(t.match(z) || [], function (t, i) {
                e[i] = !0;
              }),
              e
            );
          })(t)
        : w.extend({}, t);
    var e,
      i,
      n,
      a,
      s = [],
      r = [],
      o = -1,
      l = function () {
        for (a = a || t.once, n = e = !0; r.length; o = -1)
          for (i = r.shift(); ++o < s.length; )
            !1 === s[o].apply(i[0], i[1]) &&
              t.stopOnFalse &&
              ((o = s.length), (i = !1));
        t.memory || (i = !1), (e = !1), a && (s = i ? [] : "");
      },
      c = {
        add: function () {
          return (
            s &&
              (i && !e && ((o = s.length - 1), r.push(i)),
              (function e(i) {
                w.each(i, function (i, n) {
                  p(n)
                    ? (t.unique && c.has(n)) || s.push(n)
                    : n && n.length && "string" !== b(n) && e(n);
                });
              })(arguments),
              i && !e && l()),
            this
          );
        },
        remove: function () {
          return (
            w.each(arguments, function (t, e) {
              for (var i; (i = w.inArray(e, s, i)) > -1; )
                s.splice(i, 1), i <= o && o--;
            }),
            this
          );
        },
        has: function (t) {
          return t ? w.inArray(t, s) > -1 : s.length > 0;
        },
        empty: function () {
          return s && (s = []), this;
        },
        disable: function () {
          return (a = r = []), (s = i = ""), this;
        },
        disabled: function () {
          return !s;
        },
        lock: function () {
          return (a = r = []), i || e || (s = i = ""), this;
        },
        locked: function () {
          return !!a;
        },
        fireWith: function (t, i) {
          return (
            a ||
              ((i = [t, (i = i || []).slice ? i.slice() : i]),
              r.push(i),
              e || l()),
            this
          );
        },
        fire: function () {
          return c.fireWith(this, arguments), this;
        },
        fired: function () {
          return !!n;
        },
      };
    return c;
  }),
    w.extend({
      Deferred: function (e) {
        var i = [
            [
              "notify",
              "progress",
              w.Callbacks("memory"),
              w.Callbacks("memory"),
              2,
            ],
            [
              "resolve",
              "done",
              w.Callbacks("once memory"),
              w.Callbacks("once memory"),
              0,
              "resolved",
            ],
            [
              "reject",
              "fail",
              w.Callbacks("once memory"),
              w.Callbacks("once memory"),
              1,
              "rejected",
            ],
          ],
          n = "pending",
          a = {
            state: function () {
              return n;
            },
            always: function () {
              return s.done(arguments).fail(arguments), this;
            },
            catch: function (t) {
              return a.then(null, t);
            },
            pipe: function () {
              var t = arguments;
              return w
                .Deferred(function (e) {
                  w.each(i, function (i, n) {
                    var a = p(t[n[4]]) && t[n[4]];
                    s[n[1]](function () {
                      var t = a && a.apply(this, arguments);
                      t && p(t.promise)
                        ? t
                            .promise()
                            .progress(e.notify)
                            .done(e.resolve)
                            .fail(e.reject)
                        : e[n[0] + "With"](this, a ? [t] : arguments);
                    });
                  }),
                    (t = null);
                })
                .promise();
            },
            then: function (e, n, a) {
              var s = 0;
              function r(e, i, n, a) {
                return function () {
                  var o = this,
                    l = arguments,
                    c = function () {
                      var t, c;
                      if (!(e < s)) {
                        if ((t = n.apply(o, l)) === i.promise())
                          throw new TypeError("Thenable self-resolution");
                        (c =
                          t &&
                          ("object" == typeof t || "function" == typeof t) &&
                          t.then),
                          p(c)
                            ? a
                              ? c.call(t, r(s, i, N, a), r(s, i, X, a))
                              : (s++,
                                c.call(
                                  t,
                                  r(s, i, N, a),
                                  r(s, i, X, a),
                                  r(s, i, N, i.notifyWith)
                                ))
                            : (n !== N && ((o = void 0), (l = [t])),
                              (a || i.resolveWith)(o, l));
                      }
                    },
                    h = a
                      ? c
                      : function () {
                          try {
                            c();
                          } catch (t) {
                            w.Deferred.exceptionHook &&
                              w.Deferred.exceptionHook(t, h.stackTrace),
                              e + 1 >= s &&
                                (n !== X && ((o = void 0), (l = [t])),
                                i.rejectWith(o, l));
                          }
                        };
                  e
                    ? h()
                    : (w.Deferred.getStackHook &&
                        (h.stackTrace = w.Deferred.getStackHook()),
                      t.setTimeout(h));
                };
              }
              return w
                .Deferred(function (t) {
                  i[0][3].add(r(0, t, p(a) ? a : N, t.notifyWith)),
                    i[1][3].add(r(0, t, p(e) ? e : N)),
                    i[2][3].add(r(0, t, p(n) ? n : X));
                })
                .promise();
            },
            promise: function (t) {
              return null != t ? w.extend(t, a) : a;
            },
          },
          s = {};
        return (
          w.each(i, function (t, e) {
            var r = e[2],
              o = e[5];
            (a[e[1]] = r.add),
              o &&
                r.add(
                  function () {
                    n = o;
                  },
                  i[3 - t][2].disable,
                  i[3 - t][3].disable,
                  i[0][2].lock,
                  i[0][3].lock
                ),
              r.add(e[3].fire),
              (s[e[0]] = function () {
                return (
                  s[e[0] + "With"](this === s ? void 0 : this, arguments), this
                );
              }),
              (s[e[0] + "With"] = r.fireWith);
          }),
          a.promise(s),
          e && e.call(s, s),
          s
        );
      },
      when: function (t) {
        var e = arguments.length,
          i = e,
          n = Array(i),
          s = a.call(arguments),
          r = w.Deferred(),
          o = function (t) {
            return function (i) {
              (n[t] = this),
                (s[t] = arguments.length > 1 ? a.call(arguments) : i),
                --e || r.resolveWith(n, s);
            };
          };
        if (
          e <= 1 &&
          (H(t, r.done(o(i)).resolve, r.reject, !e),
          "pending" === r.state() || p(s[i] && s[i].then))
        )
          return r.then();
        for (; i--; ) H(s[i], o(i), r.reject);
        return r.promise();
      },
    });
  var R = /^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;
  (w.Deferred.exceptionHook = function (e, i) {
    t.console &&
      t.console.warn &&
      e &&
      R.test(e.name) &&
      t.console.warn("jQuery.Deferred exception: " + e.message, e.stack, i);
  }),
    (w.readyException = function (e) {
      t.setTimeout(function () {
        throw e;
      });
    });
  var F = w.Deferred();
  function Y() {
    x.removeEventListener("DOMContentLoaded", Y),
      t.removeEventListener("load", Y),
      w.ready();
  }
  (w.fn.ready = function (t) {
    return (
      F.then(t).catch(function (t) {
        w.readyException(t);
      }),
      this
    );
  }),
    w.extend({
      isReady: !1,
      readyWait: 1,
      ready: function (t) {
        (!0 === t ? --w.readyWait : w.isReady) ||
          ((w.isReady = !0),
          (!0 !== t && --w.readyWait > 0) || F.resolveWith(x, [w]));
      },
    }),
    (w.ready.then = F.then),
    "complete" === x.readyState ||
    ("loading" !== x.readyState && !x.documentElement.doScroll)
      ? t.setTimeout(w.ready)
      : (x.addEventListener("DOMContentLoaded", Y),
        t.addEventListener("load", Y));
  var W = function (t, e, i, n, a, s, r) {
      var o = 0,
        l = t.length,
        c = null == i;
      if ("object" === b(i))
        for (o in ((a = !0), i)) W(t, e, o, i[o], !0, s, r);
      else if (
        void 0 !== n &&
        ((a = !0),
        p(n) || (r = !0),
        c &&
          (r
            ? (e.call(t, n), (e = null))
            : ((c = e),
              (e = function (t, e, i) {
                return c.call(w(t), i);
              }))),
        e)
      )
        for (; o < l; o++) e(t[o], i, r ? n : n.call(t[o], o, e(t[o], i)));
      return a ? t : c ? e.call(t) : l ? e(t[0], i) : s;
    },
    B = /^-ms-/,
    j = /-([a-z])/g;
  function V(t, e) {
    return e.toUpperCase();
  }
  function G(t) {
    return t.replace(B, "ms-").replace(j, V);
  }
  var q = function (t) {
    return 1 === t.nodeType || 9 === t.nodeType || !+t.nodeType;
  };
  function U() {
    this.expando = w.expando + U.uid++;
  }
  (U.uid = 1),
    (U.prototype = {
      cache: function (t) {
        var e = t[this.expando];
        return (
          e ||
            ((e = {}),
            q(t) &&
              (t.nodeType
                ? (t[this.expando] = e)
                : Object.defineProperty(t, this.expando, {
                    value: e,
                    configurable: !0,
                  }))),
          e
        );
      },
      set: function (t, e, i) {
        var n,
          a = this.cache(t);
        if ("string" == typeof e) a[G(e)] = i;
        else for (n in e) a[G(n)] = e[n];
        return a;
      },
      get: function (t, e) {
        return void 0 === e
          ? this.cache(t)
          : t[this.expando] && t[this.expando][G(e)];
      },
      access: function (t, e, i) {
        return void 0 === e || (e && "string" == typeof e && void 0 === i)
          ? this.get(t, e)
          : (this.set(t, e, i), void 0 !== i ? i : e);
      },
      remove: function (t, e) {
        var i,
          n = t[this.expando];
        if (void 0 !== n) {
          if (void 0 !== e) {
            i = (e = Array.isArray(e)
              ? e.map(G)
              : (e = G(e)) in n
              ? [e]
              : e.match(z) || []).length;
            for (; i--; ) delete n[e[i]];
          }
          (void 0 === e || w.isEmptyObject(n)) &&
            (t.nodeType ? (t[this.expando] = void 0) : delete t[this.expando]);
        }
      },
      hasData: function (t) {
        var e = t[this.expando];
        return void 0 !== e && !w.isEmptyObject(e);
      },
    });
  var $ = new U(),
    Z = new U(),
    Q = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,
    K = /[A-Z]/g;
  function J(t, e, i) {
    var n;
    if (void 0 === i && 1 === t.nodeType)
      if (
        ((n = "data-" + e.replace(K, "-$&").toLowerCase()),
        "string" == typeof (i = t.getAttribute(n)))
      ) {
        try {
          i = (function (t) {
            return (
              "true" === t ||
              ("false" !== t &&
                ("null" === t
                  ? null
                  : t === +t + ""
                  ? +t
                  : Q.test(t)
                  ? JSON.parse(t)
                  : t))
            );
          })(i);
        } catch (t) {}
        Z.set(t, e, i);
      } else i = void 0;
    return i;
  }
  w.extend({
    hasData: function (t) {
      return Z.hasData(t) || $.hasData(t);
    },
    data: function (t, e, i) {
      return Z.access(t, e, i);
    },
    removeData: function (t, e) {
      Z.remove(t, e);
    },
    _data: function (t, e, i) {
      return $.access(t, e, i);
    },
    _removeData: function (t, e) {
      $.remove(t, e);
    },
  }),
    w.fn.extend({
      data: function (t, e) {
        var i,
          n,
          a,
          s = this[0],
          r = s && s.attributes;
        if (void 0 === t) {
          if (
            this.length &&
            ((a = Z.get(s)), 1 === s.nodeType && !$.get(s, "hasDataAttrs"))
          ) {
            for (i = r.length; i--; )
              r[i] &&
                0 === (n = r[i].name).indexOf("data-") &&
                ((n = G(n.slice(5))), J(s, n, a[n]));
            $.set(s, "hasDataAttrs", !0);
          }
          return a;
        }
        return "object" == typeof t
          ? this.each(function () {
              Z.set(this, t);
            })
          : W(
              this,
              function (e) {
                var i;
                if (s && void 0 === e)
                  return void 0 !== (i = Z.get(s, t)) ||
                    void 0 !== (i = J(s, t))
                    ? i
                    : void 0;
                this.each(function () {
                  Z.set(this, t, e);
                });
              },
              null,
              e,
              arguments.length > 1,
              null,
              !0
            );
      },
      removeData: function (t) {
        return this.each(function () {
          Z.remove(this, t);
        });
      },
    }),
    w.extend({
      queue: function (t, e, i) {
        var n;
        if (t)
          return (
            (e = (e || "fx") + "queue"),
            (n = $.get(t, e)),
            i &&
              (!n || Array.isArray(i)
                ? (n = $.access(t, e, w.makeArray(i)))
                : n.push(i)),
            n || []
          );
      },
      dequeue: function (t, e) {
        e = e || "fx";
        var i = w.queue(t, e),
          n = i.length,
          a = i.shift(),
          s = w._queueHooks(t, e);
        "inprogress" === a && ((a = i.shift()), n--),
          a &&
            ("fx" === e && i.unshift("inprogress"),
            delete s.stop,
            a.call(
              t,
              function () {
                w.dequeue(t, e);
              },
              s
            )),
          !n && s && s.empty.fire();
      },
      _queueHooks: function (t, e) {
        var i = e + "queueHooks";
        return (
          $.get(t, i) ||
          $.access(t, i, {
            empty: w.Callbacks("once memory").add(function () {
              $.remove(t, [e + "queue", i]);
            }),
          })
        );
      },
    }),
    w.fn.extend({
      queue: function (t, e) {
        var i = 2;
        return (
          "string" != typeof t && ((e = t), (t = "fx"), i--),
          arguments.length < i
            ? w.queue(this[0], t)
            : void 0 === e
            ? this
            : this.each(function () {
                var i = w.queue(this, t, e);
                w._queueHooks(this, t),
                  "fx" === t && "inprogress" !== i[0] && w.dequeue(this, t);
              })
        );
      },
      dequeue: function (t) {
        return this.each(function () {
          w.dequeue(this, t);
        });
      },
      clearQueue: function (t) {
        return this.queue(t || "fx", []);
      },
      promise: function (t, e) {
        var i,
          n = 1,
          a = w.Deferred(),
          s = this,
          r = this.length,
          o = function () {
            --n || a.resolveWith(s, [s]);
          };
        for (
          "string" != typeof t && ((e = t), (t = void 0)), t = t || "fx";
          r--;

        )
          (i = $.get(s[r], t + "queueHooks")) &&
            i.empty &&
            (n++, i.empty.add(o));
        return o(), a.promise(e);
      },
    });
  var tt = /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,
    et = new RegExp("^(?:([+-])=|)(" + tt + ")([a-z%]*)$", "i"),
    it = ["Top", "Right", "Bottom", "Left"],
    nt = x.documentElement,
    at = function (t) {
      return w.contains(t.ownerDocument, t);
    },
    st = { composed: !0 };
  nt.getRootNode &&
    (at = function (t) {
      return (
        w.contains(t.ownerDocument, t) || t.getRootNode(st) === t.ownerDocument
      );
    });
  var rt = function (t, e) {
    return (
      "none" === (t = e || t).style.display ||
      ("" === t.style.display && at(t) && "none" === w.css(t, "display"))
    );
  };
  function ot(t, e, i, n) {
    var a,
      s,
      r = 20,
      o = n
        ? function () {
            return n.cur();
          }
        : function () {
            return w.css(t, e, "");
          },
      l = o(),
      c = (i && i[3]) || (w.cssNumber[e] ? "" : "px"),
      h =
        t.nodeType &&
        (w.cssNumber[e] || ("px" !== c && +l)) &&
        et.exec(w.css(t, e));
    if (h && h[3] !== c) {
      for (l /= 2, c = c || h[3], h = +l || 1; r--; )
        w.style(t, e, h + c),
          (1 - s) * (1 - (s = o() / l || 0.5)) <= 0 && (r = 0),
          (h /= s);
      (h *= 2), w.style(t, e, h + c), (i = i || []);
    }
    return (
      i &&
        ((h = +h || +l || 0),
        (a = i[1] ? h + (i[1] + 1) * i[2] : +i[2]),
        n && ((n.unit = c), (n.start = h), (n.end = a))),
      a
    );
  }
  var lt = {};
  function ct(t) {
    var e,
      i = t.ownerDocument,
      n = t.nodeName,
      a = lt[n];
    return (
      a ||
      ((e = i.body.appendChild(i.createElement(n))),
      (a = w.css(e, "display")),
      e.parentNode.removeChild(e),
      "none" === a && (a = "block"),
      (lt[n] = a),
      a)
    );
  }
  function ht(t, e) {
    for (var i, n, a = [], s = 0, r = t.length; s < r; s++)
      (n = t[s]).style &&
        ((i = n.style.display),
        e
          ? ("none" === i &&
              ((a[s] = $.get(n, "display") || null),
              a[s] || (n.style.display = "")),
            "" === n.style.display && rt(n) && (a[s] = ct(n)))
          : "none" !== i && ((a[s] = "none"), $.set(n, "display", i)));
    for (s = 0; s < r; s++) null != a[s] && (t[s].style.display = a[s]);
    return t;
  }
  w.fn.extend({
    show: function () {
      return ht(this, !0);
    },
    hide: function () {
      return ht(this);
    },
    toggle: function (t) {
      return "boolean" == typeof t
        ? t
          ? this.show()
          : this.hide()
        : this.each(function () {
            rt(this) ? w(this).show() : w(this).hide();
          });
    },
  });
  var dt,
    ut,
    ft = /^(?:checkbox|radio)$/i,
    pt = /<([a-z][^\/\0>\x20\t\r\n\f]*)/i,
    gt = /^$|^module$|\/(?:java|ecma)script/i;
  (dt = x.createDocumentFragment().appendChild(x.createElement("div"))),
    (ut = x.createElement("input")).setAttribute("type", "radio"),
    ut.setAttribute("checked", "checked"),
    ut.setAttribute("name", "t"),
    dt.appendChild(ut),
    (f.checkClone = dt.cloneNode(!0).cloneNode(!0).lastChild.checked),
    (dt.innerHTML = "<textarea>x</textarea>"),
    (f.noCloneChecked = !!dt.cloneNode(!0).lastChild.defaultValue),
    (dt.innerHTML = "<option></option>"),
    (f.option = !!dt.lastChild);
  var xt = {
    thead: [1, "<table>", "</table>"],
    col: [2, "<table><colgroup>", "</colgroup></table>"],
    tr: [2, "<table><tbody>", "</tbody></table>"],
    td: [3, "<table><tbody><tr>", "</tr></tbody></table>"],
    _default: [0, "", ""],
  };
  function mt(t, e) {
    var i;
    return (
      (i =
        void 0 !== t.getElementsByTagName
          ? t.getElementsByTagName(e || "*")
          : void 0 !== t.querySelectorAll
          ? t.querySelectorAll(e || "*")
          : []),
      void 0 === e || (e && E(t, e)) ? w.merge([t], i) : i
    );
  }
  function vt(t, e) {
    for (var i = 0, n = t.length; i < n; i++)
      $.set(t[i], "globalEval", !e || $.get(e[i], "globalEval"));
  }
  (xt.tbody = xt.tfoot = xt.colgroup = xt.caption = xt.thead),
    (xt.th = xt.td),
    f.option ||
      (xt.optgroup = xt.option =
        [1, "<select multiple='multiple'>", "</select>"]);
  var bt = /<|&#?\w+;/;
  function yt(t, e, i, n, a) {
    for (
      var s,
        r,
        o,
        l,
        c,
        h,
        d = e.createDocumentFragment(),
        u = [],
        f = 0,
        p = t.length;
      f < p;
      f++
    )
      if ((s = t[f]) || 0 === s)
        if ("object" === b(s)) w.merge(u, s.nodeType ? [s] : s);
        else if (bt.test(s)) {
          for (
            r = r || d.appendChild(e.createElement("div")),
              o = (pt.exec(s) || ["", ""])[1].toLowerCase(),
              l = xt[o] || xt._default,
              r.innerHTML = l[1] + w.htmlPrefilter(s) + l[2],
              h = l[0];
            h--;

          )
            r = r.lastChild;
          w.merge(u, r.childNodes), ((r = d.firstChild).textContent = "");
        } else u.push(e.createTextNode(s));
    for (d.textContent = "", f = 0; (s = u[f++]); )
      if (n && w.inArray(s, n) > -1) a && a.push(s);
      else if (
        ((c = at(s)), (r = mt(d.appendChild(s), "script")), c && vt(r), i)
      )
        for (h = 0; (s = r[h++]); ) gt.test(s.type || "") && i.push(s);
    return d;
  }
  var wt = /^([^.]*)(?:\.(.+)|)/;
  function kt() {
    return !0;
  }
  function At() {
    return !1;
  }
  function St(t, e) {
    return (
      (t ===
        (function () {
          try {
            return x.activeElement;
          } catch (t) {}
        })()) ==
      ("focus" === e)
    );
  }
  function Ct(t, e, i, n, a, s) {
    var r, o;
    if ("object" == typeof e) {
      for (o in ("string" != typeof i && ((n = n || i), (i = void 0)), e))
        Ct(t, o, i, n, e[o], s);
      return t;
    }
    if (
      (null == n && null == a
        ? ((a = i), (n = i = void 0))
        : null == a &&
          ("string" == typeof i
            ? ((a = n), (n = void 0))
            : ((a = n), (n = i), (i = void 0))),
      !1 === a)
    )
      a = At;
    else if (!a) return t;
    return (
      1 === s &&
        ((r = a),
        (a = function (t) {
          return w().off(t), r.apply(this, arguments);
        }),
        (a.guid = r.guid || (r.guid = w.guid++))),
      t.each(function () {
        w.event.add(this, e, a, n, i);
      })
    );
  }
  function Tt(t, e, i) {
    i
      ? ($.set(t, e, !1),
        w.event.add(t, e, {
          namespace: !1,
          handler: function (t) {
            var n,
              s,
              r = $.get(this, e);
            if (1 & t.isTrigger && this[e]) {
              if (r.length)
                (w.event.special[e] || {}).delegateType && t.stopPropagation();
              else if (
                ((r = a.call(arguments)),
                $.set(this, e, r),
                (n = i(this, e)),
                this[e](),
                r !== (s = $.get(this, e)) || n ? $.set(this, e, !1) : (s = {}),
                r !== s)
              )
                return (
                  t.stopImmediatePropagation(), t.preventDefault(), s && s.value
                );
            } else
              r.length &&
                ($.set(this, e, {
                  value: w.event.trigger(
                    w.extend(r[0], w.Event.prototype),
                    r.slice(1),
                    this
                  ),
                }),
                t.stopImmediatePropagation());
          },
        }))
      : void 0 === $.get(t, e) && w.event.add(t, e, kt);
  }
  (w.event = {
    global: {},
    add: function (t, e, i, n, a) {
      var s,
        r,
        o,
        l,
        c,
        h,
        d,
        u,
        f,
        p,
        g,
        x = $.get(t);
      if (q(t))
        for (
          i.handler && ((i = (s = i).handler), (a = s.selector)),
            a && w.find.matchesSelector(nt, a),
            i.guid || (i.guid = w.guid++),
            (l = x.events) || (l = x.events = Object.create(null)),
            (r = x.handle) ||
              (r = x.handle =
                function (e) {
                  return void 0 !== w && w.event.triggered !== e.type
                    ? w.event.dispatch.apply(t, arguments)
                    : void 0;
                }),
            c = (e = (e || "").match(z) || [""]).length;
          c--;

        )
          (f = g = (o = wt.exec(e[c]) || [])[1]),
            (p = (o[2] || "").split(".").sort()),
            f &&
              ((d = w.event.special[f] || {}),
              (f = (a ? d.delegateType : d.bindType) || f),
              (d = w.event.special[f] || {}),
              (h = w.extend(
                {
                  type: f,
                  origType: g,
                  data: n,
                  handler: i,
                  guid: i.guid,
                  selector: a,
                  needsContext: a && w.expr.match.needsContext.test(a),
                  namespace: p.join("."),
                },
                s
              )),
              (u = l[f]) ||
                (((u = l[f] = []).delegateCount = 0),
                (d.setup && !1 !== d.setup.call(t, n, p, r)) ||
                  (t.addEventListener && t.addEventListener(f, r))),
              d.add &&
                (d.add.call(t, h), h.handler.guid || (h.handler.guid = i.guid)),
              a ? u.splice(u.delegateCount++, 0, h) : u.push(h),
              (w.event.global[f] = !0));
    },
    remove: function (t, e, i, n, a) {
      var s,
        r,
        o,
        l,
        c,
        h,
        d,
        u,
        f,
        p,
        g,
        x = $.hasData(t) && $.get(t);
      if (x && (l = x.events)) {
        for (c = (e = (e || "").match(z) || [""]).length; c--; )
          if (
            ((f = g = (o = wt.exec(e[c]) || [])[1]),
            (p = (o[2] || "").split(".").sort()),
            f)
          ) {
            for (
              d = w.event.special[f] || {},
                u = l[(f = (n ? d.delegateType : d.bindType) || f)] || [],
                o =
                  o[2] &&
                  new RegExp("(^|\\.)" + p.join("\\.(?:.*\\.|)") + "(\\.|$)"),
                r = s = u.length;
              s--;

            )
              (h = u[s]),
                (!a && g !== h.origType) ||
                  (i && i.guid !== h.guid) ||
                  (o && !o.test(h.namespace)) ||
                  (n && n !== h.selector && ("**" !== n || !h.selector)) ||
                  (u.splice(s, 1),
                  h.selector && u.delegateCount--,
                  d.remove && d.remove.call(t, h));
            r &&
              !u.length &&
              ((d.teardown && !1 !== d.teardown.call(t, p, x.handle)) ||
                w.removeEvent(t, f, x.handle),
              delete l[f]);
          } else for (f in l) w.event.remove(t, f + e[c], i, n, !0);
        w.isEmptyObject(l) && $.remove(t, "handle events");
      }
    },
    dispatch: function (t) {
      var e,
        i,
        n,
        a,
        s,
        r,
        o = new Array(arguments.length),
        l = w.event.fix(t),
        c = ($.get(this, "events") || Object.create(null))[l.type] || [],
        h = w.event.special[l.type] || {};
      for (o[0] = l, e = 1; e < arguments.length; e++) o[e] = arguments[e];
      if (
        ((l.delegateTarget = this),
        !h.preDispatch || !1 !== h.preDispatch.call(this, l))
      ) {
        for (
          r = w.event.handlers.call(this, l, c), e = 0;
          (a = r[e++]) && !l.isPropagationStopped();

        )
          for (
            l.currentTarget = a.elem, i = 0;
            (s = a.handlers[i++]) && !l.isImmediatePropagationStopped();

          )
            (l.rnamespace &&
              !1 !== s.namespace &&
              !l.rnamespace.test(s.namespace)) ||
              ((l.handleObj = s),
              (l.data = s.data),
              void 0 !==
                (n = (
                  (w.event.special[s.origType] || {}).handle || s.handler
                ).apply(a.elem, o)) &&
                !1 === (l.result = n) &&
                (l.preventDefault(), l.stopPropagation()));
        return h.postDispatch && h.postDispatch.call(this, l), l.result;
      }
    },
    handlers: function (t, e) {
      var i,
        n,
        a,
        s,
        r,
        o = [],
        l = e.delegateCount,
        c = t.target;
      if (l && c.nodeType && !("click" === t.type && t.button >= 1))
        for (; c !== this; c = c.parentNode || this)
          if (1 === c.nodeType && ("click" !== t.type || !0 !== c.disabled)) {
            for (s = [], r = {}, i = 0; i < l; i++)
              void 0 === r[(a = (n = e[i]).selector + " ")] &&
                (r[a] = n.needsContext
                  ? w(a, this).index(c) > -1
                  : w.find(a, this, null, [c]).length),
                r[a] && s.push(n);
            s.length && o.push({ elem: c, handlers: s });
          }
      return (
        (c = this), l < e.length && o.push({ elem: c, handlers: e.slice(l) }), o
      );
    },
    addProp: function (t, e) {
      Object.defineProperty(w.Event.prototype, t, {
        enumerable: !0,
        configurable: !0,
        get: p(e)
          ? function () {
              if (this.originalEvent) return e(this.originalEvent);
            }
          : function () {
              if (this.originalEvent) return this.originalEvent[t];
            },
        set: function (e) {
          Object.defineProperty(this, t, {
            enumerable: !0,
            configurable: !0,
            writable: !0,
            value: e,
          });
        },
      });
    },
    fix: function (t) {
      return t[w.expando] ? t : new w.Event(t);
    },
    special: {
      load: { noBubble: !0 },
      click: {
        setup: function (t) {
          var e = this || t;
          return (
            ft.test(e.type) && e.click && E(e, "input") && Tt(e, "click", kt),
            !1
          );
        },
        trigger: function (t) {
          var e = this || t;
          return (
            ft.test(e.type) && e.click && E(e, "input") && Tt(e, "click"), !0
          );
        },
        _default: function (t) {
          var e = t.target;
          return (
            (ft.test(e.type) &&
              e.click &&
              E(e, "input") &&
              $.get(e, "click")) ||
            E(e, "a")
          );
        },
      },
      beforeunload: {
        postDispatch: function (t) {
          void 0 !== t.result &&
            t.originalEvent &&
            (t.originalEvent.returnValue = t.result);
        },
      },
    },
  }),
    (w.removeEvent = function (t, e, i) {
      t.removeEventListener && t.removeEventListener(e, i);
    }),
    (w.Event = function (t, e) {
      if (!(this instanceof w.Event)) return new w.Event(t, e);
      t && t.type
        ? ((this.originalEvent = t),
          (this.type = t.type),
          (this.isDefaultPrevented =
            t.defaultPrevented ||
            (void 0 === t.defaultPrevented && !1 === t.returnValue)
              ? kt
              : At),
          (this.target =
            t.target && 3 === t.target.nodeType
              ? t.target.parentNode
              : t.target),
          (this.currentTarget = t.currentTarget),
          (this.relatedTarget = t.relatedTarget))
        : (this.type = t),
        e && w.extend(this, e),
        (this.timeStamp = (t && t.timeStamp) || Date.now()),
        (this[w.expando] = !0);
    }),
    (w.Event.prototype = {
      constructor: w.Event,
      isDefaultPrevented: At,
      isPropagationStopped: At,
      isImmediatePropagationStopped: At,
      isSimulated: !1,
      preventDefault: function () {
        var t = this.originalEvent;
        (this.isDefaultPrevented = kt),
          t && !this.isSimulated && t.preventDefault();
      },
      stopPropagation: function () {
        var t = this.originalEvent;
        (this.isPropagationStopped = kt),
          t && !this.isSimulated && t.stopPropagation();
      },
      stopImmediatePropagation: function () {
        var t = this.originalEvent;
        (this.isImmediatePropagationStopped = kt),
          t && !this.isSimulated && t.stopImmediatePropagation(),
          this.stopPropagation();
      },
    }),
    w.each(
      {
        altKey: !0,
        bubbles: !0,
        cancelable: !0,
        changedTouches: !0,
        ctrlKey: !0,
        detail: !0,
        eventPhase: !0,
        metaKey: !0,
        pageX: !0,
        pageY: !0,
        shiftKey: !0,
        view: !0,
        char: !0,
        code: !0,
        charCode: !0,
        key: !0,
        keyCode: !0,
        button: !0,
        buttons: !0,
        clientX: !0,
        clientY: !0,
        offsetX: !0,
        offsetY: !0,
        pointerId: !0,
        pointerType: !0,
        screenX: !0,
        screenY: !0,
        targetTouches: !0,
        toElement: !0,
        touches: !0,
        which: !0,
      },
      w.event.addProp
    ),
    w.each({ focus: "focusin", blur: "focusout" }, function (t, e) {
      w.event.special[t] = {
        setup: function () {
          return Tt(this, t, St), !1;
        },
        trigger: function () {
          return Tt(this, t), !0;
        },
        _default: function () {
          return !0;
        },
        delegateType: e,
      };
    }),
    w.each(
      {
        mouseenter: "mouseover",
        mouseleave: "mouseout",
        pointerenter: "pointerover",
        pointerleave: "pointerout",
      },
      function (t, e) {
        w.event.special[t] = {
          delegateType: e,
          bindType: e,
          handle: function (t) {
            var i,
              n = this,
              a = t.relatedTarget,
              s = t.handleObj;
            return (
              (a && (a === n || w.contains(n, a))) ||
                ((t.type = s.origType),
                (i = s.handler.apply(this, arguments)),
                (t.type = e)),
              i
            );
          },
        };
      }
    ),
    w.fn.extend({
      on: function (t, e, i, n) {
        return Ct(this, t, e, i, n);
      },
      one: function (t, e, i, n) {
        return Ct(this, t, e, i, n, 1);
      },
      off: function (t, e, i) {
        var n, a;
        if (t && t.preventDefault && t.handleObj)
          return (
            (n = t.handleObj),
            w(t.delegateTarget).off(
              n.namespace ? n.origType + "." + n.namespace : n.origType,
              n.selector,
              n.handler
            ),
            this
          );
        if ("object" == typeof t) {
          for (a in t) this.off(a, e, t[a]);
          return this;
        }
        return (
          (!1 !== e && "function" != typeof e) || ((i = e), (e = void 0)),
          !1 === i && (i = At),
          this.each(function () {
            w.event.remove(this, t, i, e);
          })
        );
      },
    });
  var Et = /<script|<style|<link/i,
    _t = /checked\s*(?:[^=]|=\s*.checked.)/i,
    Lt = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;
  function Pt(t, e) {
    return (
      (E(t, "table") &&
        E(11 !== e.nodeType ? e : e.firstChild, "tr") &&
        w(t).children("tbody")[0]) ||
      t
    );
  }
  function Mt(t) {
    return (t.type = (null !== t.getAttribute("type")) + "/" + t.type), t;
  }
  function It(t) {
    return (
      "true/" === (t.type || "").slice(0, 5)
        ? (t.type = t.type.slice(5))
        : t.removeAttribute("type"),
      t
    );
  }
  function Ot(t, e) {
    var i, n, a, s, r, o;
    if (1 === e.nodeType) {
      if ($.hasData(t) && (o = $.get(t).events))
        for (a in ($.remove(e, "handle events"), o))
          for (i = 0, n = o[a].length; i < n; i++) w.event.add(e, a, o[a][i]);
      Z.hasData(t) && ((s = Z.access(t)), (r = w.extend({}, s)), Z.set(e, r));
    }
  }
  function Dt(t, e) {
    var i = e.nodeName.toLowerCase();
    "input" === i && ft.test(t.type)
      ? (e.checked = t.checked)
      : ("input" !== i && "textarea" !== i) ||
        (e.defaultValue = t.defaultValue);
  }
  function zt(t, e, i, n) {
    e = s(e);
    var a,
      r,
      o,
      l,
      c,
      h,
      d = 0,
      u = t.length,
      g = u - 1,
      x = e[0],
      m = p(x);
    if (m || (u > 1 && "string" == typeof x && !f.checkClone && _t.test(x)))
      return t.each(function (a) {
        var s = t.eq(a);
        m && (e[0] = x.call(this, a, s.html())), zt(s, e, i, n);
      });
    if (
      u &&
      ((r = (a = yt(e, t[0].ownerDocument, !1, t, n)).firstChild),
      1 === a.childNodes.length && (a = r),
      r || n)
    ) {
      for (l = (o = w.map(mt(a, "script"), Mt)).length; d < u; d++)
        (c = a),
          d !== g &&
            ((c = w.clone(c, !0, !0)), l && w.merge(o, mt(c, "script"))),
          i.call(t[d], c, d);
      if (l)
        for (h = o[o.length - 1].ownerDocument, w.map(o, It), d = 0; d < l; d++)
          (c = o[d]),
            gt.test(c.type || "") &&
              !$.access(c, "globalEval") &&
              w.contains(h, c) &&
              (c.src && "module" !== (c.type || "").toLowerCase()
                ? w._evalUrl &&
                  !c.noModule &&
                  w._evalUrl(
                    c.src,
                    { nonce: c.nonce || c.getAttribute("nonce") },
                    h
                  )
                : v(c.textContent.replace(Lt, ""), c, h));
    }
    return t;
  }
  function Nt(t, e, i) {
    for (var n, a = e ? w.filter(e, t) : t, s = 0; null != (n = a[s]); s++)
      i || 1 !== n.nodeType || w.cleanData(mt(n)),
        n.parentNode &&
          (i && at(n) && vt(mt(n, "script")), n.parentNode.removeChild(n));
    return t;
  }
  w.extend({
    htmlPrefilter: function (t) {
      return t;
    },
    clone: function (t, e, i) {
      var n,
        a,
        s,
        r,
        o = t.cloneNode(!0),
        l = at(t);
      if (
        !(
          f.noCloneChecked ||
          (1 !== t.nodeType && 11 !== t.nodeType) ||
          w.isXMLDoc(t)
        )
      )
        for (r = mt(o), n = 0, a = (s = mt(t)).length; n < a; n++)
          Dt(s[n], r[n]);
      if (e)
        if (i)
          for (s = s || mt(t), r = r || mt(o), n = 0, a = s.length; n < a; n++)
            Ot(s[n], r[n]);
        else Ot(t, o);
      return (
        (r = mt(o, "script")).length > 0 && vt(r, !l && mt(t, "script")), o
      );
    },
    cleanData: function (t) {
      for (var e, i, n, a = w.event.special, s = 0; void 0 !== (i = t[s]); s++)
        if (q(i)) {
          if ((e = i[$.expando])) {
            if (e.events)
              for (n in e.events)
                a[n] ? w.event.remove(i, n) : w.removeEvent(i, n, e.handle);
            i[$.expando] = void 0;
          }
          i[Z.expando] && (i[Z.expando] = void 0);
        }
    },
  }),
    w.fn.extend({
      detach: function (t) {
        return Nt(this, t, !0);
      },
      remove: function (t) {
        return Nt(this, t);
      },
      text: function (t) {
        return W(
          this,
          function (t) {
            return void 0 === t
              ? w.text(this)
              : this.empty().each(function () {
                  (1 !== this.nodeType &&
                    11 !== this.nodeType &&
                    9 !== this.nodeType) ||
                    (this.textContent = t);
                });
          },
          null,
          t,
          arguments.length
        );
      },
      append: function () {
        return zt(this, arguments, function (t) {
          (1 !== this.nodeType &&
            11 !== this.nodeType &&
            9 !== this.nodeType) ||
            Pt(this, t).appendChild(t);
        });
      },
      prepend: function () {
        return zt(this, arguments, function (t) {
          if (
            1 === this.nodeType ||
            11 === this.nodeType ||
            9 === this.nodeType
          ) {
            var e = Pt(this, t);
            e.insertBefore(t, e.firstChild);
          }
        });
      },
      before: function () {
        return zt(this, arguments, function (t) {
          this.parentNode && this.parentNode.insertBefore(t, this);
        });
      },
      after: function () {
        return zt(this, arguments, function (t) {
          this.parentNode && this.parentNode.insertBefore(t, this.nextSibling);
        });
      },
      empty: function () {
        for (var t, e = 0; null != (t = this[e]); e++)
          1 === t.nodeType && (w.cleanData(mt(t, !1)), (t.textContent = ""));
        return this;
      },
      clone: function (t, e) {
        return (
          (t = null != t && t),
          (e = null == e ? t : e),
          this.map(function () {
            return w.clone(this, t, e);
          })
        );
      },
      html: function (t) {
        return W(
          this,
          function (t) {
            var e = this[0] || {},
              i = 0,
              n = this.length;
            if (void 0 === t && 1 === e.nodeType) return e.innerHTML;
            if (
              "string" == typeof t &&
              !Et.test(t) &&
              !xt[(pt.exec(t) || ["", ""])[1].toLowerCase()]
            ) {
              t = w.htmlPrefilter(t);
              try {
                for (; i < n; i++)
                  1 === (e = this[i] || {}).nodeType &&
                    (w.cleanData(mt(e, !1)), (e.innerHTML = t));
                e = 0;
              } catch (t) {}
            }
            e && this.empty().append(t);
          },
          null,
          t,
          arguments.length
        );
      },
      replaceWith: function () {
        var t = [];
        return zt(
          this,
          arguments,
          function (e) {
            var i = this.parentNode;
            w.inArray(this, t) < 0 &&
              (w.cleanData(mt(this)), i && i.replaceChild(e, this));
          },
          t
        );
      },
    }),
    w.each(
      {
        appendTo: "append",
        prependTo: "prepend",
        insertBefore: "before",
        insertAfter: "after",
        replaceAll: "replaceWith",
      },
      function (t, e) {
        w.fn[t] = function (t) {
          for (var i, n = [], a = w(t), s = a.length - 1, o = 0; o <= s; o++)
            (i = o === s ? this : this.clone(!0)),
              w(a[o])[e](i),
              r.apply(n, i.get());
          return this.pushStack(n);
        };
      }
    );
  var Xt = new RegExp("^(" + tt + ")(?!px)[a-z%]+$", "i"),
    Ht = function (e) {
      var i = e.ownerDocument.defaultView;
      return (i && i.opener) || (i = t), i.getComputedStyle(e);
    },
    Rt = function (t, e, i) {
      var n,
        a,
        s = {};
      for (a in e) (s[a] = t.style[a]), (t.style[a] = e[a]);
      for (a in ((n = i.call(t)), e)) t.style[a] = s[a];
      return n;
    },
    Ft = new RegExp(it.join("|"), "i");
  function Yt(t, e, i) {
    var n,
      a,
      s,
      r,
      o = t.style;
    return (
      (i = i || Ht(t)) &&
        ("" !== (r = i.getPropertyValue(e) || i[e]) ||
          at(t) ||
          (r = w.style(t, e)),
        !f.pixelBoxStyles() &&
          Xt.test(r) &&
          Ft.test(e) &&
          ((n = o.width),
          (a = o.minWidth),
          (s = o.maxWidth),
          (o.minWidth = o.maxWidth = o.width = r),
          (r = i.width),
          (o.width = n),
          (o.minWidth = a),
          (o.maxWidth = s))),
      void 0 !== r ? r + "" : r
    );
  }
  function Wt(t, e) {
    return {
      get: function () {
        if (!t()) return (this.get = e).apply(this, arguments);
        delete this.get;
      },
    };
  }
  !(function () {
    function e() {
      if (h) {
        (c.style.cssText =
          "position:absolute;left:-11111px;width:60px;margin-top:1px;padding:0;border:0"),
          (h.style.cssText =
            "position:relative;display:block;box-sizing:border-box;overflow:scroll;margin:auto;border:1px;padding:1px;width:60%;top:1%"),
          nt.appendChild(c).appendChild(h);
        var e = t.getComputedStyle(h);
        (n = "1%" !== e.top),
          (l = 12 === i(e.marginLeft)),
          (h.style.right = "60%"),
          (r = 36 === i(e.right)),
          (a = 36 === i(e.width)),
          (h.style.position = "absolute"),
          (s = 12 === i(h.offsetWidth / 3)),
          nt.removeChild(c),
          (h = null);
      }
    }
    function i(t) {
      return Math.round(parseFloat(t));
    }
    var n,
      a,
      s,
      r,
      o,
      l,
      c = x.createElement("div"),
      h = x.createElement("div");
    h.style &&
      ((h.style.backgroundClip = "content-box"),
      (h.cloneNode(!0).style.backgroundClip = ""),
      (f.clearCloneStyle = "content-box" === h.style.backgroundClip),
      w.extend(f, {
        boxSizingReliable: function () {
          return e(), a;
        },
        pixelBoxStyles: function () {
          return e(), r;
        },
        pixelPosition: function () {
          return e(), n;
        },
        reliableMarginLeft: function () {
          return e(), l;
        },
        scrollboxSize: function () {
          return e(), s;
        },
        reliableTrDimensions: function () {
          var e, i, n, a;
          return (
            null == o &&
              ((e = x.createElement("table")),
              (i = x.createElement("tr")),
              (n = x.createElement("div")),
              (e.style.cssText =
                "position:absolute;left:-11111px;border-collapse:separate"),
              (i.style.cssText = "border:1px solid"),
              (i.style.height = "1px"),
              (n.style.height = "9px"),
              (n.style.display = "block"),
              nt.appendChild(e).appendChild(i).appendChild(n),
              (a = t.getComputedStyle(i)),
              (o =
                parseInt(a.height, 10) +
                  parseInt(a.borderTopWidth, 10) +
                  parseInt(a.borderBottomWidth, 10) ===
                i.offsetHeight),
              nt.removeChild(e)),
            o
          );
        },
      }));
  })();
  var Bt = ["Webkit", "Moz", "ms"],
    jt = x.createElement("div").style,
    Vt = {};
  function Gt(t) {
    var e = w.cssProps[t] || Vt[t];
    return (
      e ||
      (t in jt
        ? t
        : (Vt[t] =
            (function (t) {
              for (
                var e = t[0].toUpperCase() + t.slice(1), i = Bt.length;
                i--;

              )
                if ((t = Bt[i] + e) in jt) return t;
            })(t) || t))
    );
  }
  var qt = /^(none|table(?!-c[ea]).+)/,
    Ut = /^--/,
    $t = { position: "absolute", visibility: "hidden", display: "block" },
    Zt = { letterSpacing: "0", fontWeight: "400" };
  function Qt(t, e, i) {
    var n = et.exec(e);
    return n ? Math.max(0, n[2] - (i || 0)) + (n[3] || "px") : e;
  }
  function Kt(t, e, i, n, a, s) {
    var r = "width" === e ? 1 : 0,
      o = 0,
      l = 0;
    if (i === (n ? "border" : "content")) return 0;
    for (; r < 4; r += 2)
      "margin" === i && (l += w.css(t, i + it[r], !0, a)),
        n
          ? ("content" === i && (l -= w.css(t, "padding" + it[r], !0, a)),
            "margin" !== i &&
              (l -= w.css(t, "border" + it[r] + "Width", !0, a)))
          : ((l += w.css(t, "padding" + it[r], !0, a)),
            "padding" !== i
              ? (l += w.css(t, "border" + it[r] + "Width", !0, a))
              : (o += w.css(t, "border" + it[r] + "Width", !0, a)));
    return (
      !n &&
        s >= 0 &&
        (l +=
          Math.max(
            0,
            Math.ceil(
              t["offset" + e[0].toUpperCase() + e.slice(1)] - s - l - o - 0.5
            )
          ) || 0),
      l
    );
  }
  function Jt(t, e, i) {
    var n = Ht(t),
      a =
        (!f.boxSizingReliable() || i) &&
        "border-box" === w.css(t, "boxSizing", !1, n),
      s = a,
      r = Yt(t, e, n),
      o = "offset" + e[0].toUpperCase() + e.slice(1);
    if (Xt.test(r)) {
      if (!i) return r;
      r = "auto";
    }
    return (
      ((!f.boxSizingReliable() && a) ||
        (!f.reliableTrDimensions() && E(t, "tr")) ||
        "auto" === r ||
        (!parseFloat(r) && "inline" === w.css(t, "display", !1, n))) &&
        t.getClientRects().length &&
        ((a = "border-box" === w.css(t, "boxSizing", !1, n)),
        (s = o in t) && (r = t[o])),
      (r = parseFloat(r) || 0) +
        Kt(t, e, i || (a ? "border" : "content"), s, n, r) +
        "px"
    );
  }
  function te(t, e, i, n, a) {
    return new te.prototype.init(t, e, i, n, a);
  }
  w.extend({
    cssHooks: {
      opacity: {
        get: function (t, e) {
          if (e) {
            var i = Yt(t, "opacity");
            return "" === i ? "1" : i;
          }
        },
      },
    },
    cssNumber: {
      animationIterationCount: !0,
      columnCount: !0,
      fillOpacity: !0,
      flexGrow: !0,
      flexShrink: !0,
      fontWeight: !0,
      gridArea: !0,
      gridColumn: !0,
      gridColumnEnd: !0,
      gridColumnStart: !0,
      gridRow: !0,
      gridRowEnd: !0,
      gridRowStart: !0,
      lineHeight: !0,
      opacity: !0,
      order: !0,
      orphans: !0,
      widows: !0,
      zIndex: !0,
      zoom: !0,
    },
    cssProps: {},
    style: function (t, e, i, n) {
      if (t && 3 !== t.nodeType && 8 !== t.nodeType && t.style) {
        var a,
          s,
          r,
          o = G(e),
          l = Ut.test(e),
          c = t.style;
        if (
          (l || (e = Gt(o)), (r = w.cssHooks[e] || w.cssHooks[o]), void 0 === i)
        )
          return r && "get" in r && void 0 !== (a = r.get(t, !1, n)) ? a : c[e];
        "string" === (s = typeof i) &&
          (a = et.exec(i)) &&
          a[1] &&
          ((i = ot(t, e, a)), (s = "number")),
          null != i &&
            i == i &&
            ("number" !== s ||
              l ||
              (i += (a && a[3]) || (w.cssNumber[o] ? "" : "px")),
            f.clearCloneStyle ||
              "" !== i ||
              0 !== e.indexOf("background") ||
              (c[e] = "inherit"),
            (r && "set" in r && void 0 === (i = r.set(t, i, n))) ||
              (l ? c.setProperty(e, i) : (c[e] = i)));
      }
    },
    css: function (t, e, i, n) {
      var a,
        s,
        r,
        o = G(e);
      return (
        Ut.test(e) || (e = Gt(o)),
        (r = w.cssHooks[e] || w.cssHooks[o]) &&
          "get" in r &&
          (a = r.get(t, !0, i)),
        void 0 === a && (a = Yt(t, e, n)),
        "normal" === a && e in Zt && (a = Zt[e]),
        "" === i || i
          ? ((s = parseFloat(a)), !0 === i || isFinite(s) ? s || 0 : a)
          : a
      );
    },
  }),
    w.each(["height", "width"], function (t, e) {
      w.cssHooks[e] = {
        get: function (t, i, n) {
          if (i)
            return !qt.test(w.css(t, "display")) ||
              (t.getClientRects().length && t.getBoundingClientRect().width)
              ? Jt(t, e, n)
              : Rt(t, $t, function () {
                  return Jt(t, e, n);
                });
        },
        set: function (t, i, n) {
          var a,
            s = Ht(t),
            r = !f.scrollboxSize() && "absolute" === s.position,
            o = (r || n) && "border-box" === w.css(t, "boxSizing", !1, s),
            l = n ? Kt(t, e, n, o, s) : 0;
          return (
            o &&
              r &&
              (l -= Math.ceil(
                t["offset" + e[0].toUpperCase() + e.slice(1)] -
                  parseFloat(s[e]) -
                  Kt(t, e, "border", !1, s) -
                  0.5
              )),
            l &&
              (a = et.exec(i)) &&
              "px" !== (a[3] || "px") &&
              ((t.style[e] = i), (i = w.css(t, e))),
            Qt(0, i, l)
          );
        },
      };
    }),
    (w.cssHooks.marginLeft = Wt(f.reliableMarginLeft, function (t, e) {
      if (e)
        return (
          (parseFloat(Yt(t, "marginLeft")) ||
            t.getBoundingClientRect().left -
              Rt(t, { marginLeft: 0 }, function () {
                return t.getBoundingClientRect().left;
              })) + "px"
        );
    })),
    w.each({ margin: "", padding: "", border: "Width" }, function (t, e) {
      (w.cssHooks[t + e] = {
        expand: function (i) {
          for (
            var n = 0, a = {}, s = "string" == typeof i ? i.split(" ") : [i];
            n < 4;
            n++
          )
            a[t + it[n] + e] = s[n] || s[n - 2] || s[0];
          return a;
        },
      }),
        "margin" !== t && (w.cssHooks[t + e].set = Qt);
    }),
    w.fn.extend({
      css: function (t, e) {
        return W(
          this,
          function (t, e, i) {
            var n,
              a,
              s = {},
              r = 0;
            if (Array.isArray(e)) {
              for (n = Ht(t), a = e.length; r < a; r++)
                s[e[r]] = w.css(t, e[r], !1, n);
              return s;
            }
            return void 0 !== i ? w.style(t, e, i) : w.css(t, e);
          },
          t,
          e,
          arguments.length > 1
        );
      },
    }),
    (w.Tween = te),
    (te.prototype = {
      constructor: te,
      init: function (t, e, i, n, a, s) {
        (this.elem = t),
          (this.prop = i),
          (this.easing = a || w.easing._default),
          (this.options = e),
          (this.start = this.now = this.cur()),
          (this.end = n),
          (this.unit = s || (w.cssNumber[i] ? "" : "px"));
      },
      cur: function () {
        var t = te.propHooks[this.prop];
        return t && t.get ? t.get(this) : te.propHooks._default.get(this);
      },
      run: function (t) {
        var e,
          i = te.propHooks[this.prop];
        return (
          this.options.duration
            ? (this.pos = e =
                w.easing[this.easing](
                  t,
                  this.options.duration * t,
                  0,
                  1,
                  this.options.duration
                ))
            : (this.pos = e = t),
          (this.now = (this.end - this.start) * e + this.start),
          this.options.step &&
            this.options.step.call(this.elem, this.now, this),
          i && i.set ? i.set(this) : te.propHooks._default.set(this),
          this
        );
      },
    }),
    (te.prototype.init.prototype = te.prototype),
    (te.propHooks = {
      _default: {
        get: function (t) {
          var e;
          return 1 !== t.elem.nodeType ||
            (null != t.elem[t.prop] && null == t.elem.style[t.prop])
            ? t.elem[t.prop]
            : (e = w.css(t.elem, t.prop, "")) && "auto" !== e
            ? e
            : 0;
        },
        set: function (t) {
          w.fx.step[t.prop]
            ? w.fx.step[t.prop](t)
            : 1 !== t.elem.nodeType ||
              (!w.cssHooks[t.prop] && null == t.elem.style[Gt(t.prop)])
            ? (t.elem[t.prop] = t.now)
            : w.style(t.elem, t.prop, t.now + t.unit);
        },
      },
    }),
    (te.propHooks.scrollTop = te.propHooks.scrollLeft =
      {
        set: function (t) {
          t.elem.nodeType && t.elem.parentNode && (t.elem[t.prop] = t.now);
        },
      }),
    (w.easing = {
      linear: function (t) {
        return t;
      },
      swing: function (t) {
        return 0.5 - Math.cos(t * Math.PI) / 2;
      },
      _default: "swing",
    }),
    (w.fx = te.prototype.init),
    (w.fx.step = {});
  var ee,
    ie,
    ne = /^(?:toggle|show|hide)$/,
    ae = /queueHooks$/;
  function se() {
    ie &&
      (!1 === x.hidden && t.requestAnimationFrame
        ? t.requestAnimationFrame(se)
        : t.setTimeout(se, w.fx.interval),
      w.fx.tick());
  }
  function re() {
    return (
      t.setTimeout(function () {
        ee = void 0;
      }),
      (ee = Date.now())
    );
  }
  function oe(t, e) {
    var i,
      n = 0,
      a = { height: t };
    for (e = e ? 1 : 0; n < 4; n += 2 - e)
      a["margin" + (i = it[n])] = a["padding" + i] = t;
    return e && (a.opacity = a.width = t), a;
  }
  function le(t, e, i) {
    for (
      var n,
        a = (ce.tweeners[e] || []).concat(ce.tweeners["*"]),
        s = 0,
        r = a.length;
      s < r;
      s++
    )
      if ((n = a[s].call(i, e, t))) return n;
  }
  function ce(t, e, i) {
    var n,
      a,
      s = 0,
      r = ce.prefilters.length,
      o = w.Deferred().always(function () {
        delete l.elem;
      }),
      l = function () {
        if (a) return !1;
        for (
          var e = ee || re(),
            i = Math.max(0, c.startTime + c.duration - e),
            n = 1 - (i / c.duration || 0),
            s = 0,
            r = c.tweens.length;
          s < r;
          s++
        )
          c.tweens[s].run(n);
        return (
          o.notifyWith(t, [c, n, i]),
          n < 1 && r
            ? i
            : (r || o.notifyWith(t, [c, 1, 0]), o.resolveWith(t, [c]), !1)
        );
      },
      c = o.promise({
        elem: t,
        props: w.extend({}, e),
        opts: w.extend(!0, { specialEasing: {}, easing: w.easing._default }, i),
        originalProperties: e,
        originalOptions: i,
        startTime: ee || re(),
        duration: i.duration,
        tweens: [],
        createTween: function (e, i) {
          var n = w.Tween(
            t,
            c.opts,
            e,
            i,
            c.opts.specialEasing[e] || c.opts.easing
          );
          return c.tweens.push(n), n;
        },
        stop: function (e) {
          var i = 0,
            n = e ? c.tweens.length : 0;
          if (a) return this;
          for (a = !0; i < n; i++) c.tweens[i].run(1);
          return (
            e
              ? (o.notifyWith(t, [c, 1, 0]), o.resolveWith(t, [c, e]))
              : o.rejectWith(t, [c, e]),
            this
          );
        },
      }),
      h = c.props;
    for (
      !(function (t, e) {
        var i, n, a, s, r;
        for (i in t)
          if (
            ((a = e[(n = G(i))]),
            (s = t[i]),
            Array.isArray(s) && ((a = s[1]), (s = t[i] = s[0])),
            i !== n && ((t[n] = s), delete t[i]),
            (r = w.cssHooks[n]) && ("expand" in r))
          )
            for (i in ((s = r.expand(s)), delete t[n], s))
              (i in t) || ((t[i] = s[i]), (e[i] = a));
          else e[n] = a;
      })(h, c.opts.specialEasing);
      s < r;
      s++
    )
      if ((n = ce.prefilters[s].call(c, t, h, c.opts)))
        return (
          p(n.stop) &&
            (w._queueHooks(c.elem, c.opts.queue).stop = n.stop.bind(n)),
          n
        );
    return (
      w.map(h, le, c),
      p(c.opts.start) && c.opts.start.call(t, c),
      c
        .progress(c.opts.progress)
        .done(c.opts.done, c.opts.complete)
        .fail(c.opts.fail)
        .always(c.opts.always),
      w.fx.timer(w.extend(l, { elem: t, anim: c, queue: c.opts.queue })),
      c
    );
  }
  (w.Animation = w.extend(ce, {
    tweeners: {
      "*": [
        function (t, e) {
          var i = this.createTween(t, e);
          return ot(i.elem, t, et.exec(e), i), i;
        },
      ],
    },
    tweener: function (t, e) {
      p(t) ? ((e = t), (t = ["*"])) : (t = t.match(z));
      for (var i, n = 0, a = t.length; n < a; n++)
        (i = t[n]),
          (ce.tweeners[i] = ce.tweeners[i] || []),
          ce.tweeners[i].unshift(e);
    },
    prefilters: [
      function (t, e, i) {
        var n,
          a,
          s,
          r,
          o,
          l,
          c,
          h,
          d = "width" in e || "height" in e,
          u = this,
          f = {},
          p = t.style,
          g = t.nodeType && rt(t),
          x = $.get(t, "fxshow");
        for (n in (i.queue ||
          (null == (r = w._queueHooks(t, "fx")).unqueued &&
            ((r.unqueued = 0),
            (o = r.empty.fire),
            (r.empty.fire = function () {
              r.unqueued || o();
            })),
          r.unqueued++,
          u.always(function () {
            u.always(function () {
              r.unqueued--, w.queue(t, "fx").length || r.empty.fire();
            });
          })),
        e))
          if (((a = e[n]), ne.test(a))) {
            if (
              (delete e[n],
              (s = s || "toggle" === a),
              a === (g ? "hide" : "show"))
            ) {
              if ("show" !== a || !x || void 0 === x[n]) continue;
              g = !0;
            }
            f[n] = (x && x[n]) || w.style(t, n);
          }
        if ((l = !w.isEmptyObject(e)) || !w.isEmptyObject(f))
          for (n in (d &&
            1 === t.nodeType &&
            ((i.overflow = [p.overflow, p.overflowX, p.overflowY]),
            null == (c = x && x.display) && (c = $.get(t, "display")),
            "none" === (h = w.css(t, "display")) &&
              (c
                ? (h = c)
                : (ht([t], !0),
                  (c = t.style.display || c),
                  (h = w.css(t, "display")),
                  ht([t]))),
            ("inline" === h || ("inline-block" === h && null != c)) &&
              "none" === w.css(t, "float") &&
              (l ||
                (u.done(function () {
                  p.display = c;
                }),
                null == c && ((h = p.display), (c = "none" === h ? "" : h))),
              (p.display = "inline-block"))),
          i.overflow &&
            ((p.overflow = "hidden"),
            u.always(function () {
              (p.overflow = i.overflow[0]),
                (p.overflowX = i.overflow[1]),
                (p.overflowY = i.overflow[2]);
            })),
          (l = !1),
          f))
            l ||
              (x
                ? "hidden" in x && (g = x.hidden)
                : (x = $.access(t, "fxshow", { display: c })),
              s && (x.hidden = !g),
              g && ht([t], !0),
              u.done(function () {
                for (n in (g || ht([t]), $.remove(t, "fxshow"), f))
                  w.style(t, n, f[n]);
              })),
              (l = le(g ? x[n] : 0, n, u)),
              n in x ||
                ((x[n] = l.start), g && ((l.end = l.start), (l.start = 0)));
      },
    ],
    prefilter: function (t, e) {
      e ? ce.prefilters.unshift(t) : ce.prefilters.push(t);
    },
  })),
    (w.speed = function (t, e, i) {
      var n =
        t && "object" == typeof t
          ? w.extend({}, t)
          : {
              complete: i || (!i && e) || (p(t) && t),
              duration: t,
              easing: (i && e) || (e && !p(e) && e),
            };
      return (
        w.fx.off
          ? (n.duration = 0)
          : "number" != typeof n.duration &&
            (n.duration in w.fx.speeds
              ? (n.duration = w.fx.speeds[n.duration])
              : (n.duration = w.fx.speeds._default)),
        (null != n.queue && !0 !== n.queue) || (n.queue = "fx"),
        (n.old = n.complete),
        (n.complete = function () {
          p(n.old) && n.old.call(this), n.queue && w.dequeue(this, n.queue);
        }),
        n
      );
    }),
    w.fn.extend({
      fadeTo: function (t, e, i, n) {
        return this.filter(rt)
          .css("opacity", 0)
          .show()
          .end()
          .animate({ opacity: e }, t, i, n);
      },
      animate: function (t, e, i, n) {
        var a = w.isEmptyObject(t),
          s = w.speed(e, i, n),
          r = function () {
            var e = ce(this, w.extend({}, t), s);
            (a || $.get(this, "finish")) && e.stop(!0);
          };
        return (
          (r.finish = r),
          a || !1 === s.queue ? this.each(r) : this.queue(s.queue, r)
        );
      },
      stop: function (t, e, i) {
        var n = function (t) {
          var e = t.stop;
          delete t.stop, e(i);
        };
        return (
          "string" != typeof t && ((i = e), (e = t), (t = void 0)),
          e && this.queue(t || "fx", []),
          this.each(function () {
            var e = !0,
              a = null != t && t + "queueHooks",
              s = w.timers,
              r = $.get(this);
            if (a) r[a] && r[a].stop && n(r[a]);
            else for (a in r) r[a] && r[a].stop && ae.test(a) && n(r[a]);
            for (a = s.length; a--; )
              s[a].elem !== this ||
                (null != t && s[a].queue !== t) ||
                (s[a].anim.stop(i), (e = !1), s.splice(a, 1));
            (!e && i) || w.dequeue(this, t);
          })
        );
      },
      finish: function (t) {
        return (
          !1 !== t && (t = t || "fx"),
          this.each(function () {
            var e,
              i = $.get(this),
              n = i[t + "queue"],
              a = i[t + "queueHooks"],
              s = w.timers,
              r = n ? n.length : 0;
            for (
              i.finish = !0,
                w.queue(this, t, []),
                a && a.stop && a.stop.call(this, !0),
                e = s.length;
              e--;

            )
              s[e].elem === this &&
                s[e].queue === t &&
                (s[e].anim.stop(!0), s.splice(e, 1));
            for (e = 0; e < r; e++)
              n[e] && n[e].finish && n[e].finish.call(this);
            delete i.finish;
          })
        );
      },
    }),
    w.each(["toggle", "show", "hide"], function (t, e) {
      var i = w.fn[e];
      w.fn[e] = function (t, n, a) {
        return null == t || "boolean" == typeof t
          ? i.apply(this, arguments)
          : this.animate(oe(e, !0), t, n, a);
      };
    }),
    w.each(
      {
        slideDown: oe("show"),
        slideUp: oe("hide"),
        slideToggle: oe("toggle"),
        fadeIn: { opacity: "show" },
        fadeOut: { opacity: "hide" },
        fadeToggle: { opacity: "toggle" },
      },
      function (t, e) {
        w.fn[t] = function (t, i, n) {
          return this.animate(e, t, i, n);
        };
      }
    ),
    (w.timers = []),
    (w.fx.tick = function () {
      var t,
        e = 0,
        i = w.timers;
      for (ee = Date.now(); e < i.length; e++)
        (t = i[e])() || i[e] !== t || i.splice(e--, 1);
      i.length || w.fx.stop(), (ee = void 0);
    }),
    (w.fx.timer = function (t) {
      w.timers.push(t), w.fx.start();
    }),
    (w.fx.interval = 13),
    (w.fx.start = function () {
      ie || ((ie = !0), se());
    }),
    (w.fx.stop = function () {
      ie = null;
    }),
    (w.fx.speeds = { slow: 600, fast: 200, _default: 400 }),
    (w.fn.delay = function (e, i) {
      return (
        (e = (w.fx && w.fx.speeds[e]) || e),
        (i = i || "fx"),
        this.queue(i, function (i, n) {
          var a = t.setTimeout(i, e);
          n.stop = function () {
            t.clearTimeout(a);
          };
        })
      );
    }),
    (function () {
      var t = x.createElement("input"),
        e = x.createElement("select").appendChild(x.createElement("option"));
      (t.type = "checkbox"),
        (f.checkOn = "" !== t.value),
        (f.optSelected = e.selected),
        ((t = x.createElement("input")).value = "t"),
        (t.type = "radio"),
        (f.radioValue = "t" === t.value);
    })();
  var he,
    de = w.expr.attrHandle;
  w.fn.extend({
    attr: function (t, e) {
      return W(this, w.attr, t, e, arguments.length > 1);
    },
    removeAttr: function (t) {
      return this.each(function () {
        w.removeAttr(this, t);
      });
    },
  }),
    w.extend({
      attr: function (t, e, i) {
        var n,
          a,
          s = t.nodeType;
        if (3 !== s && 8 !== s && 2 !== s)
          return void 0 === t.getAttribute
            ? w.prop(t, e, i)
            : ((1 === s && w.isXMLDoc(t)) ||
                (a =
                  w.attrHooks[e.toLowerCase()] ||
                  (w.expr.match.bool.test(e) ? he : void 0)),
              void 0 !== i
                ? null === i
                  ? void w.removeAttr(t, e)
                  : a && "set" in a && void 0 !== (n = a.set(t, i, e))
                  ? n
                  : (t.setAttribute(e, i + ""), i)
                : a && "get" in a && null !== (n = a.get(t, e))
                ? n
                : null == (n = w.find.attr(t, e))
                ? void 0
                : n);
      },
      attrHooks: {
        type: {
          set: function (t, e) {
            if (!f.radioValue && "radio" === e && E(t, "input")) {
              var i = t.value;
              return t.setAttribute("type", e), i && (t.value = i), e;
            }
          },
        },
      },
      removeAttr: function (t, e) {
        var i,
          n = 0,
          a = e && e.match(z);
        if (a && 1 === t.nodeType) for (; (i = a[n++]); ) t.removeAttribute(i);
      },
    }),
    (he = {
      set: function (t, e, i) {
        return !1 === e ? w.removeAttr(t, i) : t.setAttribute(i, i), i;
      },
    }),
    w.each(w.expr.match.bool.source.match(/\w+/g), function (t, e) {
      var i = de[e] || w.find.attr;
      de[e] = function (t, e, n) {
        var a,
          s,
          r = e.toLowerCase();
        return (
          n ||
            ((s = de[r]),
            (de[r] = a),
            (a = null != i(t, e, n) ? r : null),
            (de[r] = s)),
          a
        );
      };
    });
  var ue = /^(?:input|select|textarea|button)$/i,
    fe = /^(?:a|area)$/i;
  function pe(t) {
    return (t.match(z) || []).join(" ");
  }
  function ge(t) {
    return (t.getAttribute && t.getAttribute("class")) || "";
  }
  function xe(t) {
    return Array.isArray(t) ? t : ("string" == typeof t && t.match(z)) || [];
  }
  w.fn.extend({
    prop: function (t, e) {
      return W(this, w.prop, t, e, arguments.length > 1);
    },
    removeProp: function (t) {
      return this.each(function () {
        delete this[w.propFix[t] || t];
      });
    },
  }),
    w.extend({
      prop: function (t, e, i) {
        var n,
          a,
          s = t.nodeType;
        if (3 !== s && 8 !== s && 2 !== s)
          return (
            (1 === s && w.isXMLDoc(t)) ||
              ((e = w.propFix[e] || e), (a = w.propHooks[e])),
            void 0 !== i
              ? a && "set" in a && void 0 !== (n = a.set(t, i, e))
                ? n
                : (t[e] = i)
              : a && "get" in a && null !== (n = a.get(t, e))
              ? n
              : t[e]
          );
      },
      propHooks: {
        tabIndex: {
          get: function (t) {
            var e = w.find.attr(t, "tabindex");
            return e
              ? parseInt(e, 10)
              : ue.test(t.nodeName) || (fe.test(t.nodeName) && t.href)
              ? 0
              : -1;
          },
        },
      },
      propFix: { for: "htmlFor", class: "className" },
    }),
    f.optSelected ||
      (w.propHooks.selected = {
        get: function (t) {
          var e = t.parentNode;
          return e && e.parentNode && e.parentNode.selectedIndex, null;
        },
        set: function (t) {
          var e = t.parentNode;
          e && (e.selectedIndex, e.parentNode && e.parentNode.selectedIndex);
        },
      }),
    w.each(
      [
        "tabIndex",
        "readOnly",
        "maxLength",
        "cellSpacing",
        "cellPadding",
        "rowSpan",
        "colSpan",
        "useMap",
        "frameBorder",
        "contentEditable",
      ],
      function () {
        w.propFix[this.toLowerCase()] = this;
      }
    ),
    w.fn.extend({
      addClass: function (t) {
        var e,
          i,
          n,
          a,
          s,
          r,
          o,
          l = 0;
        if (p(t))
          return this.each(function (e) {
            w(this).addClass(t.call(this, e, ge(this)));
          });
        if ((e = xe(t)).length)
          for (; (i = this[l++]); )
            if (((a = ge(i)), (n = 1 === i.nodeType && " " + pe(a) + " "))) {
              for (r = 0; (s = e[r++]); )
                n.indexOf(" " + s + " ") < 0 && (n += s + " ");
              a !== (o = pe(n)) && i.setAttribute("class", o);
            }
        return this;
      },
      removeClass: function (t) {
        var e,
          i,
          n,
          a,
          s,
          r,
          o,
          l = 0;
        if (p(t))
          return this.each(function (e) {
            w(this).removeClass(t.call(this, e, ge(this)));
          });
        if (!arguments.length) return this.attr("class", "");
        if ((e = xe(t)).length)
          for (; (i = this[l++]); )
            if (((a = ge(i)), (n = 1 === i.nodeType && " " + pe(a) + " "))) {
              for (r = 0; (s = e[r++]); )
                for (; n.indexOf(" " + s + " ") > -1; )
                  n = n.replace(" " + s + " ", " ");
              a !== (o = pe(n)) && i.setAttribute("class", o);
            }
        return this;
      },
      toggleClass: function (t, e) {
        var i = typeof t,
          n = "string" === i || Array.isArray(t);
        return "boolean" == typeof e && n
          ? e
            ? this.addClass(t)
            : this.removeClass(t)
          : p(t)
          ? this.each(function (i) {
              w(this).toggleClass(t.call(this, i, ge(this), e), e);
            })
          : this.each(function () {
              var e, a, s, r;
              if (n)
                for (a = 0, s = w(this), r = xe(t); (e = r[a++]); )
                  s.hasClass(e) ? s.removeClass(e) : s.addClass(e);
              else
                (void 0 !== t && "boolean" !== i) ||
                  ((e = ge(this)) && $.set(this, "__className__", e),
                  this.setAttribute &&
                    this.setAttribute(
                      "class",
                      e || !1 === t ? "" : $.get(this, "__className__") || ""
                    ));
            });
      },
      hasClass: function (t) {
        var e,
          i,
          n = 0;
        for (e = " " + t + " "; (i = this[n++]); )
          if (1 === i.nodeType && (" " + pe(ge(i)) + " ").indexOf(e) > -1)
            return !0;
        return !1;
      },
    });
  var me = /\r/g;
  w.fn.extend({
    val: function (t) {
      var e,
        i,
        n,
        a = this[0];
      return arguments.length
        ? ((n = p(t)),
          this.each(function (i) {
            var a;
            1 === this.nodeType &&
              (null == (a = n ? t.call(this, i, w(this).val()) : t)
                ? (a = "")
                : "number" == typeof a
                ? (a += "")
                : Array.isArray(a) &&
                  (a = w.map(a, function (t) {
                    return null == t ? "" : t + "";
                  })),
              ((e =
                w.valHooks[this.type] ||
                w.valHooks[this.nodeName.toLowerCase()]) &&
                "set" in e &&
                void 0 !== e.set(this, a, "value")) ||
                (this.value = a));
          }))
        : a
        ? (e = w.valHooks[a.type] || w.valHooks[a.nodeName.toLowerCase()]) &&
          "get" in e &&
          void 0 !== (i = e.get(a, "value"))
          ? i
          : "string" == typeof (i = a.value)
          ? i.replace(me, "")
          : null == i
          ? ""
          : i
        : void 0;
    },
  }),
    w.extend({
      valHooks: {
        option: {
          get: function (t) {
            var e = w.find.attr(t, "value");
            return null != e ? e : pe(w.text(t));
          },
        },
        select: {
          get: function (t) {
            var e,
              i,
              n,
              a = t.options,
              s = t.selectedIndex,
              r = "select-one" === t.type,
              o = r ? null : [],
              l = r ? s + 1 : a.length;
            for (n = s < 0 ? l : r ? s : 0; n < l; n++)
              if (
                ((i = a[n]).selected || n === s) &&
                !i.disabled &&
                (!i.parentNode.disabled || !E(i.parentNode, "optgroup"))
              ) {
                if (((e = w(i).val()), r)) return e;
                o.push(e);
              }
            return o;
          },
          set: function (t, e) {
            for (
              var i, n, a = t.options, s = w.makeArray(e), r = a.length;
              r--;

            )
              ((n = a[r]).selected =
                w.inArray(w.valHooks.option.get(n), s) > -1) && (i = !0);
            return i || (t.selectedIndex = -1), s;
          },
        },
      },
    }),
    w.each(["radio", "checkbox"], function () {
      (w.valHooks[this] = {
        set: function (t, e) {
          if (Array.isArray(e))
            return (t.checked = w.inArray(w(t).val(), e) > -1);
        },
      }),
        f.checkOn ||
          (w.valHooks[this].get = function (t) {
            return null === t.getAttribute("value") ? "on" : t.value;
          });
    }),
    (f.focusin = "onfocusin" in t);
  var ve = /^(?:focusinfocus|focusoutblur)$/,
    be = function (t) {
      t.stopPropagation();
    };
  w.extend(w.event, {
    trigger: function (e, i, n, a) {
      var s,
        r,
        o,
        l,
        c,
        d,
        u,
        f,
        m = [n || x],
        v = h.call(e, "type") ? e.type : e,
        b = h.call(e, "namespace") ? e.namespace.split(".") : [];
      if (
        ((r = f = o = n = n || x),
        3 !== n.nodeType &&
          8 !== n.nodeType &&
          !ve.test(v + w.event.triggered) &&
          (v.indexOf(".") > -1 &&
            ((b = v.split(".")), (v = b.shift()), b.sort()),
          (c = v.indexOf(":") < 0 && "on" + v),
          ((e = e[w.expando]
            ? e
            : new w.Event(v, "object" == typeof e && e)).isTrigger = a ? 2 : 3),
          (e.namespace = b.join(".")),
          (e.rnamespace = e.namespace
            ? new RegExp("(^|\\.)" + b.join("\\.(?:.*\\.|)") + "(\\.|$)")
            : null),
          (e.result = void 0),
          e.target || (e.target = n),
          (i = null == i ? [e] : w.makeArray(i, [e])),
          (u = w.event.special[v] || {}),
          a || !u.trigger || !1 !== u.trigger.apply(n, i)))
      ) {
        if (!a && !u.noBubble && !g(n)) {
          for (
            l = u.delegateType || v, ve.test(l + v) || (r = r.parentNode);
            r;
            r = r.parentNode
          )
            m.push(r), (o = r);
          o === (n.ownerDocument || x) &&
            m.push(o.defaultView || o.parentWindow || t);
        }
        for (s = 0; (r = m[s++]) && !e.isPropagationStopped(); )
          (f = r),
            (e.type = s > 1 ? l : u.bindType || v),
            (d =
              ($.get(r, "events") || Object.create(null))[e.type] &&
              $.get(r, "handle")) && d.apply(r, i),
            (d = c && r[c]) &&
              d.apply &&
              q(r) &&
              ((e.result = d.apply(r, i)),
              !1 === e.result && e.preventDefault());
        return (
          (e.type = v),
          a ||
            e.isDefaultPrevented() ||
            (u._default && !1 !== u._default.apply(m.pop(), i)) ||
            !q(n) ||
            (c &&
              p(n[v]) &&
              !g(n) &&
              ((o = n[c]) && (n[c] = null),
              (w.event.triggered = v),
              e.isPropagationStopped() && f.addEventListener(v, be),
              n[v](),
              e.isPropagationStopped() && f.removeEventListener(v, be),
              (w.event.triggered = void 0),
              o && (n[c] = o))),
          e.result
        );
      }
    },
    simulate: function (t, e, i) {
      var n = w.extend(new w.Event(), i, { type: t, isSimulated: !0 });
      w.event.trigger(n, null, e);
    },
  }),
    w.fn.extend({
      trigger: function (t, e) {
        return this.each(function () {
          w.event.trigger(t, e, this);
        });
      },
      triggerHandler: function (t, e) {
        var i = this[0];
        if (i) return w.event.trigger(t, e, i, !0);
      },
    }),
    f.focusin ||
      w.each({ focus: "focusin", blur: "focusout" }, function (t, e) {
        var i = function (t) {
          w.event.simulate(e, t.target, w.event.fix(t));
        };
        w.event.special[e] = {
          setup: function () {
            var n = this.ownerDocument || this.document || this,
              a = $.access(n, e);
            a || n.addEventListener(t, i, !0), $.access(n, e, (a || 0) + 1);
          },
          teardown: function () {
            var n = this.ownerDocument || this.document || this,
              a = $.access(n, e) - 1;
            a
              ? $.access(n, e, a)
              : (n.removeEventListener(t, i, !0), $.remove(n, e));
          },
        };
      });
  var ye = t.location,
    we = { guid: Date.now() },
    ke = /\?/;
  w.parseXML = function (e) {
    var i, n;
    if (!e || "string" != typeof e) return null;
    try {
      i = new t.DOMParser().parseFromString(e, "text/xml");
    } catch (t) {}
    return (
      (n = i && i.getElementsByTagName("parsererror")[0]),
      (i && !n) ||
        w.error(
          "Invalid XML: " +
            (n
              ? w
                  .map(n.childNodes, function (t) {
                    return t.textContent;
                  })
                  .join("\n")
              : e)
        ),
      i
    );
  };
  var Ae = /\[\]$/,
    Se = /\r?\n/g,
    Ce = /^(?:submit|button|image|reset|file)$/i,
    Te = /^(?:input|select|textarea|keygen)/i;
  function Ee(t, e, i, n) {
    var a;
    if (Array.isArray(e))
      w.each(e, function (e, a) {
        i || Ae.test(t)
          ? n(t, a)
          : Ee(
              t + "[" + ("object" == typeof a && null != a ? e : "") + "]",
              a,
              i,
              n
            );
      });
    else if (i || "object" !== b(e)) n(t, e);
    else for (a in e) Ee(t + "[" + a + "]", e[a], i, n);
  }
  (w.param = function (t, e) {
    var i,
      n = [],
      a = function (t, e) {
        var i = p(e) ? e() : e;
        n[n.length] =
          encodeURIComponent(t) + "=" + encodeURIComponent(null == i ? "" : i);
      };
    if (null == t) return "";
    if (Array.isArray(t) || (t.jquery && !w.isPlainObject(t)))
      w.each(t, function () {
        a(this.name, this.value);
      });
    else for (i in t) Ee(i, t[i], e, a);
    return n.join("&");
  }),
    w.fn.extend({
      serialize: function () {
        return w.param(this.serializeArray());
      },
      serializeArray: function () {
        return this.map(function () {
          var t = w.prop(this, "elements");
          return t ? w.makeArray(t) : this;
        })
          .filter(function () {
            var t = this.type;
            return (
              this.name &&
              !w(this).is(":disabled") &&
              Te.test(this.nodeName) &&
              !Ce.test(t) &&
              (this.checked || !ft.test(t))
            );
          })
          .map(function (t, e) {
            var i = w(this).val();
            return null == i
              ? null
              : Array.isArray(i)
              ? w.map(i, function (t) {
                  return { name: e.name, value: t.replace(Se, "\r\n") };
                })
              : { name: e.name, value: i.replace(Se, "\r\n") };
          })
          .get();
      },
    });
  var _e = /%20/g,
    Le = /#.*$/,
    Pe = /([?&])_=[^&]*/,
    Me = /^(.*?):[ \t]*([^\r\n]*)$/gm,
    Ie = /^(?:GET|HEAD)$/,
    Oe = /^\/\//,
    De = {},
    ze = {},
    Ne = "*/".concat("*"),
    Xe = x.createElement("a");
  function He(t) {
    return function (e, i) {
      "string" != typeof e && ((i = e), (e = "*"));
      var n,
        a = 0,
        s = e.toLowerCase().match(z) || [];
      if (p(i))
        for (; (n = s[a++]); )
          "+" === n[0]
            ? ((n = n.slice(1) || "*"), (t[n] = t[n] || []).unshift(i))
            : (t[n] = t[n] || []).push(i);
    };
  }
  function Re(t, e, i, n) {
    var a = {},
      s = t === ze;
    function r(o) {
      var l;
      return (
        (a[o] = !0),
        w.each(t[o] || [], function (t, o) {
          var c = o(e, i, n);
          return "string" != typeof c || s || a[c]
            ? s
              ? !(l = c)
              : void 0
            : (e.dataTypes.unshift(c), r(c), !1);
        }),
        l
      );
    }
    return r(e.dataTypes[0]) || (!a["*"] && r("*"));
  }
  function Fe(t, e) {
    var i,
      n,
      a = w.ajaxSettings.flatOptions || {};
    for (i in e) void 0 !== e[i] && ((a[i] ? t : n || (n = {}))[i] = e[i]);
    return n && w.extend(!0, t, n), t;
  }
  (Xe.href = ye.href),
    w.extend({
      active: 0,
      lastModified: {},
      etag: {},
      ajaxSettings: {
        url: ye.href,
        type: "GET",
        isLocal:
          /^(?:about|app|app-storage|.+-extension|file|res|widget):$/.test(
            ye.protocol
          ),
        global: !0,
        processData: !0,
        async: !0,
        contentType: "application/x-www-form-urlencoded; charset=UTF-8",
        accepts: {
          "*": Ne,
          text: "text/plain",
          html: "text/html",
          xml: "application/xml, text/xml",
          json: "application/json, text/javascript",
        },
        contents: { xml: /\bxml\b/, html: /\bhtml/, json: /\bjson\b/ },
        responseFields: {
          xml: "responseXML",
          text: "responseText",
          json: "responseJSON",
        },
        converters: {
          "* text": String,
          "text html": !0,
          "text json": JSON.parse,
          "text xml": w.parseXML,
        },
        flatOptions: { url: !0, context: !0 },
      },
      ajaxSetup: function (t, e) {
        return e ? Fe(Fe(t, w.ajaxSettings), e) : Fe(w.ajaxSettings, t);
      },
      ajaxPrefilter: He(De),
      ajaxTransport: He(ze),
      ajax: function (e, i) {
        "object" == typeof e && ((i = e), (e = void 0)), (i = i || {});
        var n,
          a,
          s,
          r,
          o,
          l,
          c,
          h,
          d,
          u,
          f = w.ajaxSetup({}, i),
          p = f.context || f,
          g = f.context && (p.nodeType || p.jquery) ? w(p) : w.event,
          m = w.Deferred(),
          v = w.Callbacks("once memory"),
          b = f.statusCode || {},
          y = {},
          k = {},
          A = "canceled",
          S = {
            readyState: 0,
            getResponseHeader: function (t) {
              var e;
              if (c) {
                if (!r)
                  for (r = {}; (e = Me.exec(s)); )
                    r[e[1].toLowerCase() + " "] = (
                      r[e[1].toLowerCase() + " "] || []
                    ).concat(e[2]);
                e = r[t.toLowerCase() + " "];
              }
              return null == e ? null : e.join(", ");
            },
            getAllResponseHeaders: function () {
              return c ? s : null;
            },
            setRequestHeader: function (t, e) {
              return (
                null == c &&
                  ((t = k[t.toLowerCase()] = k[t.toLowerCase()] || t),
                  (y[t] = e)),
                this
              );
            },
            overrideMimeType: function (t) {
              return null == c && (f.mimeType = t), this;
            },
            statusCode: function (t) {
              var e;
              if (t)
                if (c) S.always(t[S.status]);
                else for (e in t) b[e] = [b[e], t[e]];
              return this;
            },
            abort: function (t) {
              var e = t || A;
              return n && n.abort(e), C(0, e), this;
            },
          };
        if (
          (m.promise(S),
          (f.url = ((e || f.url || ye.href) + "").replace(
            Oe,
            ye.protocol + "//"
          )),
          (f.type = i.method || i.type || f.method || f.type),
          (f.dataTypes = (f.dataType || "*").toLowerCase().match(z) || [""]),
          null == f.crossDomain)
        ) {
          l = x.createElement("a");
          try {
            (l.href = f.url),
              (l.href = l.href),
              (f.crossDomain =
                Xe.protocol + "//" + Xe.host != l.protocol + "//" + l.host);
          } catch (t) {
            f.crossDomain = !0;
          }
        }
        if (
          (f.data &&
            f.processData &&
            "string" != typeof f.data &&
            (f.data = w.param(f.data, f.traditional)),
          Re(De, f, i, S),
          c)
        )
          return S;
        for (d in ((h = w.event && f.global) &&
          0 == w.active++ &&
          w.event.trigger("ajaxStart"),
        (f.type = f.type.toUpperCase()),
        (f.hasContent = !Ie.test(f.type)),
        (a = f.url.replace(Le, "")),
        f.hasContent
          ? f.data &&
            f.processData &&
            0 ===
              (f.contentType || "").indexOf(
                "application/x-www-form-urlencoded"
              ) &&
            (f.data = f.data.replace(_e, "+"))
          : ((u = f.url.slice(a.length)),
            f.data &&
              (f.processData || "string" == typeof f.data) &&
              ((a += (ke.test(a) ? "&" : "?") + f.data), delete f.data),
            !1 === f.cache &&
              ((a = a.replace(Pe, "$1")),
              (u = (ke.test(a) ? "&" : "?") + "_=" + we.guid++ + u)),
            (f.url = a + u)),
        f.ifModified &&
          (w.lastModified[a] &&
            S.setRequestHeader("If-Modified-Since", w.lastModified[a]),
          w.etag[a] && S.setRequestHeader("If-None-Match", w.etag[a])),
        ((f.data && f.hasContent && !1 !== f.contentType) || i.contentType) &&
          S.setRequestHeader("Content-Type", f.contentType),
        S.setRequestHeader(
          "Accept",
          f.dataTypes[0] && f.accepts[f.dataTypes[0]]
            ? f.accepts[f.dataTypes[0]] +
                ("*" !== f.dataTypes[0] ? ", " + Ne + "; q=0.01" : "")
            : f.accepts["*"]
        ),
        f.headers))
          S.setRequestHeader(d, f.headers[d]);
        if (f.beforeSend && (!1 === f.beforeSend.call(p, S, f) || c))
          return S.abort();
        if (
          ((A = "abort"),
          v.add(f.complete),
          S.done(f.success),
          S.fail(f.error),
          (n = Re(ze, f, i, S)))
        ) {
          if (((S.readyState = 1), h && g.trigger("ajaxSend", [S, f]), c))
            return S;
          f.async &&
            f.timeout > 0 &&
            (o = t.setTimeout(function () {
              S.abort("timeout");
            }, f.timeout));
          try {
            (c = !1), n.send(y, C);
          } catch (t) {
            if (c) throw t;
            C(-1, t);
          }
        } else C(-1, "No Transport");
        function C(e, i, r, l) {
          var d,
            u,
            x,
            y,
            k,
            A = i;
          c ||
            ((c = !0),
            o && t.clearTimeout(o),
            (n = void 0),
            (s = l || ""),
            (S.readyState = e > 0 ? 4 : 0),
            (d = (e >= 200 && e < 300) || 304 === e),
            r &&
              (y = (function (t, e, i) {
                for (
                  var n, a, s, r, o = t.contents, l = t.dataTypes;
                  "*" === l[0];

                )
                  l.shift(),
                    void 0 === n &&
                      (n = t.mimeType || e.getResponseHeader("Content-Type"));
                if (n)
                  for (a in o)
                    if (o[a] && o[a].test(n)) {
                      l.unshift(a);
                      break;
                    }
                if (l[0] in i) s = l[0];
                else {
                  for (a in i) {
                    if (!l[0] || t.converters[a + " " + l[0]]) {
                      s = a;
                      break;
                    }
                    r || (r = a);
                  }
                  s = s || r;
                }
                if (s) return s !== l[0] && l.unshift(s), i[s];
              })(f, S, r)),
            !d &&
              w.inArray("script", f.dataTypes) > -1 &&
              w.inArray("json", f.dataTypes) < 0 &&
              (f.converters["text script"] = function () {}),
            (y = (function (t, e, i, n) {
              var a,
                s,
                r,
                o,
                l,
                c = {},
                h = t.dataTypes.slice();
              if (h[1])
                for (r in t.converters) c[r.toLowerCase()] = t.converters[r];
              for (s = h.shift(); s; )
                if (
                  (t.responseFields[s] && (i[t.responseFields[s]] = e),
                  !l && n && t.dataFilter && (e = t.dataFilter(e, t.dataType)),
                  (l = s),
                  (s = h.shift()))
                )
                  if ("*" === s) s = l;
                  else if ("*" !== l && l !== s) {
                    if (!(r = c[l + " " + s] || c["* " + s]))
                      for (a in c)
                        if (
                          (o = a.split(" "))[1] === s &&
                          (r = c[l + " " + o[0]] || c["* " + o[0]])
                        ) {
                          !0 === r
                            ? (r = c[a])
                            : !0 !== c[a] && ((s = o[0]), h.unshift(o[1]));
                          break;
                        }
                    if (!0 !== r)
                      if (r && t.throws) e = r(e);
                      else
                        try {
                          e = r(e);
                        } catch (t) {
                          return {
                            state: "parsererror",
                            error: r
                              ? t
                              : "No conversion from " + l + " to " + s,
                          };
                        }
                  }
              return { state: "success", data: e };
            })(f, y, S, d)),
            d
              ? (f.ifModified &&
                  ((k = S.getResponseHeader("Last-Modified")) &&
                    (w.lastModified[a] = k),
                  (k = S.getResponseHeader("etag")) && (w.etag[a] = k)),
                204 === e || "HEAD" === f.type
                  ? (A = "nocontent")
                  : 304 === e
                  ? (A = "notmodified")
                  : ((A = y.state), (u = y.data), (d = !(x = y.error))))
              : ((x = A), (!e && A) || ((A = "error"), e < 0 && (e = 0))),
            (S.status = e),
            (S.statusText = (i || A) + ""),
            d ? m.resolveWith(p, [u, A, S]) : m.rejectWith(p, [S, A, x]),
            S.statusCode(b),
            (b = void 0),
            h && g.trigger(d ? "ajaxSuccess" : "ajaxError", [S, f, d ? u : x]),
            v.fireWith(p, [S, A]),
            h &&
              (g.trigger("ajaxComplete", [S, f]),
              --w.active || w.event.trigger("ajaxStop")));
        }
        return S;
      },
      getJSON: function (t, e, i) {
        return w.get(t, e, i, "json");
      },
      getScript: function (t, e) {
        return w.get(t, void 0, e, "script");
      },
    }),
    w.each(["get", "post"], function (t, e) {
      w[e] = function (t, i, n, a) {
        return (
          p(i) && ((a = a || n), (n = i), (i = void 0)),
          w.ajax(
            w.extend(
              { url: t, type: e, dataType: a, data: i, success: n },
              w.isPlainObject(t) && t
            )
          )
        );
      };
    }),
    w.ajaxPrefilter(function (t) {
      var e;
      for (e in t.headers)
        "content-type" === e.toLowerCase() &&
          (t.contentType = t.headers[e] || "");
    }),
    (w._evalUrl = function (t, e, i) {
      return w.ajax({
        url: t,
        type: "GET",
        dataType: "script",
        cache: !0,
        async: !1,
        global: !1,
        converters: { "text script": function () {} },
        dataFilter: function (t) {
          w.globalEval(t, e, i);
        },
      });
    }),
    w.fn.extend({
      wrapAll: function (t) {
        var e;
        return (
          this[0] &&
            (p(t) && (t = t.call(this[0])),
            (e = w(t, this[0].ownerDocument).eq(0).clone(!0)),
            this[0].parentNode && e.insertBefore(this[0]),
            e
              .map(function () {
                for (var t = this; t.firstElementChild; )
                  t = t.firstElementChild;
                return t;
              })
              .append(this)),
          this
        );
      },
      wrapInner: function (t) {
        return p(t)
          ? this.each(function (e) {
              w(this).wrapInner(t.call(this, e));
            })
          : this.each(function () {
              var e = w(this),
                i = e.contents();
              i.length ? i.wrapAll(t) : e.append(t);
            });
      },
      wrap: function (t) {
        var e = p(t);
        return this.each(function (i) {
          w(this).wrapAll(e ? t.call(this, i) : t);
        });
      },
      unwrap: function (t) {
        return (
          this.parent(t)
            .not("body")
            .each(function () {
              w(this).replaceWith(this.childNodes);
            }),
          this
        );
      },
    }),
    (w.expr.pseudos.hidden = function (t) {
      return !w.expr.pseudos.visible(t);
    }),
    (w.expr.pseudos.visible = function (t) {
      return !!(t.offsetWidth || t.offsetHeight || t.getClientRects().length);
    }),
    (w.ajaxSettings.xhr = function () {
      try {
        return new t.XMLHttpRequest();
      } catch (t) {}
    });
  var Ye = { 0: 200, 1223: 204 },
    We = w.ajaxSettings.xhr();
  (f.cors = !!We && "withCredentials" in We),
    (f.ajax = We = !!We),
    w.ajaxTransport(function (e) {
      var i, n;
      if (f.cors || (We && !e.crossDomain))
        return {
          send: function (a, s) {
            var r,
              o = e.xhr();
            if (
              (o.open(e.type, e.url, e.async, e.username, e.password),
              e.xhrFields)
            )
              for (r in e.xhrFields) o[r] = e.xhrFields[r];
            for (r in (e.mimeType &&
              o.overrideMimeType &&
              o.overrideMimeType(e.mimeType),
            e.crossDomain ||
              a["X-Requested-With"] ||
              (a["X-Requested-With"] = "XMLHttpRequest"),
            a))
              o.setRequestHeader(r, a[r]);
            (i = function (t) {
              return function () {
                i &&
                  ((i =
                    n =
                    o.onload =
                    o.onerror =
                    o.onabort =
                    o.ontimeout =
                    o.onreadystatechange =
                      null),
                  "abort" === t
                    ? o.abort()
                    : "error" === t
                    ? "number" != typeof o.status
                      ? s(0, "error")
                      : s(o.status, o.statusText)
                    : s(
                        Ye[o.status] || o.status,
                        o.statusText,
                        "text" !== (o.responseType || "text") ||
                          "string" != typeof o.responseText
                          ? { binary: o.response }
                          : { text: o.responseText },
                        o.getAllResponseHeaders()
                      ));
              };
            }),
              (o.onload = i()),
              (n = o.onerror = o.ontimeout = i("error")),
              void 0 !== o.onabort
                ? (o.onabort = n)
                : (o.onreadystatechange = function () {
                    4 === o.readyState &&
                      t.setTimeout(function () {
                        i && n();
                      });
                  }),
              (i = i("abort"));
            try {
              o.send((e.hasContent && e.data) || null);
            } catch (t) {
              if (i) throw t;
            }
          },
          abort: function () {
            i && i();
          },
        };
    }),
    w.ajaxPrefilter(function (t) {
      t.crossDomain && (t.contents.script = !1);
    }),
    w.ajaxSetup({
      accepts: {
        script:
          "text/javascript, application/javascript, application/ecmascript, application/x-ecmascript",
      },
      contents: { script: /\b(?:java|ecma)script\b/ },
      converters: {
        "text script": function (t) {
          return w.globalEval(t), t;
        },
      },
    }),
    w.ajaxPrefilter("script", function (t) {
      void 0 === t.cache && (t.cache = !1), t.crossDomain && (t.type = "GET");
    }),
    w.ajaxTransport("script", function (t) {
      var e, i;
      if (t.crossDomain || t.scriptAttrs)
        return {
          send: function (n, a) {
            (e = w("<script>")
              .attr(t.scriptAttrs || {})
              .prop({ charset: t.scriptCharset, src: t.url })
              .on(
                "load error",
                (i = function (t) {
                  e.remove(),
                    (i = null),
                    t && a("error" === t.type ? 404 : 200, t.type);
                })
              )),
              x.head.appendChild(e[0]);
          },
          abort: function () {
            i && i();
          },
        };
    });
  var Be,
    je = [],
    Ve = /(=)\?(?=&|$)|\?\?/;
  w.ajaxSetup({
    jsonp: "callback",
    jsonpCallback: function () {
      var t = je.pop() || w.expando + "_" + we.guid++;
      return (this[t] = !0), t;
    },
  }),
    w.ajaxPrefilter("json jsonp", function (e, i, n) {
      var a,
        s,
        r,
        o =
          !1 !== e.jsonp &&
          (Ve.test(e.url)
            ? "url"
            : "string" == typeof e.data &&
              0 ===
                (e.contentType || "").indexOf(
                  "application/x-www-form-urlencoded"
                ) &&
              Ve.test(e.data) &&
              "data");
      if (o || "jsonp" === e.dataTypes[0])
        return (
          (a = e.jsonpCallback =
            p(e.jsonpCallback) ? e.jsonpCallback() : e.jsonpCallback),
          o
            ? (e[o] = e[o].replace(Ve, "$1" + a))
            : !1 !== e.jsonp &&
              (e.url += (ke.test(e.url) ? "&" : "?") + e.jsonp + "=" + a),
          (e.converters["script json"] = function () {
            return r || w.error(a + " was not called"), r[0];
          }),
          (e.dataTypes[0] = "json"),
          (s = t[a]),
          (t[a] = function () {
            r = arguments;
          }),
          n.always(function () {
            void 0 === s ? w(t).removeProp(a) : (t[a] = s),
              e[a] && ((e.jsonpCallback = i.jsonpCallback), je.push(a)),
              r && p(s) && s(r[0]),
              (r = s = void 0);
          }),
          "script"
        );
    }),
    (f.createHTMLDocument =
      (((Be = x.implementation.createHTMLDocument("").body).innerHTML =
        "<form></form><form></form>"),
      2 === Be.childNodes.length)),
    (w.parseHTML = function (t, e, i) {
      return "string" != typeof t
        ? []
        : ("boolean" == typeof e && ((i = e), (e = !1)),
          e ||
            (f.createHTMLDocument
              ? (((n = (e =
                  x.implementation.createHTMLDocument("")).createElement(
                  "base"
                )).href = x.location.href),
                e.head.appendChild(n))
              : (e = x)),
          (s = !i && []),
          (a = _.exec(t))
            ? [e.createElement(a[1])]
            : ((a = yt([t], e, s)),
              s && s.length && w(s).remove(),
              w.merge([], a.childNodes)));
      var n, a, s;
    }),
    (w.fn.load = function (t, e, i) {
      var n,
        a,
        s,
        r = this,
        o = t.indexOf(" ");
      return (
        o > -1 && ((n = pe(t.slice(o))), (t = t.slice(0, o))),
        p(e)
          ? ((i = e), (e = void 0))
          : e && "object" == typeof e && (a = "POST"),
        r.length > 0 &&
          w
            .ajax({ url: t, type: a || "GET", dataType: "html", data: e })
            .done(function (t) {
              (s = arguments),
                r.html(n ? w("<div>").append(w.parseHTML(t)).find(n) : t);
            })
            .always(
              i &&
                function (t, e) {
                  r.each(function () {
                    i.apply(this, s || [t.responseText, e, t]);
                  });
                }
            ),
        this
      );
    }),
    (w.expr.pseudos.animated = function (t) {
      return w.grep(w.timers, function (e) {
        return t === e.elem;
      }).length;
    }),
    (w.offset = {
      setOffset: function (t, e, i) {
        var n,
          a,
          s,
          r,
          o,
          l,
          c = w.css(t, "position"),
          h = w(t),
          d = {};
        "static" === c && (t.style.position = "relative"),
          (o = h.offset()),
          (s = w.css(t, "top")),
          (l = w.css(t, "left")),
          ("absolute" === c || "fixed" === c) && (s + l).indexOf("auto") > -1
            ? ((r = (n = h.position()).top), (a = n.left))
            : ((r = parseFloat(s) || 0), (a = parseFloat(l) || 0)),
          p(e) && (e = e.call(t, i, w.extend({}, o))),
          null != e.top && (d.top = e.top - o.top + r),
          null != e.left && (d.left = e.left - o.left + a),
          "using" in e ? e.using.call(t, d) : h.css(d);
      },
    }),
    w.fn.extend({
      offset: function (t) {
        if (arguments.length)
          return void 0 === t
            ? this
            : this.each(function (e) {
                w.offset.setOffset(this, t, e);
              });
        var e,
          i,
          n = this[0];
        return n
          ? n.getClientRects().length
            ? ((e = n.getBoundingClientRect()),
              (i = n.ownerDocument.defaultView),
              { top: e.top + i.pageYOffset, left: e.left + i.pageXOffset })
            : { top: 0, left: 0 }
          : void 0;
      },
      position: function () {
        if (this[0]) {
          var t,
            e,
            i,
            n = this[0],
            a = { top: 0, left: 0 };
          if ("fixed" === w.css(n, "position")) e = n.getBoundingClientRect();
          else {
            for (
              e = this.offset(),
                i = n.ownerDocument,
                t = n.offsetParent || i.documentElement;
              t &&
              (t === i.body || t === i.documentElement) &&
              "static" === w.css(t, "position");

            )
              t = t.parentNode;
            t &&
              t !== n &&
              1 === t.nodeType &&
              (((a = w(t).offset()).top += w.css(t, "borderTopWidth", !0)),
              (a.left += w.css(t, "borderLeftWidth", !0)));
          }
          return {
            top: e.top - a.top - w.css(n, "marginTop", !0),
            left: e.left - a.left - w.css(n, "marginLeft", !0),
          };
        }
      },
      offsetParent: function () {
        return this.map(function () {
          for (
            var t = this.offsetParent;
            t && "static" === w.css(t, "position");

          )
            t = t.offsetParent;
          return t || nt;
        });
      },
    }),
    w.each(
      { scrollLeft: "pageXOffset", scrollTop: "pageYOffset" },
      function (t, e) {
        var i = "pageYOffset" === e;
        w.fn[t] = function (n) {
          return W(
            this,
            function (t, n, a) {
              var s;
              if (
                (g(t) ? (s = t) : 9 === t.nodeType && (s = t.defaultView),
                void 0 === a)
              )
                return s ? s[e] : t[n];
              s
                ? s.scrollTo(i ? s.pageXOffset : a, i ? a : s.pageYOffset)
                : (t[n] = a);
            },
            t,
            n,
            arguments.length
          );
        };
      }
    ),
    w.each(["top", "left"], function (t, e) {
      w.cssHooks[e] = Wt(f.pixelPosition, function (t, i) {
        if (i)
          return (i = Yt(t, e)), Xt.test(i) ? w(t).position()[e] + "px" : i;
      });
    }),
    w.each({ Height: "height", Width: "width" }, function (t, e) {
      w.each(
        { padding: "inner" + t, content: e, "": "outer" + t },
        function (i, n) {
          w.fn[n] = function (a, s) {
            var r = arguments.length && (i || "boolean" != typeof a),
              o = i || (!0 === a || !0 === s ? "margin" : "border");
            return W(
              this,
              function (e, i, a) {
                var s;
                return g(e)
                  ? 0 === n.indexOf("outer")
                    ? e["inner" + t]
                    : e.document.documentElement["client" + t]
                  : 9 === e.nodeType
                  ? ((s = e.documentElement),
                    Math.max(
                      e.body["scroll" + t],
                      s["scroll" + t],
                      e.body["offset" + t],
                      s["offset" + t],
                      s["client" + t]
                    ))
                  : void 0 === a
                  ? w.css(e, i, o)
                  : w.style(e, i, a, o);
              },
              e,
              r ? a : void 0,
              r
            );
          };
        }
      );
    }),
    w.each(
      [
        "ajaxStart",
        "ajaxStop",
        "ajaxComplete",
        "ajaxError",
        "ajaxSuccess",
        "ajaxSend",
      ],
      function (t, e) {
        w.fn[e] = function (t) {
          return this.on(e, t);
        };
      }
    ),
    w.fn.extend({
      bind: function (t, e, i) {
        return this.on(t, null, e, i);
      },
      unbind: function (t, e) {
        return this.off(t, null, e);
      },
      delegate: function (t, e, i, n) {
        return this.on(e, t, i, n);
      },
      undelegate: function (t, e, i) {
        return 1 === arguments.length
          ? this.off(t, "**")
          : this.off(e, t || "**", i);
      },
      hover: function (t, e) {
        return this.mouseenter(t).mouseleave(e || t);
      },
    }),
    w.each(
      "blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(
        " "
      ),
      function (t, e) {
        w.fn[e] = function (t, i) {
          return arguments.length > 0
            ? this.on(e, null, t, i)
            : this.trigger(e);
        };
      }
    );
  var Ge = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;
  (w.proxy = function (t, e) {
    var i, n, s;
    if (("string" == typeof e && ((i = t[e]), (e = t), (t = i)), p(t)))
      return (
        (n = a.call(arguments, 2)),
        (s = function () {
          return t.apply(e || this, n.concat(a.call(arguments)));
        }),
        (s.guid = t.guid = t.guid || w.guid++),
        s
      );
  }),
    (w.holdReady = function (t) {
      t ? w.readyWait++ : w.ready(!0);
    }),
    (w.isArray = Array.isArray),
    (w.parseJSON = JSON.parse),
    (w.nodeName = E),
    (w.isFunction = p),
    (w.isWindow = g),
    (w.camelCase = G),
    (w.type = b),
    (w.now = Date.now),
    (w.isNumeric = function (t) {
      var e = w.type(t);
      return ("number" === e || "string" === e) && !isNaN(t - parseFloat(t));
    }),
    (w.trim = function (t) {
      return null == t ? "" : (t + "").replace(Ge, "");
    }),
    "function" == typeof define &&
      define.amd &&
      define("jquery", [], function () {
        return w;
      });
  var qe = t.jQuery,
    Ue = t.$;
  return (
    (w.noConflict = function (e) {
      return t.$ === w && (t.$ = Ue), e && t.jQuery === w && (t.jQuery = qe), w;
    }),
    void 0 === e && (t.jQuery = t.$ = w),
    w
  );
}),
  (function (t, e) {
    "object" == typeof exports && "undefined" != typeof module
      ? e(exports)
      : "function" == typeof define && define.amd
      ? define(["exports"], e)
      : e(
          ((t =
            "undefined" != typeof globalThis ? globalThis : t || self).Popper =
            {})
        );
  })(this, function (t) {
    function e(t, e) {
      return {
        width: (t = t.getBoundingClientRect()).width / 1,
        height: t.height / 1,
        top: t.top / 1,
        right: t.right / 1,
        bottom: t.bottom / 1,
        left: t.left / 1,
        x: t.left / 1,
        y: t.top / 1,
      };
    }
    function i(t) {
      return null == t
        ? window
        : "[object Window]" !== t.toString()
        ? ((t = t.ownerDocument) && t.defaultView) || window
        : t;
    }
    function n(t) {
      return { scrollLeft: (t = i(t)).pageXOffset, scrollTop: t.pageYOffset };
    }
    function a(t) {
      return t instanceof i(t).Element || t instanceof Element;
    }
    function s(t) {
      return t instanceof i(t).HTMLElement || t instanceof HTMLElement;
    }
    function r(t) {
      return (
        "undefined" != typeof ShadowRoot &&
        (t instanceof i(t).ShadowRoot || t instanceof ShadowRoot)
      );
    }
    function o(t) {
      return t ? (t.nodeName || "").toLowerCase() : null;
    }
    function l(t) {
      return (
        (a(t) ? t.ownerDocument : t.document) || window.document
      ).documentElement;
    }
    function c(t) {
      return e(l(t)).left + n(t).scrollLeft;
    }
    function h(t) {
      return i(t).getComputedStyle(t);
    }
    function d(t) {
      return (
        (t = h(t)),
        /auto|scroll|overlay|hidden/.test(
          t.overflow + t.overflowY + t.overflowX
        )
      );
    }
    function u(t, a, r) {
      void 0 === r && (r = !1);
      var h = s(a);
      s(a) && a.getBoundingClientRect();
      var u = l(a);
      t = e(t);
      var f = { scrollLeft: 0, scrollTop: 0 },
        p = { x: 0, y: 0 };
      return (
        (h || (!h && !r)) &&
          (("body" !== o(a) || d(u)) &&
            (f =
              a !== i(a) && s(a)
                ? { scrollLeft: a.scrollLeft, scrollTop: a.scrollTop }
                : n(a)),
          s(a)
            ? (((p = e(a)).x += a.clientLeft), (p.y += a.clientTop))
            : u && (p.x = c(u))),
        {
          x: t.left + f.scrollLeft - p.x,
          y: t.top + f.scrollTop - p.y,
          width: t.width,
          height: t.height,
        }
      );
    }
    function f(t) {
      var i = e(t),
        n = t.offsetWidth,
        a = t.offsetHeight;
      return (
        1 >= Math.abs(i.width - n) && (n = i.width),
        1 >= Math.abs(i.height - a) && (a = i.height),
        { x: t.offsetLeft, y: t.offsetTop, width: n, height: a }
      );
    }
    function p(t) {
      return "html" === o(t)
        ? t
        : t.assignedSlot || t.parentNode || (r(t) ? t.host : null) || l(t);
    }
    function g(t) {
      return 0 <= ["html", "body", "#document"].indexOf(o(t))
        ? t.ownerDocument.body
        : s(t) && d(t)
        ? t
        : g(p(t));
    }
    function x(t, e) {
      var n;
      void 0 === e && (e = []);
      var a = g(t);
      return (
        (t = a === (null == (n = t.ownerDocument) ? void 0 : n.body)),
        (n = i(a)),
        (a = t ? [n].concat(n.visualViewport || [], d(a) ? a : []) : a),
        (e = e.concat(a)),
        t ? e : e.concat(x(p(a)))
      );
    }
    function m(t) {
      return s(t) && "fixed" !== h(t).position ? t.offsetParent : null;
    }
    function v(t) {
      for (
        var e = i(t), n = m(t);
        n &&
        0 <= ["table", "td", "th"].indexOf(o(n)) &&
        "static" === h(n).position;

      )
        n = m(n);
      if (
        n &&
        ("html" === o(n) || ("body" === o(n) && "static" === h(n).position))
      )
        return e;
      if (!n)
        t: {
          if (
            ((n = -1 !== navigator.userAgent.toLowerCase().indexOf("firefox")),
            -1 === navigator.userAgent.indexOf("Trident") ||
              !s(t) ||
              "fixed" !== h(t).position)
          )
            for (t = p(t); s(t) && 0 > ["html", "body"].indexOf(o(t)); ) {
              var a = h(t);
              if (
                "none" !== a.transform ||
                "none" !== a.perspective ||
                "paint" === a.contain ||
                -1 !== ["transform", "perspective"].indexOf(a.willChange) ||
                (n && "filter" === a.willChange) ||
                (n && a.filter && "none" !== a.filter)
              ) {
                n = t;
                break t;
              }
              t = t.parentNode;
            }
          n = null;
        }
      return n || e;
    }
    function b(t) {
      function e(t) {
        n.add(t.name),
          []
            .concat(t.requires || [], t.requiresIfExists || [])
            .forEach(function (t) {
              n.has(t) || ((t = i.get(t)) && e(t));
            }),
          a.push(t);
      }
      var i = new Map(),
        n = new Set(),
        a = [];
      return (
        t.forEach(function (t) {
          i.set(t.name, t);
        }),
        t.forEach(function (t) {
          n.has(t.name) || e(t);
        }),
        a
      );
    }
    function y(t) {
      var e;
      return function () {
        return (
          e ||
            (e = new Promise(function (i) {
              Promise.resolve().then(function () {
                (e = void 0), i(t());
              });
            })),
          e
        );
      };
    }
    function w(t) {
      return t.split("-")[0];
    }
    function k(t, e) {
      var i = e.getRootNode && e.getRootNode();
      if (t.contains(e)) return !0;
      if (i && r(i))
        do {
          if (e && t.isSameNode(e)) return !0;
          e = e.parentNode || e.host;
        } while (e);
      return !1;
    }
    function A(t) {
      return Object.assign({}, t, {
        left: t.x,
        top: t.y,
        right: t.x + t.width,
        bottom: t.y + t.height,
      });
    }
    function S(t, a) {
      if ("viewport" === a) {
        a = i(t);
        var r = l(t);
        a = a.visualViewport;
        var o = r.clientWidth;
        r = r.clientHeight;
        var d = 0,
          u = 0;
        a &&
          ((o = a.width),
          (r = a.height),
          /^((?!chrome|android).)*safari/i.test(navigator.userAgent) ||
            ((d = a.offsetLeft), (u = a.offsetTop))),
          (t = A((t = { width: o, height: r, x: d + c(t), y: u })));
      } else s(a) ? (((t = e(a)).top += a.clientTop), (t.left += a.clientLeft), (t.bottom = t.top + a.clientHeight), (t.right = t.left + a.clientWidth), (t.width = a.clientWidth), (t.height = a.clientHeight), (t.x = t.left), (t.y = t.top)) : ((u = l(t)), (t = l(u)), (o = n(u)), (a = null == (r = u.ownerDocument) ? void 0 : r.body), (r = B(t.scrollWidth, t.clientWidth, a ? a.scrollWidth : 0, a ? a.clientWidth : 0)), (d = B(t.scrollHeight, t.clientHeight, a ? a.scrollHeight : 0, a ? a.clientHeight : 0)), (u = -o.scrollLeft + c(u)), (o = -o.scrollTop), "rtl" === h(a || t).direction && (u += B(t.clientWidth, a ? a.clientWidth : 0) - r), (t = A({ width: r, height: d, x: u, y: o })));
      return t;
    }
    function C(t, e, i) {
      return (
        (e =
          "clippingParents" === e
            ? (function (t) {
                var e = x(p(t)),
                  i =
                    0 <= ["absolute", "fixed"].indexOf(h(t).position) && s(t)
                      ? v(t)
                      : t;
                return a(i)
                  ? e.filter(function (t) {
                      return a(t) && k(t, i) && "body" !== o(t);
                    })
                  : [];
              })(t)
            : [].concat(e)),
        ((i = (i = [].concat(e, [i])).reduce(function (e, i) {
          return (
            (i = S(t, i)),
            (e.top = B(i.top, e.top)),
            (e.right = j(i.right, e.right)),
            (e.bottom = j(i.bottom, e.bottom)),
            (e.left = B(i.left, e.left)),
            e
          );
        }, S(t, i[0]))).width = i.right - i.left),
        (i.height = i.bottom - i.top),
        (i.x = i.left),
        (i.y = i.top),
        i
      );
    }
    function T(t) {
      return t.split("-")[1];
    }
    function E(t) {
      return 0 <= ["top", "bottom"].indexOf(t) ? "x" : "y";
    }
    function _(t) {
      var e = t.reference,
        i = t.element,
        n = (t = t.placement) ? w(t) : null;
      t = t ? T(t) : null;
      var a = e.x + e.width / 2 - i.width / 2,
        s = e.y + e.height / 2 - i.height / 2;
      switch (n) {
        case "top":
          a = { x: a, y: e.y - i.height };
          break;
        case "bottom":
          a = { x: a, y: e.y + e.height };
          break;
        case "right":
          a = { x: e.x + e.width, y: s };
          break;
        case "left":
          a = { x: e.x - i.width, y: s };
          break;
        default:
          a = { x: e.x, y: e.y };
      }
      if (null != (n = n ? E(n) : null))
        switch (((s = "y" === n ? "height" : "width"), t)) {
          case "start":
            a[n] -= e[s] / 2 - i[s] / 2;
            break;
          case "end":
            a[n] += e[s] / 2 - i[s] / 2;
        }
      return a;
    }
    function L(t) {
      return Object.assign({}, { top: 0, right: 0, bottom: 0, left: 0 }, t);
    }
    function P(t, e) {
      return e.reduce(function (e, i) {
        return (e[i] = t), e;
      }, {});
    }
    function M(t, i) {
      void 0 === i && (i = {});
      var n = i;
      i = void 0 === (i = n.placement) ? t.placement : i;
      var s = n.boundary,
        r = void 0 === s ? "clippingParents" : s,
        o = void 0 === (s = n.rootBoundary) ? "viewport" : s;
      s = void 0 === (s = n.elementContext) ? "popper" : s;
      var c = n.altBoundary,
        h = void 0 !== c && c;
      (n = L(
        "number" != typeof (n = void 0 === (n = n.padding) ? 0 : n)
          ? n
          : P(n, R)
      )),
        (c = t.rects.popper),
        (r = C(
          a((h = t.elements[h ? ("popper" === s ? "reference" : "popper") : s]))
            ? h
            : h.contextElement || l(t.elements.popper),
          r,
          o
        )),
        (h = _({
          reference: (o = e(t.elements.reference)),
          element: c,
          strategy: "absolute",
          placement: i,
        })),
        (c = A(Object.assign({}, c, h))),
        (o = "popper" === s ? c : o);
      var d = {
        top: r.top - o.top + n.top,
        bottom: o.bottom - r.bottom + n.bottom,
        left: r.left - o.left + n.left,
        right: o.right - r.right + n.right,
      };
      if (((t = t.modifiersData.offset), "popper" === s && t)) {
        var u = t[i];
        Object.keys(d).forEach(function (t) {
          var e = 0 <= ["right", "bottom"].indexOf(t) ? 1 : -1,
            i = 0 <= ["top", "bottom"].indexOf(t) ? "y" : "x";
          d[t] += u[i] * e;
        });
      }
      return d;
    }
    function I() {
      for (var t = arguments.length, e = Array(t), i = 0; i < t; i++)
        e[i] = arguments[i];
      return !e.some(function (t) {
        return !(t && "function" == typeof t.getBoundingClientRect);
      });
    }
    function O(t) {
      void 0 === t && (t = {});
      var e = t.defaultModifiers,
        i = void 0 === e ? [] : e,
        n = void 0 === (t = t.defaultOptions) ? G : t;
      return function (t, e, s) {
        function r() {
          l.forEach(function (t) {
            return t();
          }),
            (l = []);
        }
        void 0 === s && (s = n);
        var o = {
            placement: "bottom",
            orderedModifiers: [],
            options: Object.assign({}, G, n),
            modifiersData: {},
            elements: { reference: t, popper: e },
            attributes: {},
            styles: {},
          },
          l = [],
          c = !1,
          h = {
            state: o,
            setOptions: function (s) {
              return (
                (s = "function" == typeof s ? s(o.options) : s),
                r(),
                (o.options = Object.assign({}, n, o.options, s)),
                (o.scrollParents = {
                  reference: a(t)
                    ? x(t)
                    : t.contextElement
                    ? x(t.contextElement)
                    : [],
                  popper: x(e),
                }),
                (s = (function (t) {
                  var e = b(t);
                  return W.reduce(function (t, i) {
                    return t.concat(
                      e.filter(function (t) {
                        return t.phase === i;
                      })
                    );
                  }, []);
                })(
                  (function (t) {
                    var e = t.reduce(function (t, e) {
                      var i = t[e.name];
                      return (
                        (t[e.name] = i
                          ? Object.assign({}, i, e, {
                              options: Object.assign({}, i.options, e.options),
                              data: Object.assign({}, i.data, e.data),
                            })
                          : e),
                        t
                      );
                    }, {});
                    return Object.keys(e).map(function (t) {
                      return e[t];
                    });
                  })([].concat(i, o.options.modifiers))
                )),
                (o.orderedModifiers = s.filter(function (t) {
                  return t.enabled;
                })),
                o.orderedModifiers.forEach(function (t) {
                  var e = t.name,
                    i = t.options;
                  (i = void 0 === i ? {} : i),
                    "function" == typeof (t = t.effect) &&
                      ((e = t({ state: o, name: e, instance: h, options: i })),
                      l.push(e || function () {}));
                }),
                h.update()
              );
            },
            forceUpdate: function () {
              if (!c) {
                var t = o.elements,
                  e = t.reference;
                if (I(e, (t = t.popper)))
                  for (
                    o.rects = {
                      reference: u(e, v(t), "fixed" === o.options.strategy),
                      popper: f(t),
                    },
                      o.reset = !1,
                      o.placement = o.options.placement,
                      o.orderedModifiers.forEach(function (t) {
                        return (o.modifiersData[t.name] = Object.assign(
                          {},
                          t.data
                        ));
                      }),
                      e = 0;
                    e < o.orderedModifiers.length;
                    e++
                  )
                    if (!0 === o.reset) (o.reset = !1), (e = -1);
                    else {
                      var i = o.orderedModifiers[e];
                      t = i.fn;
                      var n = i.options;
                      (n = void 0 === n ? {} : n),
                        (i = i.name),
                        "function" == typeof t &&
                          (o =
                            t({ state: o, options: n, name: i, instance: h }) ||
                            o);
                    }
              }
            },
            update: y(function () {
              return new Promise(function (t) {
                h.forceUpdate(), t(o);
              });
            }),
            destroy: function () {
              r(), (c = !0);
            },
          };
        return I(t, e)
          ? (h.setOptions(s).then(function (t) {
              !c && s.onFirstUpdate && s.onFirstUpdate(t);
            }),
            h)
          : h;
      };
    }
    function D(t) {
      var e,
        n = t.popper,
        a = t.popperRect,
        s = t.placement,
        r = t.variation,
        o = t.offsets,
        c = t.position,
        d = t.gpuAcceleration,
        u = t.adaptive;
      if (!0 === (t = t.roundOffsets)) {
        t = o.y;
        var f = window.devicePixelRatio || 1;
        t = { x: V(V(o.x * f) / f) || 0, y: V(V(t * f) / f) || 0 };
      } else t = "function" == typeof t ? t(o) : o;
      (t = void 0 === (t = (f = t).x) ? 0 : t),
        (f = void 0 === (f = f.y) ? 0 : f);
      var p = o.hasOwnProperty("x");
      o = o.hasOwnProperty("y");
      var g,
        x = "left",
        m = "top",
        b = window;
      if (u) {
        var y = v(n),
          w = "clientHeight",
          k = "clientWidth";
        y === i(n) &&
          "static" !== h((y = l(n))).position &&
          "absolute" === c &&
          ((w = "scrollHeight"), (k = "scrollWidth")),
          ("top" !== s && (("left" !== s && "right" !== s) || "end" !== r)) ||
            ((m = "bottom"), (f -= y[w] - a.height), (f *= d ? 1 : -1)),
          ("left" !== s && (("top" !== s && "bottom" !== s) || "end" !== r)) ||
            ((x = "right"), (t -= y[k] - a.width), (t *= d ? 1 : -1));
      }
      return (
        (n = Object.assign({ position: c }, u && Z)),
        d
          ? Object.assign(
              {},
              n,
              (((g = {})[m] = o ? "0" : ""),
              (g[x] = p ? "0" : ""),
              (g.transform =
                1 >= (b.devicePixelRatio || 1)
                  ? "translate(" + t + "px, " + f + "px)"
                  : "translate3d(" + t + "px, " + f + "px, 0)"),
              g)
            )
          : Object.assign(
              {},
              n,
              (((e = {})[m] = o ? f + "px" : ""),
              (e[x] = p ? t + "px" : ""),
              (e.transform = ""),
              e)
            )
      );
    }
    function z(t) {
      return t.replace(/left|right|bottom|top/g, function (t) {
        return tt[t];
      });
    }
    function N(t) {
      return t.replace(/start|end/g, function (t) {
        return et[t];
      });
    }
    function X(t, e, i) {
      return (
        void 0 === i && (i = { x: 0, y: 0 }),
        {
          top: t.top - e.height - i.y,
          right: t.right - e.width + i.x,
          bottom: t.bottom - e.height + i.y,
          left: t.left - e.width - i.x,
        }
      );
    }
    function H(t) {
      return ["top", "right", "bottom", "left"].some(function (e) {
        return 0 <= t[e];
      });
    }
    var R = ["top", "bottom", "right", "left"],
      F = R.reduce(function (t, e) {
        return t.concat([e + "-start", e + "-end"]);
      }, []),
      Y = [].concat(R, ["auto"]).reduce(function (t, e) {
        return t.concat([e, e + "-start", e + "-end"]);
      }, []),
      W =
        "beforeRead read afterRead beforeMain main afterMain beforeWrite write afterWrite".split(
          " "
        ),
      B = Math.max,
      j = Math.min,
      V = Math.round,
      G = { placement: "bottom", modifiers: [], strategy: "absolute" },
      q = { passive: !0 },
      U = {
        name: "eventListeners",
        enabled: !0,
        phase: "write",
        fn: function () {},
        effect: function (t) {
          var e = t.state,
            n = t.instance,
            a = (t = t.options).scroll,
            s = void 0 === a || a,
            r = void 0 === (t = t.resize) || t,
            o = i(e.elements.popper),
            l = [].concat(e.scrollParents.reference, e.scrollParents.popper);
          return (
            s &&
              l.forEach(function (t) {
                t.addEventListener("scroll", n.update, q);
              }),
            r && o.addEventListener("resize", n.update, q),
            function () {
              s &&
                l.forEach(function (t) {
                  t.removeEventListener("scroll", n.update, q);
                }),
                r && o.removeEventListener("resize", n.update, q);
            }
          );
        },
        data: {},
      },
      $ = {
        name: "popperOffsets",
        enabled: !0,
        phase: "read",
        fn: function (t) {
          var e = t.state;
          e.modifiersData[t.name] = _({
            reference: e.rects.reference,
            element: e.rects.popper,
            strategy: "absolute",
            placement: e.placement,
          });
        },
        data: {},
      },
      Z = { top: "auto", right: "auto", bottom: "auto", left: "auto" },
      Q = {
        name: "computeStyles",
        enabled: !0,
        phase: "beforeWrite",
        fn: function (t) {
          var e = t.state,
            i = t.options;
          t = void 0 === (t = i.gpuAcceleration) || t;
          var n = i.adaptive;
          (n = void 0 === n || n),
            (i = void 0 === (i = i.roundOffsets) || i),
            (t = {
              placement: w(e.placement),
              variation: T(e.placement),
              popper: e.elements.popper,
              popperRect: e.rects.popper,
              gpuAcceleration: t,
            }),
            null != e.modifiersData.popperOffsets &&
              (e.styles.popper = Object.assign(
                {},
                e.styles.popper,
                D(
                  Object.assign({}, t, {
                    offsets: e.modifiersData.popperOffsets,
                    position: e.options.strategy,
                    adaptive: n,
                    roundOffsets: i,
                  })
                )
              )),
            null != e.modifiersData.arrow &&
              (e.styles.arrow = Object.assign(
                {},
                e.styles.arrow,
                D(
                  Object.assign({}, t, {
                    offsets: e.modifiersData.arrow,
                    position: "absolute",
                    adaptive: !1,
                    roundOffsets: i,
                  })
                )
              )),
            (e.attributes.popper = Object.assign({}, e.attributes.popper, {
              "data-popper-placement": e.placement,
            }));
        },
        data: {},
      },
      K = {
        name: "applyStyles",
        enabled: !0,
        phase: "write",
        fn: function (t) {
          var e = t.state;
          Object.keys(e.elements).forEach(function (t) {
            var i = e.styles[t] || {},
              n = e.attributes[t] || {},
              a = e.elements[t];
            s(a) &&
              o(a) &&
              (Object.assign(a.style, i),
              Object.keys(n).forEach(function (t) {
                var e = n[t];
                !1 === e
                  ? a.removeAttribute(t)
                  : a.setAttribute(t, !0 === e ? "" : e);
              }));
          });
        },
        effect: function (t) {
          var e = t.state,
            i = {
              popper: {
                position: e.options.strategy,
                left: "0",
                top: "0",
                margin: "0",
              },
              arrow: { position: "absolute" },
              reference: {},
            };
          return (
            Object.assign(e.elements.popper.style, i.popper),
            (e.styles = i),
            e.elements.arrow && Object.assign(e.elements.arrow.style, i.arrow),
            function () {
              Object.keys(e.elements).forEach(function (t) {
                var n = e.elements[t],
                  a = e.attributes[t] || {};
                (t = Object.keys(
                  e.styles.hasOwnProperty(t) ? e.styles[t] : i[t]
                ).reduce(function (t, e) {
                  return (t[e] = ""), t;
                }, {})),
                  s(n) &&
                    o(n) &&
                    (Object.assign(n.style, t),
                    Object.keys(a).forEach(function (t) {
                      n.removeAttribute(t);
                    }));
              });
            }
          );
        },
        requires: ["computeStyles"],
      },
      J = {
        name: "offset",
        enabled: !0,
        phase: "main",
        requires: ["popperOffsets"],
        fn: function (t) {
          var e = t.state,
            i = t.name,
            n = void 0 === (t = t.options.offset) ? [0, 0] : t,
            a = (t = Y.reduce(function (t, i) {
              var a = e.rects,
                s = w(i),
                r = 0 <= ["left", "top"].indexOf(s) ? -1 : 1,
                o =
                  "function" == typeof n
                    ? n(Object.assign({}, a, { placement: i }))
                    : n;
              return (
                (a = (a = o[0]) || 0),
                (o = ((o = o[1]) || 0) * r),
                (s =
                  0 <= ["left", "right"].indexOf(s)
                    ? { x: o, y: a }
                    : { x: a, y: o }),
                (t[i] = s),
                t
              );
            }, {}))[e.placement],
            s = a.x;
          (a = a.y),
            null != e.modifiersData.popperOffsets &&
              ((e.modifiersData.popperOffsets.x += s),
              (e.modifiersData.popperOffsets.y += a)),
            (e.modifiersData[i] = t);
        },
      },
      tt = { left: "right", right: "left", bottom: "top", top: "bottom" },
      et = { start: "end", end: "start" },
      it = {
        name: "flip",
        enabled: !0,
        phase: "main",
        fn: function (t) {
          var e = t.state,
            i = t.options;
          if (((t = t.name), !e.modifiersData[t]._skip)) {
            var n = i.mainAxis;
            n = void 0 === n || n;
            var a = i.altAxis;
            a = void 0 === a || a;
            var s = i.fallbackPlacements,
              r = i.padding,
              o = i.boundary,
              l = i.rootBoundary,
              c = i.altBoundary,
              h = i.flipVariations,
              d = void 0 === h || h,
              u = i.allowedAutoPlacements;
            (h = w((i = e.options.placement))),
              (s =
                s ||
                (h !== i && d
                  ? (function (t) {
                      if ("auto" === w(t)) return [];
                      var e = z(t);
                      return [N(t), e, N(e)];
                    })(i)
                  : [z(i)]));
            var f = [i].concat(s).reduce(function (t, i) {
              return t.concat(
                "auto" === w(i)
                  ? (function (t, e) {
                      void 0 === e && (e = {});
                      var i = e.boundary,
                        n = e.rootBoundary,
                        a = e.padding,
                        s = e.flipVariations,
                        r = e.allowedAutoPlacements,
                        o = void 0 === r ? Y : r,
                        l = T(e.placement);
                      0 ===
                        (s = (e = l
                          ? s
                            ? F
                            : F.filter(function (t) {
                                return T(t) === l;
                              })
                          : R).filter(function (t) {
                          return 0 <= o.indexOf(t);
                        })).length && (s = e);
                      var c = s.reduce(function (e, s) {
                        return (
                          (e[s] = M(t, {
                            placement: s,
                            boundary: i,
                            rootBoundary: n,
                            padding: a,
                          })[w(s)]),
                          e
                        );
                      }, {});
                      return Object.keys(c).sort(function (t, e) {
                        return c[t] - c[e];
                      });
                    })(e, {
                      placement: i,
                      boundary: o,
                      rootBoundary: l,
                      padding: r,
                      flipVariations: d,
                      allowedAutoPlacements: u,
                    })
                  : i
              );
            }, []);
            (i = e.rects.reference), (s = e.rects.popper);
            var p = new Map();
            h = !0;
            for (var g = f[0], x = 0; x < f.length; x++) {
              var m = f[x],
                v = w(m),
                b = "start" === T(m),
                y = 0 <= ["top", "bottom"].indexOf(v),
                k = y ? "width" : "height",
                A = M(e, {
                  placement: m,
                  boundary: o,
                  rootBoundary: l,
                  altBoundary: c,
                  padding: r,
                });
              if (
                ((b = y ? (b ? "right" : "left") : b ? "bottom" : "top"),
                i[k] > s[k] && (b = z(b)),
                (k = z(b)),
                (y = []),
                n && y.push(0 >= A[v]),
                a && y.push(0 >= A[b], 0 >= A[k]),
                y.every(function (t) {
                  return t;
                }))
              ) {
                (g = m), (h = !1);
                break;
              }
              p.set(m, y);
            }
            if (h)
              for (
                n = function (t) {
                  var e = f.find(function (e) {
                    if ((e = p.get(e)))
                      return e.slice(0, t).every(function (t) {
                        return t;
                      });
                  });
                  if (e) return (g = e), "break";
                },
                  a = d ? 3 : 1;
                0 < a && "break" !== n(a);
                a--
              );
            e.placement !== g &&
              ((e.modifiersData[t]._skip = !0),
              (e.placement = g),
              (e.reset = !0));
          }
        },
        requiresIfExists: ["offset"],
        data: { _skip: !1 },
      },
      nt = {
        name: "preventOverflow",
        enabled: !0,
        phase: "main",
        fn: function (t) {
          var e = t.state,
            i = t.options;
          t = t.name;
          var n = i.mainAxis,
            a = void 0 === n || n,
            s = void 0 !== (n = i.altAxis) && n;
          n = void 0 === (n = i.tether) || n;
          var r = i.tetherOffset,
            o = void 0 === r ? 0 : r,
            l = M(e, {
              boundary: i.boundary,
              rootBoundary: i.rootBoundary,
              padding: i.padding,
              altBoundary: i.altBoundary,
            });
          i = w(e.placement);
          var c = T(e.placement),
            h = !c,
            d = E(i);
          (i = "x" === d ? "y" : "x"), (r = e.modifiersData.popperOffsets);
          var u = e.rects.reference,
            p = e.rects.popper,
            g =
              "function" == typeof o
                ? o(Object.assign({}, e.rects, { placement: e.placement }))
                : o;
          if (((o = { x: 0, y: 0 }), r)) {
            if (a || s) {
              var x = "y" === d ? "top" : "left",
                m = "y" === d ? "bottom" : "right",
                b = "y" === d ? "height" : "width",
                y = r[d],
                k = r[d] + l[x],
                A = r[d] - l[m],
                S = n ? -p[b] / 2 : 0,
                C = "start" === c ? u[b] : p[b];
              (c = "start" === c ? -p[b] : -u[b]),
                (p = e.elements.arrow),
                (p = n && p ? f(p) : { width: 0, height: 0 });
              var _ = e.modifiersData["arrow#persistent"]
                ? e.modifiersData["arrow#persistent"].padding
                : { top: 0, right: 0, bottom: 0, left: 0 };
              (x = _[x]),
                (m = _[m]),
                (p = B(0, j(u[b], p[b]))),
                (C = h ? u[b] / 2 - S - p - x - g : C - p - x - g),
                (u = h ? -u[b] / 2 + S + p + m + g : c + p + m + g),
                (h = e.elements.arrow && v(e.elements.arrow)),
                (g = e.modifiersData.offset
                  ? e.modifiersData.offset[e.placement][d]
                  : 0),
                (h =
                  r[d] +
                  C -
                  g -
                  (h ? ("y" === d ? h.clientTop || 0 : h.clientLeft || 0) : 0)),
                (u = r[d] + u - g),
                a &&
                  ((a = n ? j(k, h) : k),
                  (A = n ? B(A, u) : A),
                  (a = B(a, j(y, A))),
                  (r[d] = a),
                  (o[d] = a - y)),
                s &&
                  ((a = (s = r[i]) + l["x" === d ? "top" : "left"]),
                  (l = s - l["x" === d ? "bottom" : "right"]),
                  (a = n ? j(a, h) : a),
                  (n = n ? B(l, u) : l),
                  (n = B(a, j(s, n))),
                  (r[i] = n),
                  (o[i] = n - s));
            }
            e.modifiersData[t] = o;
          }
        },
        requiresIfExists: ["offset"],
      },
      at = {
        name: "arrow",
        enabled: !0,
        phase: "main",
        fn: function (t) {
          var e,
            i = t.state,
            n = t.name,
            a = t.options,
            s = i.elements.arrow,
            r = i.modifiersData.popperOffsets,
            o = w(i.placement);
          if (
            ((t = E(o)),
            (o = 0 <= ["left", "right"].indexOf(o) ? "height" : "width"),
            s && r)
          ) {
            a = L(
              "number" !=
                typeof (a =
                  "function" == typeof (a = a.padding)
                    ? a(Object.assign({}, i.rects, { placement: i.placement }))
                    : a)
                ? a
                : P(a, R)
            );
            var l = f(s),
              c = "y" === t ? "top" : "left",
              h = "y" === t ? "bottom" : "right",
              d =
                i.rects.reference[o] +
                i.rects.reference[t] -
                r[t] -
                i.rects.popper[o];
            (r = r[t] - i.rects.reference[t]),
              (r =
                (s = (s = v(s))
                  ? "y" === t
                    ? s.clientHeight || 0
                    : s.clientWidth || 0
                  : 0) /
                  2 -
                l[o] / 2 +
                (d / 2 - r / 2)),
              (o = B(a[c], j(r, s - l[o] - a[h]))),
              (i.modifiersData[n] =
                (((e = {})[t] = o), (e.centerOffset = o - r), e));
          }
        },
        effect: function (t) {
          var e = t.state;
          if (
            null !=
            (t = void 0 === (t = t.options.element) ? "[data-popper-arrow]" : t)
          ) {
            if (
              "string" == typeof t &&
              !(t = e.elements.popper.querySelector(t))
            )
              return;
            k(e.elements.popper, t) && (e.elements.arrow = t);
          }
        },
        requires: ["popperOffsets"],
        requiresIfExists: ["preventOverflow"],
      },
      st = {
        name: "hide",
        enabled: !0,
        phase: "main",
        requiresIfExists: ["preventOverflow"],
        fn: function (t) {
          var e = t.state;
          t = t.name;
          var i = e.rects.reference,
            n = e.rects.popper,
            a = e.modifiersData.preventOverflow,
            s = M(e, { elementContext: "reference" }),
            r = M(e, { altBoundary: !0 });
          (i = X(s, i)),
            (n = X(r, n, a)),
            (a = H(i)),
            (r = H(n)),
            (e.modifiersData[t] = {
              referenceClippingOffsets: i,
              popperEscapeOffsets: n,
              isReferenceHidden: a,
              hasPopperEscaped: r,
            }),
            (e.attributes.popper = Object.assign({}, e.attributes.popper, {
              "data-popper-reference-hidden": a,
              "data-popper-escaped": r,
            }));
        },
      },
      rt = O({ defaultModifiers: [U, $, Q, K] }),
      ot = [U, $, Q, K, J, it, nt, at, st],
      lt = O({ defaultModifiers: ot });
    (t.applyStyles = K),
      (t.arrow = at),
      (t.computeStyles = Q),
      (t.createPopper = lt),
      (t.createPopperLite = rt),
      (t.defaultModifiers = ot),
      (t.detectOverflow = M),
      (t.eventListeners = U),
      (t.flip = it),
      (t.hide = st),
      (t.offset = J),
      (t.popperGenerator = O),
      (t.popperOffsets = $),
      (t.preventOverflow = nt),
      Object.defineProperty(t, "__esModule", { value: !0 });
  }),
  (function (t, e) {
    "object" == typeof exports && "undefined" != typeof module
      ? (module.exports = e(require("@popperjs/core")))
      : "function" == typeof define && define.amd
      ? define(["@popperjs/core"], e)
      : ((t =
          "undefined" != typeof globalThis ? globalThis : t || self).bootstrap =
          e(t.Popper));
  })(this, function (t) {
    "use strict";
    const e = (function (t) {
        if (t && t.__esModule) return t;
        const e = Object.create(null);
        if (t)
          for (const i in t)
            if ("default" !== i) {
              const n = Object.getOwnPropertyDescriptor(t, i);
              Object.defineProperty(
                e,
                i,
                n.get ? n : { enumerable: !0, get: () => t[i] }
              );
            }
        return (e.default = t), Object.freeze(e);
      })(t),
      i = "transitionend",
      n = (t) => {
        let e = t.getAttribute("data-bs-target");
        if (!e || "#" === e) {
          let i = t.getAttribute("href");
          if (!i || (!i.includes("#") && !i.startsWith("."))) return null;
          i.includes("#") && !i.startsWith("#") && (i = `#${i.split("#")[1]}`),
            (e = i && "#" !== i ? i.trim() : null);
        }
        return e;
      },
      a = (t) => {
        const e = n(t);
        return e && document.querySelector(e) ? e : null;
      },
      s = (t) => {
        const e = n(t);
        return e ? document.querySelector(e) : null;
      },
      r = (t) => {
        t.dispatchEvent(new Event(i));
      },
      o = (t) =>
        !(!t || "object" != typeof t) &&
        (void 0 !== t.jquery && (t = t[0]), void 0 !== t.nodeType),
      l = (t) =>
        o(t)
          ? t.jquery
            ? t[0]
            : t
          : "string" == typeof t && t.length > 0
          ? document.querySelector(t)
          : null,
      c = (t, e, i) => {
        Object.keys(i).forEach((n) => {
          const a = i[n],
            s = e[n],
            r =
              s && o(s)
                ? "element"
                : null == (l = s)
                ? `${l}`
                : {}.toString
                    .call(l)
                    .match(/\s([a-z]+)/i)[1]
                    .toLowerCase();
          var l;
          if (!new RegExp(a).test(r))
            throw new TypeError(
              `${t.toUpperCase()}: Option "${n}" provided type "${r}" but expected type "${a}".`
            );
        });
      },
      h = (t) =>
        !(!o(t) || 0 === t.getClientRects().length) &&
        "visible" === getComputedStyle(t).getPropertyValue("visibility"),
      d = (t) =>
        !t ||
        t.nodeType !== Node.ELEMENT_NODE ||
        !!t.classList.contains("disabled") ||
        (void 0 !== t.disabled
          ? t.disabled
          : t.hasAttribute("disabled") &&
            "false" !== t.getAttribute("disabled")),
      u = (t) => {
        if (!document.documentElement.attachShadow) return null;
        if ("function" == typeof t.getRootNode) {
          const e = t.getRootNode();
          return e instanceof ShadowRoot ? e : null;
        }
        return t instanceof ShadowRoot
          ? t
          : t.parentNode
          ? u(t.parentNode)
          : null;
      },
      f = () => {},
      p = (t) => {
        t.offsetHeight;
      },
      g = () => {
        const { jQuery: t } = window;
        return t && !document.body.hasAttribute("data-bs-no-jquery") ? t : null;
      },
      x = [],
      m = () => "rtl" === document.documentElement.dir,
      v = (t) => {
        var e;
        (e = () => {
          const e = g();
          if (e) {
            const i = t.NAME,
              n = e.fn[i];
            (e.fn[i] = t.jQueryInterface),
              (e.fn[i].Constructor = t),
              (e.fn[i].noConflict = () => ((e.fn[i] = n), t.jQueryInterface));
          }
        }),
          "loading" === document.readyState
            ? (x.length ||
                document.addEventListener("DOMContentLoaded", () => {
                  x.forEach((t) => t());
                }),
              x.push(e))
            : e();
      },
      b = (t) => {
        "function" == typeof t && t();
      },
      y = (t, e, n = !0) => {
        if (!n) return void b(t);
        const a =
          ((t) => {
            if (!t) return 0;
            let { transitionDuration: e, transitionDelay: i } =
              window.getComputedStyle(t);
            const n = Number.parseFloat(e),
              a = Number.parseFloat(i);
            return n || a
              ? ((e = e.split(",")[0]),
                (i = i.split(",")[0]),
                1e3 * (Number.parseFloat(e) + Number.parseFloat(i)))
              : 0;
          })(e) + 5;
        let s = !1;
        const o = ({ target: n }) => {
          n === e && ((s = !0), e.removeEventListener(i, o), b(t));
        };
        e.addEventListener(i, o),
          setTimeout(() => {
            s || r(e);
          }, a);
      },
      w = (t, e, i, n) => {
        let a = t.indexOf(e);
        if (-1 === a) return t[!i && n ? t.length - 1 : 0];
        const s = t.length;
        return (
          (a += i ? 1 : -1),
          n && (a = (a + s) % s),
          t[Math.max(0, Math.min(a, s - 1))]
        );
      },
      k = /[^.]*(?=\..*)\.|.*/,
      A = /\..*/,
      S = /::\d+$/,
      C = {};
    let T = 1;
    const E = { mouseenter: "mouseover", mouseleave: "mouseout" },
      _ = /^(mouseenter|mouseleave)/i,
      L = new Set([
        "click",
        "dblclick",
        "mouseup",
        "mousedown",
        "contextmenu",
        "mousewheel",
        "DOMMouseScroll",
        "mouseover",
        "mouseout",
        "mousemove",
        "selectstart",
        "selectend",
        "keydown",
        "keypress",
        "keyup",
        "orientationchange",
        "touchstart",
        "touchmove",
        "touchend",
        "touchcancel",
        "pointerdown",
        "pointermove",
        "pointerup",
        "pointerleave",
        "pointercancel",
        "gesturestart",
        "gesturechange",
        "gestureend",
        "focus",
        "blur",
        "change",
        "reset",
        "select",
        "submit",
        "focusin",
        "focusout",
        "load",
        "unload",
        "beforeunload",
        "resize",
        "move",
        "DOMContentLoaded",
        "readystatechange",
        "error",
        "abort",
        "scroll",
      ]);
    function P(t, e) {
      return (e && `${e}::${T++}`) || t.uidEvent || T++;
    }
    function M(t) {
      const e = P(t);
      return (t.uidEvent = e), (C[e] = C[e] || {}), C[e];
    }
    function I(t, e, i = null) {
      const n = Object.keys(t);
      for (let a = 0, s = n.length; a < s; a++) {
        const s = t[n[a]];
        if (s.originalHandler === e && s.delegationSelector === i) return s;
      }
      return null;
    }
    function O(t, e, i) {
      const n = "string" == typeof e,
        a = n ? i : e;
      let s = N(t);
      return L.has(s) || (s = t), [n, a, s];
    }
    function D(t, e, i, n, a) {
      if ("string" != typeof e || !t) return;
      if ((i || ((i = n), (n = null)), _.test(e))) {
        const t = (t) =>
          function (e) {
            if (
              !e.relatedTarget ||
              (e.relatedTarget !== e.delegateTarget &&
                !e.delegateTarget.contains(e.relatedTarget))
            )
              return t.call(this, e);
          };
        n ? (n = t(n)) : (i = t(i));
      }
      const [s, r, o] = O(e, i, n),
        l = M(t),
        c = l[o] || (l[o] = {}),
        h = I(c, r, s ? i : null);
      if (h) return void (h.oneOff = h.oneOff && a);
      const d = P(r, e.replace(k, "")),
        u = s
          ? (function (t, e, i) {
              return function n(a) {
                const s = t.querySelectorAll(e);
                for (let { target: r } = a; r && r !== this; r = r.parentNode)
                  for (let o = s.length; o--; )
                    if (s[o] === r)
                      return (
                        (a.delegateTarget = r),
                        n.oneOff && X.off(t, a.type, e, i),
                        i.apply(r, [a])
                      );
                return null;
              };
            })(t, i, n)
          : (function (t, e) {
              return function i(n) {
                return (
                  (n.delegateTarget = t),
                  i.oneOff && X.off(t, n.type, e),
                  e.apply(t, [n])
                );
              };
            })(t, i);
      (u.delegationSelector = s ? i : null),
        (u.originalHandler = r),
        (u.oneOff = a),
        (u.uidEvent = d),
        (c[d] = u),
        t.addEventListener(o, u, s);
    }
    function z(t, e, i, n, a) {
      const s = I(e[i], n, a);
      s && (t.removeEventListener(i, s, Boolean(a)), delete e[i][s.uidEvent]);
    }
    function N(t) {
      return (t = t.replace(A, "")), E[t] || t;
    }
    const X = {
        on(t, e, i, n) {
          D(t, e, i, n, !1);
        },
        one(t, e, i, n) {
          D(t, e, i, n, !0);
        },
        off(t, e, i, n) {
          if ("string" != typeof e || !t) return;
          const [a, s, r] = O(e, i, n),
            o = r !== e,
            l = M(t),
            c = e.startsWith(".");
          if (void 0 !== s) {
            if (!l || !l[r]) return;
            return void z(t, l, r, s, a ? i : null);
          }
          c &&
            Object.keys(l).forEach((i) => {
              !(function (t, e, i, n) {
                const a = e[i] || {};
                Object.keys(a).forEach((s) => {
                  if (s.includes(n)) {
                    const n = a[s];
                    z(t, e, i, n.originalHandler, n.delegationSelector);
                  }
                });
              })(t, l, i, e.slice(1));
            });
          const h = l[r] || {};
          Object.keys(h).forEach((i) => {
            const n = i.replace(S, "");
            if (!o || e.includes(n)) {
              const e = h[i];
              z(t, l, r, e.originalHandler, e.delegationSelector);
            }
          });
        },
        trigger(t, e, i) {
          if ("string" != typeof e || !t) return null;
          const n = g(),
            a = N(e),
            s = e !== a,
            r = L.has(a);
          let o,
            l = !0,
            c = !0,
            h = !1,
            d = null;
          return (
            s &&
              n &&
              ((o = n.Event(e, i)),
              n(t).trigger(o),
              (l = !o.isPropagationStopped()),
              (c = !o.isImmediatePropagationStopped()),
              (h = o.isDefaultPrevented())),
            r
              ? ((d = document.createEvent("HTMLEvents")),
                d.initEvent(a, l, !0))
              : (d = new CustomEvent(e, { bubbles: l, cancelable: !0 })),
            void 0 !== i &&
              Object.keys(i).forEach((t) => {
                Object.defineProperty(d, t, { get: () => i[t] });
              }),
            h && d.preventDefault(),
            c && t.dispatchEvent(d),
            d.defaultPrevented && void 0 !== o && o.preventDefault(),
            d
          );
        },
      },
      H = new Map(),
      R = {
        set(t, e, i) {
          H.has(t) || H.set(t, new Map());
          const n = H.get(t);
          n.has(e) || 0 === n.size
            ? n.set(e, i)
            : console.error(
                `Bootstrap doesn't allow more than one instance per element. Bound instance: ${
                  Array.from(n.keys())[0]
                }.`
              );
        },
        get: (t, e) => (H.has(t) && H.get(t).get(e)) || null,
        remove(t, e) {
          if (!H.has(t)) return;
          const i = H.get(t);
          i.delete(e), 0 === i.size && H.delete(t);
        },
      };
    class F {
      constructor(t) {
        (t = l(t)) &&
          ((this._element = t),
          R.set(this._element, this.constructor.DATA_KEY, this));
      }
      dispose() {
        R.remove(this._element, this.constructor.DATA_KEY),
          X.off(this._element, this.constructor.EVENT_KEY),
          Object.getOwnPropertyNames(this).forEach((t) => {
            this[t] = null;
          });
      }
      _queueCallback(t, e, i = !0) {
        y(t, e, i);
      }
      static getInstance(t) {
        return R.get(l(t), this.DATA_KEY);
      }
      static getOrCreateInstance(t, e = {}) {
        return (
          this.getInstance(t) || new this(t, "object" == typeof e ? e : null)
        );
      }
      static get VERSION() {
        return "5.1.2";
      }
      static get NAME() {
        throw new Error(
          'You have to implement the static method "NAME", for each component!'
        );
      }
      static get DATA_KEY() {
        return `bs.${this.NAME}`;
      }
      static get EVENT_KEY() {
        return `.${this.DATA_KEY}`;
      }
    }
    const Y = (t, e = "hide") => {
      const i = `click.dismiss${t.EVENT_KEY}`,
        n = t.NAME;
      X.on(document, i, `[data-bs-dismiss="${n}"]`, function (i) {
        if (
          (["A", "AREA"].includes(this.tagName) && i.preventDefault(), d(this))
        )
          return;
        const a = s(this) || this.closest(`.${n}`);
        t.getOrCreateInstance(a)[e]();
      });
    };
    class W extends F {
      static get NAME() {
        return "alert";
      }
      close() {
        if (X.trigger(this._element, "close.bs.alert").defaultPrevented) return;
        this._element.classList.remove("show");
        const t = this._element.classList.contains("fade");
        this._queueCallback(() => this._destroyElement(), this._element, t);
      }
      _destroyElement() {
        this._element.remove(),
          X.trigger(this._element, "closed.bs.alert"),
          this.dispose();
      }
      static jQueryInterface(t) {
        return this.each(function () {
          const e = W.getOrCreateInstance(this);
          if ("string" == typeof t) {
            if (void 0 === e[t] || t.startsWith("_") || "constructor" === t)
              throw new TypeError(`No method named "${t}"`);
            e[t](this);
          }
        });
      }
    }
    Y(W, "close"), v(W);
    const B = '[data-bs-toggle="button"]';
    class j extends F {
      static get NAME() {
        return "button";
      }
      toggle() {
        this._element.setAttribute(
          "aria-pressed",
          this._element.classList.toggle("active")
        );
      }
      static jQueryInterface(t) {
        return this.each(function () {
          const e = j.getOrCreateInstance(this);
          "toggle" === t && e[t]();
        });
      }
    }
    function V(t) {
      return (
        "true" === t ||
        ("false" !== t &&
          (t === Number(t).toString()
            ? Number(t)
            : "" === t || "null" === t
            ? null
            : t))
      );
    }
    function G(t) {
      return t.replace(/[A-Z]/g, (t) => `-${t.toLowerCase()}`);
    }
    X.on(document, "click.bs.button.data-api", B, (t) => {
      t.preventDefault();
      const e = t.target.closest(B);
      j.getOrCreateInstance(e).toggle();
    }),
      v(j);
    const q = {
        setDataAttribute(t, e, i) {
          t.setAttribute(`data-bs-${G(e)}`, i);
        },
        removeDataAttribute(t, e) {
          t.removeAttribute(`data-bs-${G(e)}`);
        },
        getDataAttributes(t) {
          if (!t) return {};
          const e = {};
          return (
            Object.keys(t.dataset)
              .filter((t) => t.startsWith("bs"))
              .forEach((i) => {
                let n = i.replace(/^bs/, "");
                (n = n.charAt(0).toLowerCase() + n.slice(1, n.length)),
                  (e[n] = V(t.dataset[i]));
              }),
            e
          );
        },
        getDataAttribute: (t, e) => V(t.getAttribute(`data-bs-${G(e)}`)),
        offset(t) {
          const e = t.getBoundingClientRect();
          return {
            top: e.top + window.pageYOffset,
            left: e.left + window.pageXOffset,
          };
        },
        position: (t) => ({ top: t.offsetTop, left: t.offsetLeft }),
      },
      U = {
        find: (t, e = document.documentElement) =>
          [].concat(...Element.prototype.querySelectorAll.call(e, t)),
        findOne: (t, e = document.documentElement) =>
          Element.prototype.querySelector.call(e, t),
        children: (t, e) =>
          [].concat(...t.children).filter((t) => t.matches(e)),
        parents(t, e) {
          const i = [];
          let n = t.parentNode;
          for (; n && n.nodeType === Node.ELEMENT_NODE && 3 !== n.nodeType; )
            n.matches(e) && i.push(n), (n = n.parentNode);
          return i;
        },
        prev(t, e) {
          let i = t.previousElementSibling;
          for (; i; ) {
            if (i.matches(e)) return [i];
            i = i.previousElementSibling;
          }
          return [];
        },
        next(t, e) {
          let i = t.nextElementSibling;
          for (; i; ) {
            if (i.matches(e)) return [i];
            i = i.nextElementSibling;
          }
          return [];
        },
        focusableChildren(t) {
          const e = [
            "a",
            "button",
            "input",
            "textarea",
            "select",
            "details",
            "[tabindex]",
            '[contenteditable="true"]',
          ]
            .map((t) => `${t}:not([tabindex^="-"])`)
            .join(", ");
          return this.find(e, t).filter((t) => !d(t) && h(t));
        },
      },
      $ = "carousel",
      Z = {
        interval: 5e3,
        keyboard: !0,
        slide: !1,
        pause: "hover",
        wrap: !0,
        touch: !0,
      },
      Q = {
        interval: "(number|boolean)",
        keyboard: "boolean",
        slide: "(boolean|string)",
        pause: "(string|boolean)",
        wrap: "boolean",
        touch: "boolean",
      },
      K = "next",
      J = "prev",
      tt = "left",
      et = "right",
      it = { ArrowLeft: et, ArrowRight: tt },
      nt = "slid.bs.carousel",
      at = "active",
      st = ".active.carousel-item";
    class rt extends F {
      constructor(t, e) {
        super(t),
          (this._items = null),
          (this._interval = null),
          (this._activeElement = null),
          (this._isPaused = !1),
          (this._isSliding = !1),
          (this.touchTimeout = null),
          (this.touchStartX = 0),
          (this.touchDeltaX = 0),
          (this._config = this._getConfig(e)),
          (this._indicatorsElement = U.findOne(
            ".carousel-indicators",
            this._element
          )),
          (this._touchSupported =
            "ontouchstart" in document.documentElement ||
            navigator.maxTouchPoints > 0),
          (this._pointerEvent = Boolean(window.PointerEvent)),
          this._addEventListeners();
      }
      static get Default() {
        return Z;
      }
      static get NAME() {
        return $;
      }
      next() {
        this._slide(K);
      }
      nextWhenVisible() {
        !document.hidden && h(this._element) && this.next();
      }
      prev() {
        this._slide(J);
      }
      pause(t) {
        t || (this._isPaused = !0),
          U.findOne(
            ".carousel-item-next, .carousel-item-prev",
            this._element
          ) && (r(this._element), this.cycle(!0)),
          clearInterval(this._interval),
          (this._interval = null);
      }
      cycle(t) {
        t || (this._isPaused = !1),
          this._interval &&
            (clearInterval(this._interval), (this._interval = null)),
          this._config &&
            this._config.interval &&
            !this._isPaused &&
            (this._updateInterval(),
            (this._interval = setInterval(
              (document.visibilityState
                ? this.nextWhenVisible
                : this.next
              ).bind(this),
              this._config.interval
            )));
      }
      to(t) {
        this._activeElement = U.findOne(st, this._element);
        const e = this._getItemIndex(this._activeElement);
        if (t > this._items.length - 1 || t < 0) return;
        if (this._isSliding)
          return void X.one(this._element, nt, () => this.to(t));
        if (e === t) return this.pause(), void this.cycle();
        const i = t > e ? K : J;
        this._slide(i, this._items[t]);
      }
      _getConfig(t) {
        return (
          (t = {
            ...Z,
            ...q.getDataAttributes(this._element),
            ...("object" == typeof t ? t : {}),
          }),
          c($, t, Q),
          t
        );
      }
      _handleSwipe() {
        const t = Math.abs(this.touchDeltaX);
        if (t <= 40) return;
        const e = t / this.touchDeltaX;
        (this.touchDeltaX = 0), e && this._slide(e > 0 ? et : tt);
      }
      _addEventListeners() {
        this._config.keyboard &&
          X.on(this._element, "keydown.bs.carousel", (t) => this._keydown(t)),
          "hover" === this._config.pause &&
            (X.on(this._element, "mouseenter.bs.carousel", (t) =>
              this.pause(t)
            ),
            X.on(this._element, "mouseleave.bs.carousel", (t) =>
              this.cycle(t)
            )),
          this._config.touch &&
            this._touchSupported &&
            this._addTouchEventListeners();
      }
      _addTouchEventListeners() {
        const t = (t) =>
            this._pointerEvent &&
            ("pen" === t.pointerType || "touch" === t.pointerType),
          e = (e) => {
            t(e)
              ? (this.touchStartX = e.clientX)
              : this._pointerEvent || (this.touchStartX = e.touches[0].clientX);
          },
          i = (t) => {
            this.touchDeltaX =
              t.touches && t.touches.length > 1
                ? 0
                : t.touches[0].clientX - this.touchStartX;
          },
          n = (e) => {
            t(e) && (this.touchDeltaX = e.clientX - this.touchStartX),
              this._handleSwipe(),
              "hover" === this._config.pause &&
                (this.pause(),
                this.touchTimeout && clearTimeout(this.touchTimeout),
                (this.touchTimeout = setTimeout(
                  (t) => this.cycle(t),
                  500 + this._config.interval
                )));
          };
        U.find(".carousel-item img", this._element).forEach((t) => {
          X.on(t, "dragstart.bs.carousel", (t) => t.preventDefault());
        }),
          this._pointerEvent
            ? (X.on(this._element, "pointerdown.bs.carousel", (t) => e(t)),
              X.on(this._element, "pointerup.bs.carousel", (t) => n(t)),
              this._element.classList.add("pointer-event"))
            : (X.on(this._element, "touchstart.bs.carousel", (t) => e(t)),
              X.on(this._element, "touchmove.bs.carousel", (t) => i(t)),
              X.on(this._element, "touchend.bs.carousel", (t) => n(t)));
      }
      _keydown(t) {
        if (/input|textarea/i.test(t.target.tagName)) return;
        const e = it[t.key];
        e && (t.preventDefault(), this._slide(e));
      }
      _getItemIndex(t) {
        return (
          (this._items =
            t && t.parentNode ? U.find(".carousel-item", t.parentNode) : []),
          this._items.indexOf(t)
        );
      }
      _getItemByOrder(t, e) {
        const i = t === K;
        return w(this._items, e, i, this._config.wrap);
      }
      _triggerSlideEvent(t, e) {
        const i = this._getItemIndex(t),
          n = this._getItemIndex(U.findOne(st, this._element));
        return X.trigger(this._element, "slide.bs.carousel", {
          relatedTarget: t,
          direction: e,
          from: n,
          to: i,
        });
      }
      _setActiveIndicatorElement(t) {
        if (this._indicatorsElement) {
          const e = U.findOne(".active", this._indicatorsElement);
          e.classList.remove(at), e.removeAttribute("aria-current");
          const i = U.find("[data-bs-target]", this._indicatorsElement);
          for (let e = 0; e < i.length; e++)
            if (
              Number.parseInt(i[e].getAttribute("data-bs-slide-to"), 10) ===
              this._getItemIndex(t)
            ) {
              i[e].classList.add(at), i[e].setAttribute("aria-current", "true");
              break;
            }
        }
      }
      _updateInterval() {
        const t = this._activeElement || U.findOne(st, this._element);
        if (!t) return;
        const e = Number.parseInt(t.getAttribute("data-bs-interval"), 10);
        e
          ? ((this._config.defaultInterval =
              this._config.defaultInterval || this._config.interval),
            (this._config.interval = e))
          : (this._config.interval =
              this._config.defaultInterval || this._config.interval);
      }
      _slide(t, e) {
        const i = this._directionToOrder(t),
          n = U.findOne(st, this._element),
          a = this._getItemIndex(n),
          s = e || this._getItemByOrder(i, n),
          r = this._getItemIndex(s),
          o = Boolean(this._interval),
          l = i === K,
          c = l ? "carousel-item-start" : "carousel-item-end",
          h = l ? "carousel-item-next" : "carousel-item-prev",
          d = this._orderToDirection(i);
        if (s && s.classList.contains(at)) return void (this._isSliding = !1);
        if (this._isSliding) return;
        if (this._triggerSlideEvent(s, d).defaultPrevented) return;
        if (!n || !s) return;
        (this._isSliding = !0),
          o && this.pause(),
          this._setActiveIndicatorElement(s),
          (this._activeElement = s);
        const u = () => {
          X.trigger(this._element, nt, {
            relatedTarget: s,
            direction: d,
            from: a,
            to: r,
          });
        };
        if (this._element.classList.contains("slide")) {
          s.classList.add(h), p(s), n.classList.add(c), s.classList.add(c);
          const t = () => {
            s.classList.remove(c, h),
              s.classList.add(at),
              n.classList.remove(at, h, c),
              (this._isSliding = !1),
              setTimeout(u, 0);
          };
          this._queueCallback(t, n, !0);
        } else n.classList.remove(at), s.classList.add(at), (this._isSliding = !1), u();
        o && this.cycle();
      }
      _directionToOrder(t) {
        return [et, tt].includes(t)
          ? m()
            ? t === tt
              ? J
              : K
            : t === tt
            ? K
            : J
          : t;
      }
      _orderToDirection(t) {
        return [K, J].includes(t)
          ? m()
            ? t === J
              ? tt
              : et
            : t === J
            ? et
            : tt
          : t;
      }
      static carouselInterface(t, e) {
        const i = rt.getOrCreateInstance(t, e);
        let { _config: n } = i;
        "object" == typeof e && (n = { ...n, ...e });
        const a = "string" == typeof e ? e : n.slide;
        if ("number" == typeof e) i.to(e);
        else if ("string" == typeof a) {
          if (void 0 === i[a]) throw new TypeError(`No method named "${a}"`);
          i[a]();
        } else n.interval && n.ride && (i.pause(), i.cycle());
      }
      static jQueryInterface(t) {
        return this.each(function () {
          rt.carouselInterface(this, t);
        });
      }
      static dataApiClickHandler(t) {
        const e = s(this);
        if (!e || !e.classList.contains("carousel")) return;
        const i = { ...q.getDataAttributes(e), ...q.getDataAttributes(this) },
          n = this.getAttribute("data-bs-slide-to");
        n && (i.interval = !1),
          rt.carouselInterface(e, i),
          n && rt.getInstance(e).to(n),
          t.preventDefault();
      }
    }
    X.on(
      document,
      "click.bs.carousel.data-api",
      "[data-bs-slide], [data-bs-slide-to]",
      rt.dataApiClickHandler
    ),
      X.on(window, "load.bs.carousel.data-api", () => {
        const t = U.find('[data-bs-ride="carousel"]');
        for (let e = 0, i = t.length; e < i; e++)
          rt.carouselInterface(t[e], rt.getInstance(t[e]));
      }),
      v(rt);
    const ot = "collapse",
      lt = { toggle: !0, parent: null },
      ct = { toggle: "boolean", parent: "(null|element)" },
      ht = "show",
      dt = "collapse",
      ut = "collapsing",
      ft = "collapsed",
      pt = ":scope .collapse .collapse",
      gt = '[data-bs-toggle="collapse"]';
    class xt extends F {
      constructor(t, e) {
        super(t),
          (this._isTransitioning = !1),
          (this._config = this._getConfig(e)),
          (this._triggerArray = []);
        const i = U.find(gt);
        for (let t = 0, e = i.length; t < e; t++) {
          const e = i[t],
            n = a(e),
            s = U.find(n).filter((t) => t === this._element);
          null !== n &&
            s.length &&
            ((this._selector = n), this._triggerArray.push(e));
        }
        this._initializeChildren(),
          this._config.parent ||
            this._addAriaAndCollapsedClass(this._triggerArray, this._isShown()),
          this._config.toggle && this.toggle();
      }
      static get Default() {
        return lt;
      }
      static get NAME() {
        return ot;
      }
      toggle() {
        this._isShown() ? this.hide() : this.show();
      }
      show() {
        if (this._isTransitioning || this._isShown()) return;
        let t,
          e = [];
        if (this._config.parent) {
          const t = U.find(pt, this._config.parent);
          e = U.find(
            ".collapse.show, .collapse.collapsing",
            this._config.parent
          ).filter((e) => !t.includes(e));
        }
        const i = U.findOne(this._selector);
        if (e.length) {
          const n = e.find((t) => i !== t);
          if (((t = n ? xt.getInstance(n) : null), t && t._isTransitioning))
            return;
        }
        if (X.trigger(this._element, "show.bs.collapse").defaultPrevented)
          return;
        e.forEach((e) => {
          i !== e && xt.getOrCreateInstance(e, { toggle: !1 }).hide(),
            t || R.set(e, "bs.collapse", null);
        });
        const n = this._getDimension();
        this._element.classList.remove(dt),
          this._element.classList.add(ut),
          (this._element.style[n] = 0),
          this._addAriaAndCollapsedClass(this._triggerArray, !0),
          (this._isTransitioning = !0);
        const a = `scroll${n[0].toUpperCase() + n.slice(1)}`;
        this._queueCallback(
          () => {
            (this._isTransitioning = !1),
              this._element.classList.remove(ut),
              this._element.classList.add(dt, ht),
              (this._element.style[n] = ""),
              X.trigger(this._element, "shown.bs.collapse");
          },
          this._element,
          !0
        ),
          (this._element.style[n] = `${this._element[a]}px`);
      }
      hide() {
        if (this._isTransitioning || !this._isShown()) return;
        if (X.trigger(this._element, "hide.bs.collapse").defaultPrevented)
          return;
        const t = this._getDimension();
        (this._element.style[t] = `${
          this._element.getBoundingClientRect()[t]
        }px`),
          p(this._element),
          this._element.classList.add(ut),
          this._element.classList.remove(dt, ht);
        const e = this._triggerArray.length;
        for (let t = 0; t < e; t++) {
          const e = this._triggerArray[t],
            i = s(e);
          i && !this._isShown(i) && this._addAriaAndCollapsedClass([e], !1);
        }
        (this._isTransitioning = !0),
          (this._element.style[t] = ""),
          this._queueCallback(
            () => {
              (this._isTransitioning = !1),
                this._element.classList.remove(ut),
                this._element.classList.add(dt),
                X.trigger(this._element, "hidden.bs.collapse");
            },
            this._element,
            !0
          );
      }
      _isShown(t = this._element) {
        return t.classList.contains(ht);
      }
      _getConfig(t) {
        return (
          ((t = { ...lt, ...q.getDataAttributes(this._element), ...t }).toggle =
            Boolean(t.toggle)),
          (t.parent = l(t.parent)),
          c(ot, t, ct),
          t
        );
      }
      _getDimension() {
        return this._element.classList.contains("collapse-horizontal")
          ? "width"
          : "height";
      }
      _initializeChildren() {
        if (!this._config.parent) return;
        const t = U.find(pt, this._config.parent);
        U.find(gt, this._config.parent)
          .filter((e) => !t.includes(e))
          .forEach((t) => {
            const e = s(t);
            e && this._addAriaAndCollapsedClass([t], this._isShown(e));
          });
      }
      _addAriaAndCollapsedClass(t, e) {
        t.length &&
          t.forEach((t) => {
            e ? t.classList.remove(ft) : t.classList.add(ft),
              t.setAttribute("aria-expanded", e);
          });
      }
      static jQueryInterface(t) {
        return this.each(function () {
          const e = {};
          "string" == typeof t && /show|hide/.test(t) && (e.toggle = !1);
          const i = xt.getOrCreateInstance(this, e);
          if ("string" == typeof t) {
            if (void 0 === i[t]) throw new TypeError(`No method named "${t}"`);
            i[t]();
          }
        });
      }
    }
    X.on(document, "click.bs.collapse.data-api", gt, function (t) {
      ("A" === t.target.tagName ||
        (t.delegateTarget && "A" === t.delegateTarget.tagName)) &&
        t.preventDefault();
      const e = a(this);
      U.find(e).forEach((t) => {
        xt.getOrCreateInstance(t, { toggle: !1 }).toggle();
      });
    }),
      v(xt);
    const mt = "dropdown",
      vt = "Escape",
      bt = "Space",
      yt = "ArrowUp",
      wt = "ArrowDown",
      kt = new RegExp("ArrowUp|ArrowDown|Escape"),
      At = "click.bs.dropdown.data-api",
      St = "keydown.bs.dropdown.data-api",
      Ct = "show",
      Tt = '[data-bs-toggle="dropdown"]',
      Et = ".dropdown-menu",
      _t = m() ? "top-end" : "top-start",
      Lt = m() ? "top-start" : "top-end",
      Pt = m() ? "bottom-end" : "bottom-start",
      Mt = m() ? "bottom-start" : "bottom-end",
      It = m() ? "left-start" : "right-start",
      Ot = m() ? "right-start" : "left-start",
      Dt = {
        offset: [0, 2],
        boundary: "clippingParents",
        reference: "toggle",
        display: "dynamic",
        popperConfig: null,
        autoClose: !0,
      },
      zt = {
        offset: "(array|string|function)",
        boundary: "(string|element)",
        reference: "(string|element|object)",
        display: "string",
        popperConfig: "(null|object|function)",
        autoClose: "(boolean|string)",
      };
    class Nt extends F {
      constructor(t, e) {
        super(t),
          (this._popper = null),
          (this._config = this._getConfig(e)),
          (this._menu = this._getMenuElement()),
          (this._inNavbar = this._detectNavbar());
      }
      static get Default() {
        return Dt;
      }
      static get DefaultType() {
        return zt;
      }
      static get NAME() {
        return mt;
      }
      toggle() {
        return this._isShown() ? this.hide() : this.show();
      }
      show() {
        if (d(this._element) || this._isShown(this._menu)) return;
        const t = { relatedTarget: this._element };
        if (X.trigger(this._element, "show.bs.dropdown", t).defaultPrevented)
          return;
        const e = Nt.getParentFromElement(this._element);
        this._inNavbar
          ? q.setDataAttribute(this._menu, "popper", "none")
          : this._createPopper(e),
          "ontouchstart" in document.documentElement &&
            !e.closest(".navbar-nav") &&
            []
              .concat(...document.body.children)
              .forEach((t) => X.on(t, "mouseover", f)),
          this._element.focus(),
          this._element.setAttribute("aria-expanded", !0),
          this._menu.classList.add(Ct),
          this._element.classList.add(Ct),
          X.trigger(this._element, "shown.bs.dropdown", t);
      }
      hide() {
        if (d(this._element) || !this._isShown(this._menu)) return;
        const t = { relatedTarget: this._element };
        this._completeHide(t);
      }
      dispose() {
        this._popper && this._popper.destroy(), super.dispose();
      }
      update() {
        (this._inNavbar = this._detectNavbar()),
          this._popper && this._popper.update();
      }
      _completeHide(t) {
        X.trigger(this._element, "hide.bs.dropdown", t).defaultPrevented ||
          ("ontouchstart" in document.documentElement &&
            []
              .concat(...document.body.children)
              .forEach((t) => X.off(t, "mouseover", f)),
          this._popper && this._popper.destroy(),
          this._menu.classList.remove(Ct),
          this._element.classList.remove(Ct),
          this._element.setAttribute("aria-expanded", "false"),
          q.removeDataAttribute(this._menu, "popper"),
          X.trigger(this._element, "hidden.bs.dropdown", t));
      }
      _getConfig(t) {
        if (
          ((t = {
            ...this.constructor.Default,
            ...q.getDataAttributes(this._element),
            ...t,
          }),
          c(mt, t, this.constructor.DefaultType),
          "object" == typeof t.reference &&
            !o(t.reference) &&
            "function" != typeof t.reference.getBoundingClientRect)
        )
          throw new TypeError(
            `${mt.toUpperCase()}: Option "reference" provided type "object" without a required "getBoundingClientRect" method.`
          );
        return t;
      }
      _createPopper(t) {
        if (void 0 === e)
          throw new TypeError(
            "Bootstrap's dropdowns require Popper (https://popper.js.org)"
          );
        let i = this._element;
        "parent" === this._config.reference
          ? (i = t)
          : o(this._config.reference)
          ? (i = l(this._config.reference))
          : "object" == typeof this._config.reference &&
            (i = this._config.reference);
        const n = this._getPopperConfig(),
          a = n.modifiers.find(
            (t) => "applyStyles" === t.name && !1 === t.enabled
          );
        (this._popper = e.createPopper(i, this._menu, n)),
          a && q.setDataAttribute(this._menu, "popper", "static");
      }
      _isShown(t = this._element) {
        return t.classList.contains(Ct);
      }
      _getMenuElement() {
        return U.next(this._element, Et)[0];
      }
      _getPlacement() {
        const t = this._element.parentNode;
        if (t.classList.contains("dropend")) return It;
        if (t.classList.contains("dropstart")) return Ot;
        const e =
          "end" ===
          getComputedStyle(this._menu).getPropertyValue("--bs-position").trim();
        return t.classList.contains("dropup") ? (e ? Lt : _t) : e ? Mt : Pt;
      }
      _detectNavbar() {
        return null !== this._element.closest(".navbar");
      }
      _getOffset() {
        const { offset: t } = this._config;
        return "string" == typeof t
          ? t.split(",").map((t) => Number.parseInt(t, 10))
          : "function" == typeof t
          ? (e) => t(e, this._element)
          : t;
      }
      _getPopperConfig() {
        const t = {
          placement: this._getPlacement(),
          modifiers: [
            {
              name: "preventOverflow",
              options: { boundary: this._config.boundary },
            },
            { name: "offset", options: { offset: this._getOffset() } },
          ],
        };
        return (
          "static" === this._config.display &&
            (t.modifiers = [{ name: "applyStyles", enabled: !1 }]),
          {
            ...t,
            ...("function" == typeof this._config.popperConfig
              ? this._config.popperConfig(t)
              : this._config.popperConfig),
          }
        );
      }
      _selectMenuItem({ key: t, target: e }) {
        const i = U.find(
          ".dropdown-menu .dropdown-item:not(.disabled):not(:disabled)",
          this._menu
        ).filter(h);
        i.length && w(i, e, t === wt, !i.includes(e)).focus();
      }
      static jQueryInterface(t) {
        return this.each(function () {
          const e = Nt.getOrCreateInstance(this, t);
          if ("string" == typeof t) {
            if (void 0 === e[t]) throw new TypeError(`No method named "${t}"`);
            e[t]();
          }
        });
      }
      static clearMenus(t) {
        if (t && (2 === t.button || ("keyup" === t.type && "Tab" !== t.key)))
          return;
        const e = U.find(Tt);
        for (let i = 0, n = e.length; i < n; i++) {
          const n = Nt.getInstance(e[i]);
          if (!n || !1 === n._config.autoClose) continue;
          if (!n._isShown()) continue;
          const a = { relatedTarget: n._element };
          if (t) {
            const e = t.composedPath(),
              i = e.includes(n._menu);
            if (
              e.includes(n._element) ||
              ("inside" === n._config.autoClose && !i) ||
              ("outside" === n._config.autoClose && i)
            )
              continue;
            if (
              n._menu.contains(t.target) &&
              (("keyup" === t.type && "Tab" === t.key) ||
                /input|select|option|textarea|form/i.test(t.target.tagName))
            )
              continue;
            "click" === t.type && (a.clickEvent = t);
          }
          n._completeHide(a);
        }
      }
      static getParentFromElement(t) {
        return s(t) || t.parentNode;
      }
      static dataApiKeydownHandler(t) {
        if (
          /input|textarea/i.test(t.target.tagName)
            ? t.key === bt ||
              (t.key !== vt &&
                ((t.key !== wt && t.key !== yt) || t.target.closest(Et)))
            : !kt.test(t.key)
        )
          return;
        const e = this.classList.contains(Ct);
        if (!e && t.key === vt) return;
        if ((t.preventDefault(), t.stopPropagation(), d(this))) return;
        const i = this.matches(Tt) ? this : U.prev(this, Tt)[0],
          n = Nt.getOrCreateInstance(i);
        if (t.key !== vt)
          return t.key === yt || t.key === wt
            ? (e || n.show(), void n._selectMenuItem(t))
            : void ((e && t.key !== bt) || Nt.clearMenus());
        n.hide();
      }
    }
    X.on(document, St, Tt, Nt.dataApiKeydownHandler),
      X.on(document, St, Et, Nt.dataApiKeydownHandler),
      X.on(document, At, Nt.clearMenus),
      X.on(document, "keyup.bs.dropdown.data-api", Nt.clearMenus),
      X.on(document, At, Tt, function (t) {
        t.preventDefault(), Nt.getOrCreateInstance(this).toggle();
      }),
      v(Nt);
    const Xt = ".fixed-top, .fixed-bottom, .is-fixed, .sticky-top",
      Ht = ".sticky-top";
    class Rt {
      constructor() {
        this._element = document.body;
      }
      getWidth() {
        const t = document.documentElement.clientWidth;
        return Math.abs(window.innerWidth - t);
      }
      hide() {
        const t = this.getWidth();
        this._disableOverFlow(),
          this._setElementAttributes(
            this._element,
            "paddingRight",
            (e) => e + t
          ),
          this._setElementAttributes(Xt, "paddingRight", (e) => e + t),
          this._setElementAttributes(Ht, "marginRight", (e) => e - t);
      }
      _disableOverFlow() {
        this._saveInitialAttribute(this._element, "overflow"),
          (this._element.style.overflow = "hidden");
      }
      _setElementAttributes(t, e, i) {
        const n = this.getWidth();
        this._applyManipulationCallback(t, (t) => {
          if (t !== this._element && window.innerWidth > t.clientWidth + n)
            return;
          this._saveInitialAttribute(t, e);
          const a = window.getComputedStyle(t)[e];
          t.style[e] = `${i(Number.parseFloat(a))}px`;
        });
      }
      reset() {
        this._resetElementAttributes(this._element, "overflow"),
          this._resetElementAttributes(this._element, "paddingRight"),
          this._resetElementAttributes(Xt, "paddingRight"),
          this._resetElementAttributes(Ht, "marginRight");
      }
      _saveInitialAttribute(t, e) {
        const i = t.style[e];
        i && q.setDataAttribute(t, e, i);
      }
      _resetElementAttributes(t, e) {
        this._applyManipulationCallback(t, (t) => {
          const i = q.getDataAttribute(t, e);
          void 0 === i
            ? t.style.removeProperty(e)
            : (q.removeDataAttribute(t, e), (t.style[e] = i));
        });
      }
      _applyManipulationCallback(t, e) {
        o(t) ? e(t) : U.find(t, this._element).forEach(e);
      }
      isOverflowing() {
        return this.getWidth() > 0;
      }
    }
    const Ft = {
        className: "modal-backdrop",
        isVisible: !0,
        isAnimated: !1,
        rootElement: "body",
        clickCallback: null,
      },
      Yt = {
        className: "string",
        isVisible: "boolean",
        isAnimated: "boolean",
        rootElement: "(element|string)",
        clickCallback: "(function|null)",
      },
      Wt = "show",
      Bt = "mousedown.bs.backdrop";
    class jt {
      constructor(t) {
        (this._config = this._getConfig(t)),
          (this._isAppended = !1),
          (this._element = null);
      }
      show(t) {
        this._config.isVisible
          ? (this._append(),
            this._config.isAnimated && p(this._getElement()),
            this._getElement().classList.add(Wt),
            this._emulateAnimation(() => {
              b(t);
            }))
          : b(t);
      }
      hide(t) {
        this._config.isVisible
          ? (this._getElement().classList.remove(Wt),
            this._emulateAnimation(() => {
              this.dispose(), b(t);
            }))
          : b(t);
      }
      _getElement() {
        if (!this._element) {
          const t = document.createElement("div");
          (t.className = this._config.className),
            this._config.isAnimated && t.classList.add("fade"),
            (this._element = t);
        }
        return this._element;
      }
      _getConfig(t) {
        return (
          ((t = { ...Ft, ...("object" == typeof t ? t : {}) }).rootElement = l(
            t.rootElement
          )),
          c("backdrop", t, Yt),
          t
        );
      }
      _append() {
        this._isAppended ||
          (this._config.rootElement.append(this._getElement()),
          X.on(this._getElement(), Bt, () => {
            b(this._config.clickCallback);
          }),
          (this._isAppended = !0));
      }
      dispose() {
        this._isAppended &&
          (X.off(this._element, Bt),
          this._element.remove(),
          (this._isAppended = !1));
      }
      _emulateAnimation(t) {
        y(t, this._getElement(), this._config.isAnimated);
      }
    }
    const Vt = { trapElement: null, autofocus: !0 },
      Gt = { trapElement: "element", autofocus: "boolean" },
      qt = ".bs.focustrap",
      Ut = "backward";
    class $t {
      constructor(t) {
        (this._config = this._getConfig(t)),
          (this._isActive = !1),
          (this._lastTabNavDirection = null);
      }
      activate() {
        const { trapElement: t, autofocus: e } = this._config;
        this._isActive ||
          (e && t.focus(),
          X.off(document, qt),
          X.on(document, "focusin.bs.focustrap", (t) => this._handleFocusin(t)),
          X.on(document, "keydown.tab.bs.focustrap", (t) =>
            this._handleKeydown(t)
          ),
          (this._isActive = !0));
      }
      deactivate() {
        this._isActive && ((this._isActive = !1), X.off(document, qt));
      }
      _handleFocusin(t) {
        const { target: e } = t,
          { trapElement: i } = this._config;
        if (e === document || e === i || i.contains(e)) return;
        const n = U.focusableChildren(i);
        0 === n.length
          ? i.focus()
          : this._lastTabNavDirection === Ut
          ? n[n.length - 1].focus()
          : n[0].focus();
      }
      _handleKeydown(t) {
        "Tab" === t.key &&
          (this._lastTabNavDirection = t.shiftKey ? Ut : "forward");
      }
      _getConfig(t) {
        return (
          (t = { ...Vt, ...("object" == typeof t ? t : {}) }),
          c("focustrap", t, Gt),
          t
        );
      }
    }
    const Zt = "modal",
      Qt = "Escape",
      Kt = { backdrop: !0, keyboard: !0, focus: !0 },
      Jt = {
        backdrop: "(boolean|string)",
        keyboard: "boolean",
        focus: "boolean",
      },
      te = "hidden.bs.modal",
      ee = "show.bs.modal",
      ie = "resize.bs.modal",
      ne = "click.dismiss.bs.modal",
      ae = "keydown.dismiss.bs.modal",
      se = "mousedown.dismiss.bs.modal",
      re = "modal-open",
      oe = "show",
      le = "modal-static";
    class ce extends F {
      constructor(t, e) {
        super(t),
          (this._config = this._getConfig(e)),
          (this._dialog = U.findOne(".modal-dialog", this._element)),
          (this._backdrop = this._initializeBackDrop()),
          (this._focustrap = this._initializeFocusTrap()),
          (this._isShown = !1),
          (this._ignoreBackdropClick = !1),
          (this._isTransitioning = !1),
          (this._scrollBar = new Rt());
      }
      static get Default() {
        return Kt;
      }
      static get NAME() {
        return Zt;
      }
      toggle(t) {
        return this._isShown ? this.hide() : this.show(t);
      }
      show(t) {
        this._isShown ||
          this._isTransitioning ||
          X.trigger(this._element, ee, { relatedTarget: t }).defaultPrevented ||
          ((this._isShown = !0),
          this._isAnimated() && (this._isTransitioning = !0),
          this._scrollBar.hide(),
          document.body.classList.add(re),
          this._adjustDialog(),
          this._setEscapeEvent(),
          this._setResizeEvent(),
          X.on(this._dialog, se, () => {
            X.one(this._element, "mouseup.dismiss.bs.modal", (t) => {
              t.target === this._element && (this._ignoreBackdropClick = !0);
            });
          }),
          this._showBackdrop(() => this._showElement(t)));
      }
      hide() {
        if (!this._isShown || this._isTransitioning) return;
        if (X.trigger(this._element, "hide.bs.modal").defaultPrevented) return;
        this._isShown = !1;
        const t = this._isAnimated();
        t && (this._isTransitioning = !0),
          this._setEscapeEvent(),
          this._setResizeEvent(),
          this._focustrap.deactivate(),
          this._element.classList.remove(oe),
          X.off(this._element, ne),
          X.off(this._dialog, se),
          this._queueCallback(() => this._hideModal(), this._element, t);
      }
      dispose() {
        [window, this._dialog].forEach((t) => X.off(t, ".bs.modal")),
          this._backdrop.dispose(),
          this._focustrap.deactivate(),
          super.dispose();
      }
      handleUpdate() {
        this._adjustDialog();
      }
      _initializeBackDrop() {
        return new jt({
          isVisible: Boolean(this._config.backdrop),
          isAnimated: this._isAnimated(),
        });
      }
      _initializeFocusTrap() {
        return new $t({ trapElement: this._element });
      }
      _getConfig(t) {
        return (
          (t = {
            ...Kt,
            ...q.getDataAttributes(this._element),
            ...("object" == typeof t ? t : {}),
          }),
          c(Zt, t, Jt),
          t
        );
      }
      _showElement(t) {
        const e = this._isAnimated(),
          i = U.findOne(".modal-body", this._dialog);
        (this._element.parentNode &&
          this._element.parentNode.nodeType === Node.ELEMENT_NODE) ||
          document.body.append(this._element),
          (this._element.style.display = "block"),
          this._element.removeAttribute("aria-hidden"),
          this._element.setAttribute("aria-modal", !0),
          this._element.setAttribute("role", "dialog"),
          (this._element.scrollTop = 0),
          i && (i.scrollTop = 0),
          e && p(this._element),
          this._element.classList.add(oe),
          this._queueCallback(
            () => {
              this._config.focus && this._focustrap.activate(),
                (this._isTransitioning = !1),
                X.trigger(this._element, "shown.bs.modal", {
                  relatedTarget: t,
                });
            },
            this._dialog,
            e
          );
      }
      _setEscapeEvent() {
        this._isShown
          ? X.on(this._element, ae, (t) => {
              this._config.keyboard && t.key === Qt
                ? (t.preventDefault(), this.hide())
                : this._config.keyboard ||
                  t.key !== Qt ||
                  this._triggerBackdropTransition();
            })
          : X.off(this._element, ae);
      }
      _setResizeEvent() {
        this._isShown
          ? X.on(window, ie, () => this._adjustDialog())
          : X.off(window, ie);
      }
      _hideModal() {
        (this._element.style.display = "none"),
          this._element.setAttribute("aria-hidden", !0),
          this._element.removeAttribute("aria-modal"),
          this._element.removeAttribute("role"),
          (this._isTransitioning = !1),
          this._backdrop.hide(() => {
            document.body.classList.remove(re),
              this._resetAdjustments(),
              this._scrollBar.reset(),
              X.trigger(this._element, te);
          });
      }
      _showBackdrop(t) {
        X.on(this._element, ne, (t) => {
          this._ignoreBackdropClick
            ? (this._ignoreBackdropClick = !1)
            : t.target === t.currentTarget &&
              (!0 === this._config.backdrop
                ? this.hide()
                : "static" === this._config.backdrop &&
                  this._triggerBackdropTransition());
        }),
          this._backdrop.show(t);
      }
      _isAnimated() {
        return this._element.classList.contains("fade");
      }
      _triggerBackdropTransition() {
        if (X.trigger(this._element, "hidePrevented.bs.modal").defaultPrevented)
          return;
        const { classList: t, scrollHeight: e, style: i } = this._element,
          n = e > document.documentElement.clientHeight;
        (!n && "hidden" === i.overflowY) ||
          t.contains(le) ||
          (n || (i.overflowY = "hidden"),
          t.add(le),
          this._queueCallback(() => {
            t.remove(le),
              n ||
                this._queueCallback(() => {
                  i.overflowY = "";
                }, this._dialog);
          }, this._dialog),
          this._element.focus());
      }
      _adjustDialog() {
        const t =
            this._element.scrollHeight > document.documentElement.clientHeight,
          e = this._scrollBar.getWidth(),
          i = e > 0;
        ((!i && t && !m()) || (i && !t && m())) &&
          (this._element.style.paddingLeft = `${e}px`),
          ((i && !t && !m()) || (!i && t && m())) &&
            (this._element.style.paddingRight = `${e}px`);
      }
      _resetAdjustments() {
        (this._element.style.paddingLeft = ""),
          (this._element.style.paddingRight = "");
      }
      static jQueryInterface(t, e) {
        return this.each(function () {
          const i = ce.getOrCreateInstance(this, t);
          if ("string" == typeof t) {
            if (void 0 === i[t]) throw new TypeError(`No method named "${t}"`);
            i[t](e);
          }
        });
      }
    }
    X.on(
      document,
      "click.bs.modal.data-api",
      '[data-bs-toggle="modal"]',
      function (t) {
        const e = s(this);
        ["A", "AREA"].includes(this.tagName) && t.preventDefault(),
          X.one(e, ee, (t) => {
            t.defaultPrevented ||
              X.one(e, te, () => {
                h(this) && this.focus();
              });
          });
        const i = U.findOne(".modal.show");
        i && ce.getInstance(i).hide(), ce.getOrCreateInstance(e).toggle(this);
      }
    ),
      Y(ce),
      v(ce);
    const he = "offcanvas",
      de = { backdrop: !0, keyboard: !0, scroll: !1 },
      ue = { backdrop: "boolean", keyboard: "boolean", scroll: "boolean" },
      fe = "show",
      pe = ".offcanvas.show",
      ge = "hidden.bs.offcanvas";
    class xe extends F {
      constructor(t, e) {
        super(t),
          (this._config = this._getConfig(e)),
          (this._isShown = !1),
          (this._backdrop = this._initializeBackDrop()),
          (this._focustrap = this._initializeFocusTrap()),
          this._addEventListeners();
      }
      static get NAME() {
        return he;
      }
      static get Default() {
        return de;
      }
      toggle(t) {
        return this._isShown ? this.hide() : this.show(t);
      }
      show(t) {
        this._isShown ||
          X.trigger(this._element, "show.bs.offcanvas", { relatedTarget: t })
            .defaultPrevented ||
          ((this._isShown = !0),
          (this._element.style.visibility = "visible"),
          this._backdrop.show(),
          this._config.scroll || new Rt().hide(),
          this._element.removeAttribute("aria-hidden"),
          this._element.setAttribute("aria-modal", !0),
          this._element.setAttribute("role", "dialog"),
          this._element.classList.add(fe),
          this._queueCallback(
            () => {
              this._config.scroll || this._focustrap.activate(),
                X.trigger(this._element, "shown.bs.offcanvas", {
                  relatedTarget: t,
                });
            },
            this._element,
            !0
          ));
      }
      hide() {
        this._isShown &&
          (X.trigger(this._element, "hide.bs.offcanvas").defaultPrevented ||
            (this._focustrap.deactivate(),
            this._element.blur(),
            (this._isShown = !1),
            this._element.classList.remove(fe),
            this._backdrop.hide(),
            this._queueCallback(
              () => {
                this._element.setAttribute("aria-hidden", !0),
                  this._element.removeAttribute("aria-modal"),
                  this._element.removeAttribute("role"),
                  (this._element.style.visibility = "hidden"),
                  this._config.scroll || new Rt().reset(),
                  X.trigger(this._element, ge);
              },
              this._element,
              !0
            )));
      }
      dispose() {
        this._backdrop.dispose(), this._focustrap.deactivate(), super.dispose();
      }
      _getConfig(t) {
        return (
          (t = {
            ...de,
            ...q.getDataAttributes(this._element),
            ...("object" == typeof t ? t : {}),
          }),
          c(he, t, ue),
          t
        );
      }
      _initializeBackDrop() {
        return new jt({
          className: "offcanvas-backdrop",
          isVisible: this._config.backdrop,
          isAnimated: !0,
          rootElement: this._element.parentNode,
          clickCallback: () => this.hide(),
        });
      }
      _initializeFocusTrap() {
        return new $t({ trapElement: this._element });
      }
      _addEventListeners() {
        X.on(this._element, "keydown.dismiss.bs.offcanvas", (t) => {
          this._config.keyboard && "Escape" === t.key && this.hide();
        });
      }
      static jQueryInterface(t) {
        return this.each(function () {
          const e = xe.getOrCreateInstance(this, t);
          if ("string" == typeof t) {
            if (void 0 === e[t] || t.startsWith("_") || "constructor" === t)
              throw new TypeError(`No method named "${t}"`);
            e[t](this);
          }
        });
      }
    }
    X.on(
      document,
      "click.bs.offcanvas.data-api",
      '[data-bs-toggle="offcanvas"]',
      function (t) {
        const e = s(this);
        if (
          (["A", "AREA"].includes(this.tagName) && t.preventDefault(), d(this))
        )
          return;
        X.one(e, ge, () => {
          h(this) && this.focus();
        });
        const i = U.findOne(pe);
        i && i !== e && xe.getInstance(i).hide(),
          xe.getOrCreateInstance(e).toggle(this);
      }
    ),
      X.on(window, "load.bs.offcanvas.data-api", () =>
        U.find(pe).forEach((t) => xe.getOrCreateInstance(t).show())
      ),
      Y(xe),
      v(xe);
    const me = new Set([
        "background",
        "cite",
        "href",
        "itemtype",
        "longdesc",
        "poster",
        "src",
        "xlink:href",
      ]),
      ve = /^(?:(?:https?|mailto|ftp|tel|file|sms):|[^#&/:?]*(?:[#/?]|$))/i,
      be =
        /^data:(?:image\/(?:bmp|gif|jpeg|jpg|png|tiff|webp)|video\/(?:mpeg|mp4|ogg|webm)|audio\/(?:mp3|oga|ogg|opus));base64,[\d+/a-z]+=*$/i,
      ye = (t, e) => {
        const i = t.nodeName.toLowerCase();
        if (e.includes(i))
          return (
            !me.has(i) || Boolean(ve.test(t.nodeValue) || be.test(t.nodeValue))
          );
        const n = e.filter((t) => t instanceof RegExp);
        for (let t = 0, e = n.length; t < e; t++) if (n[t].test(i)) return !0;
        return !1;
      };
    function we(t, e, i) {
      if (!t.length) return t;
      if (i && "function" == typeof i) return i(t);
      const n = new window.DOMParser().parseFromString(t, "text/html"),
        a = [].concat(...n.body.querySelectorAll("*"));
      for (let t = 0, i = a.length; t < i; t++) {
        const i = a[t],
          n = i.nodeName.toLowerCase();
        if (!Object.keys(e).includes(n)) {
          i.remove();
          continue;
        }
        const s = [].concat(...i.attributes),
          r = [].concat(e["*"] || [], e[n] || []);
        s.forEach((t) => {
          ye(t, r) || i.removeAttribute(t.nodeName);
        });
      }
      return n.body.innerHTML;
    }
    const ke = "tooltip",
      Ae = new Set(["sanitize", "allowList", "sanitizeFn"]),
      Se = {
        animation: "boolean",
        template: "string",
        title: "(string|element|function)",
        trigger: "string",
        delay: "(number|object)",
        html: "boolean",
        selector: "(string|boolean)",
        placement: "(string|function)",
        offset: "(array|string|function)",
        container: "(string|element|boolean)",
        fallbackPlacements: "array",
        boundary: "(string|element)",
        customClass: "(string|function)",
        sanitize: "boolean",
        sanitizeFn: "(null|function)",
        allowList: "object",
        popperConfig: "(null|object|function)",
      },
      Ce = {
        AUTO: "auto",
        TOP: "top",
        RIGHT: m() ? "left" : "right",
        BOTTOM: "bottom",
        LEFT: m() ? "right" : "left",
      },
      Te = {
        animation: !0,
        template:
          '<div class="tooltip" role="tooltip"><div class="tooltip-arrow"></div><div class="tooltip-inner"></div></div>',
        trigger: "hover focus",
        title: "",
        delay: 0,
        html: !1,
        selector: !1,
        placement: "top",
        offset: [0, 0],
        container: !1,
        fallbackPlacements: ["top", "right", "bottom", "left"],
        boundary: "clippingParents",
        customClass: "",
        sanitize: !0,
        sanitizeFn: null,
        allowList: {
          "*": ["class", "dir", "id", "lang", "role", /^aria-[\w-]*$/i],
          a: ["target", "href", "title", "rel"],
          area: [],
          b: [],
          br: [],
          col: [],
          code: [],
          div: [],
          em: [],
          hr: [],
          h1: [],
          h2: [],
          h3: [],
          h4: [],
          h5: [],
          h6: [],
          i: [],
          img: ["src", "srcset", "alt", "title", "width", "height"],
          li: [],
          ol: [],
          p: [],
          pre: [],
          s: [],
          small: [],
          span: [],
          sub: [],
          sup: [],
          strong: [],
          u: [],
          ul: [],
        },
        popperConfig: null,
      },
      Ee = {
        HIDE: "hide.bs.tooltip",
        HIDDEN: "hidden.bs.tooltip",
        SHOW: "show.bs.tooltip",
        SHOWN: "shown.bs.tooltip",
        INSERTED: "inserted.bs.tooltip",
        CLICK: "click.bs.tooltip",
        FOCUSIN: "focusin.bs.tooltip",
        FOCUSOUT: "focusout.bs.tooltip",
        MOUSEENTER: "mouseenter.bs.tooltip",
        MOUSELEAVE: "mouseleave.bs.tooltip",
      },
      _e = "fade",
      Le = "show",
      Pe = "show",
      Me = "out",
      Ie = ".tooltip-inner",
      Oe = ".modal",
      De = "hide.bs.modal",
      ze = "hover",
      Ne = "focus";
    class Xe extends F {
      constructor(t, i) {
        if (void 0 === e)
          throw new TypeError(
            "Bootstrap's tooltips require Popper (https://popper.js.org)"
          );
        super(t),
          (this._isEnabled = !0),
          (this._timeout = 0),
          (this._hoverState = ""),
          (this._activeTrigger = {}),
          (this._popper = null),
          (this._config = this._getConfig(i)),
          (this.tip = null),
          this._setListeners();
      }
      static get Default() {
        return Te;
      }
      static get NAME() {
        return ke;
      }
      static get Event() {
        return Ee;
      }
      static get DefaultType() {
        return Se;
      }
      enable() {
        this._isEnabled = !0;
      }
      disable() {
        this._isEnabled = !1;
      }
      toggleEnabled() {
        this._isEnabled = !this._isEnabled;
      }
      toggle(t) {
        if (this._isEnabled)
          if (t) {
            const e = this._initializeOnDelegatedTarget(t);
            (e._activeTrigger.click = !e._activeTrigger.click),
              e._isWithActiveTrigger() ? e._enter(null, e) : e._leave(null, e);
          } else {
            if (this.getTipElement().classList.contains(Le))
              return void this._leave(null, this);
            this._enter(null, this);
          }
      }
      dispose() {
        clearTimeout(this._timeout),
          X.off(this._element.closest(Oe), De, this._hideModalHandler),
          this.tip && this.tip.remove(),
          this._disposePopper(),
          super.dispose();
      }
      show() {
        if ("none" === this._element.style.display)
          throw new Error("Please use show on visible elements");
        if (!this.isWithContent() || !this._isEnabled) return;
        const t = X.trigger(this._element, this.constructor.Event.SHOW),
          i = u(this._element),
          n =
            null === i
              ? this._element.ownerDocument.documentElement.contains(
                  this._element
                )
              : i.contains(this._element);
        if (t.defaultPrevented || !n) return;
        "tooltip" === this.constructor.NAME &&
          this.tip &&
          this.getTitle() !== this.tip.querySelector(Ie).innerHTML &&
          (this._disposePopper(), this.tip.remove(), (this.tip = null));
        const a = this.getTipElement(),
          s = ((t) => {
            do {
              t += Math.floor(1e6 * Math.random());
            } while (document.getElementById(t));
            return t;
          })(this.constructor.NAME);
        a.setAttribute("id", s),
          this._element.setAttribute("aria-describedby", s),
          this._config.animation && a.classList.add(_e);
        const r =
            "function" == typeof this._config.placement
              ? this._config.placement.call(this, a, this._element)
              : this._config.placement,
          o = this._getAttachment(r);
        this._addAttachmentClass(o);
        const { container: l } = this._config;
        R.set(a, this.constructor.DATA_KEY, this),
          this._element.ownerDocument.documentElement.contains(this.tip) ||
            (l.append(a),
            X.trigger(this._element, this.constructor.Event.INSERTED)),
          this._popper
            ? this._popper.update()
            : (this._popper = e.createPopper(
                this._element,
                a,
                this._getPopperConfig(o)
              )),
          a.classList.add(Le);
        const c = this._resolvePossibleFunction(this._config.customClass);
        c && a.classList.add(...c.split(" ")),
          "ontouchstart" in document.documentElement &&
            [].concat(...document.body.children).forEach((t) => {
              X.on(t, "mouseover", f);
            });
        const h = this.tip.classList.contains(_e);
        this._queueCallback(
          () => {
            const t = this._hoverState;
            (this._hoverState = null),
              X.trigger(this._element, this.constructor.Event.SHOWN),
              t === Me && this._leave(null, this);
          },
          this.tip,
          h
        );
      }
      hide() {
        if (!this._popper) return;
        const t = this.getTipElement();
        if (
          X.trigger(this._element, this.constructor.Event.HIDE).defaultPrevented
        )
          return;
        t.classList.remove(Le),
          "ontouchstart" in document.documentElement &&
            []
              .concat(...document.body.children)
              .forEach((t) => X.off(t, "mouseover", f)),
          (this._activeTrigger.click = !1),
          (this._activeTrigger.focus = !1),
          (this._activeTrigger.hover = !1);
        const e = this.tip.classList.contains(_e);
        this._queueCallback(
          () => {
            this._isWithActiveTrigger() ||
              (this._hoverState !== Pe && t.remove(),
              this._cleanTipClass(),
              this._element.removeAttribute("aria-describedby"),
              X.trigger(this._element, this.constructor.Event.HIDDEN),
              this._disposePopper());
          },
          this.tip,
          e
        ),
          (this._hoverState = "");
      }
      update() {
        null !== this._popper && this._popper.update();
      }
      isWithContent() {
        return Boolean(this.getTitle());
      }
      getTipElement() {
        if (this.tip) return this.tip;
        const t = document.createElement("div");
        t.innerHTML = this._config.template;
        const e = t.children[0];
        return (
          this.setContent(e),
          e.classList.remove(_e, Le),
          (this.tip = e),
          this.tip
        );
      }
      setContent(t) {
        this._sanitizeAndSetContent(t, this.getTitle(), Ie);
      }
      _sanitizeAndSetContent(t, e, i) {
        const n = U.findOne(i, t);
        e || !n ? this.setElementContent(n, e) : n.remove();
      }
      setElementContent(t, e) {
        if (null !== t)
          return o(e)
            ? ((e = l(e)),
              void (this._config.html
                ? e.parentNode !== t && ((t.innerHTML = ""), t.append(e))
                : (t.textContent = e.textContent)))
            : void (this._config.html
                ? (this._config.sanitize &&
                    (e = we(
                      e,
                      this._config.allowList,
                      this._config.sanitizeFn
                    )),
                  (t.innerHTML = e))
                : (t.textContent = e));
      }
      getTitle() {
        const t =
          this._element.getAttribute("data-bs-original-title") ||
          this._config.title;
        return this._resolvePossibleFunction(t);
      }
      updateAttachment(t) {
        return "right" === t ? "end" : "left" === t ? "start" : t;
      }
      _initializeOnDelegatedTarget(t, e) {
        return (
          e ||
          this.constructor.getOrCreateInstance(
            t.delegateTarget,
            this._getDelegateConfig()
          )
        );
      }
      _getOffset() {
        const { offset: t } = this._config;
        return "string" == typeof t
          ? t.split(",").map((t) => Number.parseInt(t, 10))
          : "function" == typeof t
          ? (e) => t(e, this._element)
          : t;
      }
      _resolvePossibleFunction(t) {
        return "function" == typeof t ? t.call(this._element) : t;
      }
      _getPopperConfig(t) {
        const e = {
          placement: t,
          modifiers: [
            {
              name: "flip",
              options: { fallbackPlacements: this._config.fallbackPlacements },
            },
            { name: "offset", options: { offset: this._getOffset() } },
            {
              name: "preventOverflow",
              options: { boundary: this._config.boundary },
            },
            {
              name: "arrow",
              options: { element: `.${this.constructor.NAME}-arrow` },
            },
            {
              name: "onChange",
              enabled: !0,
              phase: "afterWrite",
              fn: (t) => this._handlePopperPlacementChange(t),
            },
          ],
          onFirstUpdate: (t) => {
            t.options.placement !== t.placement &&
              this._handlePopperPlacementChange(t);
          },
        };
        return {
          ...e,
          ...("function" == typeof this._config.popperConfig
            ? this._config.popperConfig(e)
            : this._config.popperConfig),
        };
      }
      _addAttachmentClass(t) {
        this.getTipElement().classList.add(
          `${this._getBasicClassPrefix()}-${this.updateAttachment(t)}`
        );
      }
      _getAttachment(t) {
        return Ce[t.toUpperCase()];
      }
      _setListeners() {
        this._config.trigger.split(" ").forEach((t) => {
          if ("click" === t)
            X.on(
              this._element,
              this.constructor.Event.CLICK,
              this._config.selector,
              (t) => this.toggle(t)
            );
          else if ("manual" !== t) {
            const e =
                t === ze
                  ? this.constructor.Event.MOUSEENTER
                  : this.constructor.Event.FOCUSIN,
              i =
                t === ze
                  ? this.constructor.Event.MOUSELEAVE
                  : this.constructor.Event.FOCUSOUT;
            X.on(this._element, e, this._config.selector, (t) =>
              this._enter(t)
            ),
              X.on(this._element, i, this._config.selector, (t) =>
                this._leave(t)
              );
          }
        }),
          (this._hideModalHandler = () => {
            this._element && this.hide();
          }),
          X.on(this._element.closest(Oe), De, this._hideModalHandler),
          this._config.selector
            ? (this._config = {
                ...this._config,
                trigger: "manual",
                selector: "",
              })
            : this._fixTitle();
      }
      _fixTitle() {
        const t = this._element.getAttribute("title"),
          e = typeof this._element.getAttribute("data-bs-original-title");
        (t || "string" !== e) &&
          (this._element.setAttribute("data-bs-original-title", t || ""),
          !t ||
            this._element.getAttribute("aria-label") ||
            this._element.textContent ||
            this._element.setAttribute("aria-label", t),
          this._element.setAttribute("title", ""));
      }
      _enter(t, e) {
        (e = this._initializeOnDelegatedTarget(t, e)),
          t && (e._activeTrigger["focusin" === t.type ? Ne : ze] = !0),
          e.getTipElement().classList.contains(Le) || e._hoverState === Pe
            ? (e._hoverState = Pe)
            : (clearTimeout(e._timeout),
              (e._hoverState = Pe),
              e._config.delay && e._config.delay.show
                ? (e._timeout = setTimeout(() => {
                    e._hoverState === Pe && e.show();
                  }, e._config.delay.show))
                : e.show());
      }
      _leave(t, e) {
        (e = this._initializeOnDelegatedTarget(t, e)),
          t &&
            (e._activeTrigger["focusout" === t.type ? Ne : ze] =
              e._element.contains(t.relatedTarget)),
          e._isWithActiveTrigger() ||
            (clearTimeout(e._timeout),
            (e._hoverState = Me),
            e._config.delay && e._config.delay.hide
              ? (e._timeout = setTimeout(() => {
                  e._hoverState === Me && e.hide();
                }, e._config.delay.hide))
              : e.hide());
      }
      _isWithActiveTrigger() {
        for (const t in this._activeTrigger)
          if (this._activeTrigger[t]) return !0;
        return !1;
      }
      _getConfig(t) {
        const e = q.getDataAttributes(this._element);
        return (
          Object.keys(e).forEach((t) => {
            Ae.has(t) && delete e[t];
          }),
          ((t = {
            ...this.constructor.Default,
            ...e,
            ...("object" == typeof t && t ? t : {}),
          }).container = !1 === t.container ? document.body : l(t.container)),
          "number" == typeof t.delay &&
            (t.delay = { show: t.delay, hide: t.delay }),
          "number" == typeof t.title && (t.title = t.title.toString()),
          "number" == typeof t.content && (t.content = t.content.toString()),
          c(ke, t, this.constructor.DefaultType),
          t.sanitize &&
            (t.template = we(t.template, t.allowList, t.sanitizeFn)),
          t
        );
      }
      _getDelegateConfig() {
        const t = {};
        for (const e in this._config)
          this.constructor.Default[e] !== this._config[e] &&
            (t[e] = this._config[e]);
        return t;
      }
      _cleanTipClass() {
        const t = this.getTipElement(),
          e = new RegExp(`(^|\\s)${this._getBasicClassPrefix()}\\S+`, "g"),
          i = t.getAttribute("class").match(e);
        null !== i &&
          i.length > 0 &&
          i.map((t) => t.trim()).forEach((e) => t.classList.remove(e));
      }
      _getBasicClassPrefix() {
        return "bs-tooltip";
      }
      _handlePopperPlacementChange(t) {
        const { state: e } = t;
        e &&
          ((this.tip = e.elements.popper),
          this._cleanTipClass(),
          this._addAttachmentClass(this._getAttachment(e.placement)));
      }
      _disposePopper() {
        this._popper && (this._popper.destroy(), (this._popper = null));
      }
      static jQueryInterface(t) {
        return this.each(function () {
          const e = Xe.getOrCreateInstance(this, t);
          if ("string" == typeof t) {
            if (void 0 === e[t]) throw new TypeError(`No method named "${t}"`);
            e[t]();
          }
        });
      }
    }
    v(Xe);
    const He = {
        ...Xe.Default,
        placement: "right",
        offset: [0, 8],
        trigger: "click",
        content: "",
        template:
          '<div class="popover" role="tooltip"><div class="popover-arrow"></div><h3 class="popover-header"></h3><div class="popover-body"></div></div>',
      },
      Re = { ...Xe.DefaultType, content: "(string|element|function)" },
      Fe = {
        HIDE: "hide.bs.popover",
        HIDDEN: "hidden.bs.popover",
        SHOW: "show.bs.popover",
        SHOWN: "shown.bs.popover",
        INSERTED: "inserted.bs.popover",
        CLICK: "click.bs.popover",
        FOCUSIN: "focusin.bs.popover",
        FOCUSOUT: "focusout.bs.popover",
        MOUSEENTER: "mouseenter.bs.popover",
        MOUSELEAVE: "mouseleave.bs.popover",
      };
    class Ye extends Xe {
      static get Default() {
        return He;
      }
      static get NAME() {
        return "popover";
      }
      static get Event() {
        return Fe;
      }
      static get DefaultType() {
        return Re;
      }
      isWithContent() {
        return this.getTitle() || this._getContent();
      }
      setContent(t) {
        this._sanitizeAndSetContent(t, this.getTitle(), ".popover-header"),
          this._sanitizeAndSetContent(t, this._getContent(), ".popover-body");
      }
      _getContent() {
        return this._resolvePossibleFunction(this._config.content);
      }
      _getBasicClassPrefix() {
        return "bs-popover";
      }
      static jQueryInterface(t) {
        return this.each(function () {
          const e = Ye.getOrCreateInstance(this, t);
          if ("string" == typeof t) {
            if (void 0 === e[t]) throw new TypeError(`No method named "${t}"`);
            e[t]();
          }
        });
      }
    }
    v(Ye);
    const We = "scrollspy",
      Be = { offset: 10, method: "auto", target: "" },
      je = { offset: "number", method: "string", target: "(string|element)" },
      Ve = "active",
      Ge = ".nav-link, .list-group-item, .dropdown-item",
      qe = "position";
    class Ue extends F {
      constructor(t, e) {
        super(t),
          (this._scrollElement =
            "BODY" === this._element.tagName ? window : this._element),
          (this._config = this._getConfig(e)),
          (this._offsets = []),
          (this._targets = []),
          (this._activeTarget = null),
          (this._scrollHeight = 0),
          X.on(this._scrollElement, "scroll.bs.scrollspy", () =>
            this._process()
          ),
          this.refresh(),
          this._process();
      }
      static get Default() {
        return Be;
      }
      static get NAME() {
        return We;
      }
      refresh() {
        const t =
            this._scrollElement === this._scrollElement.window ? "offset" : qe,
          e = "auto" === this._config.method ? t : this._config.method,
          i = e === qe ? this._getScrollTop() : 0;
        (this._offsets = []),
          (this._targets = []),
          (this._scrollHeight = this._getScrollHeight()),
          U.find(Ge, this._config.target)
            .map((t) => {
              const n = a(t),
                s = n ? U.findOne(n) : null;
              if (s) {
                const t = s.getBoundingClientRect();
                if (t.width || t.height) return [q[e](s).top + i, n];
              }
              return null;
            })
            .filter((t) => t)
            .sort((t, e) => t[0] - e[0])
            .forEach((t) => {
              this._offsets.push(t[0]), this._targets.push(t[1]);
            });
      }
      dispose() {
        X.off(this._scrollElement, ".bs.scrollspy"), super.dispose();
      }
      _getConfig(t) {
        return (
          ((t = {
            ...Be,
            ...q.getDataAttributes(this._element),
            ...("object" == typeof t && t ? t : {}),
          }).target = l(t.target) || document.documentElement),
          c(We, t, je),
          t
        );
      }
      _getScrollTop() {
        return this._scrollElement === window
          ? this._scrollElement.pageYOffset
          : this._scrollElement.scrollTop;
      }
      _getScrollHeight() {
        return (
          this._scrollElement.scrollHeight ||
          Math.max(
            document.body.scrollHeight,
            document.documentElement.scrollHeight
          )
        );
      }
      _getOffsetHeight() {
        return this._scrollElement === window
          ? window.innerHeight
          : this._scrollElement.getBoundingClientRect().height;
      }
      _process() {
        const t = this._getScrollTop() + this._config.offset,
          e = this._getScrollHeight(),
          i = this._config.offset + e - this._getOffsetHeight();
        if ((this._scrollHeight !== e && this.refresh(), t >= i)) {
          const t = this._targets[this._targets.length - 1];
          this._activeTarget !== t && this._activate(t);
        } else {
          if (
            this._activeTarget &&
            t < this._offsets[0] &&
            this._offsets[0] > 0
          )
            return (this._activeTarget = null), void this._clear();
          for (let e = this._offsets.length; e--; )
            this._activeTarget !== this._targets[e] &&
              t >= this._offsets[e] &&
              (void 0 === this._offsets[e + 1] || t < this._offsets[e + 1]) &&
              this._activate(this._targets[e]);
        }
      }
      _activate(t) {
        (this._activeTarget = t), this._clear();
        const e = Ge.split(",").map(
            (e) => `${e}[data-bs-target="${t}"],${e}[href="${t}"]`
          ),
          i = U.findOne(e.join(","), this._config.target);
        i.classList.add(Ve),
          i.classList.contains("dropdown-item")
            ? U.findOne(
                ".dropdown-toggle",
                i.closest(".dropdown")
              ).classList.add(Ve)
            : U.parents(i, ".nav, .list-group").forEach((t) => {
                U.prev(t, ".nav-link, .list-group-item").forEach((t) =>
                  t.classList.add(Ve)
                ),
                  U.prev(t, ".nav-item").forEach((t) => {
                    U.children(t, ".nav-link").forEach((t) =>
                      t.classList.add(Ve)
                    );
                  });
              }),
          X.trigger(this._scrollElement, "activate.bs.scrollspy", {
            relatedTarget: t,
          });
      }
      _clear() {
        U.find(Ge, this._config.target)
          .filter((t) => t.classList.contains(Ve))
          .forEach((t) => t.classList.remove(Ve));
      }
      static jQueryInterface(t) {
        return this.each(function () {
          const e = Ue.getOrCreateInstance(this, t);
          if ("string" == typeof t) {
            if (void 0 === e[t]) throw new TypeError(`No method named "${t}"`);
            e[t]();
          }
        });
      }
    }
    X.on(window, "load.bs.scrollspy.data-api", () => {
      U.find('[data-bs-spy="scroll"]').forEach((t) => new Ue(t));
    }),
      v(Ue);
    const $e = "active",
      Ze = "fade",
      Qe = "show",
      Ke = ".active",
      Je = ":scope > li > .active";
    class ti extends F {
      static get NAME() {
        return "tab";
      }
      show() {
        if (
          this._element.parentNode &&
          this._element.parentNode.nodeType === Node.ELEMENT_NODE &&
          this._element.classList.contains($e)
        )
          return;
        let t;
        const e = s(this._element),
          i = this._element.closest(".nav, .list-group");
        if (i) {
          const e = "UL" === i.nodeName || "OL" === i.nodeName ? Je : Ke;
          (t = U.find(e, i)), (t = t[t.length - 1]);
        }
        const n = t
          ? X.trigger(t, "hide.bs.tab", { relatedTarget: this._element })
          : null;
        if (
          X.trigger(this._element, "show.bs.tab", { relatedTarget: t })
            .defaultPrevented ||
          (null !== n && n.defaultPrevented)
        )
          return;
        this._activate(this._element, i);
        const a = () => {
          X.trigger(t, "hidden.bs.tab", { relatedTarget: this._element }),
            X.trigger(this._element, "shown.bs.tab", { relatedTarget: t });
        };
        e ? this._activate(e, e.parentNode, a) : a();
      }
      _activate(t, e, i) {
        const n = (
            !e || ("UL" !== e.nodeName && "OL" !== e.nodeName)
              ? U.children(e, Ke)
              : U.find(Je, e)
          )[0],
          a = i && n && n.classList.contains(Ze),
          s = () => this._transitionComplete(t, n, i);
        n && a ? (n.classList.remove(Qe), this._queueCallback(s, t, !0)) : s();
      }
      _transitionComplete(t, e, i) {
        if (e) {
          e.classList.remove($e);
          const t = U.findOne(":scope > .dropdown-menu .active", e.parentNode);
          t && t.classList.remove($e),
            "tab" === e.getAttribute("role") &&
              e.setAttribute("aria-selected", !1);
        }
        t.classList.add($e),
          "tab" === t.getAttribute("role") &&
            t.setAttribute("aria-selected", !0),
          p(t),
          t.classList.contains(Ze) && t.classList.add(Qe);
        let n = t.parentNode;
        if (
          (n && "LI" === n.nodeName && (n = n.parentNode),
          n && n.classList.contains("dropdown-menu"))
        ) {
          const e = t.closest(".dropdown");
          e &&
            U.find(".dropdown-toggle", e).forEach((t) => t.classList.add($e)),
            t.setAttribute("aria-expanded", !0);
        }
        i && i();
      }
      static jQueryInterface(t) {
        return this.each(function () {
          const e = ti.getOrCreateInstance(this);
          if ("string" == typeof t) {
            if (void 0 === e[t]) throw new TypeError(`No method named "${t}"`);
            e[t]();
          }
        });
      }
    }
    X.on(
      document,
      "click.bs.tab.data-api",
      '[data-bs-toggle="tab"], [data-bs-toggle="pill"], [data-bs-toggle="list"]',
      function (t) {
        ["A", "AREA"].includes(this.tagName) && t.preventDefault(),
          d(this) || ti.getOrCreateInstance(this).show();
      }
    ),
      v(ti);
    const ei = "toast",
      ii = "hide",
      ni = "show",
      ai = "showing",
      si = { animation: "boolean", autohide: "boolean", delay: "number" },
      ri = { animation: !0, autohide: !0, delay: 5e3 };
    class oi extends F {
      constructor(t, e) {
        super(t),
          (this._config = this._getConfig(e)),
          (this._timeout = null),
          (this._hasMouseInteraction = !1),
          (this._hasKeyboardInteraction = !1),
          this._setListeners();
      }
      static get DefaultType() {
        return si;
      }
      static get Default() {
        return ri;
      }
      static get NAME() {
        return ei;
      }
      show() {
        X.trigger(this._element, "show.bs.toast").defaultPrevented ||
          (this._clearTimeout(),
          this._config.animation && this._element.classList.add("fade"),
          this._element.classList.remove(ii),
          p(this._element),
          this._element.classList.add(ni),
          this._element.classList.add(ai),
          this._queueCallback(
            () => {
              this._element.classList.remove(ai),
                X.trigger(this._element, "shown.bs.toast"),
                this._maybeScheduleHide();
            },
            this._element,
            this._config.animation
          ));
      }
      hide() {
        this._element.classList.contains(ni) &&
          (X.trigger(this._element, "hide.bs.toast").defaultPrevented ||
            (this._element.classList.add(ai),
            this._queueCallback(
              () => {
                this._element.classList.add(ii),
                  this._element.classList.remove(ai),
                  this._element.classList.remove(ni),
                  X.trigger(this._element, "hidden.bs.toast");
              },
              this._element,
              this._config.animation
            )));
      }
      dispose() {
        this._clearTimeout(),
          this._element.classList.contains(ni) &&
            this._element.classList.remove(ni),
          super.dispose();
      }
      _getConfig(t) {
        return (
          (t = {
            ...ri,
            ...q.getDataAttributes(this._element),
            ...("object" == typeof t && t ? t : {}),
          }),
          c(ei, t, this.constructor.DefaultType),
          t
        );
      }
      _maybeScheduleHide() {
        this._config.autohide &&
          (this._hasMouseInteraction ||
            this._hasKeyboardInteraction ||
            (this._timeout = setTimeout(() => {
              this.hide();
            }, this._config.delay)));
      }
      _onInteraction(t, e) {
        switch (t.type) {
          case "mouseover":
          case "mouseout":
            this._hasMouseInteraction = e;
            break;
          case "focusin":
          case "focusout":
            this._hasKeyboardInteraction = e;
        }
        if (e) return void this._clearTimeout();
        const i = t.relatedTarget;
        this._element === i ||
          this._element.contains(i) ||
          this._maybeScheduleHide();
      }
      _setListeners() {
        X.on(this._element, "mouseover.bs.toast", (t) =>
          this._onInteraction(t, !0)
        ),
          X.on(this._element, "mouseout.bs.toast", (t) =>
            this._onInteraction(t, !1)
          ),
          X.on(this._element, "focusin.bs.toast", (t) =>
            this._onInteraction(t, !0)
          ),
          X.on(this._element, "focusout.bs.toast", (t) =>
            this._onInteraction(t, !1)
          );
      }
      _clearTimeout() {
        clearTimeout(this._timeout), (this._timeout = null);
      }
      static jQueryInterface(t) {
        return this.each(function () {
          const e = oi.getOrCreateInstance(this, t);
          if ("string" == typeof t) {
            if (void 0 === e[t]) throw new TypeError(`No method named "${t}"`);
            e[t](this);
          }
        });
      }
    }
    return (
      Y(oi),
      v(oi),
      {
        Alert: W,
        Button: j,
        Carousel: rt,
        Collapse: xt,
        Dropdown: Nt,
        Modal: ce,
        Offcanvas: xe,
        Popover: Ye,
        ScrollSpy: Ue,
        Tab: ti,
        Toast: oi,
        Tooltip: Xe,
      }
    );
  }),
  (function (t, e) {
    "object" == typeof exports && "object" == typeof module
      ? (module.exports = e())
      : "function" == typeof define && define.amd
      ? define([], e)
      : "object" == typeof exports
      ? (exports.Scrollbar = e())
      : (t.Scrollbar = e());
  })(this, function () {
    return (function (t) {
      var e = {};
      function i(n) {
        if (e[n]) return e[n].exports;
        var a = (e[n] = { i: n, l: !1, exports: {} });
        return t[n].call(a.exports, a, a.exports, i), (a.l = !0), a.exports;
      }
      return (
        (i.m = t),
        (i.c = e),
        (i.d = function (t, e, n) {
          i.o(t, e) || Object.defineProperty(t, e, { enumerable: !0, get: n });
        }),
        (i.r = function (t) {
          "undefined" != typeof Symbol &&
            Symbol.toStringTag &&
            Object.defineProperty(t, Symbol.toStringTag, { value: "Module" }),
            Object.defineProperty(t, "__esModule", { value: !0 });
        }),
        (i.t = function (t, e) {
          if ((1 & e && (t = i(t)), 8 & e)) return t;
          if (4 & e && "object" == typeof t && t && t.__esModule) return t;
          var n = Object.create(null);
          if (
            (i.r(n),
            Object.defineProperty(n, "default", { enumerable: !0, value: t }),
            2 & e && "string" != typeof t)
          )
            for (var a in t)
              i.d(
                n,
                a,
                function (e) {
                  return t[e];
                }.bind(null, a)
              );
          return n;
        }),
        (i.n = function (t) {
          var e =
            t && t.__esModule
              ? function () {
                  return t.default;
                }
              : function () {
                  return t;
                };
          return i.d(e, "a", e), e;
        }),
        (i.o = function (t, e) {
          return Object.prototype.hasOwnProperty.call(t, e);
        }),
        (i.p = ""),
        i((i.s = 67))
      );
    })([
      function (t, e, i) {
        (function (e) {
          var i = function (t) {
            return t && t.Math == Math && t;
          };
          t.exports =
            i("object" == typeof globalThis && globalThis) ||
            i("object" == typeof window && window) ||
            i("object" == typeof self && self) ||
            i("object" == typeof e && e) ||
            Function("return this")();
        }.call(this, i(43)));
      },
      function (t, e, i) {
        var n = i(0),
          a = i(51),
          s = i(3),
          r = i(29),
          o = i(56),
          l = i(76),
          c = a("wks"),
          h = n.Symbol,
          d = l ? h : (h && h.withoutSetter) || r;
        t.exports = function (t) {
          return (
            s(c, t) ||
              (o && s(h, t) ? (c[t] = h[t]) : (c[t] = d("Symbol." + t))),
            c[t]
          );
        };
      },
      function (t, e) {
        t.exports = function (t) {
          return "object" == typeof t ? null !== t : "function" == typeof t;
        };
      },
      function (t, e) {
        var i = {}.hasOwnProperty;
        t.exports = function (t, e) {
          return i.call(t, e);
        };
      },
      function (t, e) {
        t.exports = function (t) {
          try {
            return !!t();
          } catch (t) {
            return !0;
          }
        };
      },
      function (t, e, i) {
        var n = i(6),
          a = i(46),
          s = i(7),
          r = i(25),
          o = Object.defineProperty;
        e.f = n
          ? o
          : function (t, e, i) {
              if ((s(t), (e = r(e, !0)), s(i), a))
                try {
                  return o(t, e, i);
                } catch (t) {}
              if ("get" in i || "set" in i)
                throw TypeError("Accessors not supported");
              return "value" in i && (t[e] = i.value), t;
            };
      },
      function (t, e, i) {
        var n = i(4);
        t.exports = !n(function () {
          return (
            7 !=
            Object.defineProperty({}, 1, {
              get: function () {
                return 7;
              },
            })[1]
          );
        });
      },
      function (t, e, i) {
        var n = i(2);
        t.exports = function (t) {
          if (!n(t)) throw TypeError(String(t) + " is not an object");
          return t;
        };
      },
      function (t, e, i) {
        var n = i(6),
          a = i(5),
          s = i(14);
        t.exports = n
          ? function (t, e, i) {
              return a.f(t, e, s(1, i));
            }
          : function (t, e, i) {
              return (t[e] = i), t;
            };
      },
      function (t, e, i) {
        var n,
          a,
          s,
          r = i(50),
          o = i(0),
          l = i(2),
          c = i(8),
          h = i(3),
          d = i(27),
          u = i(16),
          f = o.WeakMap;
        if (r) {
          var p = new f(),
            g = p.get,
            x = p.has,
            m = p.set;
          (n = function (t, e) {
            return m.call(p, t, e), e;
          }),
            (a = function (t) {
              return g.call(p, t) || {};
            }),
            (s = function (t) {
              return x.call(p, t);
            });
        } else {
          var v = d("state");
          (u[v] = !0),
            (n = function (t, e) {
              return c(t, v, e), e;
            }),
            (a = function (t) {
              return h(t, v) ? t[v] : {};
            }),
            (s = function (t) {
              return h(t, v);
            });
        }
        t.exports = {
          set: n,
          get: a,
          has: s,
          enforce: function (t) {
            return s(t) ? a(t) : n(t, {});
          },
          getterFor: function (t) {
            return function (e) {
              var i;
              if (!l(e) || (i = a(e)).type !== t)
                throw TypeError("Incompatible receiver, " + t + " required");
              return i;
            };
          },
        };
      },
      function (t, e, i) {
        var n = i(0);
        t.exports = n;
      },
      function (t, e, i) {
        var n = i(0),
          a = i(8),
          s = i(3),
          r = i(26),
          o = i(48),
          l = i(9),
          c = l.get,
          h = l.enforce,
          d = String(String).split("String");
        (t.exports = function (t, e, i, o) {
          var l = !!o && !!o.unsafe,
            c = !!o && !!o.enumerable,
            u = !!o && !!o.noTargetGet;
          "function" == typeof i &&
            ("string" != typeof e || s(i, "name") || a(i, "name", e),
            (h(i).source = d.join("string" == typeof e ? e : ""))),
            t !== n
              ? (l ? !u && t[e] && (c = !0) : delete t[e],
                c ? (t[e] = i) : a(t, e, i))
              : c
              ? (t[e] = i)
              : r(e, i);
        })(Function.prototype, "toString", function () {
          return ("function" == typeof this && c(this).source) || o(this);
        });
      },
      function (t, e) {
        t.exports = {};
      },
      function (t, e, i) {
        var n = i(0),
          a = i(44).f,
          s = i(8),
          r = i(11),
          o = i(26),
          l = i(70),
          c = i(54);
        t.exports = function (t, e) {
          var i,
            h,
            d,
            u,
            f,
            p = t.target,
            g = t.global,
            x = t.stat;
          if ((i = g ? n : x ? n[p] || o(p, {}) : (n[p] || {}).prototype))
            for (h in e) {
              if (
                ((u = e[h]),
                (d = t.noTargetGet ? (f = a(i, h)) && f.value : i[h]),
                !c(g ? h : p + (x ? "." : "#") + h, t.forced) && void 0 !== d)
              ) {
                if (typeof u == typeof d) continue;
                l(u, d);
              }
              (t.sham || (d && d.sham)) && s(u, "sham", !0), r(i, h, u, t);
            }
        };
      },
      function (t, e) {
        t.exports = function (t, e) {
          return {
            enumerable: !(1 & t),
            configurable: !(2 & t),
            writable: !(4 & t),
            value: e,
          };
        };
      },
      function (t, e, i) {
        var n = i(22),
          a = i(24);
        t.exports = function (t) {
          return n(a(t));
        };
      },
      function (t, e) {
        t.exports = {};
      },
      function (t, e, i) {
        var n = i(31),
          a = Math.min;
        t.exports = function (t) {
          return t > 0 ? a(n(t), 9007199254740991) : 0;
        };
      },
      function (t, e, i) {
        var n = i(16),
          a = i(2),
          s = i(3),
          r = i(5).f,
          o = i(29),
          l = i(75),
          c = o("meta"),
          h = 0,
          d =
            Object.isExtensible ||
            function () {
              return !0;
            },
          u = function (t) {
            r(t, c, { value: { objectID: "O" + ++h, weakData: {} } });
          },
          f = (t.exports = {
            REQUIRED: !1,
            fastKey: function (t, e) {
              if (!a(t))
                return "symbol" == typeof t
                  ? t
                  : ("string" == typeof t ? "S" : "P") + t;
              if (!s(t, c)) {
                if (!d(t)) return "F";
                if (!e) return "E";
                u(t);
              }
              return t[c].objectID;
            },
            getWeakData: function (t, e) {
              if (!s(t, c)) {
                if (!d(t)) return !0;
                if (!e) return !1;
                u(t);
              }
              return t[c].weakData;
            },
            onFreeze: function (t) {
              return l && f.REQUIRED && d(t) && !s(t, c) && u(t), t;
            },
          });
        n[c] = !0;
      },
      function (t, e, i) {
        var n = i(77);
        t.exports = function (t, e, i) {
          if ((n(t), void 0 === e)) return t;
          switch (i) {
            case 0:
              return function () {
                return t.call(e);
              };
            case 1:
              return function (i) {
                return t.call(e, i);
              };
            case 2:
              return function (i, n) {
                return t.call(e, i, n);
              };
            case 3:
              return function (i, n, a) {
                return t.call(e, i, n, a);
              };
          }
          return function () {
            return t.apply(e, arguments);
          };
        };
      },
      function (t, e, i) {
        var n = i(24);
        t.exports = function (t) {
          return Object(n(t));
        };
      },
      function (t, e, i) {
        "use strict";
        var n = i(13),
          a = i(0),
          s = i(54),
          r = i(11),
          o = i(18),
          l = i(33),
          c = i(35),
          h = i(2),
          d = i(4),
          u = i(60),
          f = i(36),
          p = i(78);
        t.exports = function (t, e, i) {
          var g = -1 !== t.indexOf("Map"),
            x = -1 !== t.indexOf("Weak"),
            m = g ? "set" : "add",
            v = a[t],
            b = v && v.prototype,
            y = v,
            w = {},
            k = function (t) {
              var e = b[t];
              r(
                b,
                t,
                "add" == t
                  ? function (t) {
                      return e.call(this, 0 === t ? 0 : t), this;
                    }
                  : "delete" == t
                  ? function (t) {
                      return !(x && !h(t)) && e.call(this, 0 === t ? 0 : t);
                    }
                  : "get" == t
                  ? function (t) {
                      return x && !h(t)
                        ? void 0
                        : e.call(this, 0 === t ? 0 : t);
                    }
                  : "has" == t
                  ? function (t) {
                      return !(x && !h(t)) && e.call(this, 0 === t ? 0 : t);
                    }
                  : function (t, i) {
                      return e.call(this, 0 === t ? 0 : t, i), this;
                    }
              );
            };
          if (
            s(
              t,
              "function" != typeof v ||
                !(
                  x ||
                  (b.forEach &&
                    !d(function () {
                      new v().entries().next();
                    }))
                )
            )
          )
            (y = i.getConstructor(e, t, g, m)), (o.REQUIRED = !0);
          else if (s(t, !0)) {
            var A = new y(),
              S = A[m](x ? {} : -0, 1) != A,
              C = d(function () {
                A.has(1);
              }),
              T = u(function (t) {
                new v(t);
              }),
              E =
                !x &&
                d(function () {
                  for (var t = new v(), e = 5; e--; ) t[m](e, e);
                  return !t.has(-0);
                });
            T ||
              (((y = e(function (e, i) {
                c(e, y, t);
                var n = p(new v(), e, y);
                return null != i && l(i, n[m], n, g), n;
              })).prototype = b),
              (b.constructor = y)),
              (C || E) && (k("delete"), k("has"), g && k("get")),
              (E || S) && k(m),
              x && b.clear && delete b.clear;
          }
          return (
            (w[t] = y),
            n({ global: !0, forced: y != v }, w),
            f(y, t),
            x || i.setStrong(y, t, g),
            y
          );
        };
      },
      function (t, e, i) {
        var n = i(4),
          a = i(23),
          s = "".split;
        t.exports = n(function () {
          return !Object("z").propertyIsEnumerable(0);
        })
          ? function (t) {
              return "String" == a(t) ? s.call(t, "") : Object(t);
            }
          : Object;
      },
      function (t, e) {
        var i = {}.toString;
        t.exports = function (t) {
          return i.call(t).slice(8, -1);
        };
      },
      function (t, e) {
        t.exports = function (t) {
          if (null == t) throw TypeError("Can't call method on " + t);
          return t;
        };
      },
      function (t, e, i) {
        var n = i(2);
        t.exports = function (t, e) {
          if (!n(t)) return t;
          var i, a;
          if (e && "function" == typeof (i = t.toString) && !n((a = i.call(t))))
            return a;
          if ("function" == typeof (i = t.valueOf) && !n((a = i.call(t))))
            return a;
          if (
            !e &&
            "function" == typeof (i = t.toString) &&
            !n((a = i.call(t)))
          )
            return a;
          throw TypeError("Can't convert object to primitive value");
        };
      },
      function (t, e, i) {
        var n = i(0),
          a = i(8);
        t.exports = function (t, e) {
          try {
            a(n, t, e);
          } catch (i) {
            n[t] = e;
          }
          return e;
        };
      },
      function (t, e, i) {
        var n = i(51),
          a = i(29),
          s = n("keys");
        t.exports = function (t) {
          return s[t] || (s[t] = a(t));
        };
      },
      function (t, e) {
        t.exports = !1;
      },
      function (t, e) {
        var i = 0,
          n = Math.random();
        t.exports = function (t) {
          return (
            "Symbol(" +
            String(void 0 === t ? "" : t) +
            ")_" +
            (++i + n).toString(36)
          );
        };
      },
      function (t, e, i) {
        var n = i(10),
          a = i(0),
          s = function (t) {
            return "function" == typeof t ? t : void 0;
          };
        t.exports = function (t, e) {
          return arguments.length < 2
            ? s(n[t]) || s(a[t])
            : (n[t] && n[t][e]) || (a[t] && a[t][e]);
        };
      },
      function (t, e) {
        var i = Math.ceil,
          n = Math.floor;
        t.exports = function (t) {
          return isNaN((t = +t)) ? 0 : (t > 0 ? n : i)(t);
        };
      },
      function (t, e) {
        t.exports = [
          "constructor",
          "hasOwnProperty",
          "isPrototypeOf",
          "propertyIsEnumerable",
          "toLocaleString",
          "toString",
          "valueOf",
        ];
      },
      function (t, e, i) {
        var n = i(7),
          a = i(55),
          s = i(17),
          r = i(19),
          o = i(57),
          l = i(59),
          c = function (t, e) {
            (this.stopped = t), (this.result = e);
          };
        (t.exports = function (t, e, i, h, d) {
          var u,
            f,
            p,
            g,
            x,
            m,
            v,
            b = r(e, i, h ? 2 : 1);
          if (d) u = t;
          else {
            if ("function" != typeof (f = o(t)))
              throw TypeError("Target is not iterable");
            if (a(f)) {
              for (p = 0, g = s(t.length); g > p; p++)
                if (
                  (x = h ? b(n((v = t[p]))[0], v[1]) : b(t[p])) &&
                  x instanceof c
                )
                  return x;
              return new c(!1);
            }
            u = f.call(t);
          }
          for (m = u.next; !(v = m.call(u)).done; )
            if (
              "object" == typeof (x = l(u, b, v.value, h)) &&
              x &&
              x instanceof c
            )
              return x;
          return new c(!1);
        }).stop = function (t) {
          return new c(!0, t);
        };
      },
      function (t, e, i) {
        var n = {};
        (n[i(1)("toStringTag")] = "z"),
          (t.exports = "[object z]" === String(n));
      },
      function (t, e) {
        t.exports = function (t, e, i) {
          if (!(t instanceof e))
            throw TypeError("Incorrect " + (i ? i + " " : "") + "invocation");
          return t;
        };
      },
      function (t, e, i) {
        var n = i(5).f,
          a = i(3),
          s = i(1)("toStringTag");
        t.exports = function (t, e, i) {
          t &&
            !a((t = i ? t : t.prototype), s) &&
            n(t, s, { configurable: !0, value: e });
        };
      },
      function (t, e, i) {
        var n,
          a = i(7),
          s = i(80),
          r = i(32),
          o = i(16),
          l = i(81),
          c = i(47),
          h = i(27)("IE_PROTO"),
          d = function () {},
          u = function (t) {
            return "<script>" + t + "</script>";
          },
          f = function () {
            try {
              n = document.domain && new ActiveXObject("htmlfile");
            } catch (t) {}
            f = n
              ? (function (t) {
                  t.write(u("")), t.close();
                  var e = t.parentWindow.Object;
                  return (t = null), e;
                })(n)
              : (function () {
                  var t,
                    e = c("iframe");
                  return (
                    (e.style.display = "none"),
                    l.appendChild(e),
                    (e.src = String("javascript:")),
                    (t = e.contentWindow.document).open(),
                    t.write(u("document.F=Object")),
                    t.close(),
                    t.F
                  );
                })();
            for (var t = r.length; t--; ) delete f.prototype[r[t]];
            return f();
          };
        (o[h] = !0),
          (t.exports =
            Object.create ||
            function (t, e) {
              var i;
              return (
                null !== t
                  ? ((d.prototype = a(t)),
                    (i = new d()),
                    (d.prototype = null),
                    (i[h] = t))
                  : (i = f()),
                void 0 === e ? i : s(i, e)
              );
            });
      },
      function (t, e, i) {
        var n = i(11);
        t.exports = function (t, e, i) {
          for (var a in e) n(t, a, e[a], i);
          return t;
        };
      },
      function (t, e, i) {
        "use strict";
        var n = i(13),
          a = i(82),
          s = i(65),
          r = i(61),
          o = i(36),
          l = i(8),
          c = i(11),
          h = i(1),
          d = i(28),
          u = i(12),
          f = i(64),
          p = f.IteratorPrototype,
          g = f.BUGGY_SAFARI_ITERATORS,
          x = h("iterator"),
          m = function () {
            return this;
          };
        t.exports = function (t, e, i, h, f, v, b) {
          a(i, e, h);
          var y,
            w,
            k,
            A = function (t) {
              if (t === f && _) return _;
              if (!g && t in T) return T[t];
              switch (t) {
                case "keys":
                case "values":
                case "entries":
                  return function () {
                    return new i(this, t);
                  };
              }
              return function () {
                return new i(this);
              };
            },
            S = e + " Iterator",
            C = !1,
            T = t.prototype,
            E = T[x] || T["@@iterator"] || (f && T[f]),
            _ = (!g && E) || A(f),
            L = ("Array" == e && T.entries) || E;
          if (
            (L &&
              ((y = s(L.call(new t()))),
              p !== Object.prototype &&
                y.next &&
                (d ||
                  s(y) === p ||
                  (r ? r(y, p) : "function" != typeof y[x] && l(y, x, m)),
                o(y, S, !0, !0),
                d && (u[S] = m))),
            "values" == f &&
              E &&
              "values" !== E.name &&
              ((C = !0),
              (_ = function () {
                return E.call(this);
              })),
            (d && !b) || T[x] === _ || l(T, x, _),
            (u[e] = _),
            f)
          )
            if (
              ((w = {
                values: A("values"),
                keys: v ? _ : A("keys"),
                entries: A("entries"),
              }),
              b)
            )
              for (k in w) (!g && !C && k in T) || c(T, k, w[k]);
            else n({ target: e, proto: !0, forced: g || C }, w);
          return w;
        };
      },
      function (t, e, i) {
        var n = i(34),
          a = i(11),
          s = i(85);
        n || a(Object.prototype, "toString", s, { unsafe: !0 });
      },
      function (t, e, i) {
        "use strict";
        var n = i(86).charAt,
          a = i(9),
          s = i(39),
          r = a.set,
          o = a.getterFor("String Iterator");
        s(
          String,
          "String",
          function (t) {
            r(this, { type: "String Iterator", string: String(t), index: 0 });
          },
          function () {
            var t,
              e = o(this),
              i = e.string,
              a = e.index;
            return a >= i.length
              ? { value: void 0, done: !0 }
              : ((t = n(i, a)), (e.index += t.length), { value: t, done: !1 });
          }
        );
      },
      function (t, e, i) {
        var n = i(0),
          a = i(87),
          s = i(88),
          r = i(8),
          o = i(1),
          l = o("iterator"),
          c = o("toStringTag"),
          h = s.values;
        for (var d in a) {
          var u = n[d],
            f = u && u.prototype;
          if (f) {
            if (f[l] !== h)
              try {
                r(f, l, h);
              } catch (t) {
                f[l] = h;
              }
            if ((f[c] || r(f, c, d), a[d]))
              for (var p in s)
                if (f[p] !== s[p])
                  try {
                    r(f, p, s[p]);
                  } catch (t) {
                    f[p] = s[p];
                  }
          }
        }
      },
      function (t, e) {
        var i;
        i = (function () {
          return this;
        })();
        try {
          i = i || new Function("return this")();
        } catch (t) {
          "object" == typeof window && (i = window);
        }
        t.exports = i;
      },
      function (t, e, i) {
        var n = i(6),
          a = i(45),
          s = i(14),
          r = i(15),
          o = i(25),
          l = i(3),
          c = i(46),
          h = Object.getOwnPropertyDescriptor;
        e.f = n
          ? h
          : function (t, e) {
              if (((t = r(t)), (e = o(e, !0)), c))
                try {
                  return h(t, e);
                } catch (t) {}
              if (l(t, e)) return s(!a.f.call(t, e), t[e]);
            };
      },
      function (t, e, i) {
        "use strict";
        var n = {}.propertyIsEnumerable,
          a = Object.getOwnPropertyDescriptor,
          s = a && !n.call({ 1: 2 }, 1);
        e.f = s
          ? function (t) {
              var e = a(this, t);
              return !!e && e.enumerable;
            }
          : n;
      },
      function (t, e, i) {
        var n = i(6),
          a = i(4),
          s = i(47);
        t.exports =
          !n &&
          !a(function () {
            return (
              7 !=
              Object.defineProperty(s("div"), "a", {
                get: function () {
                  return 7;
                },
              }).a
            );
          });
      },
      function (t, e, i) {
        var n = i(0),
          a = i(2),
          s = n.document,
          r = a(s) && a(s.createElement);
        t.exports = function (t) {
          return r ? s.createElement(t) : {};
        };
      },
      function (t, e, i) {
        var n = i(49),
          a = Function.toString;
        "function" != typeof n.inspectSource &&
          (n.inspectSource = function (t) {
            return a.call(t);
          }),
          (t.exports = n.inspectSource);
      },
      function (t, e, i) {
        var n = i(0),
          a = i(26),
          s = n["__core-js_shared__"] || a("__core-js_shared__", {});
        t.exports = s;
      },
      function (t, e, i) {
        var n = i(0),
          a = i(48),
          s = n.WeakMap;
        t.exports = "function" == typeof s && /native code/.test(a(s));
      },
      function (t, e, i) {
        var n = i(28),
          a = i(49);
        (t.exports = function (t, e) {
          return a[t] || (a[t] = void 0 !== e ? e : {});
        })("versions", []).push({
          version: "3.6.4",
          mode: n ? "pure" : "global",
          copyright: "© 2020 Denis Pushkarev (zloirock.ru)",
        });
      },
      function (t, e, i) {
        var n = i(3),
          a = i(15),
          s = i(73).indexOf,
          r = i(16);
        t.exports = function (t, e) {
          var i,
            o = a(t),
            l = 0,
            c = [];
          for (i in o) !n(r, i) && n(o, i) && c.push(i);
          for (; e.length > l; ) n(o, (i = e[l++])) && (~s(c, i) || c.push(i));
          return c;
        };
      },
      function (t, e) {
        e.f = Object.getOwnPropertySymbols;
      },
      function (t, e, i) {
        var n = i(4),
          a = /#|\.prototype\./,
          s = function (t, e) {
            var i = o[r(t)];
            return i == c || (i != l && ("function" == typeof e ? n(e) : !!e));
          },
          r = (s.normalize = function (t) {
            return String(t).replace(a, ".").toLowerCase();
          }),
          o = (s.data = {}),
          l = (s.NATIVE = "N"),
          c = (s.POLYFILL = "P");
        t.exports = s;
      },
      function (t, e, i) {
        var n = i(1),
          a = i(12),
          s = n("iterator"),
          r = Array.prototype;
        t.exports = function (t) {
          return void 0 !== t && (a.Array === t || r[s] === t);
        };
      },
      function (t, e, i) {
        var n = i(4);
        t.exports =
          !!Object.getOwnPropertySymbols &&
          !n(function () {
            return !String(Symbol());
          });
      },
      function (t, e, i) {
        var n = i(58),
          a = i(12),
          s = i(1)("iterator");
        t.exports = function (t) {
          if (null != t) return t[s] || t["@@iterator"] || a[n(t)];
        };
      },
      function (t, e, i) {
        var n = i(34),
          a = i(23),
          s = i(1)("toStringTag"),
          r =
            "Arguments" ==
            a(
              (function () {
                return arguments;
              })()
            );
        t.exports = n
          ? a
          : function (t) {
              var e, i, n;
              return void 0 === t
                ? "Undefined"
                : null === t
                ? "Null"
                : "string" ==
                  typeof (i = (function (t, e) {
                    try {
                      return t[e];
                    } catch (t) {}
                  })((e = Object(t)), s))
                ? i
                : r
                ? a(e)
                : "Object" == (n = a(e)) && "function" == typeof e.callee
                ? "Arguments"
                : n;
            };
      },
      function (t, e, i) {
        var n = i(7);
        t.exports = function (t, e, i, a) {
          try {
            return a ? e(n(i)[0], i[1]) : e(i);
          } catch (e) {
            var s = t.return;
            throw (void 0 !== s && n(s.call(t)), e);
          }
        };
      },
      function (t, e, i) {
        var n = i(1)("iterator"),
          a = !1;
        try {
          var s = 0,
            r = {
              next: function () {
                return { done: !!s++ };
              },
              return: function () {
                a = !0;
              },
            };
          (r[n] = function () {
            return this;
          }),
            Array.from(r, function () {
              throw 2;
            });
        } catch (t) {}
        t.exports = function (t, e) {
          if (!e && !a) return !1;
          var i = !1;
          try {
            var s = {};
            (s[n] = function () {
              return {
                next: function () {
                  return { done: (i = !0) };
                },
              };
            }),
              t(s);
          } catch (t) {}
          return i;
        };
      },
      function (t, e, i) {
        var n = i(7),
          a = i(79);
        t.exports =
          Object.setPrototypeOf ||
          ("__proto__" in {}
            ? (function () {
                var t,
                  e = !1,
                  i = {};
                try {
                  (t = Object.getOwnPropertyDescriptor(
                    Object.prototype,
                    "__proto__"
                  ).set).call(i, []),
                    (e = i instanceof Array);
                } catch (t) {}
                return function (i, s) {
                  return n(i), a(s), e ? t.call(i, s) : (i.__proto__ = s), i;
                };
              })()
            : void 0);
      },
      function (t, e, i) {
        "use strict";
        var n = i(5).f,
          a = i(37),
          s = i(38),
          r = i(19),
          o = i(35),
          l = i(33),
          c = i(39),
          h = i(84),
          d = i(6),
          u = i(18).fastKey,
          f = i(9),
          p = f.set,
          g = f.getterFor;
        t.exports = {
          getConstructor: function (t, e, i, c) {
            var h = t(function (t, n) {
                o(t, h, e),
                  p(t, {
                    type: e,
                    index: a(null),
                    first: void 0,
                    last: void 0,
                    size: 0,
                  }),
                  d || (t.size = 0),
                  null != n && l(n, t[c], t, i);
              }),
              f = g(e),
              x = function (t, e, i) {
                var n,
                  a,
                  s = f(t),
                  r = m(t, e);
                return (
                  r
                    ? (r.value = i)
                    : ((s.last = r =
                        {
                          index: (a = u(e, !0)),
                          key: e,
                          value: i,
                          previous: (n = s.last),
                          next: void 0,
                          removed: !1,
                        }),
                      s.first || (s.first = r),
                      n && (n.next = r),
                      d ? s.size++ : t.size++,
                      "F" !== a && (s.index[a] = r)),
                  t
                );
              },
              m = function (t, e) {
                var i,
                  n = f(t),
                  a = u(e);
                if ("F" !== a) return n.index[a];
                for (i = n.first; i; i = i.next) if (i.key == e) return i;
              };
            return (
              s(h.prototype, {
                clear: function () {
                  for (var t = f(this), e = t.index, i = t.first; i; )
                    (i.removed = !0),
                      i.previous && (i.previous = i.previous.next = void 0),
                      delete e[i.index],
                      (i = i.next);
                  (t.first = t.last = void 0),
                    d ? (t.size = 0) : (this.size = 0);
                },
                delete: function (t) {
                  var e = f(this),
                    i = m(this, t);
                  if (i) {
                    var n = i.next,
                      a = i.previous;
                    delete e.index[i.index],
                      (i.removed = !0),
                      a && (a.next = n),
                      n && (n.previous = a),
                      e.first == i && (e.first = n),
                      e.last == i && (e.last = a),
                      d ? e.size-- : this.size--;
                  }
                  return !!i;
                },
                forEach: function (t) {
                  for (
                    var e,
                      i = f(this),
                      n = r(t, arguments.length > 1 ? arguments[1] : void 0, 3);
                    (e = e ? e.next : i.first);

                  )
                    for (n(e.value, e.key, this); e && e.removed; )
                      e = e.previous;
                },
                has: function (t) {
                  return !!m(this, t);
                },
              }),
              s(
                h.prototype,
                i
                  ? {
                      get: function (t) {
                        var e = m(this, t);
                        return e && e.value;
                      },
                      set: function (t, e) {
                        return x(this, 0 === t ? 0 : t, e);
                      },
                    }
                  : {
                      add: function (t) {
                        return x(this, (t = 0 === t ? 0 : t), t);
                      },
                    }
              ),
              d &&
                n(h.prototype, "size", {
                  get: function () {
                    return f(this).size;
                  },
                }),
              h
            );
          },
          setStrong: function (t, e, i) {
            var n = e + " Iterator",
              a = g(e),
              s = g(n);
            c(
              t,
              e,
              function (t, e) {
                p(this, {
                  type: n,
                  target: t,
                  state: a(t),
                  kind: e,
                  last: void 0,
                });
              },
              function () {
                for (var t = s(this), e = t.kind, i = t.last; i && i.removed; )
                  i = i.previous;
                return t.target && (t.last = i = i ? i.next : t.state.first)
                  ? "keys" == e
                    ? { value: i.key, done: !1 }
                    : "values" == e
                    ? { value: i.value, done: !1 }
                    : { value: [i.key, i.value], done: !1 }
                  : ((t.target = void 0), { value: void 0, done: !0 });
              },
              i ? "entries" : "values",
              !i,
              !0
            ),
              h(e);
          },
        };
      },
      function (t, e, i) {
        var n = i(52),
          a = i(32);
        t.exports =
          Object.keys ||
          function (t) {
            return n(t, a);
          };
      },
      function (t, e, i) {
        "use strict";
        var n,
          a,
          s,
          r = i(65),
          o = i(8),
          l = i(3),
          c = i(1),
          h = i(28),
          d = c("iterator"),
          u = !1;
        [].keys &&
          ("next" in (s = [].keys())
            ? (a = r(r(s))) !== Object.prototype && (n = a)
            : (u = !0)),
          null == n && (n = {}),
          h ||
            l(n, d) ||
            o(n, d, function () {
              return this;
            }),
          (t.exports = { IteratorPrototype: n, BUGGY_SAFARI_ITERATORS: u });
      },
      function (t, e, i) {
        var n = i(3),
          a = i(20),
          s = i(27),
          r = i(83),
          o = s("IE_PROTO"),
          l = Object.prototype;
        t.exports = r
          ? Object.getPrototypeOf
          : function (t) {
              return (
                (t = a(t)),
                n(t, o)
                  ? t[o]
                  : "function" == typeof t.constructor &&
                    t instanceof t.constructor
                  ? t.constructor.prototype
                  : t instanceof Object
                  ? l
                  : null
              );
            };
      },
      function (t, e, i) {
        "use strict";
        (function (t) {
          var i = "object" == typeof t && t && t.Object === Object && t;
          e.a = i;
        }.call(this, i(43)));
      },
      function (t, e, i) {
        t.exports = i(105);
      },
      function (t, e, i) {
        i(69), i(40), i(41), i(42);
        var n = i(10);
        t.exports = n.Map;
      },
      function (t, e, i) {
        "use strict";
        var n = i(21),
          a = i(62);
        t.exports = n(
          "Map",
          function (t) {
            return function () {
              return t(this, arguments.length ? arguments[0] : void 0);
            };
          },
          a
        );
      },
      function (t, e, i) {
        var n = i(3),
          a = i(71),
          s = i(44),
          r = i(5);
        t.exports = function (t, e) {
          for (var i = a(e), o = r.f, l = s.f, c = 0; c < i.length; c++) {
            var h = i[c];
            n(t, h) || o(t, h, l(e, h));
          }
        };
      },
      function (t, e, i) {
        var n = i(30),
          a = i(72),
          s = i(53),
          r = i(7);
        t.exports =
          n("Reflect", "ownKeys") ||
          function (t) {
            var e = a.f(r(t)),
              i = s.f;
            return i ? e.concat(i(t)) : e;
          };
      },
      function (t, e, i) {
        var n = i(52),
          a = i(32).concat("length", "prototype");
        e.f =
          Object.getOwnPropertyNames ||
          function (t) {
            return n(t, a);
          };
      },
      function (t, e, i) {
        var n = i(15),
          a = i(17),
          s = i(74),
          r = function (t) {
            return function (e, i, r) {
              var o,
                l = n(e),
                c = a(l.length),
                h = s(r, c);
              if (t && i != i) {
                for (; c > h; ) if ((o = l[h++]) != o) return !0;
              } else
                for (; c > h; h++)
                  if ((t || h in l) && l[h] === i) return t || h || 0;
              return !t && -1;
            };
          };
        t.exports = { includes: r(!0), indexOf: r(!1) };
      },
      function (t, e, i) {
        var n = i(31),
          a = Math.max,
          s = Math.min;
        t.exports = function (t, e) {
          var i = n(t);
          return i < 0 ? a(i + e, 0) : s(i, e);
        };
      },
      function (t, e, i) {
        var n = i(4);
        t.exports = !n(function () {
          return Object.isExtensible(Object.preventExtensions({}));
        });
      },
      function (t, e, i) {
        var n = i(56);
        t.exports = n && !Symbol.sham && "symbol" == typeof Symbol.iterator;
      },
      function (t, e) {
        t.exports = function (t) {
          if ("function" != typeof t)
            throw TypeError(String(t) + " is not a function");
          return t;
        };
      },
      function (t, e, i) {
        var n = i(2),
          a = i(61);
        t.exports = function (t, e, i) {
          var s, r;
          return (
            a &&
              "function" == typeof (s = e.constructor) &&
              s !== i &&
              n((r = s.prototype)) &&
              r !== i.prototype &&
              a(t, r),
            t
          );
        };
      },
      function (t, e, i) {
        var n = i(2);
        t.exports = function (t) {
          if (!n(t) && null !== t)
            throw TypeError("Can't set " + String(t) + " as a prototype");
          return t;
        };
      },
      function (t, e, i) {
        var n = i(6),
          a = i(5),
          s = i(7),
          r = i(63);
        t.exports = n
          ? Object.defineProperties
          : function (t, e) {
              s(t);
              for (var i, n = r(e), o = n.length, l = 0; o > l; )
                a.f(t, (i = n[l++]), e[i]);
              return t;
            };
      },
      function (t, e, i) {
        var n = i(30);
        t.exports = n("document", "documentElement");
      },
      function (t, e, i) {
        "use strict";
        var n = i(64).IteratorPrototype,
          a = i(37),
          s = i(14),
          r = i(36),
          o = i(12),
          l = function () {
            return this;
          };
        t.exports = function (t, e, i) {
          var c = e + " Iterator";
          return (
            (t.prototype = a(n, { next: s(1, i) })),
            r(t, c, !1, !0),
            (o[c] = l),
            t
          );
        };
      },
      function (t, e, i) {
        var n = i(4);
        t.exports = !n(function () {
          function t() {}
          return (
            (t.prototype.constructor = null),
            Object.getPrototypeOf(new t()) !== t.prototype
          );
        });
      },
      function (t, e, i) {
        "use strict";
        var n = i(30),
          a = i(5),
          s = i(1),
          r = i(6),
          o = s("species");
        t.exports = function (t) {
          var e = n(t),
            i = a.f;
          r &&
            e &&
            !e[o] &&
            i(e, o, {
              configurable: !0,
              get: function () {
                return this;
              },
            });
        };
      },
      function (t, e, i) {
        "use strict";
        var n = i(34),
          a = i(58);
        t.exports = n
          ? {}.toString
          : function () {
              return "[object " + a(this) + "]";
            };
      },
      function (t, e, i) {
        var n = i(31),
          a = i(24),
          s = function (t) {
            return function (e, i) {
              var s,
                r,
                o = String(a(e)),
                l = n(i),
                c = o.length;
              return l < 0 || l >= c
                ? t
                  ? ""
                  : void 0
                : (s = o.charCodeAt(l)) < 55296 ||
                  s > 56319 ||
                  l + 1 === c ||
                  (r = o.charCodeAt(l + 1)) < 56320 ||
                  r > 57343
                ? t
                  ? o.charAt(l)
                  : s
                : t
                ? o.slice(l, l + 2)
                : r - 56320 + ((s - 55296) << 10) + 65536;
            };
          };
        t.exports = { codeAt: s(!1), charAt: s(!0) };
      },
      function (t, e) {
        t.exports = {
          CSSRuleList: 0,
          CSSStyleDeclaration: 0,
          CSSValueList: 0,
          ClientRectList: 0,
          DOMRectList: 0,
          DOMStringList: 0,
          DOMTokenList: 1,
          DataTransferItemList: 0,
          FileList: 0,
          HTMLAllCollection: 0,
          HTMLCollection: 0,
          HTMLFormElement: 0,
          HTMLSelectElement: 0,
          MediaList: 0,
          MimeTypeArray: 0,
          NamedNodeMap: 0,
          NodeList: 1,
          PaintRequestList: 0,
          Plugin: 0,
          PluginArray: 0,
          SVGLengthList: 0,
          SVGNumberList: 0,
          SVGPathSegList: 0,
          SVGPointList: 0,
          SVGStringList: 0,
          SVGTransformList: 0,
          SourceBufferList: 0,
          StyleSheetList: 0,
          TextTrackCueList: 0,
          TextTrackList: 0,
          TouchList: 0,
        };
      },
      function (t, e, i) {
        "use strict";
        var n = i(15),
          a = i(89),
          s = i(12),
          r = i(9),
          o = i(39),
          l = r.set,
          c = r.getterFor("Array Iterator");
        (t.exports = o(
          Array,
          "Array",
          function (t, e) {
            l(this, {
              type: "Array Iterator",
              target: n(t),
              index: 0,
              kind: e,
            });
          },
          function () {
            var t = c(this),
              e = t.target,
              i = t.kind,
              n = t.index++;
            return !e || n >= e.length
              ? ((t.target = void 0), { value: void 0, done: !0 })
              : "keys" == i
              ? { value: n, done: !1 }
              : "values" == i
              ? { value: e[n], done: !1 }
              : { value: [n, e[n]], done: !1 };
          },
          "values"
        )),
          (s.Arguments = s.Array),
          a("keys"),
          a("values"),
          a("entries");
      },
      function (t, e, i) {
        var n = i(1),
          a = i(37),
          s = i(5),
          r = n("unscopables"),
          o = Array.prototype;
        null == o[r] && s.f(o, r, { configurable: !0, value: a(null) }),
          (t.exports = function (t) {
            o[r][t] = !0;
          });
      },
      function (t, e, i) {
        i(91), i(40), i(41), i(42);
        var n = i(10);
        t.exports = n.Set;
      },
      function (t, e, i) {
        "use strict";
        var n = i(21),
          a = i(62);
        t.exports = n(
          "Set",
          function (t) {
            return function () {
              return t(this, arguments.length ? arguments[0] : void 0);
            };
          },
          a
        );
      },
      function (t, e, i) {
        i(40), i(93), i(42);
        var n = i(10);
        t.exports = n.WeakMap;
      },
      function (t, e, i) {
        "use strict";
        var n,
          a = i(0),
          s = i(38),
          r = i(18),
          o = i(21),
          l = i(94),
          c = i(2),
          h = i(9).enforce,
          d = i(50),
          u = !a.ActiveXObject && "ActiveXObject" in a,
          f = Object.isExtensible,
          p = function (t) {
            return function () {
              return t(this, arguments.length ? arguments[0] : void 0);
            };
          },
          g = (t.exports = o("WeakMap", p, l));
        if (d && u) {
          (n = l.getConstructor(p, "WeakMap", !0)), (r.REQUIRED = !0);
          var x = g.prototype,
            m = x.delete,
            v = x.has,
            b = x.get,
            y = x.set;
          s(x, {
            delete: function (t) {
              if (c(t) && !f(t)) {
                var e = h(this);
                return (
                  e.frozen || (e.frozen = new n()),
                  m.call(this, t) || e.frozen.delete(t)
                );
              }
              return m.call(this, t);
            },
            has: function (t) {
              if (c(t) && !f(t)) {
                var e = h(this);
                return (
                  e.frozen || (e.frozen = new n()),
                  v.call(this, t) || e.frozen.has(t)
                );
              }
              return v.call(this, t);
            },
            get: function (t) {
              if (c(t) && !f(t)) {
                var e = h(this);
                return (
                  e.frozen || (e.frozen = new n()),
                  v.call(this, t) ? b.call(this, t) : e.frozen.get(t)
                );
              }
              return b.call(this, t);
            },
            set: function (t, e) {
              if (c(t) && !f(t)) {
                var i = h(this);
                i.frozen || (i.frozen = new n()),
                  v.call(this, t) ? y.call(this, t, e) : i.frozen.set(t, e);
              } else y.call(this, t, e);
              return this;
            },
          });
        }
      },
      function (t, e, i) {
        "use strict";
        var n = i(38),
          a = i(18).getWeakData,
          s = i(7),
          r = i(2),
          o = i(35),
          l = i(33),
          c = i(95),
          h = i(3),
          d = i(9),
          u = d.set,
          f = d.getterFor,
          p = c.find,
          g = c.findIndex,
          x = 0,
          m = function (t) {
            return t.frozen || (t.frozen = new v());
          },
          v = function () {
            this.entries = [];
          },
          b = function (t, e) {
            return p(t.entries, function (t) {
              return t[0] === e;
            });
          };
        (v.prototype = {
          get: function (t) {
            var e = b(this, t);
            if (e) return e[1];
          },
          has: function (t) {
            return !!b(this, t);
          },
          set: function (t, e) {
            var i = b(this, t);
            i ? (i[1] = e) : this.entries.push([t, e]);
          },
          delete: function (t) {
            var e = g(this.entries, function (e) {
              return e[0] === t;
            });
            return ~e && this.entries.splice(e, 1), !!~e;
          },
        }),
          (t.exports = {
            getConstructor: function (t, e, i, c) {
              var d = t(function (t, n) {
                  o(t, d, e),
                    u(t, { type: e, id: x++, frozen: void 0 }),
                    null != n && l(n, t[c], t, i);
                }),
                p = f(e),
                g = function (t, e, i) {
                  var n = p(t),
                    r = a(s(e), !0);
                  return !0 === r ? m(n).set(e, i) : (r[n.id] = i), t;
                };
              return (
                n(d.prototype, {
                  delete: function (t) {
                    var e = p(this);
                    if (!r(t)) return !1;
                    var i = a(t);
                    return !0 === i
                      ? m(e).delete(t)
                      : i && h(i, e.id) && delete i[e.id];
                  },
                  has: function (t) {
                    var e = p(this);
                    if (!r(t)) return !1;
                    var i = a(t);
                    return !0 === i ? m(e).has(t) : i && h(i, e.id);
                  },
                }),
                n(
                  d.prototype,
                  i
                    ? {
                        get: function (t) {
                          var e = p(this);
                          if (r(t)) {
                            var i = a(t);
                            return !0 === i
                              ? m(e).get(t)
                              : i
                              ? i[e.id]
                              : void 0;
                          }
                        },
                        set: function (t, e) {
                          return g(this, t, e);
                        },
                      }
                    : {
                        add: function (t) {
                          return g(this, t, !0);
                        },
                      }
                ),
                d
              );
            },
          });
      },
      function (t, e, i) {
        var n = i(19),
          a = i(22),
          s = i(20),
          r = i(17),
          o = i(96),
          l = [].push,
          c = function (t) {
            var e = 1 == t,
              i = 2 == t,
              c = 3 == t,
              h = 4 == t,
              d = 6 == t,
              u = 5 == t || d;
            return function (f, p, g, x) {
              for (
                var m,
                  v,
                  b = s(f),
                  y = a(b),
                  w = n(p, g, 3),
                  k = r(y.length),
                  A = 0,
                  S = x || o,
                  C = e ? S(f, k) : i ? S(f, 0) : void 0;
                k > A;
                A++
              )
                if ((u || A in y) && ((v = w((m = y[A]), A, b)), t))
                  if (e) C[A] = v;
                  else if (v)
                    switch (t) {
                      case 3:
                        return !0;
                      case 5:
                        return m;
                      case 6:
                        return A;
                      case 2:
                        l.call(C, m);
                    }
                  else if (h) return !1;
              return d ? -1 : c || h ? h : C;
            };
          };
        t.exports = {
          forEach: c(0),
          map: c(1),
          filter: c(2),
          some: c(3),
          every: c(4),
          find: c(5),
          findIndex: c(6),
        };
      },
      function (t, e, i) {
        var n = i(2),
          a = i(97),
          s = i(1)("species");
        t.exports = function (t, e) {
          var i;
          return (
            a(t) &&
              ("function" != typeof (i = t.constructor) ||
              (i !== Array && !a(i.prototype))
                ? n(i) && null === (i = i[s]) && (i = void 0)
                : (i = void 0)),
            new (void 0 === i ? Array : i)(0 === e ? 0 : e)
          );
        };
      },
      function (t, e, i) {
        var n = i(23);
        t.exports =
          Array.isArray ||
          function (t) {
            return "Array" == n(t);
          };
      },
      function (t, e, i) {
        i(41), i(99);
        var n = i(10);
        t.exports = n.Array.from;
      },
      function (t, e, i) {
        var n = i(13),
          a = i(100);
        n(
          {
            target: "Array",
            stat: !0,
            forced: !i(60)(function (t) {
              Array.from(t);
            }),
          },
          { from: a }
        );
      },
      function (t, e, i) {
        "use strict";
        var n = i(19),
          a = i(20),
          s = i(59),
          r = i(55),
          o = i(17),
          l = i(101),
          c = i(57);
        t.exports = function (t) {
          var e,
            i,
            h,
            d,
            u,
            f,
            p = a(t),
            g = "function" == typeof this ? this : Array,
            x = arguments.length,
            m = x > 1 ? arguments[1] : void 0,
            v = void 0 !== m,
            b = c(p),
            y = 0;
          if (
            (v && (m = n(m, x > 2 ? arguments[2] : void 0, 2)),
            null == b || (g == Array && r(b)))
          )
            for (i = new g((e = o(p.length))); e > y; y++)
              (f = v ? m(p[y], y) : p[y]), l(i, y, f);
          else
            for (
              u = (d = b.call(p)).next, i = new g();
              !(h = u.call(d)).done;
              y++
            )
              (f = v ? s(d, m, [h.value, y], !0) : h.value), l(i, y, f);
          return (i.length = y), i;
        };
      },
      function (t, e, i) {
        "use strict";
        var n = i(25),
          a = i(5),
          s = i(14);
        t.exports = function (t, e, i) {
          var r = n(e);
          r in t ? a.f(t, r, s(0, i)) : (t[r] = i);
        };
      },
      function (t, e, i) {
        i(103);
        var n = i(10);
        t.exports = n.Object.assign;
      },
      function (t, e, i) {
        var n = i(13),
          a = i(104);
        n(
          { target: "Object", stat: !0, forced: Object.assign !== a },
          { assign: a }
        );
      },
      function (t, e, i) {
        "use strict";
        var n = i(6),
          a = i(4),
          s = i(63),
          r = i(53),
          o = i(45),
          l = i(20),
          c = i(22),
          h = Object.assign,
          d = Object.defineProperty;
        t.exports =
          !h ||
          a(function () {
            if (
              n &&
              1 !==
                h(
                  { b: 1 },
                  h(
                    d({}, "a", {
                      enumerable: !0,
                      get: function () {
                        d(this, "b", { value: 3, enumerable: !1 });
                      },
                    }),
                    { b: 2 }
                  )
                ).b
            )
              return !0;
            var t = {},
              e = {},
              i = Symbol();
            return (
              (t[i] = 7),
              "abcdefghijklmnopqrst".split("").forEach(function (t) {
                e[t] = t;
              }),
              7 != h({}, t)[i] || "abcdefghijklmnopqrst" != s(h({}, e)).join("")
            );
          })
            ? function (t, e) {
                for (
                  var i = l(t), a = arguments.length, h = 1, d = r.f, u = o.f;
                  a > h;

                )
                  for (
                    var f,
                      p = c(arguments[h++]),
                      g = d ? s(p).concat(d(p)) : s(p),
                      x = g.length,
                      m = 0;
                    x > m;

                  )
                    (f = g[m++]), (n && !u.call(p, f)) || (i[f] = p[f]);
                return i;
              }
            : h;
      },
      function (t, e, i) {
        "use strict";
        i.r(e);
        var n = {};
        i.r(n),
          i.d(n, "keyboardHandler", function () {
            return it;
          }),
          i.d(n, "mouseHandler", function () {
            return nt;
          }),
          i.d(n, "resizeHandler", function () {
            return at;
          }),
          i.d(n, "selectHandler", function () {
            return st;
          }),
          i.d(n, "touchHandler", function () {
            return rt;
          }),
          i.d(n, "wheelHandler", function () {
            return ot;
          });
        /*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */
        var a = function (t, e) {
            return (a =
              Object.setPrototypeOf ||
              ({ __proto__: [] } instanceof Array &&
                function (t, e) {
                  t.__proto__ = e;
                }) ||
              function (t, e) {
                for (var i in e) e.hasOwnProperty(i) && (t[i] = e[i]);
              })(t, e);
          },
          s = function () {
            return (s =
              Object.assign ||
              function (t) {
                for (var e, i = 1, n = arguments.length; i < n; i++)
                  for (var a in (e = arguments[i]))
                    Object.prototype.hasOwnProperty.call(e, a) && (t[a] = e[a]);
                return t;
              }).apply(this, arguments);
          };
        function r(t, e, i, n) {
          var a,
            s = arguments.length,
            r =
              s < 3
                ? e
                : null === n
                ? (n = Object.getOwnPropertyDescriptor(e, i))
                : n;
          if (
            "object" == typeof Reflect &&
            "function" == typeof Reflect.decorate
          )
            r = Reflect.decorate(t, e, i, n);
          else
            for (var o = t.length - 1; o >= 0; o--)
              (a = t[o]) &&
                (r = (s < 3 ? a(r) : s > 3 ? a(e, i, r) : a(e, i)) || r);
          return s > 3 && r && Object.defineProperty(e, i, r), r;
        }
        i(68), i(90), i(92), i(98), i(102);
        var o = /\s/,
          l = /^\s+/,
          c = function (t) {
            var e = typeof t;
            return null != t && ("object" == e || "function" == e);
          },
          h = i(66),
          d = "object" == typeof self && self && self.Object === Object && self,
          u = h.a || d || Function("return this")(),
          f = u.Symbol,
          p = Object.prototype,
          g = p.hasOwnProperty,
          x = p.toString,
          m = f ? f.toStringTag : void 0,
          v = Object.prototype.toString,
          b = f ? f.toStringTag : void 0,
          y = /^[-+]0x[0-9a-f]+$/i,
          w = /^0b[01]+$/i,
          k = /^0o[0-7]+$/i,
          A = parseInt,
          S = function (t) {
            if ("number" == typeof t) return t;
            if (
              (function (t) {
                return (
                  "symbol" == typeof t ||
                  ((function (t) {
                    return null != t && "object" == typeof t;
                  })(t) &&
                    "[object Symbol]" ==
                      (function (t) {
                        return null == t
                          ? void 0 === t
                            ? "[object Undefined]"
                            : "[object Null]"
                          : b && b in Object(t)
                          ? (function (t) {
                              var e = g.call(t, m),
                                i = t[m];
                              try {
                                t[m] = void 0;
                                var n = !0;
                              } catch (t) {}
                              var a = x.call(t);
                              return n && (e ? (t[m] = i) : delete t[m]), a;
                            })(t)
                          : (function (t) {
                              return v.call(t);
                            })(t);
                      })(t))
                );
              })(t)
            )
              return NaN;
            if (c(t)) {
              var e = "function" == typeof t.valueOf ? t.valueOf() : t;
              t = c(e) ? e + "" : e;
            }
            if ("string" != typeof t) return 0 === t ? t : +t;
            t = (function (t) {
              return t
                ? t
                    .slice(
                      0,
                      (function (t) {
                        for (var e = t.length; e-- && o.test(t.charAt(e)); );
                        return e;
                      })(t) + 1
                    )
                    .replace(l, "")
                : t;
            })(t);
            var i = w.test(t);
            return i || k.test(t)
              ? A(t.slice(2), i ? 2 : 8)
              : y.test(t)
              ? NaN
              : +t;
          },
          C = function (t, e, i) {
            return (
              void 0 === i && ((i = e), (e = void 0)),
              void 0 !== i && (i = (i = S(i)) == i ? i : 0),
              void 0 !== e && (e = (e = S(e)) == e ? e : 0),
              (function (t, e, i) {
                return (
                  t == t &&
                    (void 0 !== i && (t = t <= i ? t : i),
                    void 0 !== e && (t = t >= e ? t : e)),
                  t
                );
              })(S(t), e, i)
            );
          };
        function T(t, e) {
          return (
            void 0 === t && (t = -1 / 0),
            void 0 === e && (e = 1 / 0),
            function (i, n) {
              var a = "_" + n;
              Object.defineProperty(i, n, {
                get: function () {
                  return this[a];
                },
                set: function (i) {
                  Object.defineProperty(this, a, {
                    value: C(i, t, e),
                    enumerable: !1,
                    writable: !0,
                    configurable: !0,
                  });
                },
                enumerable: !0,
                configurable: !0,
              });
            }
          );
        }
        function E(t, e) {
          var i = "_" + e;
          Object.defineProperty(t, e, {
            get: function () {
              return this[i];
            },
            set: function (t) {
              Object.defineProperty(this, i, {
                value: !!t,
                enumerable: !1,
                writable: !0,
                configurable: !0,
              });
            },
            enumerable: !0,
            configurable: !0,
          });
        }
        var _ = function () {
            return u.Date.now();
          },
          L = Math.max,
          P = Math.min,
          M = function (t, e, i) {
            var n,
              a,
              s,
              r,
              o,
              l,
              h = 0,
              d = !1,
              u = !1,
              f = !0;
            if ("function" != typeof t)
              throw new TypeError("Expected a function");
            function p(e) {
              var i = n,
                s = a;
              return (n = a = void 0), (h = e), (r = t.apply(s, i));
            }
            function g(t) {
              var i = t - l;
              return void 0 === l || i >= e || i < 0 || (u && t - h >= s);
            }
            function x() {
              var t = _();
              if (g(t)) return m(t);
              o = setTimeout(
                x,
                (function (t) {
                  var i = e - (t - l);
                  return u ? P(i, s - (t - h)) : i;
                })(t)
              );
            }
            function m(t) {
              return (o = void 0), f && n ? p(t) : ((n = a = void 0), r);
            }
            function v() {
              var t = _(),
                i = g(t);
              if (((n = arguments), (a = this), (l = t), i)) {
                if (void 0 === o)
                  return (function (t) {
                    return (h = t), (o = setTimeout(x, e)), d ? p(t) : r;
                  })(l);
                if (u) return clearTimeout(o), (o = setTimeout(x, e)), p(l);
              }
              return void 0 === o && (o = setTimeout(x, e)), r;
            }
            return (
              (e = S(e) || 0),
              c(i) &&
                ((d = !!i.leading),
                (s = (u = "maxWait" in i) ? L(S(i.maxWait) || 0, e) : s),
                (f = "trailing" in i ? !!i.trailing : f)),
              (v.cancel = function () {
                void 0 !== o && clearTimeout(o),
                  (h = 0),
                  (n = l = a = o = void 0);
              }),
              (v.flush = function () {
                return void 0 === o ? r : m(_());
              }),
              v
            );
          };
        function I() {
          for (var t = [], e = 0; e < arguments.length; e++)
            t[e] = arguments[e];
          return function (e, i, n) {
            var a = n.value;
            return {
              get: function () {
                return (
                  this.hasOwnProperty(i) ||
                    Object.defineProperty(this, i, {
                      value: M.apply(
                        void 0,
                        (function () {
                          for (
                            var t = 0, e = 0, i = arguments.length;
                            e < i;
                            e++
                          )
                            t += arguments[e].length;
                          var n = Array(t),
                            a = 0;
                          for (e = 0; e < i; e++)
                            for (
                              var s = arguments[e], r = 0, o = s.length;
                              r < o;
                              r++, a++
                            )
                              n[a] = s[r];
                          return n;
                        })([a], t)
                      ),
                    }),
                  this[i]
                );
              },
            };
          };
        }
        var O,
          D = (function () {
            function t(t) {
              var e = this;
              void 0 === t && (t = {}),
                (this.damping = 0.1),
                (this.thumbMinSize = 20),
                (this.renderByPixels = !0),
                (this.alwaysShowTracks = !1),
                (this.continuousScrolling = !0),
                (this.delegateTo = null),
                (this.plugins = {}),
                Object.keys(t).forEach(function (i) {
                  e[i] = t[i];
                });
            }
            return (
              Object.defineProperty(t.prototype, "wheelEventTarget", {
                get: function () {
                  return this.delegateTo;
                },
                set: function (t) {
                  console.warn(
                    "[smooth-scrollbar]: `options.wheelEventTarget` is deprecated and will be removed in the future, use `options.delegateTo` instead."
                  ),
                    (this.delegateTo = t);
                },
                enumerable: !0,
                configurable: !0,
              }),
              r([T(0, 1)], t.prototype, "damping", void 0),
              r([T(0, 1 / 0)], t.prototype, "thumbMinSize", void 0),
              r([E], t.prototype, "renderByPixels", void 0),
              r([E], t.prototype, "alwaysShowTracks", void 0),
              r([E], t.prototype, "continuousScrolling", void 0),
              t
            );
          })(),
          z = new WeakMap();
        function N() {
          if (void 0 !== O) return O;
          var t = !1;
          try {
            var e = function () {},
              i = Object.defineProperty({}, "passive", {
                get: function () {
                  t = !0;
                },
              });
            window.addEventListener("testPassive", e, i),
              window.removeEventListener("testPassive", e, i);
          } catch (t) {}
          return (O = !!t && { passive: !1 });
        }
        function X(t) {
          var e = z.get(t) || [];
          return (
            z.set(t, e),
            function (t, i, n) {
              function a(t) {
                t.defaultPrevented || n(t);
              }
              i.split(/\s+/g).forEach(function (i) {
                e.push({ elem: t, eventName: i, handler: a }),
                  t.addEventListener(i, a, N());
              });
            }
          );
        }
        function H(t) {
          var e = (function (t) {
            return t.touches ? t.touches[t.touches.length - 1] : t;
          })(t);
          return { x: e.clientX, y: e.clientY };
        }
        function R(t, e) {
          return (
            void 0 === e && (e = []),
            e.some(function (e) {
              return t === e;
            })
          );
        }
        var F = ["webkit", "moz", "ms", "o"],
          Y = new RegExp("^-(?!(?:" + F.join("|") + ")-)");
        function W(t, e) {
          (e = (function (t) {
            var e = {};
            return (
              Object.keys(t).forEach(function (i) {
                if (Y.test(i)) {
                  var n = t[i];
                  (i = i.replace(/^-/, "")),
                    (e[i] = n),
                    F.forEach(function (t) {
                      e["-" + t + "-" + i] = n;
                    });
                } else e[i] = t[i];
              }),
              e
            );
          })(e)),
            Object.keys(e).forEach(function (i) {
              var n = i.replace(/^-/, "").replace(/-([a-z])/g, function (t, e) {
                return e.toUpperCase();
              });
              t.style[n] = e[i];
            });
        }
        var B,
          j = (function () {
            function t(t) {
              (this.updateTime = Date.now()),
                (this.delta = { x: 0, y: 0 }),
                (this.velocity = { x: 0, y: 0 }),
                (this.lastPosition = { x: 0, y: 0 }),
                (this.lastPosition = H(t));
            }
            return (
              (t.prototype.update = function (t) {
                var e = this.velocity,
                  i = this.updateTime,
                  n = this.lastPosition,
                  a = Date.now(),
                  s = H(t),
                  r = { x: -(s.x - n.x), y: -(s.y - n.y) },
                  o = a - i || 16,
                  l = (r.x / o) * 16,
                  c = (r.y / o) * 16;
                (e.x = 0.9 * l + 0.1 * e.x),
                  (e.y = 0.9 * c + 0.1 * e.y),
                  (this.delta = r),
                  (this.updateTime = a),
                  (this.lastPosition = s);
              }),
              t
            );
          })(),
          V = (function () {
            function t() {
              this._touchList = {};
            }
            return (
              Object.defineProperty(t.prototype, "_primitiveValue", {
                get: function () {
                  return { x: 0, y: 0 };
                },
                enumerable: !0,
                configurable: !0,
              }),
              (t.prototype.isActive = function () {
                return void 0 !== this._activeTouchID;
              }),
              (t.prototype.getDelta = function () {
                var t = this._getActiveTracker();
                return t ? s({}, t.delta) : this._primitiveValue;
              }),
              (t.prototype.getVelocity = function () {
                var t = this._getActiveTracker();
                return t ? s({}, t.velocity) : this._primitiveValue;
              }),
              (t.prototype.track = function (t) {
                var e = this,
                  i = t.targetTouches;
                return (
                  Array.from(i).forEach(function (t) {
                    e._add(t);
                  }),
                  this._touchList
                );
              }),
              (t.prototype.update = function (t) {
                var e = this,
                  i = t.touches,
                  n = t.changedTouches;
                return (
                  Array.from(i).forEach(function (t) {
                    e._renew(t);
                  }),
                  this._setActiveID(n),
                  this._touchList
                );
              }),
              (t.prototype.release = function (t) {
                var e = this;
                delete this._activeTouchID,
                  Array.from(t.changedTouches).forEach(function (t) {
                    e._delete(t);
                  });
              }),
              (t.prototype._add = function (t) {
                if (!this._has(t)) {
                  var e = new j(t);
                  this._touchList[t.identifier] = e;
                }
              }),
              (t.prototype._renew = function (t) {
                this._has(t) && this._touchList[t.identifier].update(t);
              }),
              (t.prototype._delete = function (t) {
                delete this._touchList[t.identifier];
              }),
              (t.prototype._has = function (t) {
                return this._touchList.hasOwnProperty(t.identifier);
              }),
              (t.prototype._setActiveID = function (t) {
                this._activeTouchID = t[t.length - 1].identifier;
              }),
              (t.prototype._getActiveTracker = function () {
                return this._touchList[this._activeTouchID];
              }),
              t
            );
          })();
        !(function (t) {
          (t.X = "x"), (t.Y = "y");
        })(B || (B = {}));
        var G = (function () {
            function t(t, e) {
              void 0 === e && (e = 0),
                (this._direction = t),
                (this._minSize = e),
                (this.element = document.createElement("div")),
                (this.displaySize = 0),
                (this.realSize = 0),
                (this.offset = 0),
                (this.element.className =
                  "scrollbar-thumb scrollbar-thumb-" + t);
            }
            return (
              (t.prototype.attachTo = function (t) {
                t.appendChild(this.element);
              }),
              (t.prototype.update = function (t, e, i) {
                (this.realSize = Math.min(e / i, 1) * e),
                  (this.displaySize = Math.max(this.realSize, this._minSize)),
                  (this.offset =
                    (t / i) * (e + (this.realSize - this.displaySize))),
                  W(this.element, this._getStyle());
              }),
              (t.prototype._getStyle = function () {
                switch (this._direction) {
                  case B.X:
                    return {
                      width: this.displaySize + "px",
                      "-transform": "translate3d(" + this.offset + "px, 0, 0)",
                    };
                  case B.Y:
                    return {
                      height: this.displaySize + "px",
                      "-transform": "translate3d(0, " + this.offset + "px, 0)",
                    };
                  default:
                    return null;
                }
              }),
              t
            );
          })(),
          q = (function () {
            function t(t, e) {
              void 0 === e && (e = 0),
                (this.element = document.createElement("div")),
                (this._isShown = !1),
                (this.element.className =
                  "scrollbar-track scrollbar-track-" + t),
                (this.thumb = new G(t, e)),
                this.thumb.attachTo(this.element);
            }
            return (
              (t.prototype.attachTo = function (t) {
                t.appendChild(this.element);
              }),
              (t.prototype.show = function () {
                this._isShown ||
                  ((this._isShown = !0), this.element.classList.add("show"));
              }),
              (t.prototype.hide = function () {
                this._isShown &&
                  ((this._isShown = !1), this.element.classList.remove("show"));
              }),
              (t.prototype.update = function (t, e, i) {
                W(this.element, { display: i <= e ? "none" : "block" }),
                  this.thumb.update(t, e, i);
              }),
              t
            );
          })(),
          U = (function () {
            function t(t) {
              this._scrollbar = t;
              var e = t.options.thumbMinSize;
              (this.xAxis = new q(B.X, e)),
                (this.yAxis = new q(B.Y, e)),
                this.xAxis.attachTo(t.containerEl),
                this.yAxis.attachTo(t.containerEl),
                t.options.alwaysShowTracks &&
                  (this.xAxis.show(), this.yAxis.show());
            }
            return (
              (t.prototype.update = function () {
                var t = this._scrollbar,
                  e = t.size,
                  i = t.offset;
                this.xAxis.update(i.x, e.container.width, e.content.width),
                  this.yAxis.update(i.y, e.container.height, e.content.height);
              }),
              (t.prototype.autoHideOnIdle = function () {
                this._scrollbar.options.alwaysShowTracks ||
                  (this.xAxis.hide(), this.yAxis.hide());
              }),
              r([I(300)], t.prototype, "autoHideOnIdle", null),
              t
            );
          })(),
          $ = new WeakMap();
        function Z(t) {
          return Math.pow(t - 1, 3) + 1;
        }
        var Q,
          K,
          J,
          tt = (function () {
            function t(t, e) {
              var i = this.constructor;
              (this.scrollbar = t),
                (this.name = i.pluginName),
                (this.options = s(s({}, i.defaultOptions), e));
            }
            return (
              (t.prototype.onInit = function () {}),
              (t.prototype.onDestroy = function () {}),
              (t.prototype.onUpdate = function () {}),
              (t.prototype.onRender = function (t) {}),
              (t.prototype.transformDelta = function (t, e) {
                return s({}, t);
              }),
              (t.pluginName = ""),
              (t.defaultOptions = {}),
              t
            );
          })(),
          et = { order: new Set(), constructors: {} };
        function it(t) {
          var e = X(t),
            i = t.containerEl;
          e(i, "keydown", function (e) {
            var n = document.activeElement;
            if (
              (n === i || i.contains(n)) &&
              !(function (t) {
                return !(
                  ("INPUT" !== t.tagName &&
                    "SELECT" !== t.tagName &&
                    "TEXTAREA" !== t.tagName &&
                    !t.isContentEditable) ||
                  t.disabled
                );
              })(n)
            ) {
              var a = (function (t, e) {
                var i = t.size,
                  n = t.limit,
                  a = t.offset;
                switch (e) {
                  case Q.TAB:
                    return (function (t) {
                      requestAnimationFrame(function () {
                        t.scrollIntoView(document.activeElement, {
                          offsetTop: t.size.container.height / 2,
                          onlyScrollIfNeeded: !0,
                        });
                      });
                    })(t);
                  case Q.SPACE:
                    return [0, 200];
                  case Q.PAGE_UP:
                    return [0, 40 - i.container.height];
                  case Q.PAGE_DOWN:
                    return [0, i.container.height - 40];
                  case Q.END:
                    return [0, n.y - a.y];
                  case Q.HOME:
                    return [0, -a.y];
                  case Q.LEFT:
                    return [-40, 0];
                  case Q.UP:
                    return [0, -40];
                  case Q.RIGHT:
                    return [40, 0];
                  case Q.DOWN:
                    return [0, 40];
                  default:
                    return null;
                }
              })(t, e.keyCode || e.which);
              if (a) {
                var s = a[0],
                  r = a[1];
                t.addTransformableMomentum(s, r, e, function (i) {
                  i
                    ? e.preventDefault()
                    : (t.containerEl.blur(),
                      t.parent && t.parent.containerEl.focus());
                });
              }
            }
          });
        }
        function nt(t) {
          var e,
            i,
            n,
            a,
            s,
            r = X(t),
            o = t.containerEl,
            l = t.track,
            c = l.xAxis,
            h = l.yAxis;
          function d(e, i) {
            var n = t.size;
            return e === K.X
              ? (i /
                  (n.container.width +
                    (c.thumb.realSize - c.thumb.displaySize))) *
                  n.content.width
              : e === K.Y
              ? (i /
                  (n.container.height +
                    (h.thumb.realSize - h.thumb.displaySize))) *
                n.content.height
              : 0;
          }
          function u(t) {
            return R(t, [c.element, c.thumb.element])
              ? K.X
              : R(t, [h.element, h.thumb.element])
              ? K.Y
              : void 0;
          }
          r(o, "click", function (e) {
            if (!i && R(e.target, [c.element, h.element])) {
              var n = e.target,
                a = u(n),
                s = n.getBoundingClientRect(),
                r = H(e),
                o = t.offset,
                l = t.limit;
              if (a === K.X) {
                var f = r.x - s.left - c.thumb.displaySize / 2;
                t.setMomentum(C(d(a, f) - o.x, -o.x, l.x - o.x), 0);
              }
              a === K.Y &&
                ((f = r.y - s.top - h.thumb.displaySize / 2),
                t.setMomentum(0, C(d(a, f) - o.y, -o.y, l.y - o.y)));
            }
          }),
            r(o, "mousedown", function (i) {
              if (R(i.target, [c.thumb.element, h.thumb.element])) {
                e = !0;
                var r = i.target,
                  l = H(i),
                  d = r.getBoundingClientRect();
                (a = u(r)),
                  (n = { x: l.x - d.left, y: l.y - d.top }),
                  (s = o.getBoundingClientRect()),
                  W(t.containerEl, { "-user-select": "none" });
              }
            }),
            r(window, "mousemove", function (r) {
              if (e) {
                i = !0;
                var o = t.offset,
                  l = H(r);
                if (a === K.X) {
                  var c = l.x - n.x - s.left;
                  t.setPosition(d(a, c), o.y);
                }
                a === K.Y &&
                  ((c = l.y - n.y - s.top), t.setPosition(o.x, d(a, c)));
              }
            }),
            r(window, "mouseup blur", function () {
              (e = i = !1), W(t.containerEl, { "-user-select": "" });
            });
        }
        function at(t) {
          X(t)(window, "resize", M(t.update.bind(t), 300));
        }
        function st(t) {
          var e,
            i = X(t),
            n = t.containerEl,
            a = t.contentEl,
            s = !1;
          i(window, "mousemove", function (i) {
            s &&
              (cancelAnimationFrame(e),
              (function i(n) {
                var a = n.x,
                  s = n.y;
                if (a || s) {
                  var r = t.offset,
                    o = t.limit;
                  t.setMomentum(
                    C(r.x + a, 0, o.x) - r.x,
                    C(r.y + s, 0, o.y) - r.y
                  ),
                    (e = requestAnimationFrame(function () {
                      i({ x: a, y: s });
                    }));
                }
              })(
                (function (t, e) {
                  var i = t.bounding,
                    n = i.top,
                    a = i.right,
                    s = i.bottom,
                    r = i.left,
                    o = H(e),
                    l = o.x,
                    c = o.y,
                    h = { x: 0, y: 0 };
                  return (
                    (0 === l && 0 === c) ||
                      (l > a - 20
                        ? (h.x = l - a + 20)
                        : l < r + 20 && (h.x = l - r - 20),
                      c > s - 20
                        ? (h.y = c - s + 20)
                        : c < n + 20 && (h.y = c - n - 20),
                      (h.x *= 2),
                      (h.y *= 2)),
                    h
                  );
                })(t, i)
              ));
          }),
            i(a, "selectstart", function (t) {
              t.stopPropagation(), cancelAnimationFrame(e), (s = !0);
            }),
            i(window, "mouseup blur", function () {
              cancelAnimationFrame(e), (s = !1);
            }),
            i(n, "scroll", function (t) {
              t.preventDefault(), (n.scrollTop = n.scrollLeft = 0);
            });
        }
        function rt(t) {
          var e,
            i = /Android/.test(navigator.userAgent) ? 3 : 2,
            n = t.options.delegateTo || t.containerEl,
            a = new V(),
            s = X(t),
            r = 0;
          s(n, "touchstart", function (i) {
            a.track(i),
              t.setMomentum(0, 0),
              0 === r &&
                ((e = t.options.damping),
                (t.options.damping = Math.max(e, 0.5))),
              r++;
          }),
            s(n, "touchmove", function (e) {
              if (!J || J === t) {
                a.update(e);
                var i = a.getDelta(),
                  n = i.x,
                  s = i.y;
                t.addTransformableMomentum(n, s, e, function (i) {
                  i && e.cancelable && (e.preventDefault(), (J = t));
                });
              }
            }),
            s(n, "touchcancel touchend", function (n) {
              var s = a.getVelocity(),
                o = { x: 0, y: 0 };
              Object.keys(s).forEach(function (t) {
                var n = s[t] / e;
                o[t] = Math.abs(n) < 50 ? 0 : n * i;
              }),
                t.addTransformableMomentum(o.x, o.y, n),
                0 == --r && (t.options.damping = e),
                a.release(n),
                (J = null);
            });
        }
        function ot(t) {
          X(t)(
            t.options.delegateTo || t.containerEl,
            "onwheel" in window ||
              document.implementation.hasFeature("Events.wheel", "3.0")
              ? "wheel"
              : "mousewheel",
            function (e) {
              var i = (function (t) {
                  if ("deltaX" in t) {
                    var e = ht(t.deltaMode);
                    return {
                      x: (t.deltaX / lt.STANDARD) * e,
                      y: (t.deltaY / lt.STANDARD) * e,
                    };
                  }
                  return "wheelDeltaX" in t
                    ? {
                        x: t.wheelDeltaX / lt.OTHERS,
                        y: t.wheelDeltaY / lt.OTHERS,
                      }
                    : { x: 0, y: t.wheelDelta / lt.OTHERS };
                })(e),
                n = i.x,
                a = i.y;
              t.addTransformableMomentum(n, a, e, function (t) {
                t && e.preventDefault();
              });
            }
          );
        }
        !(function (t) {
          (t[(t.TAB = 9)] = "TAB"),
            (t[(t.SPACE = 32)] = "SPACE"),
            (t[(t.PAGE_UP = 33)] = "PAGE_UP"),
            (t[(t.PAGE_DOWN = 34)] = "PAGE_DOWN"),
            (t[(t.END = 35)] = "END"),
            (t[(t.HOME = 36)] = "HOME"),
            (t[(t.LEFT = 37)] = "LEFT"),
            (t[(t.UP = 38)] = "UP"),
            (t[(t.RIGHT = 39)] = "RIGHT"),
            (t[(t.DOWN = 40)] = "DOWN");
        })(Q || (Q = {})),
          (function (t) {
            (t[(t.X = 0)] = "X"), (t[(t.Y = 1)] = "Y");
          })(K || (K = {}));
        var lt = { STANDARD: 1, OTHERS: -3 },
          ct = [1, 28, 500],
          ht = function (t) {
            return ct[t] || ct[0];
          },
          dt = new Map(),
          ut = (function () {
            function t(t, e) {
              var i = this;
              (this.offset = { x: 0, y: 0 }),
                (this.limit = { x: 1 / 0, y: 1 / 0 }),
                (this.bounding = { top: 0, right: 0, bottom: 0, left: 0 }),
                (this._plugins = []),
                (this._momentum = { x: 0, y: 0 }),
                (this._listeners = new Set()),
                (this.containerEl = t);
              var n = (this.contentEl = document.createElement("div"));
              (this.options = new D(e)),
                t.setAttribute("data-scrollbar", "true"),
                t.setAttribute("tabindex", "-1"),
                W(t, { overflow: "hidden", outline: "none" }),
                window.navigator.msPointerEnabled &&
                  (t.style.msTouchAction = "none"),
                (n.className = "scroll-content"),
                Array.from(t.childNodes).forEach(function (t) {
                  n.appendChild(t);
                }),
                t.appendChild(n),
                (this.track = new U(this)),
                (this.size = this.getSize()),
                (this._plugins = (function (t, e) {
                  return Array.from(et.order)
                    .filter(function (t) {
                      return !1 !== e[t];
                    })
                    .map(function (i) {
                      var n = new (0, et.constructors[i])(t, e[i]);
                      return (e[i] = n.options), n;
                    });
                })(this, this.options.plugins));
              var a = t.scrollLeft,
                s = t.scrollTop;
              (t.scrollLeft = t.scrollTop = 0),
                this.setPosition(a, s, { withoutCallbacks: !0 });
              var r = window,
                o =
                  r.MutationObserver ||
                  r.WebKitMutationObserver ||
                  r.MozMutationObserver;
              "function" == typeof o &&
                ((this._observer = new o(function () {
                  i.update();
                })),
                this._observer.observe(n, { subtree: !0, childList: !0 })),
                dt.set(t, this),
                requestAnimationFrame(function () {
                  i._init();
                });
            }
            return (
              Object.defineProperty(t.prototype, "parent", {
                get: function () {
                  for (var t = this.containerEl.parentElement; t; ) {
                    var e = dt.get(t);
                    if (e) return e;
                    t = t.parentElement;
                  }
                  return null;
                },
                enumerable: !0,
                configurable: !0,
              }),
              Object.defineProperty(t.prototype, "scrollTop", {
                get: function () {
                  return this.offset.y;
                },
                set: function (t) {
                  this.setPosition(this.scrollLeft, t);
                },
                enumerable: !0,
                configurable: !0,
              }),
              Object.defineProperty(t.prototype, "scrollLeft", {
                get: function () {
                  return this.offset.x;
                },
                set: function (t) {
                  this.setPosition(t, this.scrollTop);
                },
                enumerable: !0,
                configurable: !0,
              }),
              (t.prototype.getSize = function () {
                return (function (t) {
                  var e = t.containerEl,
                    i = t.contentEl,
                    n = getComputedStyle(e),
                    a = [
                      "paddingTop",
                      "paddingBottom",
                      "paddingLeft",
                      "paddingRight",
                    ].map(function (t) {
                      return n[t] ? parseFloat(n[t]) : 0;
                    }),
                    s = a[0] + a[1],
                    r = a[2] + a[3];
                  return {
                    container: { width: e.clientWidth, height: e.clientHeight },
                    content: {
                      width: i.offsetWidth - i.clientWidth + i.scrollWidth + r,
                      height:
                        i.offsetHeight - i.clientHeight + i.scrollHeight + s,
                    },
                  };
                })(this);
              }),
              (t.prototype.update = function () {
                !(function (t) {
                  var e = t.getSize(),
                    i = {
                      x: Math.max(e.content.width - e.container.width, 0),
                      y: Math.max(e.content.height - e.container.height, 0),
                    },
                    n = t.containerEl.getBoundingClientRect(),
                    a = {
                      top: Math.max(n.top, 0),
                      right: Math.min(n.right, window.innerWidth),
                      bottom: Math.min(n.bottom, window.innerHeight),
                      left: Math.max(n.left, 0),
                    };
                  (t.size = e),
                    (t.limit = i),
                    (t.bounding = a),
                    t.track.update(),
                    t.setPosition();
                })(this),
                  this._plugins.forEach(function (t) {
                    t.onUpdate();
                  });
              }),
              (t.prototype.isVisible = function (t) {
                return (function (t, e) {
                  var i = t.bounding,
                    n = e.getBoundingClientRect(),
                    a = Math.max(i.top, n.top),
                    s = Math.max(i.left, n.left),
                    r = Math.min(i.right, n.right);
                  return a < Math.min(i.bottom, n.bottom) && s < r;
                })(this, t);
              }),
              (t.prototype.setPosition = function (t, e, i) {
                var n = this;
                void 0 === t && (t = this.offset.x),
                  void 0 === e && (e = this.offset.y),
                  void 0 === i && (i = {});
                var a = (function (t, e, i) {
                  var n = t.options,
                    a = t.offset,
                    r = t.limit,
                    o = t.track,
                    l = t.contentEl;
                  return (
                    n.renderByPixels &&
                      ((e = Math.round(e)), (i = Math.round(i))),
                    (e = C(e, 0, r.x)),
                    (i = C(i, 0, r.y)),
                    e !== a.x && o.xAxis.show(),
                    i !== a.y && o.yAxis.show(),
                    n.alwaysShowTracks || o.autoHideOnIdle(),
                    e === a.x && i === a.y
                      ? null
                      : ((a.x = e),
                        (a.y = i),
                        W(l, {
                          "-transform":
                            "translate3d(" + -e + "px, " + -i + "px, 0)",
                        }),
                        o.update(),
                        { offset: s({}, a), limit: s({}, r) })
                  );
                })(this, t, e);
                a &&
                  !i.withoutCallbacks &&
                  this._listeners.forEach(function (t) {
                    t.call(n, a);
                  });
              }),
              (t.prototype.scrollTo = function (t, e, i, n) {
                void 0 === t && (t = this.offset.x),
                  void 0 === e && (e = this.offset.y),
                  void 0 === i && (i = 0),
                  void 0 === n && (n = {}),
                  (function (t, e, i, n, a) {
                    void 0 === n && (n = 0);
                    var s = void 0 === a ? {} : a,
                      r = s.easing,
                      o = void 0 === r ? Z : r,
                      l = s.callback,
                      c = t.options,
                      h = t.offset,
                      d = t.limit;
                    c.renderByPixels &&
                      ((e = Math.round(e)), (i = Math.round(i)));
                    var u = h.x,
                      f = h.y,
                      p = C(e, 0, d.x) - u,
                      g = C(i, 0, d.y) - f,
                      x = Date.now();
                    cancelAnimationFrame($.get(t)),
                      (function e() {
                        var i = Date.now() - x,
                          a = n ? o(Math.min(i / n, 1)) : 1;
                        if ((t.setPosition(u + p * a, f + g * a), i >= n))
                          "function" == typeof l && l.call(t);
                        else {
                          var s = requestAnimationFrame(e);
                          $.set(t, s);
                        }
                      })();
                  })(this, t, e, i, n);
              }),
              (t.prototype.scrollIntoView = function (t, e) {
                void 0 === e && (e = {}),
                  (function (t, e, i) {
                    var n = void 0 === i ? {} : i,
                      a = n.alignToTop,
                      s = void 0 === a || a,
                      r = n.onlyScrollIfNeeded,
                      o = void 0 !== r && r,
                      l = n.offsetTop,
                      c = void 0 === l ? 0 : l,
                      h = n.offsetLeft,
                      d = void 0 === h ? 0 : h,
                      u = n.offsetBottom,
                      f = void 0 === u ? 0 : u,
                      p = t.containerEl,
                      g = t.bounding,
                      x = t.offset,
                      m = t.limit;
                    if (e && p.contains(e)) {
                      var v = e.getBoundingClientRect();
                      if (!o || !t.isVisible(e)) {
                        var b = s ? v.top - g.top - c : v.bottom - g.bottom + f;
                        t.setMomentum(
                          v.left - g.left - d,
                          C(b, -x.y, m.y - x.y)
                        );
                      }
                    }
                  })(this, t, e);
              }),
              (t.prototype.addListener = function (t) {
                if ("function" != typeof t)
                  throw new TypeError(
                    "[smooth-scrollbar] scrolling listener should be a function"
                  );
                this._listeners.add(t);
              }),
              (t.prototype.removeListener = function (t) {
                this._listeners.delete(t);
              }),
              (t.prototype.addTransformableMomentum = function (t, e, i, n) {
                this._updateDebounced();
                var a = this._plugins.reduce(
                    function (t, e) {
                      return e.transformDelta(t, i) || t;
                    },
                    { x: t, y: e }
                  ),
                  s = !this._shouldPropagateMomentum(a.x, a.y);
                s && this.addMomentum(a.x, a.y), n && n.call(this, s);
              }),
              (t.prototype.addMomentum = function (t, e) {
                this.setMomentum(this._momentum.x + t, this._momentum.y + e);
              }),
              (t.prototype.setMomentum = function (t, e) {
                0 === this.limit.x && (t = 0),
                  0 === this.limit.y && (e = 0),
                  this.options.renderByPixels &&
                    ((t = Math.round(t)), (e = Math.round(e))),
                  (this._momentum.x = t),
                  (this._momentum.y = e);
              }),
              (t.prototype.updatePluginOptions = function (t, e) {
                this._plugins.forEach(function (i) {
                  i.name === t && Object.assign(i.options, e);
                });
              }),
              (t.prototype.destroy = function () {
                var t = this.containerEl,
                  e = this.contentEl;
                !(function (t) {
                  var e = z.get(t);
                  e &&
                    (e.forEach(function (t) {
                      var e = t.elem,
                        i = t.eventName,
                        n = t.handler;
                      e.removeEventListener(i, n, N());
                    }),
                    z.delete(t));
                })(this),
                  this._listeners.clear(),
                  this.setMomentum(0, 0),
                  cancelAnimationFrame(this._renderID),
                  this._observer && this._observer.disconnect(),
                  dt.delete(this.containerEl);
                for (var i = Array.from(e.childNodes); t.firstChild; )
                  t.removeChild(t.firstChild);
                i.forEach(function (e) {
                  t.appendChild(e);
                }),
                  W(t, { overflow: "" }),
                  (t.scrollTop = this.scrollTop),
                  (t.scrollLeft = this.scrollLeft),
                  this._plugins.forEach(function (t) {
                    t.onDestroy();
                  }),
                  (this._plugins.length = 0);
              }),
              (t.prototype._init = function () {
                var t = this;
                this.update(),
                  Object.keys(n).forEach(function (e) {
                    n[e](t);
                  }),
                  this._plugins.forEach(function (t) {
                    t.onInit();
                  }),
                  this._render();
              }),
              (t.prototype._updateDebounced = function () {
                this.update();
              }),
              (t.prototype._shouldPropagateMomentum = function (t, e) {
                void 0 === t && (t = 0), void 0 === e && (e = 0);
                var i = this.options,
                  n = this.offset,
                  a = this.limit;
                if (!i.continuousScrolling) return !1;
                0 === a.x && 0 === a.y && this._updateDebounced();
                var s = C(t + n.x, 0, a.x),
                  r = C(e + n.y, 0, a.y),
                  o = !0;
                return (
                  (o = (o = o && s === n.x) && r === n.y) &&
                  (n.x === a.x || 0 === n.x || n.y === a.y || 0 === n.y)
                );
              }),
              (t.prototype._render = function () {
                var t = this._momentum;
                if (t.x || t.y) {
                  var e = this._nextTick("x"),
                    i = this._nextTick("y");
                  (t.x = e.momentum),
                    (t.y = i.momentum),
                    this.setPosition(e.position, i.position);
                }
                var n = s({}, this._momentum);
                this._plugins.forEach(function (t) {
                  t.onRender(n);
                }),
                  (this._renderID = requestAnimationFrame(
                    this._render.bind(this)
                  ));
              }),
              (t.prototype._nextTick = function (t) {
                var e = this.options,
                  i = this.offset,
                  n = this._momentum,
                  a = i[t],
                  s = n[t];
                if (Math.abs(s) <= 0.1) return { momentum: 0, position: a + s };
                var r = s * (1 - e.damping);
                return (
                  e.renderByPixels && (r |= 0),
                  { momentum: r, position: a + s - r }
                );
              }),
              r(
                [I(100, { leading: !0 })],
                t.prototype,
                "_updateDebounced",
                null
              ),
              t
            );
          })(),
          ft = "smooth-scrollbar-style",
          pt = !1;
        function gt() {
          if (!pt && "undefined" != typeof window) {
            var t = document.createElement("style");
            (t.id = ft),
              (t.textContent =
                "\n[data-scrollbar] {\n  display: block;\n  position: relative;\n}\n\n.scroll-content {\n  -webkit-transform: translate3d(0, 0, 0);\n          transform: translate3d(0, 0, 0);\n}\n\n.scrollbar-track {\n  position: absolute;\n  opacity: 0;\n  z-index: 1;\n  background: rgba(222, 222, 222, .75);\n  -webkit-user-select: none;\n     -moz-user-select: none;\n      -ms-user-select: none;\n          user-select: none;\n  -webkit-transition: opacity 0.5s 0.5s ease-out;\n          transition: opacity 0.5s 0.5s ease-out;\n}\n.scrollbar-track.show,\n.scrollbar-track:hover {\n  opacity: 1;\n  -webkit-transition-delay: 0s;\n          transition-delay: 0s;\n}\n\n.scrollbar-track-x {\n  bottom: 0;\n  left: 0;\n  width: 100%;\n  height: 8px;\n}\n.scrollbar-track-y {\n  top: 0;\n  right: 0;\n  width: 8px;\n  height: 100%;\n}\n.scrollbar-thumb {\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 8px;\n  height: 8px;\n  background: rgba(0, 0, 0, .5);\n  border-radius: 4px;\n}\n"),
              document.head && document.head.appendChild(t),
              (pt = !0);
          }
        }
        i.d(e, "ScrollbarPlugin", function () {
          return tt;
        });
        /*!
         * cast `I.Scrollbar` to `Scrollbar` to avoid error
         *
         * `I.Scrollbar` is not assignable to `Scrollbar`:
         *     "privateProp" is missing in `I.Scrollbar`
         *
         * @see https://github.com/Microsoft/TypeScript/issues/2672
         */
        var xt = (function (t) {
          function e() {
            return (null !== t && t.apply(this, arguments)) || this;
          }
          return (
            (function (t, e) {
              function i() {
                this.constructor = t;
              }
              a(t, e),
                (t.prototype =
                  null === e
                    ? Object.create(e)
                    : ((i.prototype = e.prototype), new i()));
            })(e, t),
            (e.init = function (t, e) {
              if (!t || 1 !== t.nodeType)
                throw new TypeError(
                  "expect element to be DOM Element, but got " + t
                );
              return gt(), dt.has(t) ? dt.get(t) : new ut(t, e);
            }),
            (e.initAll = function (t) {
              return Array.from(
                document.querySelectorAll("[data-scrollbar]"),
                function (i) {
                  return e.init(i, t);
                }
              );
            }),
            (e.has = function (t) {
              return dt.has(t);
            }),
            (e.get = function (t) {
              return dt.get(t);
            }),
            (e.getAll = function () {
              return Array.from(dt.values());
            }),
            (e.destroy = function (t) {
              var e = dt.get(t);
              e && e.destroy();
            }),
            (e.destroyAll = function () {
              dt.forEach(function (t) {
                t.destroy();
              });
            }),
            (e.use = function () {
              for (var t = [], e = 0; e < arguments.length; e++)
                t[e] = arguments[e];
              return function () {
                for (var t = [], e = 0; e < arguments.length; e++)
                  t[e] = arguments[e];
                t.forEach(function (t) {
                  var e = t.pluginName;
                  if (!e) throw new TypeError("plugin name is required");
                  et.order.add(e), (et.constructors[e] = t);
                });
              }.apply(void 0, t);
            }),
            (e.attachStyle = function () {
              return gt();
            }),
            (e.detachStyle = function () {
              return (function () {
                if (pt && "undefined" != typeof window) {
                  var t = document.getElementById(ft);
                  t && t.parentNode && (t.parentNode.removeChild(t), (pt = !1));
                }
              })();
            }),
            (e.version = "8.6.3"),
            (e.ScrollbarPlugin = tt),
            e
          );
        })(ut);
        e.default = xt;
      },
    ]).default;
  }),
  (function (t, e) {
    "object" == typeof exports && "undefined" != typeof module
      ? (module.exports = e())
      : "function" == typeof define && define.amd
      ? define(e)
      : ((t =
          "undefined" != typeof globalThis
            ? globalThis
            : t || self).ApexCharts = e());
  })(this, function () {
    "use strict";
    function t(e) {
      return (t =
        "function" == typeof Symbol && "symbol" == typeof Symbol.iterator
          ? function (t) {
              return typeof t;
            }
          : function (t) {
              return t &&
                "function" == typeof Symbol &&
                t.constructor === Symbol &&
                t !== Symbol.prototype
                ? "symbol"
                : typeof t;
            })(e);
    }
    function e(t, e) {
      if (!(t instanceof e))
        throw new TypeError("Cannot call a class as a function");
    }
    function i(t, e) {
      for (var i = 0; i < e.length; i++) {
        var n = e[i];
        (n.enumerable = n.enumerable || !1),
          (n.configurable = !0),
          "value" in n && (n.writable = !0),
          Object.defineProperty(t, n.key, n);
      }
    }
    function n(t, e, n) {
      return e && i(t.prototype, e), n && i(t, n), t;
    }
    function a(t, e, i) {
      return (
        e in t
          ? Object.defineProperty(t, e, {
              value: i,
              enumerable: !0,
              configurable: !0,
              writable: !0,
            })
          : (t[e] = i),
        t
      );
    }
    function s(t, e) {
      var i = Object.keys(t);
      if (Object.getOwnPropertySymbols) {
        var n = Object.getOwnPropertySymbols(t);
        e &&
          (n = n.filter(function (e) {
            return Object.getOwnPropertyDescriptor(t, e).enumerable;
          })),
          i.push.apply(i, n);
      }
      return i;
    }
    function r(t) {
      for (var e = 1; e < arguments.length; e++) {
        var i = null != arguments[e] ? arguments[e] : {};
        e % 2
          ? s(Object(i), !0).forEach(function (e) {
              a(t, e, i[e]);
            })
          : Object.getOwnPropertyDescriptors
          ? Object.defineProperties(t, Object.getOwnPropertyDescriptors(i))
          : s(Object(i)).forEach(function (e) {
              Object.defineProperty(
                t,
                e,
                Object.getOwnPropertyDescriptor(i, e)
              );
            });
      }
      return t;
    }
    function o(t, e) {
      if ("function" != typeof e && null !== e)
        throw new TypeError(
          "Super expression must either be null or a function"
        );
      (t.prototype = Object.create(e && e.prototype, {
        constructor: { value: t, writable: !0, configurable: !0 },
      })),
        e && c(t, e);
    }
    function l(t) {
      return (l = Object.setPrototypeOf
        ? Object.getPrototypeOf
        : function (t) {
            return t.__proto__ || Object.getPrototypeOf(t);
          })(t);
    }
    function c(t, e) {
      return (c =
        Object.setPrototypeOf ||
        function (t, e) {
          return (t.__proto__ = e), t;
        })(t, e);
    }
    function h(t, e) {
      return !e || ("object" != typeof e && "function" != typeof e)
        ? (function (t) {
            if (void 0 === t)
              throw new ReferenceError(
                "this hasn't been initialised - super() hasn't been called"
              );
            return t;
          })(t)
        : e;
    }
    function d(t) {
      var e = (function () {
        if ("undefined" == typeof Reflect || !Reflect.construct) return !1;
        if (Reflect.construct.sham) return !1;
        if ("function" == typeof Proxy) return !0;
        try {
          return (
            Date.prototype.toString.call(
              Reflect.construct(Date, [], function () {})
            ),
            !0
          );
        } catch (t) {
          return !1;
        }
      })();
      return function () {
        var i,
          n = l(t);
        if (e) {
          var a = l(this).constructor;
          i = Reflect.construct(n, arguments, a);
        } else i = n.apply(this, arguments);
        return h(this, i);
      };
    }
    function u(t) {
      return (
        (function (t) {
          if (Array.isArray(t)) return f(t);
        })(t) ||
        (function (t) {
          if ("undefined" != typeof Symbol && Symbol.iterator in Object(t))
            return Array.from(t);
        })(t) ||
        (function (t, e) {
          if (t) {
            if ("string" == typeof t) return f(t, e);
            var i = Object.prototype.toString.call(t).slice(8, -1);
            return (
              "Object" === i && t.constructor && (i = t.constructor.name),
              "Map" === i || "Set" === i
                ? Array.from(t)
                : "Arguments" === i ||
                  /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(i)
                ? f(t, e)
                : void 0
            );
          }
        })(t) ||
        (function () {
          throw new TypeError(
            "Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."
          );
        })()
      );
    }
    function f(t, e) {
      (null == e || e > t.length) && (e = t.length);
      for (var i = 0, n = new Array(e); i < e; i++) n[i] = t[i];
      return n;
    }
    var p = (function () {
        function i() {
          e(this, i);
        }
        return (
          n(
            i,
            [
              {
                key: "shadeRGBColor",
                value: function (t, e) {
                  var i = e.split(","),
                    n = t < 0 ? 0 : 255,
                    a = t < 0 ? -1 * t : t,
                    s = parseInt(i[0].slice(4), 10),
                    r = parseInt(i[1], 10),
                    o = parseInt(i[2], 10);
                  return (
                    "rgb(" +
                    (Math.round((n - s) * a) + s) +
                    "," +
                    (Math.round((n - r) * a) + r) +
                    "," +
                    (Math.round((n - o) * a) + o) +
                    ")"
                  );
                },
              },
              {
                key: "shadeHexColor",
                value: function (t, e) {
                  var i = parseInt(e.slice(1), 16),
                    n = t < 0 ? 0 : 255,
                    a = t < 0 ? -1 * t : t,
                    s = i >> 16,
                    r = (i >> 8) & 255,
                    o = 255 & i;
                  return (
                    "#" +
                    (
                      16777216 +
                      65536 * (Math.round((n - s) * a) + s) +
                      256 * (Math.round((n - r) * a) + r) +
                      (Math.round((n - o) * a) + o)
                    )
                      .toString(16)
                      .slice(1)
                  );
                },
              },
              {
                key: "shadeColor",
                value: function (t, e) {
                  return i.isColorHex(e)
                    ? this.shadeHexColor(t, e)
                    : this.shadeRGBColor(t, e);
                },
              },
            ],
            [
              {
                key: "bind",
                value: function (t, e) {
                  return function () {
                    return t.apply(e, arguments);
                  };
                },
              },
              {
                key: "isObject",
                value: function (e) {
                  return (
                    e && "object" === t(e) && !Array.isArray(e) && null != e
                  );
                },
              },
              {
                key: "listToArray",
                value: function (t) {
                  var e,
                    i = [];
                  for (e = 0; e < t.length; e++) i[e] = t[e];
                  return i;
                },
              },
              {
                key: "extend",
                value: function (t, e) {
                  var i = this;
                  "function" != typeof Object.assign &&
                    (Object.assign = function (t) {
                      if (null == t)
                        throw new TypeError(
                          "Cannot convert undefined or null to object"
                        );
                      for (
                        var e = Object(t), i = 1;
                        i < arguments.length;
                        i++
                      ) {
                        var n = arguments[i];
                        if (null != n)
                          for (var a in n) n.hasOwnProperty(a) && (e[a] = n[a]);
                      }
                      return e;
                    });
                  var n = Object.assign({}, t);
                  return (
                    this.isObject(t) &&
                      this.isObject(e) &&
                      Object.keys(e).forEach(function (s) {
                        i.isObject(e[s]) && s in t
                          ? (n[s] = i.extend(t[s], e[s]))
                          : Object.assign(n, a({}, s, e[s]));
                      }),
                    n
                  );
                },
              },
              {
                key: "extendArray",
                value: function (t, e) {
                  var n = [];
                  return (
                    t.map(function (t) {
                      n.push(i.extend(e, t));
                    }),
                    n
                  );
                },
              },
              {
                key: "monthMod",
                value: function (t) {
                  return t % 12;
                },
              },
              {
                key: "clone",
                value: function (e) {
                  if ("[object Array]" === Object.prototype.toString.call(e)) {
                    for (var i = [], n = 0; n < e.length; n++)
                      i[n] = this.clone(e[n]);
                    return i;
                  }
                  if ("[object Null]" === Object.prototype.toString.call(e))
                    return null;
                  if ("[object Date]" === Object.prototype.toString.call(e))
                    return e;
                  if ("object" === t(e)) {
                    var a = {};
                    for (var s in e)
                      e.hasOwnProperty(s) && (a[s] = this.clone(e[s]));
                    return a;
                  }
                  return e;
                },
              },
              {
                key: "log10",
                value: function (t) {
                  return Math.log(t) / Math.LN10;
                },
              },
              {
                key: "roundToBase10",
                value: function (t) {
                  return Math.pow(10, Math.floor(Math.log10(t)));
                },
              },
              {
                key: "roundToBase",
                value: function (t, e) {
                  return Math.pow(e, Math.floor(Math.log(t) / Math.log(e)));
                },
              },
              {
                key: "parseNumber",
                value: function (t) {
                  return null === t ? t : parseFloat(t);
                },
              },
              {
                key: "randomId",
                value: function () {
                  return (Math.random() + 1).toString(36).substring(4);
                },
              },
              {
                key: "noExponents",
                value: function (t) {
                  var e = String(t).split(/[eE]/);
                  if (1 === e.length) return e[0];
                  var i = "",
                    n = t < 0 ? "-" : "",
                    a = e[0].replace(".", ""),
                    s = Number(e[1]) + 1;
                  if (s < 0) {
                    for (i = n + "0."; s++; ) i += "0";
                    return i + a.replace(/^-/, "");
                  }
                  for (s -= a.length; s--; ) i += "0";
                  return a + i;
                },
              },
              {
                key: "getDimensions",
                value: function (t) {
                  var e = getComputedStyle(t, null),
                    i = t.clientHeight,
                    n = t.clientWidth;
                  return (
                    (i -=
                      parseFloat(e.paddingTop) + parseFloat(e.paddingBottom)),
                    [
                      (n -=
                        parseFloat(e.paddingLeft) + parseFloat(e.paddingRight)),
                      i,
                    ]
                  );
                },
              },
              {
                key: "getBoundingClientRect",
                value: function (t) {
                  var e = t.getBoundingClientRect();
                  return {
                    top: e.top,
                    right: e.right,
                    bottom: e.bottom,
                    left: e.left,
                    width: t.clientWidth,
                    height: t.clientHeight,
                    x: e.left,
                    y: e.top,
                  };
                },
              },
              {
                key: "getLargestStringFromArr",
                value: function (t) {
                  return t.reduce(function (t, e) {
                    return (
                      Array.isArray(e) &&
                        (e = e.reduce(function (t, e) {
                          return t.length > e.length ? t : e;
                        })),
                      t.length > e.length ? t : e
                    );
                  }, 0);
                },
              },
              {
                key: "hexToRgba",
                value: function () {
                  var t =
                      arguments.length > 0 && void 0 !== arguments[0]
                        ? arguments[0]
                        : "#999999",
                    e =
                      arguments.length > 1 && void 0 !== arguments[1]
                        ? arguments[1]
                        : 0.6;
                  "#" !== t.substring(0, 1) && (t = "#999999");
                  var i = t.replace("#", "");
                  i = i.match(new RegExp("(.{" + i.length / 3 + "})", "g"));
                  for (var n = 0; n < i.length; n++)
                    i[n] = parseInt(1 === i[n].length ? i[n] + i[n] : i[n], 16);
                  return void 0 !== e && i.push(e), "rgba(" + i.join(",") + ")";
                },
              },
              {
                key: "getOpacityFromRGBA",
                value: function (t) {
                  return parseFloat(t.replace(/^.*,(.+)\)/, "$1"));
                },
              },
              {
                key: "rgb2hex",
                value: function (t) {
                  return (t = t.match(
                    /^rgba?[\s+]?\([\s+]?(\d+)[\s+]?,[\s+]?(\d+)[\s+]?,[\s+]?(\d+)[\s+]?/i
                  )) && 4 === t.length
                    ? "#" +
                        ("0" + parseInt(t[1], 10).toString(16)).slice(-2) +
                        ("0" + parseInt(t[2], 10).toString(16)).slice(-2) +
                        ("0" + parseInt(t[3], 10).toString(16)).slice(-2)
                    : "";
                },
              },
              {
                key: "isColorHex",
                value: function (t) {
                  return /(^#[0-9A-F]{6}$)|(^#[0-9A-F]{3}$)|(^#[0-9A-F]{8}$)/i.test(
                    t
                  );
                },
              },
              {
                key: "getPolygonPos",
                value: function (t, e) {
                  for (var i = [], n = (2 * Math.PI) / e, a = 0; a < e; a++) {
                    var s = {};
                    (s.x = t * Math.sin(a * n)),
                      (s.y = -t * Math.cos(a * n)),
                      i.push(s);
                  }
                  return i;
                },
              },
              {
                key: "polarToCartesian",
                value: function (t, e, i, n) {
                  var a = ((n - 90) * Math.PI) / 180;
                  return { x: t + i * Math.cos(a), y: e + i * Math.sin(a) };
                },
              },
              {
                key: "escapeString",
                value: function (t) {
                  var e =
                      arguments.length > 1 && void 0 !== arguments[1]
                        ? arguments[1]
                        : "x",
                    i = t.toString().slice();
                  return i.replace(
                    /[` ~!@#$%^&*()_|+\-=?;:'",.<>{}[\]\\/]/gi,
                    e
                  );
                },
              },
              {
                key: "negToZero",
                value: function (t) {
                  return t < 0 ? 0 : t;
                },
              },
              {
                key: "moveIndexInArray",
                value: function (t, e, i) {
                  if (i >= t.length)
                    for (var n = i - t.length + 1; n--; ) t.push(void 0);
                  return t.splice(i, 0, t.splice(e, 1)[0]), t;
                },
              },
              {
                key: "extractNumber",
                value: function (t) {
                  return parseFloat(t.replace(/[^\d.]*/g, ""));
                },
              },
              {
                key: "findAncestor",
                value: function (t, e) {
                  for (; (t = t.parentElement) && !t.classList.contains(e); );
                  return t;
                },
              },
              {
                key: "setELstyles",
                value: function (t, e) {
                  for (var i in e) e.hasOwnProperty(i) && (t.style.key = e[i]);
                },
              },
              {
                key: "isNumber",
                value: function (t) {
                  return (
                    !isNaN(t) &&
                    parseFloat(Number(t)) === t &&
                    !isNaN(parseInt(t, 10))
                  );
                },
              },
              {
                key: "isFloat",
                value: function (t) {
                  return Number(t) === t && t % 1 != 0;
                },
              },
              {
                key: "isSafari",
                value: function () {
                  return /^((?!chrome|android).)*safari/i.test(
                    navigator.userAgent
                  );
                },
              },
              {
                key: "isFirefox",
                value: function () {
                  return (
                    navigator.userAgent.toLowerCase().indexOf("firefox") > -1
                  );
                },
              },
              {
                key: "isIE11",
                value: function () {
                  if (
                    -1 !== window.navigator.userAgent.indexOf("MSIE") ||
                    window.navigator.appVersion.indexOf("Trident/") > -1
                  )
                    return !0;
                },
              },
              {
                key: "isIE",
                value: function () {
                  var t = window.navigator.userAgent,
                    e = t.indexOf("MSIE ");
                  if (e > 0)
                    return parseInt(t.substring(e + 5, t.indexOf(".", e)), 10);
                  if (t.indexOf("Trident/") > 0) {
                    var i = t.indexOf("rv:");
                    return parseInt(t.substring(i + 3, t.indexOf(".", i)), 10);
                  }
                  var n = t.indexOf("Edge/");
                  return (
                    n > 0 && parseInt(t.substring(n + 5, t.indexOf(".", n)), 10)
                  );
                },
              },
            ]
          ),
          i
        );
      })(),
      g = (function () {
        function t(i) {
          e(this, t), (this.ctx = i), (this.w = i.w), this.setEasingFunctions();
        }
        return (
          n(t, [
            {
              key: "setEasingFunctions",
              value: function () {
                var t;
                if (!this.w.globals.easing) {
                  switch (this.w.config.chart.animations.easing) {
                    case "linear":
                      t = "-";
                      break;
                    case "easein":
                      t = "<";
                      break;
                    case "easeout":
                      t = ">";
                      break;
                    default:
                      t = "<>";
                      break;
                    case "swing":
                      t = function (t) {
                        var e = 1.70158;
                        return (t -= 1) * t * ((e + 1) * t + e) + 1;
                      };
                      break;
                    case "bounce":
                      t = function (t) {
                        return t < 1 / 2.75
                          ? 7.5625 * t * t
                          : t < 2 / 2.75
                          ? 7.5625 * (t -= 1.5 / 2.75) * t + 0.75
                          : t < 2.5 / 2.75
                          ? 7.5625 * (t -= 2.25 / 2.75) * t + 0.9375
                          : 7.5625 * (t -= 2.625 / 2.75) * t + 0.984375;
                      };
                      break;
                    case "elastic":
                      t = function (t) {
                        return t === !!t
                          ? t
                          : Math.pow(2, -10 * t) *
                              Math.sin(((t - 0.075) * (2 * Math.PI)) / 0.3) +
                              1;
                      };
                  }
                  this.w.globals.easing = t;
                }
              },
            },
            {
              key: "animateLine",
              value: function (t, e, i, n) {
                t.attr(e).animate(n).attr(i);
              },
            },
            {
              key: "animateMarker",
              value: function (t, e, i, n, a, s) {
                e || (e = 0),
                  t
                    .attr({ r: e, width: e, height: e })
                    .animate(n, a)
                    .attr({ r: i, width: i.width, height: i.height })
                    .afterAll(function () {
                      s();
                    });
              },
            },
            {
              key: "animateCircle",
              value: function (t, e, i, n, a) {
                t.attr({ r: e.r, cx: e.cx, cy: e.cy })
                  .animate(n, a)
                  .attr({ r: i.r, cx: i.cx, cy: i.cy });
              },
            },
            {
              key: "animateRect",
              value: function (t, e, i, n, a) {
                t.attr(e)
                  .animate(n)
                  .attr(i)
                  .afterAll(function () {
                    return a();
                  });
              },
            },
            {
              key: "animatePathsGradually",
              value: function (t) {
                var e = t.el,
                  i = t.realIndex,
                  n = t.j,
                  a = t.fill,
                  s = t.pathFrom,
                  r = t.pathTo,
                  o = t.speed,
                  l = t.delay,
                  c = this.w,
                  h = 0;
                c.config.chart.animations.animateGradually.enabled &&
                  (h = c.config.chart.animations.animateGradually.delay),
                  c.config.chart.animations.dynamicAnimation.enabled &&
                    c.globals.dataChanged &&
                    "bar" !== c.config.chart.type &&
                    (h = 0),
                  this.morphSVG(
                    e,
                    i,
                    n,
                    "line" !== c.config.chart.type || c.globals.comboCharts
                      ? a
                      : "stroke",
                    s,
                    r,
                    o,
                    l * h
                  );
              },
            },
            {
              key: "showDelayedElements",
              value: function () {
                this.w.globals.delayedElements.forEach(function (t) {
                  t.el.classList.remove("apexcharts-element-hidden");
                });
              },
            },
            {
              key: "animationCompleted",
              value: function (t) {
                var e = this.w;
                e.globals.animationEnded ||
                  ((e.globals.animationEnded = !0),
                  this.showDelayedElements(),
                  "function" == typeof e.config.chart.events.animationEnd &&
                    e.config.chart.events.animationEnd(this.ctx, {
                      el: t,
                      w: e,
                    }));
              },
            },
            {
              key: "morphSVG",
              value: function (t, e, i, n, a, s, r, o) {
                var l = this,
                  c = this.w;
                a || (a = t.attr("pathFrom")), s || (s = t.attr("pathTo"));
                var h = function (t) {
                  return (
                    "radar" === c.config.chart.type && (r = 1),
                    "M 0 ".concat(c.globals.gridHeight)
                  );
                };
                (!a || a.indexOf("undefined") > -1 || a.indexOf("NaN") > -1) &&
                  (a = h()),
                  (!s ||
                    s.indexOf("undefined") > -1 ||
                    s.indexOf("NaN") > -1) &&
                    (s = h()),
                  c.globals.shouldAnimate || (r = 1),
                  t
                    .plot(a)
                    .animate(1, c.globals.easing, o)
                    .plot(a)
                    .animate(r, c.globals.easing, o)
                    .plot(s)
                    .afterAll(function () {
                      p.isNumber(i)
                        ? i ===
                            c.globals.series[c.globals.maxValsInArrayIndex]
                              .length -
                              2 &&
                          c.globals.shouldAnimate &&
                          l.animationCompleted(t)
                        : "none" !== n &&
                          c.globals.shouldAnimate &&
                          ((!c.globals.comboCharts &&
                            e === c.globals.series.length - 1) ||
                            c.globals.comboCharts) &&
                          l.animationCompleted(t),
                        l.showDelayedElements();
                    });
              },
            },
          ]),
          t
        );
      })(),
      x = (function () {
        function t(i) {
          e(this, t), (this.ctx = i), (this.w = i.w);
        }
        return (
          n(t, [
            {
              key: "getDefaultFilter",
              value: function (t, e) {
                var i = this.w;
                t.unfilter(!0),
                  new window.SVG.Filter().size("120%", "180%", "-5%", "-40%"),
                  "none" !== i.config.states.normal.filter
                    ? this.applyFilter(
                        t,
                        e,
                        i.config.states.normal.filter.type,
                        i.config.states.normal.filter.value
                      )
                    : i.config.chart.dropShadow.enabled &&
                      this.dropShadow(t, i.config.chart.dropShadow, e);
              },
            },
            {
              key: "addNormalFilter",
              value: function (t, e) {
                var i = this.w;
                i.config.chart.dropShadow.enabled &&
                  !t.node.classList.contains("apexcharts-marker") &&
                  this.dropShadow(t, i.config.chart.dropShadow, e);
              },
            },
            {
              key: "addLightenFilter",
              value: function (t, e, i) {
                var n = this,
                  a = this.w,
                  s = i.intensity;
                t.unfilter(!0),
                  new window.SVG.Filter(),
                  t.filter(function (t) {
                    var i = a.config.chart.dropShadow;
                    (i.enabled ? n.addShadow(t, e, i) : t).componentTransfer({
                      rgb: { type: "linear", slope: 1.5, intercept: s },
                    });
                  }),
                  t.filterer.node.setAttribute("filterUnits", "userSpaceOnUse"),
                  this._scaleFilterSize(t.filterer.node);
              },
            },
            {
              key: "addDarkenFilter",
              value: function (t, e, i) {
                var n = this,
                  a = this.w,
                  s = i.intensity;
                t.unfilter(!0),
                  new window.SVG.Filter(),
                  t.filter(function (t) {
                    var i = a.config.chart.dropShadow;
                    (i.enabled ? n.addShadow(t, e, i) : t).componentTransfer({
                      rgb: { type: "linear", slope: s },
                    });
                  }),
                  t.filterer.node.setAttribute("filterUnits", "userSpaceOnUse"),
                  this._scaleFilterSize(t.filterer.node);
              },
            },
            {
              key: "applyFilter",
              value: function (t, e, i) {
                var n =
                  arguments.length > 3 && void 0 !== arguments[3]
                    ? arguments[3]
                    : 0.5;
                switch (i) {
                  case "none":
                    this.addNormalFilter(t, e);
                    break;
                  case "lighten":
                    this.addLightenFilter(t, e, { intensity: n });
                    break;
                  case "darken":
                    this.addDarkenFilter(t, e, { intensity: n });
                }
              },
            },
            {
              key: "addShadow",
              value: function (t, e, i) {
                var n = i.blur,
                  a = i.top,
                  s = i.left,
                  r = i.color,
                  o = i.opacity,
                  l = t
                    .flood(Array.isArray(r) ? r[e] : r, o)
                    .composite(t.sourceAlpha, "in")
                    .offset(s, a)
                    .gaussianBlur(n)
                    .merge(t.source);
                return t.blend(t.source, l);
              },
            },
            {
              key: "dropShadow",
              value: function (t, e) {
                var i =
                    arguments.length > 2 && void 0 !== arguments[2]
                      ? arguments[2]
                      : 0,
                  n = e.top,
                  a = e.left,
                  s = e.blur,
                  r = e.color,
                  o = e.opacity,
                  l = e.noUserSpaceOnUse,
                  c = this.w;
                return (
                  t.unfilter(!0),
                  (p.isIE() && "radialBar" === c.config.chart.type) ||
                    ((r = Array.isArray(r) ? r[i] : r),
                    t.filter(function (t) {
                      var e;
                      (e =
                        p.isSafari() || p.isFirefox() || p.isIE()
                          ? t
                              .flood(r, o)
                              .composite(t.sourceAlpha, "in")
                              .offset(a, n)
                              .gaussianBlur(s)
                          : t
                              .flood(r, o)
                              .composite(t.sourceAlpha, "in")
                              .offset(a, n)
                              .gaussianBlur(s)
                              .merge(t.source)),
                        t.blend(t.source, e);
                    }),
                    l ||
                      t.filterer.node.setAttribute(
                        "filterUnits",
                        "userSpaceOnUse"
                      ),
                    this._scaleFilterSize(t.filterer.node)),
                  t
                );
              },
            },
            {
              key: "setSelectionFilter",
              value: function (t, e, i) {
                var n = this.w;
                if (
                  void 0 !== n.globals.selectedDataPoints[e] &&
                  n.globals.selectedDataPoints[e].indexOf(i) > -1
                ) {
                  t.node.setAttribute("selected", !0);
                  var a = n.config.states.active.filter;
                  "none" !== a && this.applyFilter(t, e, a.type, a.value);
                }
              },
            },
            {
              key: "_scaleFilterSize",
              value: function (t) {
                !(function (e) {
                  for (var i in e)
                    e.hasOwnProperty(i) && t.setAttribute(i, e[i]);
                })({ width: "200%", height: "200%", x: "-50%", y: "-50%" });
              },
            },
          ]),
          t
        );
      })(),
      m = (function () {
        function t(i) {
          e(this, t), (this.ctx = i), (this.w = i.w);
        }
        return (
          n(
            t,
            [
              {
                key: "drawLine",
                value: function (t, e, i, n) {
                  var a =
                      arguments.length > 4 && void 0 !== arguments[4]
                        ? arguments[4]
                        : "#a8a8a8",
                    s =
                      arguments.length > 5 && void 0 !== arguments[5]
                        ? arguments[5]
                        : 0,
                    r =
                      arguments.length > 6 && void 0 !== arguments[6]
                        ? arguments[6]
                        : null,
                    o =
                      arguments.length > 7 && void 0 !== arguments[7]
                        ? arguments[7]
                        : "butt",
                    l = this.w,
                    c = l.globals.dom.Paper.line().attr({
                      x1: t,
                      y1: e,
                      x2: i,
                      y2: n,
                      stroke: a,
                      "stroke-dasharray": s,
                      "stroke-width": r,
                      "stroke-linecap": o,
                    });
                  return c;
                },
              },
              {
                key: "drawRect",
                value: function () {
                  var t =
                      arguments.length > 0 && void 0 !== arguments[0]
                        ? arguments[0]
                        : 0,
                    e =
                      arguments.length > 1 && void 0 !== arguments[1]
                        ? arguments[1]
                        : 0,
                    i =
                      arguments.length > 2 && void 0 !== arguments[2]
                        ? arguments[2]
                        : 0,
                    n =
                      arguments.length > 3 && void 0 !== arguments[3]
                        ? arguments[3]
                        : 0,
                    a =
                      arguments.length > 4 && void 0 !== arguments[4]
                        ? arguments[4]
                        : 0,
                    s =
                      arguments.length > 5 && void 0 !== arguments[5]
                        ? arguments[5]
                        : "#fefefe",
                    r =
                      arguments.length > 6 && void 0 !== arguments[6]
                        ? arguments[6]
                        : 1,
                    o =
                      arguments.length > 7 && void 0 !== arguments[7]
                        ? arguments[7]
                        : null,
                    l =
                      arguments.length > 8 && void 0 !== arguments[8]
                        ? arguments[8]
                        : null,
                    c =
                      arguments.length > 9 && void 0 !== arguments[9]
                        ? arguments[9]
                        : 0,
                    h = this.w,
                    d = h.globals.dom.Paper.rect();
                  return (
                    d.attr({
                      x: t,
                      y: e,
                      width: i > 0 ? i : 0,
                      height: n > 0 ? n : 0,
                      rx: a,
                      ry: a,
                      opacity: r,
                      "stroke-width": null !== o ? o : 0,
                      stroke: null !== l ? l : "none",
                      "stroke-dasharray": c,
                    }),
                    d.node.setAttribute("fill", s),
                    d
                  );
                },
              },
              {
                key: "drawPolygon",
                value: function (t) {
                  var e =
                      arguments.length > 1 && void 0 !== arguments[1]
                        ? arguments[1]
                        : "#e1e1e1",
                    i =
                      arguments.length > 2 && void 0 !== arguments[2]
                        ? arguments[2]
                        : 1,
                    n =
                      arguments.length > 3 && void 0 !== arguments[3]
                        ? arguments[3]
                        : "none",
                    a = this.w,
                    s = a.globals.dom.Paper.polygon(t).attr({
                      fill: n,
                      stroke: e,
                      "stroke-width": i,
                    });
                  return s;
                },
              },
              {
                key: "drawCircle",
                value: function (t) {
                  var e =
                      arguments.length > 1 && void 0 !== arguments[1]
                        ? arguments[1]
                        : null,
                    i = this.w;
                  t < 0 && (t = 0);
                  var n = i.globals.dom.Paper.circle(2 * t);
                  return null !== e && n.attr(e), n;
                },
              },
              {
                key: "drawPath",
                value: function (t) {
                  var e = t.d,
                    i = void 0 === e ? "" : e,
                    n = t.stroke,
                    a = void 0 === n ? "#a8a8a8" : n,
                    s = t.strokeWidth,
                    r = void 0 === s ? 1 : s,
                    o = t.fill,
                    l = t.fillOpacity,
                    c = void 0 === l ? 1 : l,
                    h = t.strokeOpacity,
                    d = void 0 === h ? 1 : h,
                    u = t.classes,
                    f = t.strokeLinecap,
                    p = void 0 === f ? null : f,
                    g = t.strokeDashArray,
                    x = void 0 === g ? 0 : g,
                    m = this.w;
                  return (
                    null === p && (p = m.config.stroke.lineCap),
                    (i.indexOf("undefined") > -1 || i.indexOf("NaN") > -1) &&
                      (i = "M 0 ".concat(m.globals.gridHeight)),
                    m.globals.dom.Paper.path(i).attr({
                      fill: o,
                      "fill-opacity": c,
                      stroke: a,
                      "stroke-opacity": d,
                      "stroke-linecap": p,
                      "stroke-width": r,
                      "stroke-dasharray": x,
                      class: u,
                    })
                  );
                },
              },
              {
                key: "group",
                value: function () {
                  var t =
                      arguments.length > 0 && void 0 !== arguments[0]
                        ? arguments[0]
                        : null,
                    e = this.w,
                    i = e.globals.dom.Paper.group();
                  return null !== t && i.attr(t), i;
                },
              },
              {
                key: "move",
                value: function (t, e) {
                  return ["M", t, e].join(" ");
                },
              },
              {
                key: "line",
                value: function (t, e) {
                  var i =
                      arguments.length > 2 && void 0 !== arguments[2]
                        ? arguments[2]
                        : null,
                    n = null;
                  return (
                    null === i
                      ? (n = ["L", t, e].join(" "))
                      : "H" === i
                      ? (n = ["H", t].join(" "))
                      : "V" === i && (n = ["V", e].join(" ")),
                    n
                  );
                },
              },
              {
                key: "curve",
                value: function (t, e, i, n, a, s) {
                  return ["C", t, e, i, n, a, s].join(" ");
                },
              },
              {
                key: "quadraticCurve",
                value: function (t, e, i, n) {
                  return ["Q", t, e, i, n].join(" ");
                },
              },
              {
                key: "arc",
                value: function (t, e, i, n, a, s, r) {
                  var o =
                      arguments.length > 7 &&
                      void 0 !== arguments[7] &&
                      arguments[7],
                    l = "A";
                  o && (l = "a");
                  var c = [l, t, e, i, n, a, s, r].join(" ");
                  return c;
                },
              },
              {
                key: "renderPaths",
                value: function (t) {
                  var e,
                    i = t.j,
                    n = t.realIndex,
                    a = t.pathFrom,
                    s = t.pathTo,
                    o = t.stroke,
                    l = t.strokeWidth,
                    c = t.strokeLinecap,
                    h = t.fill,
                    d = t.animationDelay,
                    u = t.initialSpeed,
                    f = t.dataChangeSpeed,
                    p = t.className,
                    m = t.shouldClipToGrid,
                    v = void 0 === m || m,
                    b = t.bindEventsOnPaths,
                    y = void 0 === b || b,
                    w = t.drawShadow,
                    k = void 0 === w || w,
                    A = this.w,
                    S = new x(this.ctx),
                    C = new g(this.ctx),
                    T = this.w.config.chart.animations.enabled,
                    E =
                      T &&
                      this.w.config.chart.animations.dynamicAnimation.enabled,
                    _ = !!(
                      (T && !A.globals.resized) ||
                      (E && A.globals.dataChanged && A.globals.shouldAnimate)
                    );
                  _ ? (e = a) : ((e = s), (A.globals.animationEnded = !0));
                  var L,
                    P = A.config.stroke.dashArray;
                  L = Array.isArray(P) ? P[n] : A.config.stroke.dashArray;
                  var M = this.drawPath({
                    d: e,
                    stroke: o,
                    strokeWidth: l,
                    fill: h,
                    fillOpacity: 1,
                    classes: p,
                    strokeLinecap: c,
                    strokeDashArray: L,
                  });
                  if (
                    (M.attr("index", n),
                    v &&
                      M.attr({
                        "clip-path": "url(#gridRectMask".concat(
                          A.globals.cuid,
                          ")"
                        ),
                      }),
                    "none" !== A.config.states.normal.filter.type)
                  )
                    S.getDefaultFilter(M, n);
                  else if (
                    A.config.chart.dropShadow.enabled &&
                    k &&
                    (!A.config.chart.dropShadow.enabledOnSeries ||
                      (A.config.chart.dropShadow.enabledOnSeries &&
                        -1 !==
                          A.config.chart.dropShadow.enabledOnSeries.indexOf(n)))
                  ) {
                    var I = A.config.chart.dropShadow;
                    S.dropShadow(M, I, n);
                  }
                  y &&
                    (M.node.addEventListener(
                      "mouseenter",
                      this.pathMouseEnter.bind(this, M)
                    ),
                    M.node.addEventListener(
                      "mouseleave",
                      this.pathMouseLeave.bind(this, M)
                    ),
                    M.node.addEventListener(
                      "mousedown",
                      this.pathMouseDown.bind(this, M)
                    )),
                    M.attr({ pathTo: s, pathFrom: a });
                  var O = {
                    el: M,
                    j: i,
                    realIndex: n,
                    pathFrom: a,
                    pathTo: s,
                    fill: h,
                    strokeWidth: l,
                    delay: d,
                  };
                  return (
                    !T || A.globals.resized || A.globals.dataChanged
                      ? (!A.globals.resized && A.globals.dataChanged) ||
                        C.showDelayedElements()
                      : C.animatePathsGradually(r(r({}, O), {}, { speed: u })),
                    A.globals.dataChanged &&
                      E &&
                      _ &&
                      C.animatePathsGradually(r(r({}, O), {}, { speed: f })),
                    M
                  );
                },
              },
              {
                key: "drawPattern",
                value: function (t, e, i) {
                  var n =
                      arguments.length > 3 && void 0 !== arguments[3]
                        ? arguments[3]
                        : "#a8a8a8",
                    a =
                      arguments.length > 4 && void 0 !== arguments[4]
                        ? arguments[4]
                        : 0,
                    s = this.w,
                    r = s.globals.dom.Paper.pattern(e, i, function (s) {
                      "horizontalLines" === t
                        ? s.line(0, 0, i, 0).stroke({ color: n, width: a + 1 })
                        : "verticalLines" === t
                        ? s.line(0, 0, 0, e).stroke({ color: n, width: a + 1 })
                        : "slantedLines" === t
                        ? s.line(0, 0, e, i).stroke({ color: n, width: a })
                        : "squares" === t
                        ? s
                            .rect(e, i)
                            .fill("none")
                            .stroke({ color: n, width: a })
                        : "circles" === t &&
                          s
                            .circle(e)
                            .fill("none")
                            .stroke({ color: n, width: a });
                    });
                  return r;
                },
              },
              {
                key: "drawGradient",
                value: function (t, e, i, n, a) {
                  var s,
                    r =
                      arguments.length > 5 && void 0 !== arguments[5]
                        ? arguments[5]
                        : null,
                    o =
                      arguments.length > 6 && void 0 !== arguments[6]
                        ? arguments[6]
                        : null,
                    l =
                      arguments.length > 7 && void 0 !== arguments[7]
                        ? arguments[7]
                        : null,
                    c =
                      arguments.length > 8 && void 0 !== arguments[8]
                        ? arguments[8]
                        : 0,
                    h = this.w;
                  e.length < 9 &&
                    0 === e.indexOf("#") &&
                    (e = p.hexToRgba(e, n)),
                    i.length < 9 &&
                      0 === i.indexOf("#") &&
                      (i = p.hexToRgba(i, a));
                  var d = 0,
                    u = 1,
                    f = 1,
                    g = null;
                  null !== o &&
                    ((d = void 0 !== o[0] ? o[0] / 100 : 0),
                    (u = void 0 !== o[1] ? o[1] / 100 : 1),
                    (f = void 0 !== o[2] ? o[2] / 100 : 1),
                    (g = void 0 !== o[3] ? o[3] / 100 : null));
                  var x = !(
                    "donut" !== h.config.chart.type &&
                    "pie" !== h.config.chart.type &&
                    "polarArea" !== h.config.chart.type &&
                    "bubble" !== h.config.chart.type
                  );
                  if (
                    ((s =
                      null === l || 0 === l.length
                        ? h.globals.dom.Paper.gradient(
                            x ? "radial" : "linear",
                            function (t) {
                              t.at(d, e, n),
                                t.at(u, i, a),
                                t.at(f, i, a),
                                null !== g && t.at(g, e, n);
                            }
                          )
                        : h.globals.dom.Paper.gradient(
                            x ? "radial" : "linear",
                            function (t) {
                              (Array.isArray(l[c]) ? l[c] : l).forEach(
                                function (e) {
                                  t.at(e.offset / 100, e.color, e.opacity);
                                }
                              );
                            }
                          )),
                    x)
                  ) {
                    var m = h.globals.gridWidth / 2,
                      v = h.globals.gridHeight / 2;
                    "bubble" !== h.config.chart.type
                      ? s.attr({
                          gradientUnits: "userSpaceOnUse",
                          cx: m,
                          cy: v,
                          r: r,
                        })
                      : s.attr({ cx: 0.5, cy: 0.5, r: 0.8, fx: 0.2, fy: 0.2 });
                  } else
                    "vertical" === t
                      ? s.from(0, 0).to(0, 1)
                      : "diagonal" === t
                      ? s.from(0, 0).to(1, 1)
                      : "horizontal" === t
                      ? s.from(0, 1).to(1, 1)
                      : "diagonal2" === t && s.from(1, 0).to(0, 1);
                  return s;
                },
              },
              {
                key: "drawText",
                value: function (t) {
                  var e,
                    i = t.x,
                    n = t.y,
                    a = t.text,
                    s = t.textAnchor,
                    r = t.fontSize,
                    o = t.fontFamily,
                    l = t.fontWeight,
                    c = t.foreColor,
                    h = t.opacity,
                    d = t.cssClass,
                    u = void 0 === d ? "" : d,
                    f = t.isPlainText,
                    p = void 0 === f || f,
                    g = this.w;
                  return (
                    void 0 === a && (a = ""),
                    s || (s = "start"),
                    (c && c.length) || (c = g.config.chart.foreColor),
                    (o = o || g.config.chart.fontFamily),
                    (l = l || "regular"),
                    (e = Array.isArray(a)
                      ? g.globals.dom.Paper.text(function (t) {
                          for (var e = 0; e < a.length; e++)
                            0 === e ? t.tspan(a[e]) : t.tspan(a[e]).newLine();
                        })
                      : p
                      ? g.globals.dom.Paper.plain(a)
                      : g.globals.dom.Paper.text(function (t) {
                          return t.tspan(a);
                        })).attr({
                      x: i,
                      y: n,
                      "text-anchor": s,
                      "dominant-baseline": "auto",
                      "font-size": r,
                      "font-family": o,
                      "font-weight": l,
                      fill: c,
                      class: "apexcharts-text " + u,
                    }),
                    (e.node.style.fontFamily = o),
                    (e.node.style.opacity = h),
                    e
                  );
                },
              },
              {
                key: "drawMarker",
                value: function (t, e, i) {
                  t = t || 0;
                  var n = i.pSize || 0,
                    a = null;
                  if ("square" === i.shape || "rect" === i.shape) {
                    var s = void 0 === i.pRadius ? n / 2 : i.pRadius;
                    (null !== e && n) || ((n = 0), (s = 0));
                    var r = 1.2 * n + s,
                      o = this.drawRect(r, r, r, r, s);
                    o.attr({
                      x: t - r / 2,
                      y: e - r / 2,
                      cx: t,
                      cy: e,
                      class: i.class ? i.class : "",
                      fill: i.pointFillColor,
                      "fill-opacity": i.pointFillOpacity
                        ? i.pointFillOpacity
                        : 1,
                      stroke: i.pointStrokeColor,
                      "stroke-width": i.pointStrokeWidth
                        ? i.pointStrokeWidth
                        : 0,
                      "stroke-opacity": i.pointStrokeOpacity
                        ? i.pointStrokeOpacity
                        : 1,
                    }),
                      (a = o);
                  } else
                    ("circle" !== i.shape && i.shape) ||
                      (p.isNumber(e) || ((n = 0), (e = 0)),
                      (a = this.drawCircle(n, {
                        cx: t,
                        cy: e,
                        class: i.class ? i.class : "",
                        stroke: i.pointStrokeColor,
                        fill: i.pointFillColor,
                        "fill-opacity": i.pointFillOpacity
                          ? i.pointFillOpacity
                          : 1,
                        "stroke-width": i.pointStrokeWidth
                          ? i.pointStrokeWidth
                          : 0,
                        "stroke-opacity": i.pointStrokeOpacity
                          ? i.pointStrokeOpacity
                          : 1,
                      })));
                  return a;
                },
              },
              {
                key: "pathMouseEnter",
                value: function (t, e) {
                  var i = this.w,
                    n = new x(this.ctx),
                    a = parseInt(t.node.getAttribute("index"), 10),
                    s = parseInt(t.node.getAttribute("j"), 10);
                  if (
                    ("function" ==
                      typeof i.config.chart.events.dataPointMouseEnter &&
                      i.config.chart.events.dataPointMouseEnter(e, this.ctx, {
                        seriesIndex: a,
                        dataPointIndex: s,
                        w: i,
                      }),
                    this.ctx.events.fireEvent("dataPointMouseEnter", [
                      e,
                      this.ctx,
                      { seriesIndex: a, dataPointIndex: s, w: i },
                    ]),
                    ("none" === i.config.states.active.filter.type ||
                      "true" !== t.node.getAttribute("selected")) &&
                      "none" !== i.config.states.hover.filter.type &&
                      "none" !== i.config.states.active.filter.type &&
                      !i.globals.isTouchDevice)
                  ) {
                    var r = i.config.states.hover.filter;
                    n.applyFilter(t, a, r.type, r.value);
                  }
                },
              },
              {
                key: "pathMouseLeave",
                value: function (t, e) {
                  var i = this.w,
                    n = new x(this.ctx),
                    a = parseInt(t.node.getAttribute("index"), 10),
                    s = parseInt(t.node.getAttribute("j"), 10);
                  "function" ==
                    typeof i.config.chart.events.dataPointMouseLeave &&
                    i.config.chart.events.dataPointMouseLeave(e, this.ctx, {
                      seriesIndex: a,
                      dataPointIndex: s,
                      w: i,
                    }),
                    this.ctx.events.fireEvent("dataPointMouseLeave", [
                      e,
                      this.ctx,
                      { seriesIndex: a, dataPointIndex: s, w: i },
                    ]),
                    ("none" !== i.config.states.active.filter.type &&
                      "true" === t.node.getAttribute("selected")) ||
                      ("none" !== i.config.states.hover.filter.type &&
                        n.getDefaultFilter(t, a));
                },
              },
              {
                key: "pathMouseDown",
                value: function (t, e) {
                  var i = this.w,
                    n = new x(this.ctx),
                    a = parseInt(t.node.getAttribute("index"), 10),
                    s = parseInt(t.node.getAttribute("j"), 10),
                    r = "false";
                  if ("true" === t.node.getAttribute("selected")) {
                    if (
                      (t.node.setAttribute("selected", "false"),
                      i.globals.selectedDataPoints[a].indexOf(s) > -1)
                    ) {
                      var o = i.globals.selectedDataPoints[a].indexOf(s);
                      i.globals.selectedDataPoints[a].splice(o, 1);
                    }
                  } else {
                    if (
                      !i.config.states.active
                        .allowMultipleDataPointsSelection &&
                      i.globals.selectedDataPoints.length > 0
                    ) {
                      i.globals.selectedDataPoints = [];
                      var l = i.globals.dom.Paper.select(
                          ".apexcharts-series path"
                        ).members,
                        c = i.globals.dom.Paper.select(
                          ".apexcharts-series circle, .apexcharts-series rect"
                        ).members,
                        h = function (t) {
                          Array.prototype.forEach.call(t, function (t) {
                            t.node.setAttribute("selected", "false"),
                              n.getDefaultFilter(t, a);
                          });
                        };
                      h(l), h(c);
                    }
                    t.node.setAttribute("selected", "true"),
                      (r = "true"),
                      void 0 === i.globals.selectedDataPoints[a] &&
                        (i.globals.selectedDataPoints[a] = []),
                      i.globals.selectedDataPoints[a].push(s);
                  }
                  if ("true" === r) {
                    var d = i.config.states.active.filter;
                    "none" !== d && n.applyFilter(t, a, d.type, d.value);
                  } else
                    "none" !== i.config.states.active.filter.type &&
                      n.getDefaultFilter(t, a);
                  "function" ==
                    typeof i.config.chart.events.dataPointSelection &&
                    i.config.chart.events.dataPointSelection(e, this.ctx, {
                      selectedDataPoints: i.globals.selectedDataPoints,
                      seriesIndex: a,
                      dataPointIndex: s,
                      w: i,
                    }),
                    e &&
                      this.ctx.events.fireEvent("dataPointSelection", [
                        e,
                        this.ctx,
                        {
                          selectedDataPoints: i.globals.selectedDataPoints,
                          seriesIndex: a,
                          dataPointIndex: s,
                          w: i,
                        },
                      ]);
                },
              },
              {
                key: "rotateAroundCenter",
                value: function (t) {
                  var e = t.getBBox();
                  return { x: e.x + e.width / 2, y: e.y + e.height / 2 };
                },
              },
              {
                key: "getTextRects",
                value: function (t, e, i, n) {
                  var a =
                      !(arguments.length > 4 && void 0 !== arguments[4]) ||
                      arguments[4],
                    s = this.w,
                    r = this.drawText({
                      x: -200,
                      y: -200,
                      text: t,
                      textAnchor: "start",
                      fontSize: e,
                      fontFamily: i,
                      foreColor: "#fff",
                      opacity: 0,
                    });
                  n && r.attr("transform", n), s.globals.dom.Paper.add(r);
                  var o = r.bbox();
                  return (
                    a || (o = r.node.getBoundingClientRect()),
                    r.remove(),
                    { width: o.width, height: o.height }
                  );
                },
              },
              {
                key: "placeTextWithEllipsis",
                value: function (t, e, i) {
                  if (
                    "function" == typeof t.getComputedTextLength &&
                    ((t.textContent = e),
                    e.length > 0 && t.getComputedTextLength() >= i / 1.1)
                  ) {
                    for (var n = e.length - 3; n > 0; n -= 3)
                      if (t.getSubStringLength(0, n) <= i / 1.1)
                        return void (t.textContent = e.substring(0, n) + "...");
                    t.textContent = ".";
                  }
                },
              },
            ],
            [
              {
                key: "setAttrs",
                value: function (t, e) {
                  for (var i in e)
                    e.hasOwnProperty(i) && t.setAttribute(i, e[i]);
                },
              },
            ]
          ),
          t
        );
      })(),
      v = (function () {
        function t(i) {
          e(this, t), (this.w = i.w), (this.annoCtx = i);
        }
        return (
          n(t, [
            {
              key: "setOrientations",
              value: function (t) {
                var e =
                    arguments.length > 1 && void 0 !== arguments[1]
                      ? arguments[1]
                      : null,
                  i = this.w;
                if ("vertical" === t.label.orientation) {
                  var n = null !== e ? e : 0,
                    a = i.globals.dom.baseEl.querySelector(
                      ".apexcharts-xaxis-annotations .apexcharts-xaxis-annotation-label[rel='".concat(
                        n,
                        "']"
                      )
                    );
                  if (null !== a) {
                    var s = a.getBoundingClientRect();
                    a.setAttribute(
                      "x",
                      parseFloat(a.getAttribute("x")) - s.height + 4
                    ),
                      "top" === t.label.position
                        ? a.setAttribute(
                            "y",
                            parseFloat(a.getAttribute("y")) + s.width
                          )
                        : a.setAttribute(
                            "y",
                            parseFloat(a.getAttribute("y")) - s.width
                          );
                    var r = this.annoCtx.graphics.rotateAroundCenter(a),
                      o = r.x,
                      l = r.y;
                    a.setAttribute(
                      "transform",
                      "rotate(-90 ".concat(o, " ").concat(l, ")")
                    );
                  }
                }
              },
            },
            {
              key: "addBackgroundToAnno",
              value: function (t, e) {
                var i = this.w;
                if (
                  !t ||
                  !e.label.text ||
                  (e.label.text && !e.label.text.trim())
                )
                  return null;
                var n = i.globals.dom.baseEl
                    .querySelector(".apexcharts-grid")
                    .getBoundingClientRect(),
                  a = t.getBoundingClientRect(),
                  s = e.label.style.padding.left,
                  r = e.label.style.padding.right,
                  o = e.label.style.padding.top,
                  l = e.label.style.padding.bottom;
                "vertical" === e.label.orientation &&
                  ((o = e.label.style.padding.left),
                  (l = e.label.style.padding.right),
                  (s = e.label.style.padding.top),
                  (r = e.label.style.padding.bottom));
                var c = a.left - n.left - s,
                  h = a.top - n.top - o,
                  d = this.annoCtx.graphics.drawRect(
                    c - i.globals.barPadForNumericAxis,
                    h,
                    a.width + s + r,
                    a.height + o + l,
                    e.label.borderRadius,
                    e.label.style.background,
                    1,
                    e.label.borderWidth,
                    e.label.borderColor,
                    0
                  );
                return e.id && d.node.classList.add(e.id), d;
              },
            },
            {
              key: "annotationsBackground",
              value: function () {
                var t = this,
                  e = this.w,
                  i = function (i, n, a) {
                    var s = e.globals.dom.baseEl.querySelector(
                      ".apexcharts-"
                        .concat(a, "-annotations .apexcharts-")
                        .concat(a, "-annotation-label[rel='")
                        .concat(n, "']")
                    );
                    if (s) {
                      var r = s.parentNode,
                        o = t.addBackgroundToAnno(s, i);
                      o && r.insertBefore(o.node, s);
                    }
                  };
                e.config.annotations.xaxis.map(function (t, e) {
                  i(t, e, "xaxis");
                }),
                  e.config.annotations.yaxis.map(function (t, e) {
                    i(t, e, "yaxis");
                  }),
                  e.config.annotations.points.map(function (t, e) {
                    i(t, e, "point");
                  });
              },
            },
            {
              key: "getStringX",
              value: function (t) {
                var e = this.w,
                  i = t;
                e.config.xaxis.convertedCatToNumeric &&
                  e.globals.categoryLabels.length &&
                  (t = e.globals.categoryLabels.indexOf(t) + 1);
                var n = e.globals.labels.indexOf(t),
                  a = e.globals.dom.baseEl.querySelector(
                    ".apexcharts-xaxis-texts-g text:nth-child(" + (n + 1) + ")"
                  );
                return a && (i = parseFloat(a.getAttribute("x"))), i;
              },
            },
          ]),
          t
        );
      })(),
      b = (function () {
        function t(i) {
          e(this, t),
            (this.w = i.w),
            (this.annoCtx = i),
            (this.invertAxis = this.annoCtx.invertAxis);
        }
        return (
          n(t, [
            {
              key: "addXaxisAnnotation",
              value: function (t, e, i) {
                var n = this.w,
                  a = this.invertAxis ? n.globals.minY : n.globals.minX,
                  s = this.invertAxis ? n.globals.maxY : n.globals.maxX,
                  r = this.invertAxis ? n.globals.yRange[0] : n.globals.xRange,
                  o = (t.x - a) / (r / n.globals.gridWidth);
                this.annoCtx.inversedReversedAxis &&
                  (o = (s - t.x) / (r / n.globals.gridWidth));
                var l = t.label.text;
                ("category" !== n.config.xaxis.type &&
                  !n.config.xaxis.convertedCatToNumeric) ||
                  this.invertAxis ||
                  n.globals.dataFormatXNumeric ||
                  (o = this.annoCtx.helpers.getStringX(t.x));
                var c = t.strokeDashArray;
                if (p.isNumber(o)) {
                  if (null === t.x2 || void 0 === t.x2) {
                    var h = this.annoCtx.graphics.drawLine(
                      o + t.offsetX,
                      0 + t.offsetY,
                      o + t.offsetX,
                      n.globals.gridHeight + t.offsetY,
                      t.borderColor,
                      c,
                      t.borderWidth
                    );
                    e.appendChild(h.node), t.id && h.node.classList.add(t.id);
                  } else {
                    var d = (t.x2 - a) / (r / n.globals.gridWidth);
                    if (
                      (this.annoCtx.inversedReversedAxis &&
                        (d = (s - t.x2) / (r / n.globals.gridWidth)),
                      ("category" !== n.config.xaxis.type &&
                        !n.config.xaxis.convertedCatToNumeric) ||
                        this.invertAxis ||
                        n.globals.dataFormatXNumeric ||
                        (d = this.annoCtx.helpers.getStringX(t.x2)),
                      d < o)
                    ) {
                      var u = o;
                      (o = d), (d = u);
                    }
                    var f = this.annoCtx.graphics.drawRect(
                      o + t.offsetX,
                      0 + t.offsetY,
                      d - o,
                      n.globals.gridHeight + t.offsetY,
                      0,
                      t.fillColor,
                      t.opacity,
                      1,
                      t.borderColor,
                      c
                    );
                    f.node.classList.add("apexcharts-annotation-rect"),
                      f.attr(
                        "clip-path",
                        "url(#gridRectMask".concat(n.globals.cuid, ")")
                      ),
                      e.appendChild(f.node),
                      t.id && f.node.classList.add(t.id);
                  }
                  var g = "top" === t.label.position ? 4 : n.globals.gridHeight,
                    x = this.annoCtx.graphics.getTextRects(
                      l,
                      parseFloat(t.label.style.fontSize)
                    ),
                    m = this.annoCtx.graphics.drawText({
                      x: o + t.label.offsetX,
                      y:
                        g +
                        t.label.offsetY -
                        ("vertical" === t.label.orientation
                          ? "top" === t.label.position
                            ? x.width / 2 - 12
                            : -x.width / 2
                          : 0),
                      text: l,
                      textAnchor: t.label.textAnchor,
                      fontSize: t.label.style.fontSize,
                      fontFamily: t.label.style.fontFamily,
                      fontWeight: t.label.style.fontWeight,
                      foreColor: t.label.style.color,
                      cssClass: "apexcharts-xaxis-annotation-label "
                        .concat(t.label.style.cssClass, " ")
                        .concat(t.id ? t.id : ""),
                    });
                  m.attr({ rel: i }),
                    e.appendChild(m.node),
                    this.annoCtx.helpers.setOrientations(t, i);
                }
              },
            },
            {
              key: "drawXAxisAnnotations",
              value: function () {
                var t = this,
                  e = this.w,
                  i = this.annoCtx.graphics.group({
                    class: "apexcharts-xaxis-annotations",
                  });
                return (
                  e.config.annotations.xaxis.map(function (e, n) {
                    t.addXaxisAnnotation(e, i.node, n);
                  }),
                  i
                );
              },
            },
          ]),
          t
        );
      })(),
      y = (function () {
        function t(i) {
          e(this, t), (this.ctx = i), (this.w = i.w);
        }
        return (
          n(
            t,
            [
              {
                key: "getStackedSeriesTotals",
                value: function () {
                  var t = this.w,
                    e = [];
                  if (0 === t.globals.series.length) return e;
                  for (
                    var i = 0;
                    i < t.globals.series[t.globals.maxValsInArrayIndex].length;
                    i++
                  ) {
                    for (var n = 0, a = 0; a < t.globals.series.length; a++)
                      void 0 !== t.globals.series[a][i] &&
                        (n += t.globals.series[a][i]);
                    e.push(n);
                  }
                  return (t.globals.stackedSeriesTotals = e), e;
                },
              },
              {
                key: "getSeriesTotalByIndex",
                value: function () {
                  var t =
                    arguments.length > 0 && void 0 !== arguments[0]
                      ? arguments[0]
                      : null;
                  return null === t
                    ? this.w.config.series.reduce(function (t, e) {
                        return t + e;
                      }, 0)
                    : this.w.globals.series[t].reduce(function (t, e) {
                        return t + e;
                      }, 0);
                },
              },
              {
                key: "isSeriesNull",
                value: function () {
                  var t =
                    arguments.length > 0 && void 0 !== arguments[0]
                      ? arguments[0]
                      : null;
                  return (
                    0 ===
                    (null === t
                      ? this.w.config.series.filter(function (t) {
                          return null !== t;
                        })
                      : this.w.config.series[t].data.filter(function (t) {
                          return null !== t;
                        })
                    ).length
                  );
                },
              },
              {
                key: "seriesHaveSameValues",
                value: function (t) {
                  return this.w.globals.series[t].every(function (t, e, i) {
                    return t === i[0];
                  });
                },
              },
              {
                key: "getCategoryLabels",
                value: function (t) {
                  var e = this.w,
                    i = t.slice();
                  return (
                    e.config.xaxis.convertedCatToNumeric &&
                      (i = t.map(function (t, i) {
                        return e.config.xaxis.labels.formatter(
                          t - e.globals.minX + 1
                        );
                      })),
                    i
                  );
                },
              },
              {
                key: "getLargestSeries",
                value: function () {
                  var t = this.w;
                  t.globals.maxValsInArrayIndex = t.globals.series
                    .map(function (t) {
                      return t.length;
                    })
                    .indexOf(
                      Math.max.apply(
                        Math,
                        t.globals.series.map(function (t) {
                          return t.length;
                        })
                      )
                    );
                },
              },
              {
                key: "getLargestMarkerSize",
                value: function () {
                  var t = this.w,
                    e = 0;
                  return (
                    t.globals.markers.size.forEach(function (t) {
                      e = Math.max(e, t);
                    }),
                    (t.globals.markers.largestSize = e),
                    e
                  );
                },
              },
              {
                key: "getSeriesTotals",
                value: function () {
                  var t = this.w;
                  t.globals.seriesTotals = t.globals.series.map(function (
                    t,
                    e
                  ) {
                    var i = 0;
                    if (Array.isArray(t))
                      for (var n = 0; n < t.length; n++) i += t[n];
                    else i += t;
                    return i;
                  });
                },
              },
              {
                key: "getSeriesTotalsXRange",
                value: function (t, e) {
                  var i = this.w;
                  return i.globals.series.map(function (n, a) {
                    for (var s = 0, r = 0; r < n.length; r++)
                      i.globals.seriesX[a][r] > t &&
                        i.globals.seriesX[a][r] < e &&
                        (s += n[r]);
                    return s;
                  });
                },
              },
              {
                key: "getPercentSeries",
                value: function () {
                  var t = this.w;
                  t.globals.seriesPercent = t.globals.series.map(function (
                    e,
                    i
                  ) {
                    var n = [];
                    if (Array.isArray(e))
                      for (var a = 0; a < e.length; a++) {
                        var s = t.globals.stackedSeriesTotals[a],
                          r = 0;
                        s && (r = (100 * e[a]) / s), n.push(r);
                      }
                    else {
                      var o =
                        (100 * e) /
                        t.globals.seriesTotals.reduce(function (t, e) {
                          return t + e;
                        }, 0);
                      n.push(o);
                    }
                    return n;
                  });
                },
              },
              {
                key: "getCalculatedRatios",
                value: function () {
                  var t,
                    e,
                    i,
                    n,
                    a = this.w.globals,
                    s = [],
                    r = 0,
                    o = [],
                    l = 0.1,
                    c = 0;
                  if (((a.yRange = []), a.isMultipleYAxis))
                    for (var h = 0; h < a.minYArr.length; h++)
                      a.yRange.push(Math.abs(a.minYArr[h] - a.maxYArr[h])),
                        o.push(0);
                  else a.yRange.push(Math.abs(a.minY - a.maxY));
                  (a.xRange = Math.abs(a.maxX - a.minX)),
                    (a.zRange = Math.abs(a.maxZ - a.minZ));
                  for (var d = 0; d < a.yRange.length; d++)
                    s.push(a.yRange[d] / a.gridHeight);
                  if (
                    ((e = a.xRange / a.gridWidth),
                    (i = Math.abs(a.initialMaxX - a.initialMinX) / a.gridWidth),
                    (t = a.yRange / a.gridWidth),
                    (n = a.xRange / a.gridHeight),
                    (r = (a.zRange / a.gridHeight) * 16) || (r = 1),
                    a.minY !== Number.MIN_VALUE &&
                      0 !== Math.abs(a.minY) &&
                      (a.hasNegs = !0),
                    a.isMultipleYAxis)
                  ) {
                    o = [];
                    for (var u = 0; u < s.length; u++)
                      o.push(-a.minYArr[u] / s[u]);
                  } else
                    o.push(-a.minY / s[0]),
                      a.minY !== Number.MIN_VALUE &&
                        0 !== Math.abs(a.minY) &&
                        ((l = -a.minY / t), (c = a.minX / e));
                  return {
                    yRatio: s,
                    invertedYRatio: t,
                    zRatio: r,
                    xRatio: e,
                    initialXRatio: i,
                    invertedXRatio: n,
                    baseLineInvertedY: l,
                    baseLineY: o,
                    baseLineX: c,
                  };
                },
              },
              {
                key: "getLogSeries",
                value: function (t) {
                  var e = this,
                    i = this.w;
                  return (
                    (i.globals.seriesLog = t.map(function (t, n) {
                      return i.config.yaxis[n] && i.config.yaxis[n].logarithmic
                        ? t.map(function (t) {
                            return null === t ? null : e.getLogVal(t, n);
                          })
                        : t;
                    })),
                    i.globals.invalidLogScale ? t : i.globals.seriesLog
                  );
                },
              },
              {
                key: "getLogVal",
                value: function (t, e) {
                  var i = this.w;
                  return (
                    (Math.log(t) - Math.log(i.globals.minYArr[e])) /
                    (Math.log(i.globals.maxYArr[e]) -
                      Math.log(i.globals.minYArr[e]))
                  );
                },
              },
              {
                key: "getLogYRatios",
                value: function (t) {
                  var e = this,
                    i = this.w,
                    n = this.w.globals;
                  return (
                    (n.yLogRatio = t.slice()),
                    (n.logYRange = n.yRange.map(function (t, a) {
                      if (
                        i.config.yaxis[a] &&
                        e.w.config.yaxis[a].logarithmic
                      ) {
                        var s,
                          r = -Number.MAX_VALUE,
                          o = Number.MIN_VALUE;
                        return (
                          n.seriesLog.forEach(function (t, e) {
                            t.forEach(function (t) {
                              i.config.yaxis[e] &&
                                i.config.yaxis[e].logarithmic &&
                                ((r = Math.max(t, r)), (o = Math.min(t, o)));
                            });
                          }),
                          (s = Math.pow(
                            n.yRange[a],
                            Math.abs(o - r) / n.yRange[a]
                          )),
                          (n.yLogRatio[a] = s / n.gridHeight),
                          s
                        );
                      }
                    })),
                    n.invalidLogScale ? t.slice() : n.yLogRatio
                  );
                },
              },
            ],
            [
              {
                key: "checkComboSeries",
                value: function (t) {
                  var e = !1,
                    i = 0,
                    n = 0;
                  return (
                    t.length &&
                      void 0 !== t[0].type &&
                      t.forEach(function (t) {
                        ("bar" !== t.type &&
                          "column" !== t.type &&
                          "candlestick" !== t.type &&
                          "boxPlot" !== t.type) ||
                          i++,
                          void 0 !== t.type && n++;
                      }),
                    n > 1 && (e = !0),
                    { comboBarCount: i, comboCharts: e }
                  );
                },
              },
              {
                key: "extendArrayProps",
                value: function (t, e, i) {
                  return (
                    e.yaxis && (e = t.extendYAxis(e, i)),
                    e.annotations &&
                      (e.annotations.yaxis && (e = t.extendYAxisAnnotations(e)),
                      e.annotations.xaxis && (e = t.extendXAxisAnnotations(e)),
                      e.annotations.points &&
                        (e = t.extendPointAnnotations(e))),
                    e
                  );
                },
              },
            ]
          ),
          t
        );
      })(),
      w = (function () {
        function t(i) {
          e(this, t), (this.w = i.w), (this.annoCtx = i);
        }
        return (
          n(t, [
            {
              key: "addYaxisAnnotation",
              value: function (t, e, i) {
                var n,
                  a = this.w,
                  s = t.strokeDashArray,
                  r = this._getY1Y2("y1", t),
                  o = t.label.text;
                if (null === t.y2 || void 0 === t.y2) {
                  var l = this.annoCtx.graphics.drawLine(
                    0 + t.offsetX,
                    r + t.offsetY,
                    this._getYAxisAnnotationWidth(t),
                    r + t.offsetY,
                    t.borderColor,
                    s,
                    t.borderWidth
                  );
                  e.appendChild(l.node), t.id && l.node.classList.add(t.id);
                } else {
                  if ((n = this._getY1Y2("y2", t)) > r) {
                    var c = r;
                    (r = n), (n = c);
                  }
                  var h = this.annoCtx.graphics.drawRect(
                    0 + t.offsetX,
                    n + t.offsetY,
                    this._getYAxisAnnotationWidth(t),
                    r - n,
                    0,
                    t.fillColor,
                    t.opacity,
                    1,
                    t.borderColor,
                    s
                  );
                  h.node.classList.add("apexcharts-annotation-rect"),
                    h.attr(
                      "clip-path",
                      "url(#gridRectMask".concat(a.globals.cuid, ")")
                    ),
                    e.appendChild(h.node),
                    t.id && h.node.classList.add(t.id);
                }
                var d = "right" === t.label.position ? a.globals.gridWidth : 0,
                  u = this.annoCtx.graphics.drawText({
                    x: d + t.label.offsetX,
                    y: (n || r) + t.label.offsetY - 3,
                    text: o,
                    textAnchor: t.label.textAnchor,
                    fontSize: t.label.style.fontSize,
                    fontFamily: t.label.style.fontFamily,
                    fontWeight: t.label.style.fontWeight,
                    foreColor: t.label.style.color,
                    cssClass: "apexcharts-yaxis-annotation-label "
                      .concat(t.label.style.cssClass, " ")
                      .concat(t.id ? t.id : ""),
                  });
                u.attr({ rel: i }), e.appendChild(u.node);
              },
            },
            {
              key: "_getY1Y2",
              value: function (t, e) {
                var i,
                  n = "y1" === t ? e.y : e.y2,
                  a = this.w;
                if (this.annoCtx.invertAxis) {
                  var s = a.globals.labels.indexOf(n);
                  a.config.xaxis.convertedCatToNumeric &&
                    (s = a.globals.categoryLabels.indexOf(n));
                  var r = a.globals.dom.baseEl.querySelector(
                    ".apexcharts-yaxis-texts-g text:nth-child(" + (s + 1) + ")"
                  );
                  r && (i = parseFloat(r.getAttribute("y")));
                } else {
                  var o;
                  (o = a.config.yaxis[e.yAxisIndex].logarithmic
                    ? (n = new y(this.annoCtx.ctx).getLogVal(n, e.yAxisIndex)) /
                      a.globals.yLogRatio[e.yAxisIndex]
                    : (n - a.globals.minYArr[e.yAxisIndex]) /
                      (a.globals.yRange[e.yAxisIndex] / a.globals.gridHeight)),
                    (i = a.globals.gridHeight - o),
                    a.config.yaxis[e.yAxisIndex] &&
                      a.config.yaxis[e.yAxisIndex].reversed &&
                      (i = o);
                }
                return i;
              },
            },
            {
              key: "_getYAxisAnnotationWidth",
              value: function (t) {
                var e = this.w;
                return (
                  e.globals.gridWidth,
                  (t.width.indexOf("%") > -1
                    ? (e.globals.gridWidth * parseInt(t.width, 10)) / 100
                    : parseInt(t.width, 10)) + t.offsetX
                );
              },
            },
            {
              key: "drawYAxisAnnotations",
              value: function () {
                var t = this,
                  e = this.w,
                  i = this.annoCtx.graphics.group({
                    class: "apexcharts-yaxis-annotations",
                  });
                return (
                  e.config.annotations.yaxis.map(function (e, n) {
                    t.addYaxisAnnotation(e, i.node, n);
                  }),
                  i
                );
              },
            },
          ]),
          t
        );
      })(),
      k = (function () {
        function t(i) {
          e(this, t), (this.w = i.w), (this.annoCtx = i);
        }
        return (
          n(t, [
            {
              key: "addPointAnnotation",
              value: function (t, e, i) {
                var n = this.w,
                  a = 0,
                  s = 0,
                  r = 0;
                this.annoCtx.invertAxis &&
                  console.warn(
                    "Point annotation is not supported in horizontal bar charts."
                  );
                var o = parseFloat(t.y);
                if ("string" == typeof t.x) {
                  var l = n.globals.labels.indexOf(t.x);
                  n.config.xaxis.convertedCatToNumeric &&
                    (l = n.globals.categoryLabels.indexOf(t.x)),
                    (a = this.annoCtx.helpers.getStringX(t.x)),
                    null === t.y && (o = n.globals.series[t.seriesIndex][l]);
                } else
                  a =
                    (t.x - n.globals.minX) /
                    (n.globals.xRange / n.globals.gridWidth);
                for (var c, h = [], d = 0, u = 0; u <= t.seriesIndex; u++) {
                  var f = n.config.yaxis[u].seriesName;
                  if (f)
                    for (var g = u + 1; g <= t.seriesIndex; g++)
                      n.config.yaxis[g].seriesName === f &&
                        -1 === h.indexOf(f) &&
                        (d++, h.push(f));
                }
                if (n.config.yaxis[t.yAxisIndex].logarithmic)
                  c =
                    (o = new y(this.annoCtx.ctx).getLogVal(o, t.yAxisIndex)) /
                    n.globals.yLogRatio[t.yAxisIndex];
                else {
                  var x = t.yAxisIndex + d;
                  c =
                    (o - n.globals.minYArr[x]) /
                    (n.globals.yRange[x] / n.globals.gridHeight);
                }
                if (
                  ((s =
                    n.globals.gridHeight -
                    c -
                    parseFloat(t.label.style.fontSize) -
                    t.marker.size),
                  (r = n.globals.gridHeight - c),
                  n.config.yaxis[t.yAxisIndex] &&
                    n.config.yaxis[t.yAxisIndex].reversed &&
                    ((s =
                      c + parseFloat(t.label.style.fontSize) + t.marker.size),
                    (r = c)),
                  p.isNumber(a))
                ) {
                  var m = {
                      pSize: t.marker.size,
                      pointStrokeWidth: t.marker.strokeWidth,
                      pointFillColor: t.marker.fillColor,
                      pointStrokeColor: t.marker.strokeColor,
                      shape: t.marker.shape,
                      pRadius: t.marker.radius,
                      class: "apexcharts-point-annotation-marker "
                        .concat(t.marker.cssClass, " ")
                        .concat(t.id ? t.id : ""),
                    },
                    v = this.annoCtx.graphics.drawMarker(
                      a + t.marker.offsetX,
                      r + t.marker.offsetY,
                      m
                    );
                  e.appendChild(v.node);
                  var b = t.label.text ? t.label.text : "",
                    w = this.annoCtx.graphics.drawText({
                      x: a + t.label.offsetX,
                      y: s + t.label.offsetY,
                      text: b,
                      textAnchor: t.label.textAnchor,
                      fontSize: t.label.style.fontSize,
                      fontFamily: t.label.style.fontFamily,
                      fontWeight: t.label.style.fontWeight,
                      foreColor: t.label.style.color,
                      cssClass: "apexcharts-point-annotation-label "
                        .concat(t.label.style.cssClass, " ")
                        .concat(t.id ? t.id : ""),
                    });
                  if (
                    (w.attr({ rel: i }), e.appendChild(w.node), t.customSVG.SVG)
                  ) {
                    var k = this.annoCtx.graphics.group({
                      class:
                        "apexcharts-point-annotations-custom-svg " +
                        t.customSVG.cssClass,
                    });
                    k.attr({
                      transform: "translate("
                        .concat(a + t.customSVG.offsetX, ", ")
                        .concat(s + t.customSVG.offsetY, ")"),
                    }),
                      (k.node.innerHTML = t.customSVG.SVG),
                      e.appendChild(k.node);
                  }
                  if (t.image.path) {
                    var A = t.image.width ? t.image.width : 20,
                      S = t.image.height ? t.image.height : 20;
                    this.annoCtx.addImage({
                      x: a + t.image.offsetX - A / 2,
                      y: s + t.image.offsetY - S / 2,
                      width: A,
                      height: S,
                      path: t.image.path,
                      appendTo: ".apexcharts-point-annotations",
                    });
                  }
                }
              },
            },
            {
              key: "drawPointAnnotations",
              value: function () {
                var t = this,
                  e = this.w,
                  i = this.annoCtx.graphics.group({
                    class: "apexcharts-point-annotations",
                  });
                return (
                  e.config.annotations.points.map(function (e, n) {
                    t.addPointAnnotation(e, i.node, n);
                  }),
                  i
                );
              },
            },
          ]),
          t
        );
      })(),
      A = {
        name: "en",
        options: {
          months: [
            "January",
            "February",
            "March",
            "April",
            "May",
            "June",
            "July",
            "August",
            "September",
            "October",
            "November",
            "December",
          ],
          shortMonths: [
            "Jan",
            "Feb",
            "Mar",
            "Apr",
            "May",
            "Jun",
            "Jul",
            "Aug",
            "Sep",
            "Oct",
            "Nov",
            "Dec",
          ],
          days: [
            "Sunday",
            "Monday",
            "Tuesday",
            "Wednesday",
            "Thursday",
            "Friday",
            "Saturday",
          ],
          shortDays: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
          toolbar: {
            exportToSVG: "Download SVG",
            exportToPNG: "Download PNG",
            exportToCSV: "Download CSV",
            menu: "Menu",
            selection: "Selection",
            selectionZoom: "Selection Zoom",
            zoomIn: "Zoom In",
            zoomOut: "Zoom Out",
            pan: "Panning",
            reset: "Reset Zoom",
          },
        },
      },
      S = (function () {
        function t() {
          e(this, t),
            (this.yAxis = {
              show: !0,
              showAlways: !1,
              showForNullSeries: !0,
              seriesName: void 0,
              opposite: !1,
              reversed: !1,
              logarithmic: !1,
              tickAmount: void 0,
              forceNiceScale: !1,
              max: void 0,
              min: void 0,
              floating: !1,
              decimalsInFloat: void 0,
              labels: {
                show: !0,
                minWidth: 0,
                maxWidth: 160,
                offsetX: 0,
                offsetY: 0,
                align: void 0,
                rotate: 0,
                padding: 20,
                style: {
                  colors: [],
                  fontSize: "11px",
                  fontWeight: 400,
                  fontFamily: void 0,
                  cssClass: "",
                },
                formatter: void 0,
              },
              axisBorder: {
                show: !1,
                color: "#e0e0e0",
                width: 1,
                offsetX: 0,
                offsetY: 0,
              },
              axisTicks: {
                show: !1,
                color: "#e0e0e0",
                width: 6,
                offsetX: 0,
                offsetY: 0,
              },
              title: {
                text: void 0,
                rotate: -90,
                offsetY: 0,
                offsetX: 0,
                style: {
                  color: void 0,
                  fontSize: "11px",
                  fontWeight: 900,
                  fontFamily: void 0,
                  cssClass: "",
                },
              },
              tooltip: { enabled: !1, offsetX: 0 },
              crosshairs: {
                show: !0,
                position: "front",
                stroke: { color: "#b6b6b6", width: 1, dashArray: 0 },
              },
            }),
            (this.pointAnnotation = {
              x: 0,
              y: null,
              yAxisIndex: 0,
              seriesIndex: 0,
              marker: {
                size: 4,
                fillColor: "#fff",
                strokeWidth: 2,
                strokeColor: "#333",
                shape: "circle",
                offsetX: 0,
                offsetY: 0,
                radius: 2,
                cssClass: "",
              },
              label: {
                borderColor: "#c2c2c2",
                borderWidth: 1,
                borderRadius: 2,
                text: void 0,
                textAnchor: "middle",
                offsetX: 0,
                offsetY: 0,
                style: {
                  background: "#fff",
                  color: void 0,
                  fontSize: "11px",
                  fontFamily: void 0,
                  fontWeight: 400,
                  cssClass: "",
                  padding: { left: 5, right: 5, top: 2, bottom: 2 },
                },
              },
              customSVG: {
                SVG: void 0,
                cssClass: void 0,
                offsetX: 0,
                offsetY: 0,
              },
              image: {
                path: void 0,
                width: 20,
                height: 20,
                offsetX: 0,
                offsetY: 0,
              },
            }),
            (this.yAxisAnnotation = {
              y: 0,
              y2: null,
              strokeDashArray: 1,
              fillColor: "#c2c2c2",
              borderColor: "#c2c2c2",
              borderWidth: 1,
              opacity: 0.3,
              offsetX: 0,
              offsetY: 0,
              width: "100%",
              yAxisIndex: 0,
              label: {
                borderColor: "#c2c2c2",
                borderWidth: 1,
                borderRadius: 2,
                text: void 0,
                textAnchor: "end",
                position: "right",
                offsetX: 0,
                offsetY: -3,
                style: {
                  background: "#fff",
                  color: void 0,
                  fontSize: "11px",
                  fontFamily: void 0,
                  fontWeight: 400,
                  cssClass: "",
                  padding: { left: 5, right: 5, top: 2, bottom: 2 },
                },
              },
            }),
            (this.xAxisAnnotation = {
              x: 0,
              x2: null,
              strokeDashArray: 1,
              fillColor: "#c2c2c2",
              borderColor: "#c2c2c2",
              borderWidth: 1,
              opacity: 0.3,
              offsetX: 0,
              offsetY: 0,
              label: {
                borderColor: "#c2c2c2",
                borderWidth: 1,
                borderRadius: 2,
                text: void 0,
                textAnchor: "middle",
                orientation: "vertical",
                position: "top",
                offsetX: 0,
                offsetY: 0,
                style: {
                  background: "#fff",
                  color: void 0,
                  fontSize: "11px",
                  fontFamily: void 0,
                  fontWeight: 400,
                  cssClass: "",
                  padding: { left: 5, right: 5, top: 2, bottom: 2 },
                },
              },
            }),
            (this.text = {
              x: 0,
              y: 0,
              text: "",
              textAnchor: "start",
              foreColor: void 0,
              fontSize: "13px",
              fontFamily: void 0,
              fontWeight: 400,
              appendTo: ".apexcharts-annotations",
              backgroundColor: "transparent",
              borderColor: "#c2c2c2",
              borderRadius: 0,
              borderWidth: 0,
              paddingLeft: 4,
              paddingRight: 4,
              paddingTop: 2,
              paddingBottom: 2,
            });
        }
        return (
          n(t, [
            {
              key: "init",
              value: function () {
                return {
                  annotations: {
                    position: "front",
                    yaxis: [this.yAxisAnnotation],
                    xaxis: [this.xAxisAnnotation],
                    points: [this.pointAnnotation],
                    texts: [],
                    images: [],
                    shapes: [],
                  },
                  chart: {
                    animations: {
                      enabled: !0,
                      easing: "easeinout",
                      speed: 800,
                      animateGradually: { delay: 150, enabled: !0 },
                      dynamicAnimation: { enabled: !0, speed: 350 },
                    },
                    background: "transparent",
                    locales: [A],
                    defaultLocale: "en",
                    dropShadow: {
                      enabled: !1,
                      enabledOnSeries: void 0,
                      top: 2,
                      left: 2,
                      blur: 4,
                      color: "#000",
                      opacity: 0.35,
                    },
                    events: {
                      animationEnd: void 0,
                      beforeMount: void 0,
                      mounted: void 0,
                      updated: void 0,
                      click: void 0,
                      mouseMove: void 0,
                      mouseLeave: void 0,
                      legendClick: void 0,
                      markerClick: void 0,
                      selection: void 0,
                      dataPointSelection: void 0,
                      dataPointMouseEnter: void 0,
                      dataPointMouseLeave: void 0,
                      beforeZoom: void 0,
                      beforeResetZoom: void 0,
                      zoomed: void 0,
                      scrolled: void 0,
                      brushScrolled: void 0,
                    },
                    foreColor: "#373d3f",
                    fontFamily: "Helvetica, Arial, sans-serif",
                    height: "auto",
                    parentHeightOffset: 15,
                    redrawOnParentResize: !0,
                    redrawOnWindowResize: !0,
                    id: void 0,
                    group: void 0,
                    offsetX: 0,
                    offsetY: 0,
                    selection: {
                      enabled: !1,
                      type: "x",
                      fill: { color: "#24292e", opacity: 0.1 },
                      stroke: {
                        width: 1,
                        color: "#24292e",
                        opacity: 0.4,
                        dashArray: 3,
                      },
                      xaxis: { min: void 0, max: void 0 },
                      yaxis: { min: void 0, max: void 0 },
                    },
                    sparkline: { enabled: !1 },
                    brush: { enabled: !1, autoScaleYaxis: !0, target: void 0 },
                    stacked: !1,
                    stackType: "normal",
                    toolbar: {
                      show: !0,
                      offsetX: 0,
                      offsetY: 0,
                      tools: {
                        download: !0,
                        selection: !0,
                        zoom: !0,
                        zoomin: !0,
                        zoomout: !0,
                        pan: !0,
                        reset: !0,
                        customIcons: [],
                      },
                      export: {
                        csv: {
                          filename: void 0,
                          columnDelimiter: ",",
                          headerCategory: "category",
                          headerValue: "value",
                          dateFormatter: function (t) {
                            return new Date(t).toDateString();
                          },
                        },
                        png: { filename: void 0 },
                        svg: { filename: void 0 },
                      },
                      autoSelected: "zoom",
                    },
                    type: "line",
                    width: "100%",
                    zoom: {
                      enabled: !0,
                      type: "x",
                      autoScaleYaxis: !1,
                      zoomedArea: {
                        fill: { color: "#90CAF9", opacity: 0.4 },
                        stroke: { color: "#0D47A1", opacity: 0.4, width: 1 },
                      },
                    },
                  },
                  plotOptions: {
                    area: { fillTo: "origin" },
                    bar: {
                      horizontal: !1,
                      columnWidth: "70%",
                      barHeight: "70%",
                      distributed: !1,
                      borderRadius: 0,
                      rangeBarOverlap: !0,
                      rangeBarGroupRows: !1,
                      colors: {
                        ranges: [],
                        backgroundBarColors: [],
                        backgroundBarOpacity: 1,
                        backgroundBarRadius: 0,
                      },
                      dataLabels: {
                        position: "top",
                        maxItems: 100,
                        hideOverflowingLabels: !0,
                        orientation: "horizontal",
                      },
                    },
                    bubble: {
                      minBubbleRadius: void 0,
                      maxBubbleRadius: void 0,
                    },
                    candlestick: {
                      colors: { upward: "#00B746", downward: "#EF403C" },
                      wick: { useFillColor: !0 },
                    },
                    boxPlot: { colors: { upper: "#00E396", lower: "#008FFB" } },
                    heatmap: {
                      radius: 2,
                      enableShades: !0,
                      shadeIntensity: 0.5,
                      reverseNegativeShade: !1,
                      distributed: !1,
                      useFillColorAsStroke: !1,
                      colorScale: {
                        inverse: !1,
                        ranges: [],
                        min: void 0,
                        max: void 0,
                      },
                    },
                    treemap: {
                      enableShades: !0,
                      shadeIntensity: 0.5,
                      distributed: !1,
                      reverseNegativeShade: !1,
                      useFillColorAsStroke: !1,
                      colorScale: {
                        inverse: !1,
                        ranges: [],
                        min: void 0,
                        max: void 0,
                      },
                    },
                    radialBar: {
                      inverseOrder: !1,
                      startAngle: 0,
                      endAngle: 360,
                      offsetX: 0,
                      offsetY: 0,
                      hollow: {
                        margin: 5,
                        size: "50%",
                        background: "transparent",
                        image: void 0,
                        imageWidth: 150,
                        imageHeight: 150,
                        imageOffsetX: 0,
                        imageOffsetY: 0,
                        imageClipped: !0,
                        position: "front",
                        dropShadow: {
                          enabled: !1,
                          top: 0,
                          left: 0,
                          blur: 3,
                          color: "#000",
                          opacity: 0.5,
                        },
                      },
                      track: {
                        show: !0,
                        startAngle: void 0,
                        endAngle: void 0,
                        background: "#f2f2f2",
                        strokeWidth: "97%",
                        opacity: 1,
                        margin: 5,
                        dropShadow: {
                          enabled: !1,
                          top: 0,
                          left: 0,
                          blur: 3,
                          color: "#000",
                          opacity: 0.5,
                        },
                      },
                      dataLabels: {
                        show: !0,
                        name: {
                          show: !0,
                          fontSize: "16px",
                          fontFamily: void 0,
                          fontWeight: 600,
                          color: void 0,
                          offsetY: 0,
                          formatter: function (t) {
                            return t;
                          },
                        },
                        value: {
                          show: !0,
                          fontSize: "14px",
                          fontFamily: void 0,
                          fontWeight: 400,
                          color: void 0,
                          offsetY: 16,
                          formatter: function (t) {
                            return t + "%";
                          },
                        },
                        total: {
                          show: !1,
                          label: "Total",
                          fontSize: "16px",
                          fontWeight: 600,
                          fontFamily: void 0,
                          color: void 0,
                          formatter: function (t) {
                            return (
                              t.globals.seriesTotals.reduce(function (t, e) {
                                return t + e;
                              }, 0) /
                                t.globals.series.length +
                              "%"
                            );
                          },
                        },
                      },
                    },
                    pie: {
                      customScale: 1,
                      offsetX: 0,
                      offsetY: 0,
                      startAngle: 0,
                      endAngle: 360,
                      expandOnClick: !0,
                      dataLabels: { offset: 0, minAngleToShowLabel: 10 },
                      donut: {
                        size: "65%",
                        background: "transparent",
                        labels: {
                          show: !1,
                          name: {
                            show: !0,
                            fontSize: "16px",
                            fontFamily: void 0,
                            fontWeight: 600,
                            color: void 0,
                            offsetY: -10,
                            formatter: function (t) {
                              return t;
                            },
                          },
                          value: {
                            show: !0,
                            fontSize: "20px",
                            fontFamily: void 0,
                            fontWeight: 400,
                            color: void 0,
                            offsetY: 10,
                            formatter: function (t) {
                              return t;
                            },
                          },
                          total: {
                            show: !1,
                            showAlways: !1,
                            label: "Total",
                            fontSize: "16px",
                            fontWeight: 400,
                            fontFamily: void 0,
                            color: void 0,
                            formatter: function (t) {
                              return t.globals.seriesTotals.reduce(function (
                                t,
                                e
                              ) {
                                return t + e;
                              },
                              0);
                            },
                          },
                        },
                      },
                    },
                    polarArea: {
                      rings: { strokeWidth: 1, strokeColor: "#e8e8e8" },
                      spokes: { strokeWidth: 1, connectorColors: "#e8e8e8" },
                    },
                    radar: {
                      size: void 0,
                      offsetX: 0,
                      offsetY: 0,
                      polygons: {
                        strokeWidth: 1,
                        strokeColors: "#e8e8e8",
                        connectorColors: "#e8e8e8",
                        fill: { colors: void 0 },
                      },
                    },
                  },
                  colors: void 0,
                  dataLabels: {
                    enabled: !0,
                    enabledOnSeries: void 0,
                    formatter: function (t) {
                      return null !== t ? t : "";
                    },
                    textAnchor: "middle",
                    distributed: !1,
                    offsetX: 0,
                    offsetY: 0,
                    style: {
                      fontSize: "12px",
                      fontFamily: void 0,
                      fontWeight: 600,
                      colors: void 0,
                    },
                    background: {
                      enabled: !0,
                      foreColor: "#fff",
                      borderRadius: 2,
                      padding: 4,
                      opacity: 0.9,
                      borderWidth: 1,
                      borderColor: "#fff",
                      dropShadow: {
                        enabled: !1,
                        top: 1,
                        left: 1,
                        blur: 1,
                        color: "#000",
                        opacity: 0.45,
                      },
                    },
                    dropShadow: {
                      enabled: !1,
                      top: 1,
                      left: 1,
                      blur: 1,
                      color: "#000",
                      opacity: 0.45,
                    },
                  },
                  fill: {
                    type: "solid",
                    colors: void 0,
                    opacity: 0.85,
                    gradient: {
                      shade: "dark",
                      type: "horizontal",
                      shadeIntensity: 0.5,
                      gradientToColors: void 0,
                      inverseColors: !0,
                      opacityFrom: 1,
                      opacityTo: 1,
                      stops: [0, 50, 100],
                      colorStops: [],
                    },
                    image: { src: [], width: void 0, height: void 0 },
                    pattern: {
                      style: "squares",
                      width: 6,
                      height: 6,
                      strokeWidth: 2,
                    },
                  },
                  forecastDataPoints: {
                    count: 0,
                    fillOpacity: 0.5,
                    strokeWidth: void 0,
                    dashArray: 4,
                  },
                  grid: {
                    show: !0,
                    borderColor: "#e0e0e0",
                    strokeDashArray: 0,
                    position: "back",
                    xaxis: { lines: { show: !1 } },
                    yaxis: { lines: { show: !0 } },
                    row: { colors: void 0, opacity: 0.5 },
                    column: { colors: void 0, opacity: 0.5 },
                    padding: { top: 0, right: 10, bottom: 0, left: 12 },
                  },
                  labels: [],
                  legend: {
                    show: !0,
                    showForSingleSeries: !1,
                    showForNullSeries: !0,
                    showForZeroSeries: !0,
                    floating: !1,
                    position: "bottom",
                    horizontalAlign: "center",
                    inverseOrder: !1,
                    fontSize: "12px",
                    fontFamily: void 0,
                    fontWeight: 400,
                    width: void 0,
                    height: void 0,
                    formatter: void 0,
                    tooltipHoverFormatter: void 0,
                    offsetX: -20,
                    offsetY: 4,
                    customLegendItems: [],
                    labels: { colors: void 0, useSeriesColors: !1 },
                    markers: {
                      width: 12,
                      height: 12,
                      strokeWidth: 0,
                      fillColors: void 0,
                      strokeColor: "#fff",
                      radius: 12,
                      customHTML: void 0,
                      offsetX: 0,
                      offsetY: 0,
                      onClick: void 0,
                    },
                    itemMargin: { horizontal: 5, vertical: 2 },
                    onItemClick: { toggleDataSeries: !0 },
                    onItemHover: { highlightDataSeries: !0 },
                  },
                  markers: {
                    discrete: [],
                    size: 0,
                    colors: void 0,
                    strokeColors: "#fff",
                    strokeWidth: 2,
                    strokeOpacity: 0.9,
                    strokeDashArray: 0,
                    fillOpacity: 1,
                    shape: "circle",
                    width: 8,
                    height: 8,
                    radius: 2,
                    offsetX: 0,
                    offsetY: 0,
                    onClick: void 0,
                    onDblClick: void 0,
                    showNullDataPoints: !0,
                    hover: { size: void 0, sizeOffset: 3 },
                  },
                  noData: {
                    text: void 0,
                    align: "center",
                    verticalAlign: "middle",
                    offsetX: 0,
                    offsetY: 0,
                    style: {
                      color: void 0,
                      fontSize: "14px",
                      fontFamily: void 0,
                    },
                  },
                  responsive: [],
                  series: void 0,
                  states: {
                    normal: { filter: { type: "none", value: 0 } },
                    hover: { filter: { type: "lighten", value: 0.1 } },
                    active: {
                      allowMultipleDataPointsSelection: !1,
                      filter: { type: "darken", value: 0.5 },
                    },
                  },
                  title: {
                    text: void 0,
                    align: "left",
                    margin: 5,
                    offsetX: 0,
                    offsetY: 0,
                    floating: !1,
                    style: {
                      fontSize: "14px",
                      fontWeight: 900,
                      fontFamily: void 0,
                      color: void 0,
                    },
                  },
                  subtitle: {
                    text: void 0,
                    align: "left",
                    margin: 5,
                    offsetX: 0,
                    offsetY: 30,
                    floating: !1,
                    style: {
                      fontSize: "12px",
                      fontWeight: 400,
                      fontFamily: void 0,
                      color: void 0,
                    },
                  },
                  stroke: {
                    show: !0,
                    curve: "smooth",
                    lineCap: "butt",
                    width: 2,
                    colors: void 0,
                    dashArray: 0,
                  },
                  tooltip: {
                    enabled: !0,
                    enabledOnSeries: void 0,
                    shared: !0,
                    followCursor: !1,
                    intersect: !1,
                    inverseOrder: !1,
                    custom: void 0,
                    fillSeriesColor: !1,
                    theme: "light",
                    style: { fontSize: "12px", fontFamily: void 0 },
                    onDatasetHover: { highlightDataSeries: !1 },
                    x: { show: !0, format: "dd MMM", formatter: void 0 },
                    y: {
                      formatter: void 0,
                      title: {
                        formatter: function (t) {
                          return t ? t + ": " : "";
                        },
                      },
                    },
                    z: { formatter: void 0, title: "Size: " },
                    marker: { show: !0, fillColors: void 0 },
                    items: { display: "flex" },
                    fixed: {
                      enabled: !1,
                      position: "topRight",
                      offsetX: 0,
                      offsetY: 0,
                    },
                  },
                  xaxis: {
                    type: "category",
                    categories: [],
                    convertedCatToNumeric: !1,
                    offsetX: 0,
                    offsetY: 0,
                    overwriteCategories: void 0,
                    labels: {
                      show: !0,
                      rotate: -45,
                      rotateAlways: !1,
                      hideOverlappingLabels: !0,
                      trim: !1,
                      minHeight: void 0,
                      maxHeight: 120,
                      showDuplicates: !0,
                      style: {
                        colors: [],
                        fontSize: "12px",
                        fontWeight: 400,
                        fontFamily: void 0,
                        cssClass: "",
                      },
                      offsetX: 0,
                      offsetY: 0,
                      format: void 0,
                      formatter: void 0,
                      datetimeUTC: !0,
                      datetimeFormatter: {
                        year: "yyyy",
                        month: "MMM 'yy",
                        day: "dd MMM",
                        hour: "HH:mm",
                        minute: "HH:mm:ss",
                        second: "HH:mm:ss",
                      },
                    },
                    axisBorder: {
                      show: !0,
                      color: "#e0e0e0",
                      width: "100%",
                      height: 1,
                      offsetX: 0,
                      offsetY: 0,
                    },
                    axisTicks: {
                      show: !0,
                      color: "#e0e0e0",
                      height: 6,
                      offsetX: 0,
                      offsetY: 0,
                    },
                    tickAmount: void 0,
                    tickPlacement: "on",
                    min: void 0,
                    max: void 0,
                    range: void 0,
                    floating: !1,
                    decimalsInFloat: void 0,
                    position: "bottom",
                    title: {
                      text: void 0,
                      offsetX: 0,
                      offsetY: 0,
                      style: {
                        color: void 0,
                        fontSize: "12px",
                        fontWeight: 900,
                        fontFamily: void 0,
                        cssClass: "",
                      },
                    },
                    crosshairs: {
                      show: !0,
                      width: 1,
                      position: "back",
                      opacity: 0.9,
                      stroke: { color: "#b6b6b6", width: 1, dashArray: 3 },
                      fill: {
                        type: "solid",
                        color: "#B1B9C4",
                        gradient: {
                          colorFrom: "#D8E3F0",
                          colorTo: "#BED1E6",
                          stops: [0, 100],
                          opacityFrom: 0.4,
                          opacityTo: 0.5,
                        },
                      },
                      dropShadow: {
                        enabled: !1,
                        left: 0,
                        top: 0,
                        blur: 1,
                        opacity: 0.4,
                      },
                    },
                    tooltip: {
                      enabled: !0,
                      offsetY: 0,
                      formatter: void 0,
                      style: { fontSize: "12px", fontFamily: void 0 },
                    },
                  },
                  yaxis: this.yAxis,
                  theme: {
                    mode: "light",
                    palette: "palette1",
                    monochrome: {
                      enabled: !1,
                      color: "#008FFB",
                      shadeTo: "light",
                      shadeIntensity: 0.65,
                    },
                  },
                };
              },
            },
          ]),
          t
        );
      })(),
      C = (function () {
        function t(i) {
          e(this, t),
            (this.ctx = i),
            (this.w = i.w),
            (this.graphics = new m(this.ctx)),
            this.w.globals.isBarHorizontal && (this.invertAxis = !0),
            (this.helpers = new v(this)),
            (this.xAxisAnnotations = new b(this)),
            (this.yAxisAnnotations = new w(this)),
            (this.pointsAnnotations = new k(this)),
            this.w.globals.isBarHorizontal &&
              this.w.config.yaxis[0].reversed &&
              (this.inversedReversedAxis = !0),
            (this.xDivision =
              this.w.globals.gridWidth / this.w.globals.dataPoints);
        }
        return (
          n(t, [
            {
              key: "drawAxesAnnotations",
              value: function () {
                var t = this.w;
                if (t.globals.axisCharts) {
                  for (
                    var e = this.yAxisAnnotations.drawYAxisAnnotations(),
                      i = this.xAxisAnnotations.drawXAxisAnnotations(),
                      n = this.pointsAnnotations.drawPointAnnotations(),
                      a = t.config.chart.animations.enabled,
                      s = [e, i, n],
                      r = [i.node, e.node, n.node],
                      o = 0;
                    o < 3;
                    o++
                  )
                    t.globals.dom.elGraphical.add(s[o]),
                      !a ||
                        t.globals.resized ||
                        t.globals.dataChanged ||
                        ("scatter" !== t.config.chart.type &&
                          "bubble" !== t.config.chart.type &&
                          t.globals.dataPoints > 1 &&
                          r[o].classList.add("apexcharts-element-hidden")),
                      t.globals.delayedElements.push({ el: r[o], index: 0 });
                  this.helpers.annotationsBackground();
                }
              },
            },
            {
              key: "drawImageAnnos",
              value: function () {
                var t = this;
                this.w.config.annotations.images.map(function (e, i) {
                  t.addImage(e, i);
                });
              },
            },
            {
              key: "drawTextAnnos",
              value: function () {
                var t = this;
                this.w.config.annotations.texts.map(function (e, i) {
                  t.addText(e, i);
                });
              },
            },
            {
              key: "addXaxisAnnotation",
              value: function (t, e, i) {
                this.xAxisAnnotations.addXaxisAnnotation(t, e, i);
              },
            },
            {
              key: "addYaxisAnnotation",
              value: function (t, e, i) {
                this.yAxisAnnotations.addYaxisAnnotation(t, e, i);
              },
            },
            {
              key: "addPointAnnotation",
              value: function (t, e, i) {
                this.pointsAnnotations.addPointAnnotation(t, e, i);
              },
            },
            {
              key: "addText",
              value: function (t, e) {
                var i = t.x,
                  n = t.y,
                  a = t.text,
                  s = t.textAnchor,
                  r = t.foreColor,
                  o = t.fontSize,
                  l = t.fontFamily,
                  c = t.fontWeight,
                  h = t.cssClass,
                  d = t.backgroundColor,
                  u = t.borderWidth,
                  f = t.strokeDashArray,
                  p = t.borderRadius,
                  g = t.borderColor,
                  x = t.appendTo,
                  m = void 0 === x ? ".apexcharts-annotations" : x,
                  v = t.paddingLeft,
                  b = void 0 === v ? 4 : v,
                  y = t.paddingRight,
                  w = void 0 === y ? 4 : y,
                  k = t.paddingBottom,
                  A = void 0 === k ? 2 : k,
                  S = t.paddingTop,
                  C = void 0 === S ? 2 : S,
                  T = this.w,
                  E = this.graphics.drawText({
                    x: i,
                    y: n,
                    text: a,
                    textAnchor: s || "start",
                    fontSize: o || "12px",
                    fontWeight: c || "regular",
                    fontFamily: l || T.config.chart.fontFamily,
                    foreColor: r || T.config.chart.foreColor,
                    cssClass: h,
                  }),
                  _ = T.globals.dom.baseEl.querySelector(m);
                _ && _.appendChild(E.node);
                var L = E.bbox();
                if (a) {
                  var P = this.graphics.drawRect(
                    L.x - b,
                    L.y - C,
                    L.width + b + w,
                    L.height + A + C,
                    p,
                    d || "transparent",
                    1,
                    u,
                    g,
                    f
                  );
                  _.insertBefore(P.node, E.node);
                }
              },
            },
            {
              key: "addImage",
              value: function (t, e) {
                var i = this.w,
                  n = t.path,
                  a = t.x,
                  s = void 0 === a ? 0 : a,
                  r = t.y,
                  o = void 0 === r ? 0 : r,
                  l = t.width,
                  c = void 0 === l ? 20 : l,
                  h = t.height,
                  d = void 0 === h ? 20 : h,
                  u = t.appendTo,
                  f = void 0 === u ? ".apexcharts-annotations" : u,
                  p = i.globals.dom.Paper.image(n);
                p.size(c, d).move(s, o);
                var g = i.globals.dom.baseEl.querySelector(f);
                g && g.appendChild(p.node);
              },
            },
            {
              key: "addXaxisAnnotationExternal",
              value: function (t, e, i) {
                return (
                  this.addAnnotationExternal({
                    params: t,
                    pushToMemory: e,
                    context: i,
                    type: "xaxis",
                    contextMethod: i.addXaxisAnnotation,
                  }),
                  i
                );
              },
            },
            {
              key: "addYaxisAnnotationExternal",
              value: function (t, e, i) {
                return (
                  this.addAnnotationExternal({
                    params: t,
                    pushToMemory: e,
                    context: i,
                    type: "yaxis",
                    contextMethod: i.addYaxisAnnotation,
                  }),
                  i
                );
              },
            },
            {
              key: "addPointAnnotationExternal",
              value: function (t, e, i) {
                return (
                  void 0 === this.invertAxis &&
                    (this.invertAxis = i.w.globals.isBarHorizontal),
                  this.addAnnotationExternal({
                    params: t,
                    pushToMemory: e,
                    context: i,
                    type: "point",
                    contextMethod: i.addPointAnnotation,
                  }),
                  i
                );
              },
            },
            {
              key: "addAnnotationExternal",
              value: function (t) {
                var e = t.params,
                  i = t.pushToMemory,
                  n = t.context,
                  a = t.type,
                  s = t.contextMethod,
                  r = n,
                  o = r.w,
                  l = o.globals.dom.baseEl.querySelector(
                    ".apexcharts-".concat(a, "-annotations")
                  ),
                  c = l.childNodes.length + 1,
                  h = new S(),
                  d = Object.assign(
                    {},
                    "xaxis" === a
                      ? h.xAxisAnnotation
                      : "yaxis" === a
                      ? h.yAxisAnnotation
                      : h.pointAnnotation
                  ),
                  u = p.extend(d, e);
                switch (a) {
                  case "xaxis":
                    this.addXaxisAnnotation(u, l, c);
                    break;
                  case "yaxis":
                    this.addYaxisAnnotation(u, l, c);
                    break;
                  case "point":
                    this.addPointAnnotation(u, l, c);
                }
                var f = o.globals.dom.baseEl.querySelector(
                    ".apexcharts-"
                      .concat(a, "-annotations .apexcharts-")
                      .concat(a, "-annotation-label[rel='")
                      .concat(c, "']")
                  ),
                  g = this.helpers.addBackgroundToAnno(f, u);
                return (
                  g && l.insertBefore(g.node, f),
                  i &&
                    o.globals.memory.methodsToExec.push({
                      context: r,
                      id: u.id ? u.id : p.randomId(),
                      method: s,
                      label: "addAnnotation",
                      params: e,
                    }),
                  n
                );
              },
            },
            {
              key: "clearAnnotations",
              value: function (t) {
                var e = t.w,
                  i = e.globals.dom.baseEl.querySelectorAll(
                    ".apexcharts-yaxis-annotations, .apexcharts-xaxis-annotations, .apexcharts-point-annotations"
                  );
                e.globals.memory.methodsToExec.map(function (t, i) {
                  ("addText" !== t.label && "addAnnotation" !== t.label) ||
                    e.globals.memory.methodsToExec.splice(i, 1);
                }),
                  (i = p.listToArray(i)),
                  Array.prototype.forEach.call(i, function (t) {
                    for (; t.firstChild; ) t.removeChild(t.firstChild);
                  });
              },
            },
            {
              key: "removeAnnotation",
              value: function (t, e) {
                var i = t.w,
                  n = i.globals.dom.baseEl.querySelectorAll(".".concat(e));
                n &&
                  (i.globals.memory.methodsToExec.map(function (t, n) {
                    t.id === e && i.globals.memory.methodsToExec.splice(n, 1);
                  }),
                  Array.prototype.forEach.call(n, function (t) {
                    t.parentElement.removeChild(t);
                  }));
              },
            },
          ]),
          t
        );
      })(),
      T = (function () {
        function t(i) {
          e(this, t),
            (this.ctx = i),
            (this.w = i.w),
            (this.opts = null),
            (this.seriesIndex = 0);
        }
        return (
          n(t, [
            {
              key: "clippedImgArea",
              value: function (t) {
                var e = this.w,
                  i = e.config,
                  n = parseInt(e.globals.gridWidth, 10),
                  a = parseInt(e.globals.gridHeight, 10),
                  s = n > a ? n : a,
                  r = t.image,
                  o = 0,
                  l = 0;
                void 0 === t.width && void 0 === t.height
                  ? void 0 !== i.fill.image.width &&
                    void 0 !== i.fill.image.height
                    ? ((o = i.fill.image.width + 1), (l = i.fill.image.height))
                    : ((o = s + 1), (l = s))
                  : ((o = t.width), (l = t.height));
                var c = document.createElementNS(e.globals.SVGNS, "pattern");
                m.setAttrs(c, {
                  id: t.patternID,
                  patternUnits: t.patternUnits
                    ? t.patternUnits
                    : "userSpaceOnUse",
                  width: o + "px",
                  height: l + "px",
                });
                var h = document.createElementNS(e.globals.SVGNS, "image");
                c.appendChild(h),
                  h.setAttributeNS(window.SVG.xlink, "href", r),
                  m.setAttrs(h, {
                    x: 0,
                    y: 0,
                    preserveAspectRatio: "none",
                    width: o + "px",
                    height: l + "px",
                  }),
                  (h.style.opacity = t.opacity),
                  e.globals.dom.elDefs.node.appendChild(c);
              },
            },
            {
              key: "getSeriesIndex",
              value: function (t) {
                var e = this.w;
                return (
                  (("bar" === e.config.chart.type ||
                    "rangeBar" === e.config.chart.type) &&
                    e.config.plotOptions.bar.distributed) ||
                  "heatmap" === e.config.chart.type ||
                  "treemap" === e.config.chart.type
                    ? (this.seriesIndex = t.seriesNumber)
                    : (this.seriesIndex =
                        t.seriesNumber % e.globals.series.length),
                  this.seriesIndex
                );
              },
            },
            {
              key: "fillPath",
              value: function (t) {
                var e = this.w;
                this.opts = t;
                var i,
                  n,
                  a,
                  s = this.w.config;
                this.seriesIndex = this.getSeriesIndex(t);
                var r = this.getFillColors()[this.seriesIndex];
                void 0 !== e.globals.seriesColors[this.seriesIndex] &&
                  (r = e.globals.seriesColors[this.seriesIndex]),
                  "function" == typeof r &&
                    (r = r({
                      seriesIndex: this.seriesIndex,
                      dataPointIndex: t.dataPointIndex,
                      value: t.value,
                      w: e,
                    }));
                var o = this.getFillType(this.seriesIndex),
                  l = Array.isArray(s.fill.opacity)
                    ? s.fill.opacity[this.seriesIndex]
                    : s.fill.opacity;
                t.color && (r = t.color);
                var c = r;
                if (
                  (-1 === r.indexOf("rgb")
                    ? r.length < 9 && (c = p.hexToRgba(r, l))
                    : r.indexOf("rgba") > -1 && (l = p.getOpacityFromRGBA(r)),
                  t.opacity && (l = t.opacity),
                  "pattern" === o && (n = this.handlePatternFill(n, r, l, c)),
                  "gradient" === o &&
                    (a = this.handleGradientFill(r, l, this.seriesIndex)),
                  "image" === o)
                ) {
                  var h = s.fill.image.src,
                    d = t.patternID ? t.patternID : "";
                  this.clippedImgArea({
                    opacity: l,
                    image: Array.isArray(h)
                      ? t.seriesNumber < h.length
                        ? h[t.seriesNumber]
                        : h[0]
                      : h,
                    width: t.width ? t.width : void 0,
                    height: t.height ? t.height : void 0,
                    patternUnits: t.patternUnits,
                    patternID: "pattern"
                      .concat(e.globals.cuid)
                      .concat(t.seriesNumber + 1)
                      .concat(d),
                  }),
                    (i = "url(#pattern"
                      .concat(e.globals.cuid)
                      .concat(t.seriesNumber + 1)
                      .concat(d, ")"));
                } else i = "gradient" === o ? a : "pattern" === o ? n : c;
                return t.solid && (i = c), i;
              },
            },
            {
              key: "getFillType",
              value: function (t) {
                var e = this.w;
                return Array.isArray(e.config.fill.type)
                  ? e.config.fill.type[t]
                  : e.config.fill.type;
              },
            },
            {
              key: "getFillColors",
              value: function () {
                var t = this.w,
                  e = t.config,
                  i = this.opts,
                  n = [];
                return (
                  t.globals.comboCharts
                    ? "line" === t.config.series[this.seriesIndex].type
                      ? Array.isArray(t.globals.stroke.colors)
                        ? (n = t.globals.stroke.colors)
                        : n.push(t.globals.stroke.colors)
                      : Array.isArray(t.globals.fill.colors)
                      ? (n = t.globals.fill.colors)
                      : n.push(t.globals.fill.colors)
                    : "line" === e.chart.type
                    ? Array.isArray(t.globals.stroke.colors)
                      ? (n = t.globals.stroke.colors)
                      : n.push(t.globals.stroke.colors)
                    : Array.isArray(t.globals.fill.colors)
                    ? (n = t.globals.fill.colors)
                    : n.push(t.globals.fill.colors),
                  void 0 !== i.fillColors &&
                    ((n = []),
                    Array.isArray(i.fillColors)
                      ? (n = i.fillColors.slice())
                      : n.push(i.fillColors)),
                  n
                );
              },
            },
            {
              key: "handlePatternFill",
              value: function (t, e, i, n) {
                var a = this.w.config,
                  s = this.opts,
                  r = new m(this.ctx),
                  o =
                    void 0 === a.fill.pattern.strokeWidth
                      ? Array.isArray(a.stroke.width)
                        ? a.stroke.width[this.seriesIndex]
                        : a.stroke.width
                      : Array.isArray(a.fill.pattern.strokeWidth)
                      ? a.fill.pattern.strokeWidth[this.seriesIndex]
                      : a.fill.pattern.strokeWidth,
                  l = e;
                return Array.isArray(a.fill.pattern.style)
                  ? void 0 !== a.fill.pattern.style[s.seriesNumber]
                    ? r.drawPattern(
                        a.fill.pattern.style[s.seriesNumber],
                        a.fill.pattern.width,
                        a.fill.pattern.height,
                        l,
                        o,
                        i
                      )
                    : n
                  : r.drawPattern(
                      a.fill.pattern.style,
                      a.fill.pattern.width,
                      a.fill.pattern.height,
                      l,
                      o,
                      i
                    );
              },
            },
            {
              key: "handleGradientFill",
              value: function (t, e, i) {
                var n,
                  a = this.w.config,
                  s = this.opts,
                  r = new m(this.ctx),
                  o = new p(),
                  l = a.fill.gradient.type,
                  c = t,
                  h =
                    void 0 === a.fill.gradient.opacityFrom
                      ? e
                      : Array.isArray(a.fill.gradient.opacityFrom)
                      ? a.fill.gradient.opacityFrom[i]
                      : a.fill.gradient.opacityFrom;
                c.indexOf("rgba") > -1 && (h = p.getOpacityFromRGBA(c));
                var d =
                  void 0 === a.fill.gradient.opacityTo
                    ? e
                    : Array.isArray(a.fill.gradient.opacityTo)
                    ? a.fill.gradient.opacityTo[i]
                    : a.fill.gradient.opacityTo;
                if (
                  void 0 === a.fill.gradient.gradientToColors ||
                  0 === a.fill.gradient.gradientToColors.length
                )
                  n =
                    "dark" === a.fill.gradient.shade
                      ? o.shadeColor(
                          -1 * parseFloat(a.fill.gradient.shadeIntensity),
                          t.indexOf("rgb") > -1 ? p.rgb2hex(t) : t
                        )
                      : o.shadeColor(
                          parseFloat(a.fill.gradient.shadeIntensity),
                          t.indexOf("rgb") > -1 ? p.rgb2hex(t) : t
                        );
                else if (a.fill.gradient.gradientToColors[s.seriesNumber]) {
                  var u = a.fill.gradient.gradientToColors[s.seriesNumber];
                  (n = u),
                    u.indexOf("rgba") > -1 && (d = p.getOpacityFromRGBA(u));
                } else n = t;
                if (a.fill.gradient.inverseColors) {
                  var f = c;
                  (c = n), (n = f);
                }
                return (
                  c.indexOf("rgb") > -1 && (c = p.rgb2hex(c)),
                  n.indexOf("rgb") > -1 && (n = p.rgb2hex(n)),
                  r.drawGradient(
                    l,
                    c,
                    n,
                    h,
                    d,
                    s.size,
                    a.fill.gradient.stops,
                    a.fill.gradient.colorStops,
                    i
                  )
                );
              },
            },
          ]),
          t
        );
      })(),
      E = (function () {
        function t(i, n) {
          e(this, t), (this.ctx = i), (this.w = i.w);
        }
        return (
          n(t, [
            {
              key: "setGlobalMarkerSize",
              value: function () {
                var t = this.w;
                if (
                  ((t.globals.markers.size = Array.isArray(
                    t.config.markers.size
                  )
                    ? t.config.markers.size
                    : [t.config.markers.size]),
                  t.globals.markers.size.length > 0)
                ) {
                  if (
                    t.globals.markers.size.length <
                    t.globals.series.length + 1
                  )
                    for (var e = 0; e <= t.globals.series.length; e++)
                      void 0 === t.globals.markers.size[e] &&
                        t.globals.markers.size.push(t.globals.markers.size[0]);
                } else
                  t.globals.markers.size = t.config.series.map(function (e) {
                    return t.config.markers.size;
                  });
              },
            },
            {
              key: "plotChartMarkers",
              value: function (t, e, i, n) {
                var a,
                  s =
                    arguments.length > 4 &&
                    void 0 !== arguments[4] &&
                    arguments[4],
                  r = this.w,
                  o = e,
                  l = t,
                  c = null,
                  h = new m(this.ctx);
                if (
                  ((r.globals.markers.size[e] > 0 || s) &&
                    (c = h.group({
                      class: s ? "" : "apexcharts-series-markers",
                    })).attr(
                      "clip-path",
                      "url(#gridRectMarkerMask".concat(r.globals.cuid, ")")
                    ),
                  Array.isArray(l.x))
                )
                  for (var d = 0; d < l.x.length; d++) {
                    var u = i;
                    1 === i && 0 === d && (u = 0),
                      1 === i && 1 === d && (u = 1);
                    var f = "apexcharts-marker";
                    ("line" !== r.config.chart.type &&
                      "area" !== r.config.chart.type) ||
                      r.globals.comboCharts ||
                      r.config.tooltip.intersect ||
                      (f += " no-pointer-events");
                    var g = Array.isArray(r.config.markers.size)
                      ? r.globals.markers.size[e] > 0
                      : r.config.markers.size > 0;
                    if (g || s) {
                      p.isNumber(l.y[d])
                        ? (f += " w".concat(p.randomId()))
                        : (f = "apexcharts-nullpoint");
                      var v = this.getMarkerConfig(f, e, u);
                      r.config.series[o].data[u] &&
                        (r.config.series[o].data[u].fillColor &&
                          (v.pointFillColor =
                            r.config.series[o].data[u].fillColor),
                        r.config.series[o].data[u].strokeColor &&
                          (v.pointStrokeColor =
                            r.config.series[o].data[u].strokeColor)),
                        n && (v.pSize = n),
                        (a = h.drawMarker(l.x[d], l.y[d], v)).attr("rel", u),
                        a.attr("j", u),
                        a.attr("index", e),
                        a.node.setAttribute("default-marker-size", v.pSize);
                      var b = new x(this.ctx);
                      b.setSelectionFilter(a, e, u),
                        this.addEvents(a),
                        c && c.add(a);
                    } else
                      void 0 === r.globals.pointsArray[e] &&
                        (r.globals.pointsArray[e] = []),
                        r.globals.pointsArray[e].push([l.x[d], l.y[d]]);
                  }
                return c;
              },
            },
            {
              key: "getMarkerConfig",
              value: function (t, e) {
                var i =
                    arguments.length > 2 && void 0 !== arguments[2]
                      ? arguments[2]
                      : null,
                  n = this.w,
                  a = this.getMarkerStyle(e),
                  s = n.globals.markers.size[e],
                  r = n.config.markers;
                return (
                  null !== i &&
                    r.discrete.length &&
                    r.discrete.map(function (t) {
                      t.seriesIndex === e &&
                        t.dataPointIndex === i &&
                        ((a.pointStrokeColor = t.strokeColor),
                        (a.pointFillColor = t.fillColor),
                        (s = t.size),
                        (a.pointShape = t.shape));
                    }),
                  {
                    pSize: s,
                    pRadius: r.radius,
                    width: Array.isArray(r.width) ? r.width[e] : r.width,
                    height: Array.isArray(r.height) ? r.height[e] : r.height,
                    pointStrokeWidth: Array.isArray(r.strokeWidth)
                      ? r.strokeWidth[e]
                      : r.strokeWidth,
                    pointStrokeColor: a.pointStrokeColor,
                    pointFillColor: a.pointFillColor,
                    shape:
                      a.pointShape ||
                      (Array.isArray(r.shape) ? r.shape[e] : r.shape),
                    class: t,
                    pointStrokeOpacity: Array.isArray(r.strokeOpacity)
                      ? r.strokeOpacity[e]
                      : r.strokeOpacity,
                    pointStrokeDashArray: Array.isArray(r.strokeDashArray)
                      ? r.strokeDashArray[e]
                      : r.strokeDashArray,
                    pointFillOpacity: Array.isArray(r.fillOpacity)
                      ? r.fillOpacity[e]
                      : r.fillOpacity,
                    seriesIndex: e,
                  }
                );
              },
            },
            {
              key: "addEvents",
              value: function (t) {
                var e = this.w,
                  i = new m(this.ctx);
                t.node.addEventListener(
                  "mouseenter",
                  i.pathMouseEnter.bind(this.ctx, t)
                ),
                  t.node.addEventListener(
                    "mouseleave",
                    i.pathMouseLeave.bind(this.ctx, t)
                  ),
                  t.node.addEventListener(
                    "mousedown",
                    i.pathMouseDown.bind(this.ctx, t)
                  ),
                  t.node.addEventListener("click", e.config.markers.onClick),
                  t.node.addEventListener(
                    "dblclick",
                    e.config.markers.onDblClick
                  ),
                  t.node.addEventListener(
                    "touchstart",
                    i.pathMouseDown.bind(this.ctx, t),
                    { passive: !0 }
                  );
              },
            },
            {
              key: "getMarkerStyle",
              value: function (t) {
                var e = this.w,
                  i = e.globals.markers.colors,
                  n =
                    e.config.markers.strokeColor ||
                    e.config.markers.strokeColors;
                return {
                  pointStrokeColor: Array.isArray(n) ? n[t] : n,
                  pointFillColor: Array.isArray(i) ? i[t] : i,
                };
              },
            },
          ]),
          t
        );
      })(),
      _ = (function () {
        function t(i) {
          e(this, t),
            (this.ctx = i),
            (this.w = i.w),
            (this.initialAnim = this.w.config.chart.animations.enabled),
            (this.dynamicAnim =
              this.initialAnim &&
              this.w.config.chart.animations.dynamicAnimation.enabled);
        }
        return (
          n(t, [
            {
              key: "draw",
              value: function (t, e, i) {
                var n = this.w,
                  a = new m(this.ctx),
                  s = i.realIndex,
                  r = i.pointsPos,
                  o = i.zRatio,
                  l = i.elParent,
                  c = a.group({
                    class:
                      "apexcharts-series-markers apexcharts-series-".concat(
                        n.config.chart.type
                      ),
                  });
                if (
                  (c.attr(
                    "clip-path",
                    "url(#gridRectMarkerMask".concat(n.globals.cuid, ")")
                  ),
                  Array.isArray(r.x))
                )
                  for (var h = 0; h < r.x.length; h++) {
                    var d = e + 1,
                      u = !0;
                    0 === e && 0 === h && (d = 0),
                      0 === e && 1 === h && (d = 1);
                    var f = 0,
                      p = n.globals.markers.size[s];
                    if (o !== 1 / 0) {
                      p = n.globals.seriesZ[s][d] / o;
                      var g = n.config.plotOptions.bubble;
                      g.minBubbleRadius &&
                        p < g.minBubbleRadius &&
                        (p = g.minBubbleRadius),
                        g.maxBubbleRadius &&
                          p > g.maxBubbleRadius &&
                          (p = g.maxBubbleRadius);
                    }
                    n.config.chart.animations.enabled || (f = p);
                    var x = r.x[h],
                      v = r.y[h];
                    if (
                      ((f = f || 0),
                      (null !== v && void 0 !== n.globals.series[s][d]) ||
                        (u = !1),
                      u)
                    ) {
                      var b = this.drawPoint(x, v, f, p, s, d, e);
                      c.add(b);
                    }
                    l.add(c);
                  }
              },
            },
            {
              key: "drawPoint",
              value: function (t, e, i, n, a, s, r) {
                var o,
                  l = this.w,
                  c = a,
                  h = new g(this.ctx),
                  d = new x(this.ctx),
                  u = new T(this.ctx),
                  f = new E(this.ctx),
                  p = new m(this.ctx),
                  v = f.getMarkerConfig("apexcharts-marker", c),
                  b = u.fillPath({
                    seriesNumber: a,
                    dataPointIndex: s,
                    patternUnits: "objectBoundingBox",
                    value: l.globals.series[a][r],
                  });
                if (
                  ("circle" === v.shape
                    ? (o = p.drawCircle(i))
                    : ("square" !== v.shape && "rect" !== v.shape) ||
                      (o = p.drawRect(
                        0,
                        0,
                        v.width - v.pointStrokeWidth / 2,
                        v.height - v.pointStrokeWidth / 2,
                        v.pRadius
                      )),
                  l.config.series[c].data[s] &&
                    l.config.series[c].data[s].fillColor &&
                    (b = l.config.series[c].data[s].fillColor),
                  o.attr({
                    x: t - v.width / 2 - v.pointStrokeWidth / 2,
                    y: e - v.height / 2 - v.pointStrokeWidth / 2,
                    cx: t,
                    cy: e,
                    fill: b,
                    "fill-opacity": v.pointFillOpacity,
                    stroke: v.pointStrokeColor,
                    r: n,
                    "stroke-width": v.pointStrokeWidth,
                    "stroke-dasharray": v.pointStrokeDashArray,
                    "stroke-opacity": v.pointStrokeOpacity,
                  }),
                  l.config.chart.dropShadow.enabled)
                ) {
                  var y = l.config.chart.dropShadow;
                  d.dropShadow(o, y, a);
                }
                if (
                  !this.initialAnim ||
                  l.globals.dataChanged ||
                  l.globals.resized
                )
                  l.globals.animationEnded = !0;
                else {
                  var w = l.config.chart.animations.speed;
                  h.animateMarker(
                    o,
                    0,
                    "circle" === v.shape
                      ? n
                      : { width: v.width, height: v.height },
                    w,
                    l.globals.easing,
                    function () {
                      window.setTimeout(function () {
                        h.animationCompleted(o);
                      }, 100);
                    }
                  );
                }
                if (l.globals.dataChanged && "circle" === v.shape)
                  if (this.dynamicAnim) {
                    var k,
                      A,
                      S,
                      C,
                      _ = l.config.chart.animations.dynamicAnimation.speed;
                    null !=
                      (C =
                        l.globals.previousPaths[a] &&
                        l.globals.previousPaths[a][r]) &&
                      ((k = C.x), (A = C.y), (S = void 0 !== C.r ? C.r : n));
                    for (var L = 0; L < l.globals.collapsedSeries.length; L++)
                      l.globals.collapsedSeries[L].index === a &&
                        ((_ = 1), (n = 0));
                    0 === t && 0 === e && (n = 0),
                      h.animateCircle(
                        o,
                        { cx: k, cy: A, r: S },
                        { cx: t, cy: e, r: n },
                        _,
                        l.globals.easing
                      );
                  } else o.attr({ r: n });
                return (
                  o.attr({ rel: s, j: s, index: a, "default-marker-size": n }),
                  d.setSelectionFilter(o, a, s),
                  f.addEvents(o),
                  o.node.classList.add("apexcharts-marker"),
                  o
                );
              },
            },
            {
              key: "centerTextInBubble",
              value: function (t) {
                var e = this.w;
                return {
                  y: (t +=
                    parseInt(e.config.dataLabels.style.fontSize, 10) / 4),
                };
              },
            },
          ]),
          t
        );
      })(),
      L = (function () {
        function t(i) {
          e(this, t), (this.ctx = i), (this.w = i.w);
        }
        return (
          n(t, [
            {
              key: "dataLabelsCorrection",
              value: function (t, e, i, n, a, s, r) {
                var o = this.w,
                  l = !1,
                  c = new m(this.ctx).getTextRects(i, r),
                  h = c.width,
                  d = c.height;
                e < 0 && (e = 0),
                  e > o.globals.gridHeight + d &&
                    (e = o.globals.gridHeight + d / 2),
                  void 0 === o.globals.dataLabelsRects[n] &&
                    (o.globals.dataLabelsRects[n] = []),
                  o.globals.dataLabelsRects[n].push({
                    x: t,
                    y: e,
                    width: h,
                    height: d,
                  });
                var u = o.globals.dataLabelsRects[n].length - 2,
                  f =
                    void 0 !== o.globals.lastDrawnDataLabelsIndexes[n]
                      ? o.globals.lastDrawnDataLabelsIndexes[n][
                          o.globals.lastDrawnDataLabelsIndexes[n].length - 1
                        ]
                      : 0;
                if (void 0 !== o.globals.dataLabelsRects[n][u]) {
                  var p = o.globals.dataLabelsRects[n][f];
                  (t > p.x + p.width + 2 ||
                    e > p.y + p.height + 2 ||
                    t + h < p.x) &&
                    (l = !0);
                }
                return (
                  (0 === a || s) && (l = !0),
                  { x: t, y: e, textRects: c, drawnextLabel: l }
                );
              },
            },
            {
              key: "drawDataLabel",
              value: function (t, e, i) {
                var n = this,
                  a =
                    arguments.length > 4 && void 0 !== arguments[4]
                      ? arguments[4]
                      : 2,
                  s = this.w,
                  r = new m(this.ctx),
                  o = s.config.dataLabels,
                  l = 0,
                  c = 0,
                  h = i,
                  d = null;
                if (!o.enabled || !Array.isArray(t.x)) return d;
                d = r.group({ class: "apexcharts-data-labels" });
                for (var u = 0; u < t.x.length; u++)
                  if (
                    ((l = t.x[u] + o.offsetX),
                    (c = t.y[u] + o.offsetY + a),
                    !isNaN(l))
                  ) {
                    1 === i && 0 === u && (h = 0),
                      1 === i && 1 === u && (h = 1);
                    var f = s.globals.series[e][h],
                      p = "",
                      g = function (t) {
                        return s.config.dataLabels.formatter(t, {
                          ctx: n.ctx,
                          seriesIndex: e,
                          dataPointIndex: h,
                          w: s,
                        });
                      };
                    if ("bubble" === s.config.chart.type) {
                      (p = g((f = s.globals.seriesZ[e][h]))), (c = t.y[u]);
                      var x = new _(this.ctx),
                        v = x.centerTextInBubble(c, e, h);
                      c = v.y;
                    } else void 0 !== f && (p = g(f));
                    this.plotDataLabelsText({
                      x: l,
                      y: c,
                      text: p,
                      i: e,
                      j: h,
                      parent: d,
                      offsetCorrection: !0,
                      dataLabelsConfig: s.config.dataLabels,
                    });
                  }
                return d;
              },
            },
            {
              key: "plotDataLabelsText",
              value: function (t) {
                var e = this.w,
                  i = new m(this.ctx),
                  n = t.x,
                  a = t.y,
                  s = t.i,
                  r = t.j,
                  o = t.text,
                  l = t.textAnchor,
                  c = t.fontSize,
                  h = t.parent,
                  d = t.dataLabelsConfig,
                  u = t.color,
                  f = t.alwaysDrawDataLabel,
                  p = t.offsetCorrection;
                if (
                  !(
                    Array.isArray(e.config.dataLabels.enabledOnSeries) &&
                    e.config.dataLabels.enabledOnSeries.indexOf(s) < 0
                  )
                ) {
                  var g = { x: n, y: a, drawnextLabel: !0 };
                  p &&
                    (g = this.dataLabelsCorrection(
                      n,
                      a,
                      o,
                      s,
                      r,
                      f,
                      parseInt(d.style.fontSize, 10)
                    )),
                    e.globals.zoomed || ((n = g.x), (a = g.y)),
                    g.textRects &&
                      (n < -10 - g.textRects.width ||
                        n > e.globals.gridWidth + g.textRects.width + 10) &&
                      (o = "");
                  var v = e.globals.dataLabels.style.colors[s];
                  ((("bar" === e.config.chart.type ||
                    "rangeBar" === e.config.chart.type) &&
                    e.config.plotOptions.bar.distributed) ||
                    e.config.dataLabels.distributed) &&
                    (v = e.globals.dataLabels.style.colors[r]),
                    "function" == typeof v &&
                      (v = v({
                        series: e.globals.series,
                        seriesIndex: s,
                        dataPointIndex: r,
                        w: e,
                      })),
                    u && (v = u);
                  var b = d.offsetX,
                    y = d.offsetY;
                  if (
                    (("bar" !== e.config.chart.type &&
                      "rangeBar" !== e.config.chart.type) ||
                      ((b = 0), (y = 0)),
                    g.drawnextLabel)
                  ) {
                    var w = i.drawText({
                      width: 100,
                      height: parseInt(d.style.fontSize, 10),
                      x: n + b,
                      y: a + y,
                      foreColor: v,
                      textAnchor: l || d.textAnchor,
                      text: o,
                      fontSize: c || d.style.fontSize,
                      fontFamily: d.style.fontFamily,
                      fontWeight: d.style.fontWeight || "normal",
                    });
                    if (
                      (w.attr({ class: "apexcharts-datalabel", cx: n, cy: a }),
                      d.dropShadow.enabled)
                    ) {
                      var k = d.dropShadow;
                      new x(this.ctx).dropShadow(w, k);
                    }
                    h.add(w),
                      void 0 === e.globals.lastDrawnDataLabelsIndexes[s] &&
                        (e.globals.lastDrawnDataLabelsIndexes[s] = []),
                      e.globals.lastDrawnDataLabelsIndexes[s].push(r);
                  }
                }
              },
            },
            {
              key: "addBackgroundToDataLabel",
              value: function (t, e) {
                var i = this.w,
                  n = i.config.dataLabels.background,
                  a = n.padding,
                  s = n.padding / 2,
                  r = e.width,
                  o = e.height,
                  l = new m(this.ctx).drawRect(
                    e.x - a,
                    e.y - s / 2,
                    r + 2 * a,
                    o + s,
                    n.borderRadius,
                    "transparent" === i.config.chart.background
                      ? "#fff"
                      : i.config.chart.background,
                    n.opacity,
                    n.borderWidth,
                    n.borderColor
                  );
                return (
                  n.dropShadow.enabled &&
                    new x(this.ctx).dropShadow(l, n.dropShadow),
                  l
                );
              },
            },
            {
              key: "dataLabelsBackground",
              value: function () {
                var t = this.w;
                if ("bubble" !== t.config.chart.type)
                  for (
                    var e = t.globals.dom.baseEl.querySelectorAll(
                        ".apexcharts-datalabels text"
                      ),
                      i = 0;
                    i < e.length;
                    i++
                  ) {
                    var n = e[i],
                      a = n.getBBox(),
                      s = null;
                    if (
                      (a.width &&
                        a.height &&
                        (s = this.addBackgroundToDataLabel(n, a)),
                      s)
                    ) {
                      n.parentNode.insertBefore(s.node, n);
                      var r = n.getAttribute("fill");
                      !t.config.chart.animations.enabled ||
                      t.globals.resized ||
                      t.globals.dataChanged
                        ? s.attr({ fill: r })
                        : s.animate().attr({ fill: r }),
                        n.setAttribute(
                          "fill",
                          t.config.dataLabels.background.foreColor
                        );
                    }
                  }
              },
            },
            {
              key: "bringForward",
              value: function () {
                for (
                  var t = this.w,
                    e = t.globals.dom.baseEl.querySelectorAll(
                      ".apexcharts-datalabels"
                    ),
                    i = t.globals.dom.baseEl.querySelector(
                      ".apexcharts-plot-series:last-child"
                    ),
                    n = 0;
                  n < e.length;
                  n++
                )
                  i && i.insertBefore(e[n], i.nextSibling);
              },
            },
          ]),
          t
        );
      })(),
      P = (function () {
        function t(i) {
          e(this, t), (this.w = i.w), (this.barCtx = i);
        }
        return (
          n(t, [
            {
              key: "handleBarDataLabels",
              value: function (t) {
                var e = t.x,
                  i = t.y,
                  n = t.y1,
                  a = t.y2,
                  s = t.i,
                  r = t.j,
                  o = t.realIndex,
                  l = t.series,
                  c = t.barHeight,
                  h = t.barWidth,
                  d = t.barYPosition,
                  u = t.visibleSeries,
                  f = t.renderedPath,
                  p = this.w,
                  g = new m(this.barCtx.ctx),
                  x = Array.isArray(this.barCtx.strokeWidth)
                    ? this.barCtx.strokeWidth[o]
                    : this.barCtx.strokeWidth,
                  v = e + parseFloat(h * u),
                  b = i + parseFloat(c * u);
                p.globals.isXNumeric &&
                  !p.globals.isBarHorizontal &&
                  ((v = e + parseFloat(h * (u + 1))),
                  (b = i + parseFloat(c * (u + 1)) - x));
                var y,
                  w = e,
                  k = i,
                  A = p.config.dataLabels,
                  S = this.barCtx.barOptions.dataLabels;
                void 0 !== d && this.barCtx.isTimelineBar && ((b = d), (k = d));
                var C = A.offsetX,
                  T = A.offsetY,
                  E = { width: 0, height: 0 };
                if (p.config.dataLabels.enabled) {
                  var _ = this.barCtx.series[s][r];
                  E = g.getTextRects(
                    p.globals.yLabelFormatters[0](_),
                    parseFloat(A.style.fontSize)
                  );
                }
                var L = {
                  x: e,
                  y: i,
                  i: s,
                  j: r,
                  renderedPath: f,
                  bcx: v,
                  bcy: b,
                  barHeight: c,
                  barWidth: h,
                  textRects: E,
                  strokeWidth: x,
                  dataLabelsX: w,
                  dataLabelsY: k,
                  barDataLabelsConfig: S,
                  offX: C,
                  offY: T,
                };
                return (
                  (y = this.barCtx.isHorizontal
                    ? this.calculateBarsDataLabelsPosition(L)
                    : this.calculateColumnsDataLabelsPosition(L)),
                  f.attr({
                    cy: y.bcy,
                    cx: y.bcx,
                    j: r,
                    val: l[s][r],
                    barHeight: c,
                    barWidth: h,
                  }),
                  this.drawCalculatedDataLabels({
                    x: y.dataLabelsX,
                    y: y.dataLabelsY,
                    val: this.barCtx.isTimelineBar ? [n, a] : l[s][r],
                    i: o,
                    j: r,
                    barWidth: h,
                    barHeight: c,
                    textRects: E,
                    dataLabelsConfig: A,
                  })
                );
              },
            },
            {
              key: "calculateColumnsDataLabelsPosition",
              value: function (t) {
                var e,
                  i = this.w,
                  n = t.i,
                  a = t.j,
                  s = t.y,
                  r = t.bcx,
                  o = t.barWidth,
                  l = t.barHeight,
                  c = t.textRects,
                  h = t.dataLabelsY,
                  d = t.barDataLabelsConfig,
                  u = t.strokeWidth,
                  f = t.offX,
                  p = t.offY;
                l = Math.abs(l);
                var g =
                  "vertical" ===
                  i.config.plotOptions.bar.dataLabels.orientation;
                r -= u / 2;
                var x = i.globals.gridWidth / i.globals.dataPoints;
                (e = i.globals.isXNumeric ? r - o / 2 + f : r - x + o / 2 + f),
                  g && (e = e + c.height / 2 - u / 2 - 2);
                var m = this.barCtx.series[n][a] < 0,
                  v = s;
                switch (
                  (this.barCtx.isReversed &&
                    ((v = s - l + (m ? 2 * l : 0)), (s -= l)),
                  d.position)
                ) {
                  case "center":
                    h = g
                      ? m
                        ? v + l / 2 + p
                        : v + l / 2 - p
                      : m
                      ? v - l / 2 + c.height / 2 + p
                      : v + l / 2 + c.height / 2 - p;
                    break;
                  case "bottom":
                    h = g
                      ? m
                        ? v + l + p
                        : v + l - p
                      : m
                      ? v - l + c.height + u + p
                      : v + l - c.height / 2 + u - p;
                    break;
                  case "top":
                    h = g
                      ? m
                        ? v + p
                        : v - p
                      : m
                      ? v - c.height / 2 - p
                      : v + c.height + p;
                }
                return (
                  i.config.chart.stacked ||
                    (h < 0
                      ? (h = 0 + u)
                      : h + c.height / 3 > i.globals.gridHeight &&
                        (h = i.globals.gridHeight - u)),
                  { bcx: r, bcy: s, dataLabelsX: e, dataLabelsY: h }
                );
              },
            },
            {
              key: "calculateBarsDataLabelsPosition",
              value: function (t) {
                var e = this.w,
                  i = t.x,
                  n = t.i,
                  a = t.j,
                  s = t.bcy,
                  r = t.barHeight,
                  o = t.barWidth,
                  l = t.textRects,
                  c = t.dataLabelsX,
                  h = t.strokeWidth,
                  d = t.barDataLabelsConfig,
                  u = t.offX,
                  f = t.offY,
                  p = e.globals.gridHeight / e.globals.dataPoints;
                o = Math.abs(o);
                var g =
                    s -
                    (this.barCtx.isTimelineBar ? 0 : p) +
                    r / 2 +
                    l.height / 2 +
                    f -
                    3,
                  x = this.barCtx.series[n][a] < 0,
                  m = i;
                switch (
                  (this.barCtx.isReversed &&
                    ((m = i + o - (x ? 2 * o : 0)),
                    (i = e.globals.gridWidth - o)),
                  d.position)
                ) {
                  case "center":
                    c = x
                      ? m + o / 2 - u
                      : Math.max(l.width / 2, m - o / 2) + u;
                    break;
                  case "bottom":
                    c = x
                      ? m + o - h - Math.round(l.width / 2) - u
                      : m - o + h + Math.round(l.width / 2) + u;
                    break;
                  case "top":
                    c = x
                      ? m - h + Math.round(l.width / 2) - u
                      : m - h - Math.round(l.width / 2) + u;
                }
                return (
                  e.config.chart.stacked ||
                    (c < 0
                      ? (c = c + l.width + h)
                      : c + l.width / 2 > e.globals.gridWidth &&
                        (c = e.globals.gridWidth - l.width - h)),
                  { bcx: i, bcy: s, dataLabelsX: c, dataLabelsY: g }
                );
              },
            },
            {
              key: "drawCalculatedDataLabels",
              value: function (t) {
                var e = t.x,
                  i = t.y,
                  n = t.val,
                  a = t.i,
                  s = t.j,
                  o = t.textRects,
                  l = t.barHeight,
                  c = t.barWidth,
                  h = t.dataLabelsConfig,
                  d = this.w,
                  u = "rotate(0)";
                "vertical" ===
                  d.config.plotOptions.bar.dataLabels.orientation &&
                  (u = "rotate(-90, ".concat(e, ", ").concat(i, ")"));
                var f = new L(this.barCtx.ctx),
                  p = new m(this.barCtx.ctx),
                  g = h.formatter,
                  x = null,
                  v = d.globals.collapsedSeriesIndices.indexOf(a) > -1;
                if (h.enabled && !v) {
                  x = p.group({
                    class: "apexcharts-data-labels",
                    transform: u,
                  });
                  var b = "";
                  void 0 !== n &&
                    (b = g(n, { seriesIndex: a, dataPointIndex: s, w: d }));
                  var y = d.globals.series[a][s] < 0,
                    w = d.config.plotOptions.bar.dataLabels.position;
                  "vertical" ===
                    d.config.plotOptions.bar.dataLabels.orientation &&
                    ("top" === w && (h.textAnchor = y ? "end" : "start"),
                    "center" === w && (h.textAnchor = "middle"),
                    "bottom" === w && (h.textAnchor = y ? "end" : "start")),
                    this.barCtx.isTimelineBar &&
                      this.barCtx.barOptions.dataLabels.hideOverflowingLabels &&
                      c <
                        p.getTextRects(b, parseFloat(h.style.fontSize)).width &&
                      (b = ""),
                    d.config.chart.stacked &&
                      this.barCtx.barOptions.dataLabels.hideOverflowingLabels &&
                      (this.barCtx.isHorizontal
                        ? ((c > 0 && o.width / 1.6 > c) ||
                            (c < 0 && o.width / 1.6 < c)) &&
                          (b = "")
                        : o.height / 1.6 > l && (b = ""));
                  var k = r({}, h);
                  this.barCtx.isHorizontal &&
                    n < 0 &&
                    ("start" === h.textAnchor
                      ? (k.textAnchor = "end")
                      : "end" === h.textAnchor && (k.textAnchor = "start")),
                    f.plotDataLabelsText({
                      x: e,
                      y: i,
                      text: b,
                      i: a,
                      j: s,
                      parent: x,
                      dataLabelsConfig: k,
                      alwaysDrawDataLabel: !0,
                      offsetCorrection: !0,
                    });
                }
                return x;
              },
            },
          ]),
          t
        );
      })(),
      M = (function () {
        function t(i) {
          e(this, t),
            (this.ctx = i),
            (this.w = i.w),
            (this.legendInactiveClass = "legend-mouseover-inactive");
        }
        return (
          n(t, [
            {
              key: "getAllSeriesEls",
              value: function () {
                return this.w.globals.dom.baseEl.getElementsByClassName(
                  "apexcharts-series"
                );
              },
            },
            {
              key: "getSeriesByName",
              value: function (t) {
                return this.w.globals.dom.baseEl.querySelector(
                  ".apexcharts-inner .apexcharts-series[seriesName='".concat(
                    p.escapeString(t),
                    "']"
                  )
                );
              },
            },
            {
              key: "isSeriesHidden",
              value: function (t) {
                var e = this.getSeriesByName(t),
                  i = parseInt(e.getAttribute("data:realIndex"), 10);
                return {
                  isHidden: e.classList.contains("apexcharts-series-collapsed"),
                  realIndex: i,
                };
              },
            },
            {
              key: "addCollapsedClassToSeries",
              value: function (t, e) {
                var i = this.w;
                function n(i) {
                  for (var n = 0; n < i.length; n++)
                    i[n].index === e &&
                      t.node.classList.add("apexcharts-series-collapsed");
                }
                n(i.globals.collapsedSeries),
                  n(i.globals.ancillaryCollapsedSeries);
              },
            },
            {
              key: "toggleSeries",
              value: function (t) {
                var e = this.isSeriesHidden(t);
                return (
                  this.ctx.legend.legendHelpers.toggleDataSeries(
                    e.realIndex,
                    e.isHidden
                  ),
                  e.isHidden
                );
              },
            },
            {
              key: "showSeries",
              value: function (t) {
                var e = this.isSeriesHidden(t);
                e.isHidden &&
                  this.ctx.legend.legendHelpers.toggleDataSeries(
                    e.realIndex,
                    !0
                  );
              },
            },
            {
              key: "hideSeries",
              value: function (t) {
                var e = this.isSeriesHidden(t);
                e.isHidden ||
                  this.ctx.legend.legendHelpers.toggleDataSeries(
                    e.realIndex,
                    !1
                  );
              },
            },
            {
              key: "resetSeries",
              value: function () {
                var t =
                    !(arguments.length > 0 && void 0 !== arguments[0]) ||
                    arguments[0],
                  e =
                    !(arguments.length > 1 && void 0 !== arguments[1]) ||
                    arguments[1],
                  i =
                    !(arguments.length > 2 && void 0 !== arguments[2]) ||
                    arguments[2],
                  n = this.w,
                  a = p.clone(n.globals.initialSeries);
                (n.globals.previousPaths = []),
                  i
                    ? ((n.globals.collapsedSeries = []),
                      (n.globals.ancillaryCollapsedSeries = []),
                      (n.globals.collapsedSeriesIndices = []),
                      (n.globals.ancillaryCollapsedSeriesIndices = []))
                    : (a = this.emptyCollapsedSeries(a)),
                  (n.config.series = a),
                  t &&
                    (e &&
                      ((n.globals.zoomed = !1),
                      this.ctx.updateHelpers.revertDefaultAxisMinMax()),
                    this.ctx.updateHelpers._updateSeries(
                      a,
                      n.config.chart.animations.dynamicAnimation.enabled
                    ));
              },
            },
            {
              key: "emptyCollapsedSeries",
              value: function (t) {
                for (var e = this.w, i = 0; i < t.length; i++)
                  e.globals.collapsedSeriesIndices.indexOf(i) > -1 &&
                    (t[i].data = []);
                return t;
              },
            },
            {
              key: "toggleSeriesOnHover",
              value: function (t, e) {
                var i = this.w,
                  n = i.globals.dom.baseEl.querySelectorAll(
                    ".apexcharts-series, .apexcharts-datalabels"
                  );
                if ("mousemove" === t.type) {
                  var a = parseInt(e.getAttribute("rel"), 10) - 1,
                    s = null,
                    r = null;
                  i.globals.axisCharts || "radialBar" === i.config.chart.type
                    ? i.globals.axisCharts
                      ? ((s = i.globals.dom.baseEl.querySelector(
                          ".apexcharts-series[data\\:realIndex='".concat(
                            a,
                            "']"
                          )
                        )),
                        (r = i.globals.dom.baseEl.querySelector(
                          ".apexcharts-datalabels[data\\:realIndex='".concat(
                            a,
                            "']"
                          )
                        )))
                      : (s = i.globals.dom.baseEl.querySelector(
                          ".apexcharts-series[rel='".concat(a + 1, "']")
                        ))
                    : (s = i.globals.dom.baseEl.querySelector(
                        ".apexcharts-series[rel='".concat(a + 1, "'] path")
                      ));
                  for (var o = 0; o < n.length; o++)
                    n[o].classList.add(this.legendInactiveClass);
                  null !== s &&
                    (i.globals.axisCharts ||
                      s.parentNode.classList.remove(this.legendInactiveClass),
                    s.classList.remove(this.legendInactiveClass),
                    null !== r && r.classList.remove(this.legendInactiveClass));
                } else if ("mouseout" === t.type)
                  for (var l = 0; l < n.length; l++)
                    n[l].classList.remove(this.legendInactiveClass);
              },
            },
            {
              key: "highlightRangeInSeries",
              value: function (t, e) {
                var i = this,
                  n = this.w,
                  a = n.globals.dom.baseEl.getElementsByClassName(
                    "apexcharts-heatmap-rect"
                  ),
                  s = function (t) {
                    for (var e = 0; e < a.length; e++)
                      a[e].classList[t](i.legendInactiveClass);
                  };
                if ("mousemove" === t.type) {
                  var r = parseInt(e.getAttribute("rel"), 10) - 1;
                  s("add"),
                    (function (t) {
                      for (var e = 0; e < a.length; e++) {
                        var n = parseInt(a[e].getAttribute("val"), 10);
                        n >= t.from &&
                          n <= t.to &&
                          a[e].classList.remove(i.legendInactiveClass);
                      }
                    })(n.config.plotOptions.heatmap.colorScale.ranges[r]);
                } else "mouseout" === t.type && s("remove");
              },
            },
            {
              key: "getActiveConfigSeriesIndex",
              value: function () {
                var t =
                    arguments.length > 0 &&
                    void 0 !== arguments[0] &&
                    arguments[0],
                  e =
                    arguments.length > 1 && void 0 !== arguments[1]
                      ? arguments[1]
                      : "asc",
                  i = this.w,
                  n = 0;
                if (i.config.series.length > 1)
                  for (
                    var a = i.config.series.map(function (e, n) {
                        var a = !1;
                        return (
                          t &&
                            (a =
                              "bar" === i.config.series[n].type ||
                              "column" === i.config.series[n].type),
                          e.data && e.data.length > 0 && !a ? n : -1
                        );
                      }),
                      s = "asc" === e ? 0 : a.length - 1;
                    "asc" === e ? s < a.length : s >= 0;
                    "asc" === e ? s++ : s--
                  )
                    if (-1 !== a[s]) {
                      n = a[s];
                      break;
                    }
                return n;
              },
            },
            {
              key: "getPreviousPaths",
              value: function () {
                var t = this.w;
                function e(e, i, n) {
                  for (
                    var a = e[i].childNodes,
                      s = {
                        type: n,
                        paths: [],
                        realIndex: e[i].getAttribute("data:realIndex"),
                      },
                      r = 0;
                    r < a.length;
                    r++
                  )
                    if (a[r].hasAttribute("pathTo")) {
                      var o = a[r].getAttribute("pathTo");
                      s.paths.push({ d: o });
                    }
                  t.globals.previousPaths.push(s);
                }
                (t.globals.previousPaths = []),
                  [
                    "line",
                    "area",
                    "bar",
                    "rangebar",
                    "candlestick",
                    "radar",
                  ].forEach(function (i) {
                    for (
                      var n,
                        a =
                          ((n = i),
                          t.globals.dom.baseEl.querySelectorAll(
                            ".apexcharts-".concat(
                              n,
                              "-series .apexcharts-series"
                            )
                          )),
                        s = 0;
                      s < a.length;
                      s++
                    )
                      e(a, s, i);
                  }),
                  this.handlePrevBubbleScatterPaths("bubble"),
                  this.handlePrevBubbleScatterPaths("scatter");
                var i = t.globals.dom.baseEl.querySelectorAll(
                  ".apexcharts-".concat(
                    t.config.chart.type,
                    " .apexcharts-series"
                  )
                );
                if (i.length > 0)
                  for (
                    var n = function (e) {
                        for (
                          var i = t.globals.dom.baseEl.querySelectorAll(
                              ".apexcharts-"
                                .concat(
                                  t.config.chart.type,
                                  " .apexcharts-series[data\\:realIndex='"
                                )
                                .concat(e, "'] rect")
                            ),
                            n = [],
                            a = function (t) {
                              var e = function (e) {
                                  return i[t].getAttribute(e);
                                },
                                a = {
                                  x: parseFloat(e("x")),
                                  y: parseFloat(e("y")),
                                  width: parseFloat(e("width")),
                                  height: parseFloat(e("height")),
                                };
                              n.push({
                                rect: a,
                                color: i[t].getAttribute("color"),
                              });
                            },
                            s = 0;
                          s < i.length;
                          s++
                        )
                          a(s);
                        t.globals.previousPaths.push(n);
                      },
                      a = 0;
                    a < i.length;
                    a++
                  )
                    n(a);
                t.globals.axisCharts ||
                  (t.globals.previousPaths = t.globals.series);
              },
            },
            {
              key: "handlePrevBubbleScatterPaths",
              value: function (t) {
                var e = this.w,
                  i = e.globals.dom.baseEl.querySelectorAll(
                    ".apexcharts-".concat(t, "-series .apexcharts-series")
                  );
                if (i.length > 0)
                  for (var n = 0; n < i.length; n++) {
                    for (
                      var a = e.globals.dom.baseEl.querySelectorAll(
                          ".apexcharts-"
                            .concat(
                              t,
                              "-series .apexcharts-series[data\\:realIndex='"
                            )
                            .concat(n, "'] circle")
                        ),
                        s = [],
                        r = 0;
                      r < a.length;
                      r++
                    )
                      s.push({
                        x: a[r].getAttribute("cx"),
                        y: a[r].getAttribute("cy"),
                        r: a[r].getAttribute("r"),
                      });
                    e.globals.previousPaths.push(s);
                  }
              },
            },
            {
              key: "clearPreviousPaths",
              value: function () {
                var t = this.w;
                (t.globals.previousPaths = []),
                  (t.globals.allSeriesCollapsed = !1);
              },
            },
            {
              key: "handleNoData",
              value: function () {
                var t = this.w,
                  e = t.config.noData,
                  i = new m(this.ctx),
                  n = t.globals.svgWidth / 2,
                  a = t.globals.svgHeight / 2,
                  s = "middle";
                if (
                  ((t.globals.noData = !0),
                  (t.globals.animationEnded = !0),
                  "left" === e.align
                    ? ((n = 10), (s = "start"))
                    : "right" === e.align &&
                      ((n = t.globals.svgWidth - 10), (s = "end")),
                  "top" === e.verticalAlign
                    ? (a = 50)
                    : "bottom" === e.verticalAlign &&
                      (a = t.globals.svgHeight - 50),
                  (n += e.offsetX),
                  (a = a + parseInt(e.style.fontSize, 10) + 2 + e.offsetY),
                  void 0 !== e.text && "" !== e.text)
                ) {
                  var r = i.drawText({
                    x: n,
                    y: a,
                    text: e.text,
                    textAnchor: s,
                    fontSize: e.style.fontSize,
                    fontFamily: e.style.fontFamily,
                    foreColor: e.style.color,
                    opacity: 1,
                    class: "apexcharts-text-nodata",
                  });
                  t.globals.dom.Paper.add(r);
                }
              },
            },
            {
              key: "setNullSeriesToZeroValues",
              value: function (t) {
                for (var e = this.w, i = 0; i < t.length; i++)
                  if (0 === t[i].length)
                    for (
                      var n = 0;
                      n < t[e.globals.maxValsInArrayIndex].length;
                      n++
                    )
                      t[i].push(0);
                return t;
              },
            },
            {
              key: "hasAllSeriesEqualX",
              value: function () {
                for (
                  var t = !0, e = this.w, i = this.filteredSeriesX(), n = 0;
                  n < i.length - 1;
                  n++
                )
                  if (i[n][0] !== i[n + 1][0]) {
                    t = !1;
                    break;
                  }
                return (e.globals.allSeriesHasEqualX = t), t;
              },
            },
            {
              key: "filteredSeriesX",
              value: function () {
                return this.w.globals.seriesX.map(function (t) {
                  return t.length > 0 ? t : [];
                });
              },
            },
          ]),
          t
        );
      })(),
      I = (function () {
        function t(i) {
          e(this, t), (this.w = i.w), (this.barCtx = i);
        }
        return (
          n(t, [
            {
              key: "initVariables",
              value: function (t) {
                var e = this.w;
                (this.barCtx.series = t),
                  (this.barCtx.totalItems = 0),
                  (this.barCtx.seriesLen = 0),
                  (this.barCtx.visibleI = -1),
                  (this.barCtx.visibleItems = 1);
                for (var i = 0; i < t.length; i++)
                  if (
                    (t[i].length > 0 &&
                      ((this.barCtx.seriesLen = this.barCtx.seriesLen + 1),
                      (this.barCtx.totalItems += t[i].length)),
                    e.globals.isXNumeric)
                  )
                    for (var n = 0; n < t[i].length; n++)
                      e.globals.seriesX[i][n] > e.globals.minX &&
                        e.globals.seriesX[i][n] < e.globals.maxX &&
                        this.barCtx.visibleItems++;
                  else this.barCtx.visibleItems = e.globals.dataPoints;
                0 === this.barCtx.seriesLen && (this.barCtx.seriesLen = 1),
                  (this.barCtx.zeroSerieses = []),
                  (this.barCtx.radiusOnSeriesNumber = t.length - 1),
                  e.globals.comboCharts || this.checkZeroSeries({ series: t });
              },
            },
            {
              key: "initialPositions",
              value: function () {
                var t,
                  e,
                  i,
                  n,
                  a,
                  s,
                  r,
                  o,
                  l = this.w,
                  c = l.globals.dataPoints;
                this.barCtx.isTimelineBar && (c = l.globals.labels.length);
                var h = this.barCtx.seriesLen;
                if (
                  (l.config.plotOptions.bar.rangeBarGroupRows && (h = 1),
                  this.barCtx.isHorizontal)
                )
                  (a = (i = l.globals.gridHeight / c) / h),
                    l.globals.isXNumeric &&
                      (a =
                        (i = l.globals.gridHeight / this.barCtx.totalItems) /
                        this.barCtx.seriesLen),
                    (a =
                      (a * parseInt(this.barCtx.barOptions.barHeight, 10)) /
                      100),
                    (o =
                      this.barCtx.baseLineInvertedY +
                      l.globals.padHorizontal +
                      (this.barCtx.isReversed ? l.globals.gridWidth : 0) -
                      (this.barCtx.isReversed
                        ? 2 * this.barCtx.baseLineInvertedY
                        : 0)),
                    (e = (i - a * this.barCtx.seriesLen) / 2);
                else {
                  if (
                    ((n = l.globals.gridWidth / this.barCtx.visibleItems),
                    l.config.xaxis.convertedCatToNumeric &&
                      (n = l.globals.gridWidth / l.globals.dataPoints),
                    (s =
                      ((n / this.barCtx.seriesLen) *
                        parseInt(this.barCtx.barOptions.columnWidth, 10)) /
                      100),
                    l.globals.isXNumeric)
                  ) {
                    var d = this.barCtx.xRatio;
                    l.config.xaxis.convertedCatToNumeric &&
                      (d = this.barCtx.initialXRatio),
                      l.globals.minXDiff &&
                        0.5 !== l.globals.minXDiff &&
                        l.globals.minXDiff / d > 0 &&
                        (n = l.globals.minXDiff / d),
                      (s =
                        ((n / this.barCtx.seriesLen) *
                          parseInt(this.barCtx.barOptions.columnWidth, 10)) /
                        100) < 1 && (s = 1);
                  }
                  (r =
                    l.globals.gridHeight -
                    this.barCtx.baseLineY[this.barCtx.yaxisIndex] -
                    (this.barCtx.isReversed ? l.globals.gridHeight : 0) +
                    (this.barCtx.isReversed
                      ? 2 * this.barCtx.baseLineY[this.barCtx.yaxisIndex]
                      : 0)),
                    (t =
                      l.globals.padHorizontal +
                      (n - s * this.barCtx.seriesLen) / 2);
                }
                return {
                  x: t,
                  y: e,
                  yDivision: i,
                  xDivision: n,
                  barHeight: a,
                  barWidth: s,
                  zeroH: r,
                  zeroW: o,
                };
              },
            },
            {
              key: "getPathFillColor",
              value: function (t, e, i, n) {
                var a = this.w,
                  s = new T(this.barCtx.ctx),
                  r = null,
                  o = this.barCtx.barOptions.distributed ? i : e;
                return (
                  this.barCtx.barOptions.colors.ranges.length > 0 &&
                    this.barCtx.barOptions.colors.ranges.map(function (n) {
                      t[e][i] >= n.from && t[e][i] <= n.to && (r = n.color);
                    }),
                  a.config.series[e].data[i] &&
                    a.config.series[e].data[i].fillColor &&
                    (r = a.config.series[e].data[i].fillColor),
                  s.fillPath({
                    seriesNumber: this.barCtx.barOptions.distributed ? o : n,
                    dataPointIndex: i,
                    color: r,
                    value: t[e][i],
                  })
                );
              },
            },
            {
              key: "getStrokeWidth",
              value: function (t, e, i) {
                var n = 0,
                  a = this.w;
                return (
                  void 0 === this.barCtx.series[t][e] ||
                  null === this.barCtx.series[t][e]
                    ? (this.barCtx.isNullValue = !0)
                    : (this.barCtx.isNullValue = !1),
                  a.config.stroke.show &&
                    (this.barCtx.isNullValue ||
                      (n = Array.isArray(this.barCtx.strokeWidth)
                        ? this.barCtx.strokeWidth[i]
                        : this.barCtx.strokeWidth)),
                  n
                );
              },
            },
            {
              key: "barBackground",
              value: function (t) {
                var e = t.j,
                  i = t.i,
                  n = t.x1,
                  a = t.x2,
                  s = t.y1,
                  r = t.y2,
                  o = t.elSeries,
                  l = this.w,
                  c = new m(this.barCtx.ctx),
                  h = new M(this.barCtx.ctx).getActiveConfigSeriesIndex();
                if (
                  this.barCtx.barOptions.colors.backgroundBarColors.length >
                    0 &&
                  h === i
                ) {
                  e >=
                    this.barCtx.barOptions.colors.backgroundBarColors.length &&
                    (e -=
                      this.barCtx.barOptions.colors.backgroundBarColors.length);
                  var d = this.barCtx.barOptions.colors.backgroundBarColors[e],
                    u = c.drawRect(
                      void 0 !== n ? n : 0,
                      void 0 !== s ? s : 0,
                      void 0 !== a ? a : l.globals.gridWidth,
                      void 0 !== r ? r : l.globals.gridHeight,
                      this.barCtx.barOptions.colors.backgroundBarRadius,
                      d,
                      this.barCtx.barOptions.colors.backgroundBarOpacity
                    );
                  o.add(u), u.node.classList.add("apexcharts-backgroundBar");
                }
              },
            },
            {
              key: "getColumnPaths",
              value: function (t) {
                var e = t.barWidth,
                  i = t.barXPosition,
                  n = t.yRatio,
                  a = t.y1,
                  s = t.y2,
                  r = t.strokeWidth,
                  o = t.series,
                  l = t.realIndex,
                  c = t.i,
                  h = t.j,
                  d = t.w,
                  u = new m(this.barCtx.ctx);
                (r = Array.isArray(r) ? r[l] : r) || (r = 0);
                var f = {
                    barWidth: e,
                    strokeWidth: r,
                    yRatio: n,
                    barXPosition: i,
                    y1: a,
                    y2: s,
                  },
                  p = this.getRoundedBars(d, f, o, c, h),
                  g = i,
                  x = i + e,
                  v = u.move(g, a),
                  b = u.move(g, a),
                  y = u.line(x - r, a);
                return (
                  d.globals.previousPaths.length > 0 &&
                    (b = this.barCtx.getPreviousPath(l, h, !1)),
                  (v =
                    v +
                    u.line(g, p.y2) +
                    p.pathWithRadius +
                    u.line(x - r, p.y2) +
                    y +
                    y +
                    "z"),
                  (b = b + u.line(g, a) + y + y + y + y + y + u.line(g, a)),
                  d.config.chart.stacked &&
                    (this.barCtx.yArrj.push(p.y2),
                    this.barCtx.yArrjF.push(Math.abs(a - p.y2)),
                    this.barCtx.yArrjVal.push(this.barCtx.series[c][h])),
                  { pathTo: v, pathFrom: b }
                );
              },
            },
            {
              key: "getBarpaths",
              value: function (t) {
                var e = t.barYPosition,
                  i = t.barHeight,
                  n = t.x1,
                  a = t.x2,
                  s = t.strokeWidth,
                  r = t.series,
                  o = t.realIndex,
                  l = t.i,
                  c = t.j,
                  h = t.w,
                  d = new m(this.barCtx.ctx);
                (s = Array.isArray(s) ? s[o] : s) || (s = 0);
                var u = {
                    barHeight: i,
                    strokeWidth: s,
                    barYPosition: e,
                    x2: a,
                    x1: n,
                  },
                  f = this.getRoundedBars(h, u, r, l, c),
                  p = d.move(n, e),
                  g = d.move(n, e);
                h.globals.previousPaths.length > 0 &&
                  (g = this.barCtx.getPreviousPath(o, c, !1));
                var x = e,
                  v = e + i,
                  b = d.line(n, v - s);
                return (
                  (p =
                    p +
                    d.line(f.x2, x) +
                    f.pathWithRadius +
                    d.line(f.x2, v - s) +
                    b +
                    b +
                    "z"),
                  (g = g + d.line(n, x) + b + b + b + b + b + d.line(n, x)),
                  h.config.chart.stacked &&
                    (this.barCtx.xArrj.push(f.x2),
                    this.barCtx.xArrjF.push(Math.abs(n - f.x2)),
                    this.barCtx.xArrjVal.push(this.barCtx.series[l][c])),
                  { pathTo: p, pathFrom: g }
                );
              },
            },
            {
              key: "getRoundedBars",
              value: function (t, e, i, n, a) {
                var s = new m(this.barCtx.ctx),
                  r = 0,
                  o = t.config.plotOptions.bar.borderRadius,
                  l = Array.isArray(o);
                if (
                  ((r = l ? o[n > o.length - 1 ? o.length - 1 : n] : o),
                  t.config.chart.stacked &&
                    i.length > 1 &&
                    n !== this.barCtx.radiusOnSeriesNumber &&
                    !l &&
                    (r = 0),
                  this.barCtx.isHorizontal)
                ) {
                  var c = "",
                    h = e.x2;
                  if (
                    (Math.abs(e.x1 - e.x2) < r && (r = Math.abs(e.x1 - e.x2)),
                    void 0 !== i[n][a] || null !== i[n][a])
                  ) {
                    var d = this.barCtx.isReversed ? i[n][a] > 0 : i[n][a] < 0;
                    d && (r *= -1),
                      (h -= r),
                      (c =
                        s.quadraticCurve(
                          h + r,
                          e.barYPosition,
                          h + r,
                          e.barYPosition + (d ? -1 * r : r)
                        ) +
                        s.line(
                          h + r,
                          e.barYPosition +
                            e.barHeight -
                            e.strokeWidth -
                            (d ? -1 * r : r)
                        ) +
                        s.quadraticCurve(
                          h + r,
                          e.barYPosition + e.barHeight - e.strokeWidth,
                          h,
                          e.barYPosition + e.barHeight - e.strokeWidth
                        ));
                  }
                  return { pathWithRadius: c, x2: h };
                }
                var u = "",
                  f = e.y2;
                if (
                  (Math.abs(e.y1 - e.y2) < r && (r = Math.abs(e.y1 - e.y2)),
                  void 0 !== i[n][a] || null !== i[n][a])
                ) {
                  var p = i[n][a] < 0;
                  p && (r *= -1),
                    (f += r),
                    (u =
                      s.quadraticCurve(
                        e.barXPosition,
                        f - r,
                        e.barXPosition + (p ? -1 * r : r),
                        f - r
                      ) +
                      s.line(
                        e.barXPosition +
                          e.barWidth -
                          e.strokeWidth -
                          (p ? -1 * r : r),
                        f - r
                      ) +
                      s.quadraticCurve(
                        e.barXPosition + e.barWidth - e.strokeWidth,
                        f - r,
                        e.barXPosition + e.barWidth - e.strokeWidth,
                        f
                      ));
                }
                return { pathWithRadius: u, y2: f };
              },
            },
            {
              key: "checkZeroSeries",
              value: function (t) {
                for (var e = t.series, i = this.w, n = 0; n < e.length; n++) {
                  for (
                    var a = 0, s = 0;
                    s < e[i.globals.maxValsInArrayIndex].length;
                    s++
                  )
                    a += e[n][s];
                  0 === a && this.barCtx.zeroSerieses.push(n);
                }
                for (var r = e.length - 1; r >= 0; r--)
                  this.barCtx.zeroSerieses.indexOf(r) > -1 &&
                    r === this.radiusOnSeriesNumber &&
                    (this.barCtx.radiusOnSeriesNumber -= 1);
                for (var o = e.length - 1; o >= 0; o--)
                  i.globals.collapsedSeriesIndices.indexOf(
                    this.barCtx.radiusOnSeriesNumber
                  ) > -1 && (this.barCtx.radiusOnSeriesNumber -= 1);
              },
            },
            {
              key: "getXForValue",
              value: function (t, e) {
                var i =
                    !(arguments.length > 2 && void 0 !== arguments[2]) ||
                    arguments[2],
                  n = i ? e : null;
                return (
                  null != t &&
                    (n =
                      e +
                      t / this.barCtx.invertedYRatio -
                      2 *
                        (this.barCtx.isReversed
                          ? t / this.barCtx.invertedYRatio
                          : 0)),
                  n
                );
              },
            },
            {
              key: "getYForValue",
              value: function (t, e) {
                var i =
                    !(arguments.length > 2 && void 0 !== arguments[2]) ||
                    arguments[2],
                  n = i ? e : null;
                return (
                  null != t &&
                    (n =
                      e -
                      t / this.barCtx.yRatio[this.barCtx.yaxisIndex] +
                      2 *
                        (this.barCtx.isReversed
                          ? t / this.barCtx.yRatio[this.barCtx.yaxisIndex]
                          : 0)),
                  n
                );
              },
            },
            {
              key: "getGoalValues",
              value: function (t, e, i, n, s) {
                var r = this,
                  o = this.w,
                  l = [];
                return (
                  o.globals.seriesGoals[n] &&
                    o.globals.seriesGoals[n][s] &&
                    Array.isArray(o.globals.seriesGoals[n][s]) &&
                    o.globals.seriesGoals[n][s].forEach(function (n) {
                      var s;
                      l.push(
                        (a(
                          (s = {}),
                          t,
                          "x" === t
                            ? r.getXForValue(n.value, e, !1)
                            : r.getYForValue(n.value, i, !1)
                        ),
                        a(s, "attrs", n),
                        s)
                      );
                    }),
                  l
                );
              },
            },
            {
              key: "drawGoalLine",
              value: function (t) {
                var e = t.barXPosition,
                  i = t.barYPosition,
                  n = t.goalX,
                  a = t.goalY,
                  s = t.barWidth,
                  r = t.barHeight,
                  o = new m(this.barCtx.ctx),
                  l = o.group({ className: "apexcharts-bar-goals-groups" }),
                  c = null;
                return (
                  this.barCtx.isHorizontal
                    ? Array.isArray(n) &&
                      n.forEach(function (t) {
                        var e =
                            void 0 !== t.attrs.strokeHeight
                              ? t.attrs.strokeHeight
                              : r / 2,
                          n = i + e + r / 2;
                        (c = o.drawLine(
                          t.x,
                          n - 2 * e,
                          t.x,
                          n,
                          t.attrs.strokeColor ? t.attrs.strokeColor : void 0,
                          t.attrs.strokeDashArray,
                          t.attrs.strokeWidth ? t.attrs.strokeWidth : 2,
                          t.attrs.strokeLineCap
                        )),
                          l.add(c);
                      })
                    : Array.isArray(a) &&
                      a.forEach(function (t) {
                        var i =
                            void 0 !== t.attrs.strokeWidth
                              ? t.attrs.strokeWidth
                              : s / 2,
                          n = e + i + s / 2;
                        (c = o.drawLine(
                          n - 2 * i,
                          t.y,
                          n,
                          t.y,
                          t.attrs.strokeColor ? t.attrs.strokeColor : void 0,
                          t.attrs.strokeDashArray,
                          t.attrs.strokeHeight ? t.attrs.strokeHeight : 2,
                          t.attrs.strokeLineCap
                        )),
                          l.add(c);
                      }),
                  l
                );
              },
            },
          ]),
          t
        );
      })(),
      O = (function () {
        function t(i, n) {
          e(this, t), (this.ctx = i), (this.w = i.w);
          var a = this.w;
          (this.barOptions = a.config.plotOptions.bar),
            (this.isHorizontal = this.barOptions.horizontal),
            (this.strokeWidth = a.config.stroke.width),
            (this.isNullValue = !1),
            (this.isTimelineBar =
              "datetime" === a.config.xaxis.type &&
              a.globals.seriesRangeBarTimeline.length),
            (this.xyRatios = n),
            null !== this.xyRatios &&
              ((this.xRatio = n.xRatio),
              (this.initialXRatio = n.initialXRatio),
              (this.yRatio = n.yRatio),
              (this.invertedXRatio = n.invertedXRatio),
              (this.invertedYRatio = n.invertedYRatio),
              (this.baseLineY = n.baseLineY),
              (this.baseLineInvertedY = n.baseLineInvertedY)),
            (this.yaxisIndex = 0),
            (this.seriesLen = 0),
            (this.barHelpers = new I(this));
        }
        return (
          n(t, [
            {
              key: "draw",
              value: function (t, e) {
                var i = this.w,
                  n = new m(this.ctx),
                  a = new y(this.ctx, i);
                (t = a.getLogSeries(t)),
                  (this.series = t),
                  (this.yRatio = a.getLogYRatios(this.yRatio)),
                  this.barHelpers.initVariables(t);
                var s = n.group({
                  class: "apexcharts-bar-series apexcharts-plot-series",
                });
                i.config.dataLabels.enabled &&
                  this.totalItems > this.barOptions.dataLabels.maxItems &&
                  console.warn(
                    "WARNING: DataLabels are enabled but there are too many to display. This may cause performance issue when rendering."
                  );
                for (var o = 0, l = 0; o < t.length; o++, l++) {
                  var c,
                    h,
                    d,
                    u,
                    f = void 0,
                    g = void 0,
                    x = [],
                    v = [],
                    b = i.globals.comboCharts ? e[o] : o,
                    w = n.group({
                      class: "apexcharts-series",
                      rel: o + 1,
                      seriesName: p.escapeString(i.globals.seriesNames[b]),
                      "data:realIndex": b,
                    });
                  this.ctx.series.addCollapsedClassToSeries(w, b),
                    t[o].length > 0 && (this.visibleI = this.visibleI + 1);
                  var k = 0,
                    A = 0;
                  this.yRatio.length > 1 && (this.yaxisIndex = b),
                    (this.isReversed =
                      i.config.yaxis[this.yaxisIndex] &&
                      i.config.yaxis[this.yaxisIndex].reversed);
                  var S = this.barHelpers.initialPositions();
                  (g = S.y),
                    (k = S.barHeight),
                    (h = S.yDivision),
                    (u = S.zeroW),
                    (f = S.x),
                    (A = S.barWidth),
                    (c = S.xDivision),
                    (d = S.zeroH),
                    this.horizontal || v.push(f + A / 2);
                  for (
                    var C = n.group({
                        class: "apexcharts-datalabels",
                        "data:realIndex": b,
                      }),
                      T = n.group({
                        class: "apexcharts-bar-goals-markers",
                        style: "pointer-events: none",
                      }),
                      E = 0;
                    E < i.globals.dataPoints;
                    E++
                  ) {
                    var _ = this.barHelpers.getStrokeWidth(o, E, b),
                      L = null,
                      P = {
                        indexes: { i: o, j: E, realIndex: b, bc: l },
                        x: f,
                        y: g,
                        strokeWidth: _,
                        elSeries: w,
                      };
                    this.isHorizontal
                      ? ((L = this.drawBarPaths(
                          r(
                            r({}, P),
                            {},
                            { barHeight: k, zeroW: u, yDivision: h }
                          )
                        )),
                        (A = this.series[o][E] / this.invertedYRatio))
                      : ((L = this.drawColumnPaths(
                          r(
                            r({}, P),
                            {},
                            { xDivision: c, barWidth: A, zeroH: d }
                          )
                        )),
                        (k = this.series[o][E] / this.yRatio[this.yaxisIndex]));
                    var M = this.barHelpers.drawGoalLine({
                      barXPosition: L.barXPosition,
                      barYPosition: L.barYPosition,
                      goalX: L.goalX,
                      goalY: L.goalY,
                      barHeight: k,
                      barWidth: A,
                    });
                    M && T.add(M),
                      (g = L.y),
                      (f = L.x),
                      E > 0 && v.push(f + A / 2),
                      x.push(g);
                    var I = this.barHelpers.getPathFillColor(t, o, E, b);
                    this.renderSeries({
                      realIndex: b,
                      pathFill: I,
                      j: E,
                      i: o,
                      pathFrom: L.pathFrom,
                      pathTo: L.pathTo,
                      strokeWidth: _,
                      elSeries: w,
                      x: f,
                      y: g,
                      series: t,
                      barHeight: k,
                      barWidth: A,
                      elDataLabelsWrap: C,
                      elGoalsMarkers: T,
                      visibleSeries: this.visibleI,
                      type: "bar",
                    });
                  }
                  (i.globals.seriesXvalues[b] = v),
                    (i.globals.seriesYvalues[b] = x),
                    s.add(w);
                }
                return s;
              },
            },
            {
              key: "renderSeries",
              value: function (t) {
                var e = t.realIndex,
                  i = t.pathFill,
                  n = t.lineFill,
                  a = t.j,
                  s = t.i,
                  r = t.pathFrom,
                  o = t.pathTo,
                  l = t.strokeWidth,
                  c = t.elSeries,
                  h = t.x,
                  d = t.y,
                  u = t.y1,
                  f = t.y2,
                  p = t.series,
                  g = t.barHeight,
                  v = t.barWidth,
                  b = t.barYPosition,
                  y = t.elDataLabelsWrap,
                  w = t.elGoalsMarkers,
                  k = t.visibleSeries,
                  A = t.type,
                  S = this.w,
                  C = new m(this.ctx);
                n ||
                  (n = this.barOptions.distributed
                    ? S.globals.stroke.colors[a]
                    : S.globals.stroke.colors[e]),
                  S.config.series[s].data[a] &&
                    S.config.series[s].data[a].strokeColor &&
                    (n = S.config.series[s].data[a].strokeColor),
                  this.isNullValue && (i = "none");
                var T =
                    ((a / S.config.chart.animations.animateGradually.delay) *
                      (S.config.chart.animations.speed /
                        S.globals.dataPoints)) /
                    2.4,
                  E = C.renderPaths({
                    i: s,
                    j: a,
                    realIndex: e,
                    pathFrom: r,
                    pathTo: o,
                    stroke: n,
                    strokeWidth: l,
                    strokeLineCap: S.config.stroke.lineCap,
                    fill: i,
                    animationDelay: T,
                    initialSpeed: S.config.chart.animations.speed,
                    dataChangeSpeed:
                      S.config.chart.animations.dynamicAnimation.speed,
                    className: "apexcharts-".concat(A, "-area"),
                  });
                E.attr(
                  "clip-path",
                  "url(#gridRectMask".concat(S.globals.cuid, ")")
                );
                var _ = S.config.forecastDataPoints;
                _.count > 0 &&
                  a >= S.globals.dataPoints - _.count &&
                  (E.node.setAttribute("stroke-dasharray", _.dashArray),
                  E.node.setAttribute("stroke-width", _.strokeWidth),
                  E.node.setAttribute("fill-opacity", _.fillOpacity)),
                  void 0 !== u &&
                    void 0 !== f &&
                    (E.attr("data-range-y1", u), E.attr("data-range-y2", f)),
                  new x(this.ctx).setSelectionFilter(E, e, a),
                  c.add(E);
                var L = new P(this).handleBarDataLabels({
                  x: h,
                  y: d,
                  y1: u,
                  y2: f,
                  i: s,
                  j: a,
                  series: p,
                  realIndex: e,
                  barHeight: g,
                  barWidth: v,
                  barYPosition: b,
                  renderedPath: E,
                  visibleSeries: k,
                });
                return null !== L && y.add(L), c.add(y), w && c.add(w), c;
              },
            },
            {
              key: "drawBarPaths",
              value: function (t) {
                var e = t.indexes,
                  i = t.barHeight,
                  n = t.strokeWidth,
                  a = t.zeroW,
                  s = t.x,
                  r = t.y,
                  o = t.yDivision,
                  l = t.elSeries,
                  c = this.w,
                  h = e.i,
                  d = e.j;
                c.globals.isXNumeric &&
                  (r =
                    (c.globals.seriesX[h][d] - c.globals.minX) /
                      this.invertedXRatio -
                    i);
                var u = r + i * this.visibleI;
                s = this.barHelpers.getXForValue(this.series[h][d], a);
                var f = this.barHelpers.getBarpaths({
                  barYPosition: u,
                  barHeight: i,
                  x1: a,
                  x2: s,
                  strokeWidth: n,
                  series: this.series,
                  realIndex: e.realIndex,
                  i: h,
                  j: d,
                  w: c,
                });
                return (
                  c.globals.isXNumeric || (r += o),
                  this.barHelpers.barBackground({
                    j: d,
                    i: h,
                    y1: u - i * this.visibleI,
                    y2: i * this.seriesLen,
                    elSeries: l,
                  }),
                  {
                    pathTo: f.pathTo,
                    pathFrom: f.pathFrom,
                    x: s,
                    y: r,
                    goalX: this.barHelpers.getGoalValues("x", a, null, h, d),
                    barYPosition: u,
                  }
                );
              },
            },
            {
              key: "drawColumnPaths",
              value: function (t) {
                var e = t.indexes,
                  i = t.x,
                  n = t.y,
                  a = t.xDivision,
                  s = t.barWidth,
                  r = t.zeroH,
                  o = t.strokeWidth,
                  l = t.elSeries,
                  c = this.w,
                  h = e.realIndex,
                  d = e.i,
                  u = e.j,
                  f = e.bc;
                if (c.globals.isXNumeric) {
                  var p = h;
                  c.globals.seriesX[h].length ||
                    (p = c.globals.maxValsInArrayIndex),
                    (i =
                      (c.globals.seriesX[p][u] - c.globals.minX) / this.xRatio -
                      (s * this.seriesLen) / 2);
                }
                var g = i + s * this.visibleI;
                n = this.barHelpers.getYForValue(this.series[d][u], r);
                var x = this.barHelpers.getColumnPaths({
                  barXPosition: g,
                  barWidth: s,
                  y1: r,
                  y2: n,
                  strokeWidth: o,
                  series: this.series,
                  realIndex: e.realIndex,
                  i: d,
                  j: u,
                  w: c,
                });
                return (
                  c.globals.isXNumeric || (i += a),
                  this.barHelpers.barBackground({
                    bc: f,
                    j: u,
                    i: d,
                    x1: g - o / 2 - s * this.visibleI,
                    x2: s * this.seriesLen + o / 2,
                    elSeries: l,
                  }),
                  {
                    pathTo: x.pathTo,
                    pathFrom: x.pathFrom,
                    x: i,
                    y: n,
                    goalY: this.barHelpers.getGoalValues("y", null, r, d, u),
                    barXPosition: g,
                  }
                );
              },
            },
            {
              key: "getPreviousPath",
              value: function (t, e) {
                for (
                  var i, n = this.w, a = 0;
                  a < n.globals.previousPaths.length;
                  a++
                ) {
                  var s = n.globals.previousPaths[a];
                  s.paths &&
                    s.paths.length > 0 &&
                    parseInt(s.realIndex, 10) === parseInt(t, 10) &&
                    void 0 !== n.globals.previousPaths[a].paths[e] &&
                    (i = n.globals.previousPaths[a].paths[e].d);
                }
                return i;
              },
            },
          ]),
          t
        );
      })(),
      D = (function () {
        function t(i) {
          e(this, t),
            (this.ctx = i),
            (this.w = i.w),
            (this.months31 = [1, 3, 5, 7, 8, 10, 12]),
            (this.months30 = [2, 4, 6, 9, 11]),
            (this.daysCntOfYear = [
              0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334,
            ]);
        }
        return (
          n(t, [
            {
              key: "isValidDate",
              value: function (t) {
                return !isNaN(this.parseDate(t));
              },
            },
            {
              key: "getTimeStamp",
              value: function (t) {
                return Date.parse(t)
                  ? this.w.config.xaxis.labels.datetimeUTC
                    ? new Date(
                        new Date(t).toISOString().substr(0, 25)
                      ).getTime()
                    : new Date(t).getTime()
                  : t;
              },
            },
            {
              key: "getDate",
              value: function (t) {
                return this.w.config.xaxis.labels.datetimeUTC
                  ? new Date(new Date(t).toUTCString())
                  : new Date(t);
              },
            },
            {
              key: "parseDate",
              value: function (t) {
                var e = Date.parse(t);
                if (!isNaN(e)) return this.getTimeStamp(t);
                var i = Date.parse(
                  t.replace(/-/g, "/").replace(/[a-z]+/gi, " ")
                );
                return this.getTimeStamp(i);
              },
            },
            {
              key: "parseDateWithTimezone",
              value: function (t) {
                return Date.parse(
                  t.replace(/-/g, "/").replace(/[a-z]+/gi, " ")
                );
              },
            },
            {
              key: "formatDate",
              value: function (t, e) {
                var i = this.w.globals.locale,
                  n = this.w.config.xaxis.labels.datetimeUTC,
                  a = ["\0"].concat(u(i.months)),
                  s = [""].concat(u(i.shortMonths)),
                  r = [""].concat(u(i.days)),
                  o = [""].concat(u(i.shortDays));
                function l(t, e) {
                  var i = t + "";
                  for (e = e || 2; i.length < e; ) i = "0" + i;
                  return i;
                }
                var c = n ? t.getUTCFullYear() : t.getFullYear();
                e = (e = (e = e.replace(/(^|[^\\])yyyy+/g, "$1" + c)).replace(
                  /(^|[^\\])yy/g,
                  "$1" + c.toString().substr(2, 2)
                )).replace(/(^|[^\\])y/g, "$1" + c);
                var h = (n ? t.getUTCMonth() : t.getMonth()) + 1;
                e = (e = (e = (e = e.replace(
                  /(^|[^\\])MMMM+/g,
                  "$1" + a[0]
                )).replace(/(^|[^\\])MMM/g, "$1" + s[0])).replace(
                  /(^|[^\\])MM/g,
                  "$1" + l(h)
                )).replace(/(^|[^\\])M/g, "$1" + h);
                var d = n ? t.getUTCDate() : t.getDate();
                e = (e = (e = (e = e.replace(
                  /(^|[^\\])dddd+/g,
                  "$1" + r[0]
                )).replace(/(^|[^\\])ddd/g, "$1" + o[0])).replace(
                  /(^|[^\\])dd/g,
                  "$1" + l(d)
                )).replace(/(^|[^\\])d/g, "$1" + d);
                var f = n ? t.getUTCHours() : t.getHours(),
                  p = f > 12 ? f - 12 : 0 === f ? 12 : f;
                e = (e = (e = (e = e.replace(
                  /(^|[^\\])HH+/g,
                  "$1" + l(f)
                )).replace(/(^|[^\\])H/g, "$1" + f)).replace(
                  /(^|[^\\])hh+/g,
                  "$1" + l(p)
                )).replace(/(^|[^\\])h/g, "$1" + p);
                var g = n ? t.getUTCMinutes() : t.getMinutes();
                e = (e = e.replace(/(^|[^\\])mm+/g, "$1" + l(g))).replace(
                  /(^|[^\\])m/g,
                  "$1" + g
                );
                var x = n ? t.getUTCSeconds() : t.getSeconds();
                e = (e = e.replace(/(^|[^\\])ss+/g, "$1" + l(x))).replace(
                  /(^|[^\\])s/g,
                  "$1" + x
                );
                var m = n ? t.getUTCMilliseconds() : t.getMilliseconds();
                (e = e.replace(/(^|[^\\])fff+/g, "$1" + l(m, 3))),
                  (m = Math.round(m / 10)),
                  (e = e.replace(/(^|[^\\])ff/g, "$1" + l(m))),
                  (m = Math.round(m / 10));
                var v = f < 12 ? "AM" : "PM";
                e = (e = (e = e.replace(/(^|[^\\])f/g, "$1" + m)).replace(
                  /(^|[^\\])TT+/g,
                  "$1" + v
                )).replace(/(^|[^\\])T/g, "$1" + v.charAt(0));
                var b = v.toLowerCase();
                e = (e = e.replace(/(^|[^\\])tt+/g, "$1" + b)).replace(
                  /(^|[^\\])t/g,
                  "$1" + b.charAt(0)
                );
                var y = -t.getTimezoneOffset(),
                  w = n || !y ? "Z" : y > 0 ? "+" : "-";
                if (!n) {
                  var k = (y = Math.abs(y)) % 60;
                  w += l(Math.floor(y / 60)) + ":" + l(k);
                }
                e = e.replace(/(^|[^\\])K/g, "$1" + w);
                var A = (n ? t.getUTCDay() : t.getDay()) + 1;
                return (e = (e = (e = (e = e.replace(
                  new RegExp(r[0], "g"),
                  r[A]
                )).replace(new RegExp(o[0], "g"), o[A])).replace(
                  new RegExp(a[0], "g"),
                  a[h]
                )).replace(new RegExp(s[0], "g"), s[h])).replace(
                  /\\(.)/g,
                  "$1"
                );
              },
            },
            {
              key: "getTimeUnitsfromTimestamp",
              value: function (t, e, i) {
                var n = this.w;
                void 0 !== n.config.xaxis.min && (t = n.config.xaxis.min),
                  void 0 !== n.config.xaxis.max && (e = n.config.xaxis.max);
                var a = this.getDate(t),
                  s = this.getDate(e),
                  r = this.formatDate(a, "yyyy MM dd HH mm ss fff").split(" "),
                  o = this.formatDate(s, "yyyy MM dd HH mm ss fff").split(" ");
                return {
                  minMillisecond: parseInt(r[6], 10),
                  maxMillisecond: parseInt(o[6], 10),
                  minSecond: parseInt(r[5], 10),
                  maxSecond: parseInt(o[5], 10),
                  minMinute: parseInt(r[4], 10),
                  maxMinute: parseInt(o[4], 10),
                  minHour: parseInt(r[3], 10),
                  maxHour: parseInt(o[3], 10),
                  minDate: parseInt(r[2], 10),
                  maxDate: parseInt(o[2], 10),
                  minMonth: parseInt(r[1], 10) - 1,
                  maxMonth: parseInt(o[1], 10) - 1,
                  minYear: parseInt(r[0], 10),
                  maxYear: parseInt(o[0], 10),
                };
              },
            },
            {
              key: "isLeapYear",
              value: function (t) {
                return (t % 4 == 0 && t % 100 != 0) || t % 400 == 0;
              },
            },
            {
              key: "calculcateLastDaysOfMonth",
              value: function (t, e, i) {
                return this.determineDaysOfMonths(t, e) - i;
              },
            },
            {
              key: "determineDaysOfYear",
              value: function (t) {
                var e = 365;
                return this.isLeapYear(t) && (e = 366), e;
              },
            },
            {
              key: "determineRemainingDaysOfYear",
              value: function (t, e, i) {
                var n = this.daysCntOfYear[e] + i;
                return e > 1 && this.isLeapYear() && n++, n;
              },
            },
            {
              key: "determineDaysOfMonths",
              value: function (t, e) {
                var i = 30;
                switch (((t = p.monthMod(t)), !0)) {
                  case this.months30.indexOf(t) > -1:
                    2 === t && (i = this.isLeapYear(e) ? 29 : 28);
                    break;
                  case this.months31.indexOf(t) > -1:
                  default:
                    i = 31;
                }
                return i;
              },
            },
          ]),
          t
        );
      })(),
      z = (function (t) {
        o(a, t);
        var i = d(a);
        function a() {
          return e(this, a), i.apply(this, arguments);
        }
        return (
          n(a, [
            {
              key: "draw",
              value: function (t, e) {
                var i = this.w,
                  n = new m(this.ctx);
                (this.rangeBarOptions = this.w.config.plotOptions.rangeBar),
                  (this.series = t),
                  (this.seriesRangeStart = i.globals.seriesRangeStart),
                  (this.seriesRangeEnd = i.globals.seriesRangeEnd),
                  this.barHelpers.initVariables(t);
                for (
                  var a = n.group({
                      class:
                        "apexcharts-rangebar-series apexcharts-plot-series",
                    }),
                    s = 0;
                  s < t.length;
                  s++
                ) {
                  var o,
                    l,
                    c,
                    h = void 0,
                    d = void 0,
                    u = void 0,
                    f = i.globals.comboCharts ? e[s] : s,
                    g = n.group({
                      class: "apexcharts-series",
                      seriesName: p.escapeString(i.globals.seriesNames[f]),
                      rel: s + 1,
                      "data:realIndex": f,
                    });
                  t[s].length > 0 && (this.visibleI = this.visibleI + 1);
                  var x = 0,
                    v = 0;
                  this.yRatio.length > 1 && (this.yaxisIndex = f);
                  var b = this.barHelpers.initialPositions();
                  (d = b.y),
                    (c = b.zeroW),
                    (h = b.x),
                    (v = b.barWidth),
                    (o = b.xDivision),
                    (l = b.zeroH);
                  for (
                    var y = n.group({
                        class: "apexcharts-datalabels",
                        "data:realIndex": f,
                      }),
                      w = n.group({
                        class: "apexcharts-rangebar-goals-markers",
                        style: "pointer-events: none",
                      }),
                      k = 0;
                    k < i.globals.dataPoints;
                    k++
                  ) {
                    var A = this.barHelpers.getStrokeWidth(s, k, f),
                      S = this.seriesRangeStart[s][k],
                      C = this.seriesRangeEnd[s][k],
                      T = null,
                      E = null,
                      _ = { x: h, y: d, strokeWidth: A, elSeries: g };
                    if (
                      ((u = b.yDivision), (x = b.barHeight), this.isHorizontal)
                    ) {
                      E = d + x * this.visibleI;
                      var L = this.seriesLen;
                      i.config.plotOptions.bar.rangeBarGroupRows && (L = 1);
                      var P = (u - x * L) / 2;
                      if (void 0 === i.config.series[s].data[k]) break;
                      if (this.isTimelineBar && i.config.series[s].data[k].x) {
                        var M = this.detectOverlappingBars({
                          i: s,
                          j: k,
                          barYPosition: E,
                          srty: P,
                          barHeight: x,
                          yDivision: u,
                          initPositions: b,
                        });
                        (x = M.barHeight), (E = M.barYPosition);
                      }
                      v = (T = this.drawRangeBarPaths(
                        r(
                          {
                            indexes: { i: s, j: k, realIndex: f },
                            barHeight: x,
                            barYPosition: E,
                            zeroW: c,
                            yDivision: u,
                            y1: S,
                            y2: C,
                          },
                          _
                        )
                      )).barWidth;
                    } else
                      x = (T = this.drawRangeColumnPaths(
                        r(
                          {
                            indexes: { i: s, j: k, realIndex: f },
                            zeroH: l,
                            barWidth: v,
                            xDivision: o,
                          },
                          _
                        )
                      )).barHeight;
                    var I = this.barHelpers.drawGoalLine({
                      barXPosition: T.barXPosition,
                      barYPosition: E,
                      goalX: T.goalX,
                      goalY: T.goalY,
                      barHeight: x,
                      barWidth: v,
                    });
                    I && w.add(I), (d = T.y), (h = T.x);
                    var O = this.barHelpers.getPathFillColor(t, s, k, f),
                      D = i.globals.stroke.colors[f];
                    this.renderSeries({
                      realIndex: f,
                      pathFill: O,
                      lineFill: D,
                      j: k,
                      i: s,
                      x: h,
                      y: d,
                      y1: S,
                      y2: C,
                      pathFrom: T.pathFrom,
                      pathTo: T.pathTo,
                      strokeWidth: A,
                      elSeries: g,
                      series: t,
                      barHeight: x,
                      barYPosition: E,
                      barWidth: v,
                      elDataLabelsWrap: y,
                      elGoalsMarkers: w,
                      visibleSeries: this.visibleI,
                      type: "rangebar",
                    });
                  }
                  a.add(g);
                }
                return a;
              },
            },
            {
              key: "detectOverlappingBars",
              value: function (t) {
                var e = t.i,
                  i = t.j,
                  n = t.barYPosition,
                  a = t.srty,
                  s = t.barHeight,
                  r = t.yDivision,
                  o = t.initPositions,
                  l = this.w,
                  c = [],
                  h = l.config.series[e].data[i].rangeName,
                  d = l.config.series[e].data[i].x,
                  u = l.globals.labels.indexOf(d),
                  f = l.globals.seriesRangeBarTimeline[e].findIndex(function (
                    t
                  ) {
                    return t.x === d && t.overlaps.length > 0;
                  });
                return (
                  (n = l.config.plotOptions.bar.rangeBarGroupRows
                    ? a + r * u
                    : a + s * this.visibleI + r * u),
                  f > -1 &&
                    !l.config.plotOptions.bar.rangeBarOverlap &&
                    (c =
                      l.globals.seriesRangeBarTimeline[e][f].overlaps).indexOf(
                      h
                    ) > -1 &&
                    (n =
                      (s = o.barHeight / c.length) * this.visibleI +
                      (r * (100 - parseInt(this.barOptions.barHeight, 10))) /
                        100 /
                        2 +
                      s * (this.visibleI + c.indexOf(h)) +
                      r * u),
                  { barYPosition: n, barHeight: s }
                );
              },
            },
            {
              key: "drawRangeColumnPaths",
              value: function (t) {
                var e = t.indexes,
                  i = t.x;
                t.strokeWidth;
                var n = t.xDivision,
                  a = t.barWidth,
                  s = t.zeroH,
                  r = this.w,
                  o = e.i,
                  l = e.j,
                  c = this.yRatio[this.yaxisIndex],
                  h = e.realIndex,
                  d = this.getRangeValue(h, l),
                  u = Math.min(d.start, d.end),
                  f = Math.max(d.start, d.end);
                r.globals.isXNumeric &&
                  (i =
                    (r.globals.seriesX[o][l] - r.globals.minX) / this.xRatio -
                    a / 2);
                var p = i + a * this.visibleI;
                void 0 === this.series[o][l] || null === this.series[o][l]
                  ? (u = s)
                  : ((u = s - u / c), (f = s - f / c));
                var g = Math.abs(f - u),
                  x = this.barHelpers.getColumnPaths({
                    barXPosition: p,
                    barWidth: a,
                    y1: u,
                    y2: f,
                    strokeWidth: this.strokeWidth,
                    series: this.seriesRangeEnd,
                    realIndex: e.realIndex,
                    i: h,
                    j: l,
                    w: r,
                  });
                return (
                  r.globals.isXNumeric || (i += n),
                  {
                    pathTo: x.pathTo,
                    pathFrom: x.pathFrom,
                    barHeight: g,
                    x: i,
                    y: f,
                    goalY: this.barHelpers.getGoalValues("y", null, s, o, l),
                    barXPosition: p,
                  }
                );
              },
            },
            {
              key: "drawRangeBarPaths",
              value: function (t) {
                var e = t.indexes,
                  i = t.y,
                  n = t.y1,
                  a = t.y2,
                  s = t.yDivision,
                  r = t.barHeight,
                  o = t.barYPosition,
                  l = t.zeroW,
                  c = this.w,
                  h = l + n / this.invertedYRatio,
                  d = l + a / this.invertedYRatio,
                  u = Math.abs(d - h),
                  f = this.barHelpers.getBarpaths({
                    barYPosition: o,
                    barHeight: r,
                    x1: h,
                    x2: d,
                    strokeWidth: this.strokeWidth,
                    series: this.seriesRangeEnd,
                    i: e.realIndex,
                    realIndex: e.realIndex,
                    j: e.j,
                    w: c,
                  });
                return (
                  c.globals.isXNumeric || (i += s),
                  {
                    pathTo: f.pathTo,
                    pathFrom: f.pathFrom,
                    barWidth: u,
                    x: d,
                    goalX: this.barHelpers.getGoalValues(
                      "x",
                      l,
                      null,
                      e.realIndex,
                      e.j
                    ),
                    y: i,
                  }
                );
              },
            },
            {
              key: "getRangeValue",
              value: function (t, e) {
                var i = this.w;
                return {
                  start: i.globals.seriesRangeStart[t][e],
                  end: i.globals.seriesRangeEnd[t][e],
                };
              },
            },
            {
              key: "getTooltipValues",
              value: function (t) {
                var e = t.ctx,
                  i = t.seriesIndex,
                  n = t.dataPointIndex,
                  a = t.y1,
                  s = t.y2,
                  r = t.w,
                  o = r.globals.seriesRangeStart[i][n],
                  l = r.globals.seriesRangeEnd[i][n],
                  c = r.globals.labels[n],
                  h = r.config.series[i].name ? r.config.series[i].name : "",
                  d = r.config.tooltip.y.formatter,
                  u = r.config.tooltip.y.title.formatter,
                  f = {
                    w: r,
                    seriesIndex: i,
                    dataPointIndex: n,
                    start: o,
                    end: l,
                  };
                "function" == typeof u && (h = u(h, f)),
                  Number.isFinite(a) &&
                    Number.isFinite(s) &&
                    ((o = a),
                    (l = s),
                    r.config.series[i].data[n].x &&
                      (c = r.config.series[i].data[n].x + ":"),
                    "function" == typeof d && (c = d(c, f)));
                var p = "",
                  g = "",
                  x = r.globals.colors[i];
                if (void 0 === r.config.tooltip.x.formatter)
                  if ("datetime" === r.config.xaxis.type) {
                    var m = new D(e);
                    (p = m.formatDate(m.getDate(o), r.config.tooltip.x.format)),
                      (g = m.formatDate(
                        m.getDate(l),
                        r.config.tooltip.x.format
                      ));
                  } else (p = o), (g = l);
                else
                  (p = r.config.tooltip.x.formatter(o)),
                    (g = r.config.tooltip.x.formatter(l));
                return {
                  start: o,
                  end: l,
                  startVal: p,
                  endVal: g,
                  ylabel: c,
                  color: x,
                  seriesName: h,
                };
              },
            },
            {
              key: "buildCustomTooltipHTML",
              value: function (t) {
                return (
                  '<div class="apexcharts-tooltip-rangebar"><div> <span class="series-name" style="color: ' +
                  t.color +
                  '">' +
                  (t.seriesName || "") +
                  '</span></div><div> <span class="category">' +
                  t.ylabel +
                  ' </span> <span class="value start-value">' +
                  t.start +
                  '</span> <span class="separator">-</span> <span class="value end-value">' +
                  t.end +
                  "</span></div></div>"
                );
              },
            },
          ]),
          a
        );
      })(O),
      N = (function () {
        function t(i) {
          e(this, t), (this.opts = i);
        }
        return (
          n(t, [
            {
              key: "line",
              value: function () {
                return {
                  chart: { animations: { easing: "swing" } },
                  dataLabels: { enabled: !1 },
                  stroke: { width: 5, curve: "straight" },
                  markers: { size: 0, hover: { sizeOffset: 6 } },
                  xaxis: { crosshairs: { width: 1 } },
                };
              },
            },
            {
              key: "sparkline",
              value: function (t) {
                return (
                  (this.opts.yaxis[0].show = !1),
                  (this.opts.yaxis[0].title.text = ""),
                  (this.opts.yaxis[0].axisBorder.show = !1),
                  (this.opts.yaxis[0].axisTicks.show = !1),
                  (this.opts.yaxis[0].floating = !0),
                  p.extend(t, {
                    grid: {
                      show: !1,
                      padding: { left: 0, right: 0, top: 0, bottom: 0 },
                    },
                    legend: { show: !1 },
                    xaxis: {
                      labels: { show: !1 },
                      tooltip: { enabled: !1 },
                      axisBorder: { show: !1 },
                      axisTicks: { show: !1 },
                    },
                    chart: { toolbar: { show: !1 }, zoom: { enabled: !1 } },
                    dataLabels: { enabled: !1 },
                  })
                );
              },
            },
            {
              key: "bar",
              value: function () {
                return {
                  chart: { stacked: !1, animations: { easing: "swing" } },
                  plotOptions: { bar: { dataLabels: { position: "center" } } },
                  dataLabels: {
                    style: { colors: ["#fff"] },
                    background: { enabled: !1 },
                  },
                  stroke: { width: 0, lineCap: "round" },
                  fill: { opacity: 0.85 },
                  legend: { markers: { shape: "square", radius: 2, size: 8 } },
                  tooltip: { shared: !1, intersect: !0 },
                  xaxis: {
                    tooltip: { enabled: !1 },
                    tickPlacement: "between",
                    crosshairs: {
                      width: "barWidth",
                      position: "back",
                      fill: { type: "gradient" },
                      dropShadow: { enabled: !1 },
                      stroke: { width: 0 },
                    },
                  },
                };
              },
            },
            {
              key: "candlestick",
              value: function () {
                var t = this;
                return {
                  stroke: { width: 1, colors: ["#333"] },
                  fill: { opacity: 1 },
                  dataLabels: { enabled: !1 },
                  tooltip: {
                    shared: !0,
                    custom: function (e) {
                      var i = e.seriesIndex,
                        n = e.dataPointIndex,
                        a = e.w;
                      return t._getBoxTooltip(
                        a,
                        i,
                        n,
                        ["Open", "High", "", "Low", "Close"],
                        "candlestick"
                      );
                    },
                  },
                  states: { active: { filter: { type: "none" } } },
                  xaxis: { crosshairs: { width: 1 } },
                };
              },
            },
            {
              key: "boxPlot",
              value: function () {
                var t = this;
                return {
                  chart: { animations: { dynamicAnimation: { enabled: !1 } } },
                  stroke: { width: 1, colors: ["#24292e"] },
                  dataLabels: { enabled: !1 },
                  tooltip: {
                    shared: !0,
                    custom: function (e) {
                      var i = e.seriesIndex,
                        n = e.dataPointIndex,
                        a = e.w;
                      return t._getBoxTooltip(
                        a,
                        i,
                        n,
                        ["Minimum", "Q1", "Median", "Q3", "Maximum"],
                        "boxPlot"
                      );
                    },
                  },
                  markers: { size: 5, strokeWidth: 1, strokeColors: "#111" },
                  xaxis: { crosshairs: { width: 1 } },
                };
              },
            },
            {
              key: "rangeBar",
              value: function () {
                return {
                  stroke: { width: 0, lineCap: "square" },
                  plotOptions: {
                    bar: {
                      borderRadius: 0,
                      dataLabels: { position: "center" },
                    },
                  },
                  dataLabels: {
                    enabled: !1,
                    formatter: function (t, e) {
                      e.ctx;
                      var i = e.seriesIndex,
                        n = e.dataPointIndex,
                        a = e.w,
                        s = a.globals.seriesRangeStart[i][n];
                      return a.globals.seriesRangeEnd[i][n] - s;
                    },
                    background: { enabled: !1 },
                    style: { colors: ["#fff"] },
                  },
                  tooltip: {
                    shared: !1,
                    followCursor: !0,
                    custom: function (t) {
                      return t.w.config.plotOptions &&
                        t.w.config.plotOptions.bar &&
                        t.w.config.plotOptions.bar.horizontal
                        ? (function (t) {
                            var e = new z(t.ctx, null),
                              i = e.getTooltipValues(t),
                              n = i.color,
                              a = i.seriesName,
                              s = i.ylabel,
                              r = i.startVal,
                              o = i.endVal;
                            return e.buildCustomTooltipHTML({
                              color: n,
                              seriesName: a,
                              ylabel: s,
                              start: r,
                              end: o,
                            });
                          })(t)
                        : (function (t) {
                            var e = new z(t.ctx, null),
                              i = e.getTooltipValues(t),
                              n = i.color,
                              a = i.seriesName,
                              s = i.ylabel,
                              r = i.start,
                              o = i.end;
                            return e.buildCustomTooltipHTML({
                              color: n,
                              seriesName: a,
                              ylabel: s,
                              start: r,
                              end: o,
                            });
                          })(t);
                    },
                  },
                  xaxis: {
                    tickPlacement: "between",
                    tooltip: { enabled: !1 },
                    crosshairs: { stroke: { width: 0 } },
                  },
                };
              },
            },
            {
              key: "area",
              value: function () {
                return {
                  stroke: { width: 4 },
                  fill: {
                    type: "gradient",
                    gradient: {
                      inverseColors: !1,
                      shade: "light",
                      type: "vertical",
                      opacityFrom: 0.65,
                      opacityTo: 0.5,
                      stops: [0, 100, 100],
                    },
                  },
                  markers: { size: 0, hover: { sizeOffset: 6 } },
                  tooltip: { followCursor: !1 },
                };
              },
            },
            {
              key: "brush",
              value: function (t) {
                return p.extend(t, {
                  chart: {
                    toolbar: { autoSelected: "selection", show: !1 },
                    zoom: { enabled: !1 },
                  },
                  dataLabels: { enabled: !1 },
                  stroke: { width: 1 },
                  tooltip: { enabled: !1 },
                  xaxis: { tooltip: { enabled: !1 } },
                });
              },
            },
            {
              key: "stacked100",
              value: function (t) {
                (t.dataLabels = t.dataLabels || {}),
                  (t.dataLabels.formatter = t.dataLabels.formatter || void 0);
                var e = t.dataLabels.formatter;
                return (
                  t.yaxis.forEach(function (e, i) {
                    (t.yaxis[i].min = 0), (t.yaxis[i].max = 100);
                  }),
                  "bar" === t.chart.type &&
                    (t.dataLabels.formatter =
                      e ||
                      function (t) {
                        return "number" == typeof t && t
                          ? t.toFixed(0) + "%"
                          : t;
                      }),
                  t
                );
              },
            },
            {
              key: "convertCatToNumeric",
              value: function (t) {
                return (t.xaxis.convertedCatToNumeric = !0), t;
              },
            },
            {
              key: "convertCatToNumericXaxis",
              value: function (t, e, i) {
                (t.xaxis.type = "numeric"),
                  (t.xaxis.labels = t.xaxis.labels || {}),
                  (t.xaxis.labels.formatter =
                    t.xaxis.labels.formatter ||
                    function (t) {
                      return p.isNumber(t) ? Math.floor(t) : t;
                    });
                var n = t.xaxis.labels.formatter,
                  a =
                    t.xaxis.categories && t.xaxis.categories.length
                      ? t.xaxis.categories
                      : t.labels;
                return (
                  i &&
                    i.length &&
                    (a = i.map(function (t) {
                      return Array.isArray(t) ? t : String(t);
                    })),
                  a &&
                    a.length &&
                    (t.xaxis.labels.formatter = function (t) {
                      return p.isNumber(t) ? n(a[Math.floor(t) - 1]) : n(t);
                    }),
                  (t.xaxis.categories = []),
                  (t.labels = []),
                  (t.xaxis.tickAmount = t.xaxis.tickAmount || "dataPoints"),
                  t
                );
              },
            },
            {
              key: "bubble",
              value: function () {
                return {
                  dataLabels: { style: { colors: ["#fff"] } },
                  tooltip: { shared: !1, intersect: !0 },
                  xaxis: { crosshairs: { width: 0 } },
                  fill: {
                    type: "solid",
                    gradient: {
                      shade: "light",
                      inverse: !0,
                      shadeIntensity: 0.55,
                      opacityFrom: 0.4,
                      opacityTo: 0.8,
                    },
                  },
                };
              },
            },
            {
              key: "scatter",
              value: function () {
                return {
                  dataLabels: { enabled: !1 },
                  tooltip: { shared: !1, intersect: !0 },
                  markers: {
                    size: 6,
                    strokeWidth: 1,
                    hover: { sizeOffset: 2 },
                  },
                };
              },
            },
            {
              key: "heatmap",
              value: function () {
                return {
                  chart: { stacked: !1 },
                  fill: { opacity: 1 },
                  dataLabels: { style: { colors: ["#fff"] } },
                  stroke: { colors: ["#fff"] },
                  tooltip: {
                    followCursor: !0,
                    marker: { show: !1 },
                    x: { show: !1 },
                  },
                  legend: {
                    position: "top",
                    markers: { shape: "square", size: 10, offsetY: 2 },
                  },
                  grid: { padding: { right: 20 } },
                };
              },
            },
            {
              key: "treemap",
              value: function () {
                return {
                  chart: { zoom: { enabled: !1 } },
                  dataLabels: {
                    style: { fontSize: 14, fontWeight: 600, colors: ["#fff"] },
                  },
                  stroke: { show: !0, width: 2, colors: ["#fff"] },
                  legend: { show: !1 },
                  fill: { gradient: { stops: [0, 100] } },
                  tooltip: { followCursor: !0, x: { show: !1 } },
                  grid: { padding: { left: 0, right: 0 } },
                  xaxis: { crosshairs: { show: !1 }, tooltip: { enabled: !1 } },
                };
              },
            },
            {
              key: "pie",
              value: function () {
                return {
                  chart: { toolbar: { show: !1 } },
                  plotOptions: { pie: { donut: { labels: { show: !1 } } } },
                  dataLabels: {
                    formatter: function (t) {
                      return t.toFixed(1) + "%";
                    },
                    style: { colors: ["#fff"] },
                    background: { enabled: !1 },
                    dropShadow: { enabled: !0 },
                  },
                  stroke: { colors: ["#fff"] },
                  fill: {
                    opacity: 1,
                    gradient: { shade: "light", stops: [0, 100] },
                  },
                  tooltip: { theme: "dark", fillSeriesColor: !0 },
                  legend: { position: "right" },
                };
              },
            },
            {
              key: "donut",
              value: function () {
                return {
                  chart: { toolbar: { show: !1 } },
                  dataLabels: {
                    formatter: function (t) {
                      return t.toFixed(1) + "%";
                    },
                    style: { colors: ["#fff"] },
                    background: { enabled: !1 },
                    dropShadow: { enabled: !0 },
                  },
                  stroke: { colors: ["#fff"] },
                  fill: {
                    opacity: 1,
                    gradient: {
                      shade: "light",
                      shadeIntensity: 0.35,
                      stops: [80, 100],
                      opacityFrom: 1,
                      opacityTo: 1,
                    },
                  },
                  tooltip: { theme: "dark", fillSeriesColor: !0 },
                  legend: { position: "right" },
                };
              },
            },
            {
              key: "polarArea",
              value: function () {
                return (
                  (this.opts.yaxis[0].tickAmount = this.opts.yaxis[0].tickAmount
                    ? this.opts.yaxis[0].tickAmount
                    : 6),
                  {
                    chart: { toolbar: { show: !1 } },
                    dataLabels: {
                      formatter: function (t) {
                        return t.toFixed(1) + "%";
                      },
                      enabled: !1,
                    },
                    stroke: { show: !0, width: 2 },
                    fill: { opacity: 0.7 },
                    tooltip: { theme: "dark", fillSeriesColor: !0 },
                    legend: { position: "right" },
                  }
                );
              },
            },
            {
              key: "radar",
              value: function () {
                return (
                  (this.opts.yaxis[0].labels.offsetY = this.opts.yaxis[0].labels
                    .offsetY
                    ? this.opts.yaxis[0].labels.offsetY
                    : 6),
                  {
                    dataLabels: { enabled: !1, style: { fontSize: "11px" } },
                    stroke: { width: 2 },
                    markers: { size: 3, strokeWidth: 1, strokeOpacity: 1 },
                    fill: { opacity: 0.2 },
                    tooltip: { shared: !1, intersect: !0, followCursor: !0 },
                    grid: { show: !1 },
                    xaxis: {
                      labels: {
                        formatter: function (t) {
                          return t;
                        },
                        style: { colors: ["#a8a8a8"], fontSize: "11px" },
                      },
                      tooltip: { enabled: !1 },
                      crosshairs: { show: !1 },
                    },
                  }
                );
              },
            },
            {
              key: "radialBar",
              value: function () {
                return {
                  chart: {
                    animations: {
                      dynamicAnimation: { enabled: !0, speed: 800 },
                    },
                    toolbar: { show: !1 },
                  },
                  fill: {
                    gradient: {
                      shade: "dark",
                      shadeIntensity: 0.4,
                      inverseColors: !1,
                      type: "diagonal2",
                      opacityFrom: 1,
                      opacityTo: 1,
                      stops: [70, 98, 100],
                    },
                  },
                  legend: { show: !1, position: "right" },
                  tooltip: { enabled: !1, fillSeriesColor: !0 },
                };
              },
            },
            {
              key: "_getBoxTooltip",
              value: function (t, e, i, n, a) {
                var s = t.globals.seriesCandleO[e][i],
                  r = t.globals.seriesCandleH[e][i],
                  o = t.globals.seriesCandleM[e][i],
                  l = t.globals.seriesCandleL[e][i],
                  c = t.globals.seriesCandleC[e][i];
                return t.config.series[e].type && t.config.series[e].type !== a
                  ? '<div class="apexcharts-custom-tooltip">\n          '
                      .concat(
                        t.config.series[e].name
                          ? t.config.series[e].name
                          : "series-" + (e + 1),
                        ": <strong>"
                      )
                      .concat(
                        t.globals.series[e][i],
                        "</strong>\n        </div>"
                      )
                  : '<div class="apexcharts-tooltip-box apexcharts-tooltip-'.concat(
                      t.config.chart.type,
                      '">'
                    ) +
                      "<div>".concat(n[0], ': <span class="value">') +
                      s +
                      "</span></div>" +
                      "<div>".concat(n[1], ': <span class="value">') +
                      r +
                      "</span></div>" +
                      (o
                        ? "<div>".concat(n[2], ': <span class="value">') +
                          o +
                          "</span></div>"
                        : "") +
                      "<div>".concat(n[3], ': <span class="value">') +
                      l +
                      "</span></div>" +
                      "<div>".concat(n[4], ': <span class="value">') +
                      c +
                      "</span></div></div>";
              },
            },
          ]),
          t
        );
      })(),
      X = (function () {
        function i(t) {
          e(this, i), (this.opts = t);
        }
        return (
          n(i, [
            {
              key: "init",
              value: function (e) {
                var i = e.responsiveOverride,
                  n = this.opts,
                  a = new S(),
                  s = new N(n);
                (this.chartType = n.chart.type),
                  "histogram" === this.chartType &&
                    ((n.chart.type = "bar"),
                    (n = p.extend(
                      { plotOptions: { bar: { columnWidth: "99.99%" } } },
                      n
                    ))),
                  (n = this.extendYAxis(n)),
                  (n = this.extendAnnotations(n));
                var r = a.init(),
                  o = {};
                if (n && "object" === t(n)) {
                  var l = {};
                  (l =
                    -1 !==
                    [
                      "line",
                      "area",
                      "bar",
                      "candlestick",
                      "boxPlot",
                      "rangeBar",
                      "histogram",
                      "bubble",
                      "scatter",
                      "heatmap",
                      "treemap",
                      "pie",
                      "polarArea",
                      "donut",
                      "radar",
                      "radialBar",
                    ].indexOf(n.chart.type)
                      ? s[n.chart.type]()
                      : s.line()),
                    n.chart.brush && n.chart.brush.enabled && (l = s.brush(l)),
                    n.chart.stacked &&
                      "100%" === n.chart.stackType &&
                      (n = s.stacked100(n)),
                    this.checkForDarkTheme(window.Apex),
                    this.checkForDarkTheme(n),
                    (n.xaxis = n.xaxis || window.Apex.xaxis || {}),
                    i || (n.xaxis.convertedCatToNumeric = !1),
                    (((n = this.checkForCatToNumericXAxis(this.chartType, l, n))
                      .chart.sparkline &&
                      n.chart.sparkline.enabled) ||
                      (window.Apex.chart &&
                        window.Apex.chart.sparkline &&
                        window.Apex.chart.sparkline.enabled)) &&
                      (l = s.sparkline(l)),
                    (o = p.extend(r, l));
                }
                var c = p.extend(o, window.Apex);
                return (r = p.extend(c, n)), this.handleUserInputErrors(r);
              },
            },
            {
              key: "checkForCatToNumericXAxis",
              value: function (t, e, i) {
                var n = new N(i),
                  a =
                    "bar" === t &&
                    i.plotOptions &&
                    i.plotOptions.bar &&
                    i.plotOptions.bar.horizontal,
                  s =
                    "pie" === t ||
                    "polarArea" === t ||
                    "donut" === t ||
                    "radar" === t ||
                    "radialBar" === t ||
                    "heatmap" === t,
                  r = "datetime" !== i.xaxis.type && "numeric" !== i.xaxis.type,
                  o = i.xaxis.tickPlacement
                    ? i.xaxis.tickPlacement
                    : e.xaxis && e.xaxis.tickPlacement;
                return (
                  a ||
                    s ||
                    !r ||
                    "between" === o ||
                    (i = n.convertCatToNumeric(i)),
                  i
                );
              },
            },
            {
              key: "extendYAxis",
              value: function (t, e) {
                var i = new S();
                (void 0 === t.yaxis ||
                  !t.yaxis ||
                  (Array.isArray(t.yaxis) && 0 === t.yaxis.length)) &&
                  (t.yaxis = {}),
                  t.yaxis.constructor !== Array &&
                    window.Apex.yaxis &&
                    window.Apex.yaxis.constructor !== Array &&
                    (t.yaxis = p.extend(t.yaxis, window.Apex.yaxis)),
                  t.yaxis.constructor !== Array
                    ? (t.yaxis = [p.extend(i.yAxis, t.yaxis)])
                    : (t.yaxis = p.extendArray(t.yaxis, i.yAxis));
                var n = !1;
                t.yaxis.forEach(function (t) {
                  t.logarithmic && (n = !0);
                });
                var a = t.series;
                return (
                  e && !a && (a = e.config.series),
                  n &&
                    a.length !== t.yaxis.length &&
                    a.length &&
                    (t.yaxis = a.map(function (e, n) {
                      if (
                        (e.name || (a[n].name = "series-".concat(n + 1)),
                        t.yaxis[n])
                      )
                        return (t.yaxis[n].seriesName = a[n].name), t.yaxis[n];
                      var s = p.extend(i.yAxis, t.yaxis[0]);
                      return (s.show = !1), s;
                    })),
                  n &&
                    a.length > 1 &&
                    a.length !== t.yaxis.length &&
                    console.warn(
                      "A multi-series logarithmic chart should have equal number of series and y-axes. Please make sure to equalize both."
                    ),
                  t
                );
              },
            },
            {
              key: "extendAnnotations",
              value: function (t) {
                return (
                  void 0 === t.annotations &&
                    ((t.annotations = {}),
                    (t.annotations.yaxis = []),
                    (t.annotations.xaxis = []),
                    (t.annotations.points = [])),
                  (t = this.extendYAxisAnnotations(t)),
                  (t = this.extendXAxisAnnotations(t)),
                  this.extendPointAnnotations(t)
                );
              },
            },
            {
              key: "extendYAxisAnnotations",
              value: function (t) {
                var e = new S();
                return (
                  (t.annotations.yaxis = p.extendArray(
                    void 0 !== t.annotations.yaxis ? t.annotations.yaxis : [],
                    e.yAxisAnnotation
                  )),
                  t
                );
              },
            },
            {
              key: "extendXAxisAnnotations",
              value: function (t) {
                var e = new S();
                return (
                  (t.annotations.xaxis = p.extendArray(
                    void 0 !== t.annotations.xaxis ? t.annotations.xaxis : [],
                    e.xAxisAnnotation
                  )),
                  t
                );
              },
            },
            {
              key: "extendPointAnnotations",
              value: function (t) {
                var e = new S();
                return (
                  (t.annotations.points = p.extendArray(
                    void 0 !== t.annotations.points ? t.annotations.points : [],
                    e.pointAnnotation
                  )),
                  t
                );
              },
            },
            {
              key: "checkForDarkTheme",
              value: function (t) {
                t.theme &&
                  "dark" === t.theme.mode &&
                  (t.tooltip || (t.tooltip = {}),
                  "light" !== t.tooltip.theme && (t.tooltip.theme = "dark"),
                  t.chart.foreColor || (t.chart.foreColor = "#f6f7f8"),
                  t.chart.background || (t.chart.background = "#424242"),
                  t.theme.palette || (t.theme.palette = "palette4"));
              },
            },
            {
              key: "handleUserInputErrors",
              value: function (t) {
                var e = t;
                if (e.tooltip.shared && e.tooltip.intersect)
                  throw new Error(
                    "tooltip.shared cannot be enabled when tooltip.intersect is true. Turn off any other option by setting it to false."
                  );
                if ("bar" === e.chart.type && e.plotOptions.bar.horizontal) {
                  if (e.yaxis.length > 1)
                    throw new Error(
                      "Multiple Y Axis for bars are not supported. Switch to column chart by setting plotOptions.bar.horizontal=false"
                    );
                  e.yaxis[0].reversed && (e.yaxis[0].opposite = !0),
                    (e.xaxis.tooltip.enabled = !1),
                    (e.yaxis[0].tooltip.enabled = !1),
                    (e.chart.zoom.enabled = !1);
                }
                return (
                  ("bar" !== e.chart.type && "rangeBar" !== e.chart.type) ||
                    (e.tooltip.shared &&
                      "barWidth" === e.xaxis.crosshairs.width &&
                      e.series.length > 1 &&
                      (e.xaxis.crosshairs.width = "tickWidth")),
                  ("candlestick" !== e.chart.type &&
                    "boxPlot" !== e.chart.type) ||
                    (e.yaxis[0].reversed &&
                      (console.warn(
                        "Reversed y-axis in ".concat(
                          e.chart.type,
                          " chart is not supported."
                        )
                      ),
                      (e.yaxis[0].reversed = !1))),
                  e.chart.group &&
                    0 === e.yaxis[0].labels.minWidth &&
                    console.warn(
                      "It looks like you have multiple charts in synchronization. You must provide yaxis.labels.minWidth which must be EQUAL for all grouped charts to prevent incorrect behaviour."
                    ),
                  Array.isArray(e.stroke.width) &&
                    "line" !== e.chart.type &&
                    "area" !== e.chart.type &&
                    (console.warn(
                      "stroke.width option accepts array only for line and area charts. Reverted back to Number"
                    ),
                    (e.stroke.width = e.stroke.width[0])),
                  e
                );
              },
            },
          ]),
          i
        );
      })(),
      H = (function () {
        function t() {
          e(this, t);
        }
        return (
          n(t, [
            {
              key: "initGlobalVars",
              value: function (t) {
                (t.series = []),
                  (t.seriesCandleO = []),
                  (t.seriesCandleH = []),
                  (t.seriesCandleM = []),
                  (t.seriesCandleL = []),
                  (t.seriesCandleC = []),
                  (t.seriesRangeStart = []),
                  (t.seriesRangeEnd = []),
                  (t.seriesRangeBarTimeline = []),
                  (t.seriesPercent = []),
                  (t.seriesGoals = []),
                  (t.seriesX = []),
                  (t.seriesZ = []),
                  (t.seriesNames = []),
                  (t.seriesTotals = []),
                  (t.seriesLog = []),
                  (t.seriesColors = []),
                  (t.stackedSeriesTotals = []),
                  (t.seriesXvalues = []),
                  (t.seriesYvalues = []),
                  (t.labels = []),
                  (t.categoryLabels = []),
                  (t.timescaleLabels = []),
                  (t.noLabelsProvided = !1),
                  (t.resizeTimer = null),
                  (t.selectionResizeTimer = null),
                  (t.delayedElements = []),
                  (t.pointsArray = []),
                  (t.dataLabelsRects = []),
                  (t.isXNumeric = !1),
                  (t.xaxisLabelsCount = 0),
                  (t.skipLastTimelinelabel = !1),
                  (t.skipFirstTimelinelabel = !1),
                  (t.isDataXYZ = !1),
                  (t.isMultiLineX = !1),
                  (t.isMultipleYAxis = !1),
                  (t.maxY = -Number.MAX_VALUE),
                  (t.minY = Number.MIN_VALUE),
                  (t.minYArr = []),
                  (t.maxYArr = []),
                  (t.maxX = -Number.MAX_VALUE),
                  (t.minX = Number.MAX_VALUE),
                  (t.initialMaxX = -Number.MAX_VALUE),
                  (t.initialMinX = Number.MAX_VALUE),
                  (t.maxDate = 0),
                  (t.minDate = Number.MAX_VALUE),
                  (t.minZ = Number.MAX_VALUE),
                  (t.maxZ = -Number.MAX_VALUE),
                  (t.minXDiff = Number.MAX_VALUE),
                  (t.yAxisScale = []),
                  (t.xAxisScale = null),
                  (t.xAxisTicksPositions = []),
                  (t.yLabelsCoords = []),
                  (t.yTitleCoords = []),
                  (t.barPadForNumericAxis = 0),
                  (t.padHorizontal = 0),
                  (t.xRange = 0),
                  (t.yRange = []),
                  (t.zRange = 0),
                  (t.dataPoints = 0),
                  (t.xTickAmount = 0);
              },
            },
            {
              key: "globalVars",
              value: function (t) {
                return {
                  chartID: null,
                  cuid: null,
                  events: {
                    beforeMount: [],
                    mounted: [],
                    updated: [],
                    clicked: [],
                    selection: [],
                    dataPointSelection: [],
                    zoomed: [],
                    scrolled: [],
                  },
                  colors: [],
                  clientX: null,
                  clientY: null,
                  fill: { colors: [] },
                  stroke: { colors: [] },
                  dataLabels: { style: { colors: [] } },
                  radarPolygons: { fill: { colors: [] } },
                  markers: { colors: [], size: t.markers.size, largestSize: 0 },
                  animationEnded: !1,
                  isTouchDevice:
                    "ontouchstart" in window || navigator.msMaxTouchPoints,
                  isDirty: !1,
                  isExecCalled: !1,
                  initialConfig: null,
                  initialSeries: [],
                  lastXAxis: [],
                  lastYAxis: [],
                  columnSeries: null,
                  labels: [],
                  timescaleLabels: [],
                  noLabelsProvided: !1,
                  allSeriesCollapsed: !1,
                  collapsedSeries: [],
                  collapsedSeriesIndices: [],
                  ancillaryCollapsedSeries: [],
                  ancillaryCollapsedSeriesIndices: [],
                  risingSeries: [],
                  dataFormatXNumeric: !1,
                  capturedSeriesIndex: -1,
                  capturedDataPointIndex: -1,
                  selectedDataPoints: [],
                  goldenPadding: 35,
                  invalidLogScale: !1,
                  ignoreYAxisIndexes: [],
                  yAxisSameScaleIndices: [],
                  maxValsInArrayIndex: 0,
                  radialSize: 0,
                  selection: void 0,
                  zoomEnabled:
                    "zoom" === t.chart.toolbar.autoSelected &&
                    t.chart.toolbar.tools.zoom &&
                    t.chart.zoom.enabled,
                  panEnabled:
                    "pan" === t.chart.toolbar.autoSelected &&
                    t.chart.toolbar.tools.pan,
                  selectionEnabled:
                    "selection" === t.chart.toolbar.autoSelected &&
                    t.chart.toolbar.tools.selection,
                  yaxis: null,
                  mousedown: !1,
                  lastClientPosition: {},
                  visibleXRange: void 0,
                  yValueDecimal: 0,
                  total: 0,
                  SVGNS: "http://www.w3.org/2000/svg",
                  svgWidth: 0,
                  svgHeight: 0,
                  noData: !1,
                  locale: {},
                  dom: {},
                  memory: { methodsToExec: [] },
                  shouldAnimate: !0,
                  skipLastTimelinelabel: !1,
                  skipFirstTimelinelabel: !1,
                  delayedElements: [],
                  axisCharts: !0,
                  isDataXYZ: !1,
                  resized: !1,
                  resizeTimer: null,
                  comboCharts: !1,
                  dataChanged: !1,
                  previousPaths: [],
                  allSeriesHasEqualX: !0,
                  pointsArray: [],
                  dataLabelsRects: [],
                  lastDrawnDataLabelsIndexes: [],
                  hasNullValues: !1,
                  easing: null,
                  zoomed: !1,
                  gridWidth: 0,
                  gridHeight: 0,
                  rotateXLabels: !1,
                  defaultLabels: !1,
                  xLabelFormatter: void 0,
                  yLabelFormatters: [],
                  xaxisTooltipFormatter: void 0,
                  ttKeyFormatter: void 0,
                  ttVal: void 0,
                  ttZFormatter: void 0,
                  LINE_HEIGHT_RATIO: 1.618,
                  xAxisLabelsHeight: 0,
                  xAxisLabelsWidth: 0,
                  yAxisLabelsWidth: 0,
                  scaleX: 1,
                  scaleY: 1,
                  translateX: 0,
                  translateY: 0,
                  translateYAxisX: [],
                  yAxisWidths: [],
                  translateXAxisY: 0,
                  translateXAxisX: 0,
                  tooltip: null,
                };
              },
            },
            {
              key: "init",
              value: function (t) {
                var e = this.globalVars(t);
                return (
                  this.initGlobalVars(e),
                  (e.initialConfig = p.extend({}, t)),
                  (e.initialSeries = p.clone(t.series)),
                  (e.lastXAxis = p.clone(e.initialConfig.xaxis)),
                  (e.lastYAxis = p.clone(e.initialConfig.yaxis)),
                  e
                );
              },
            },
          ]),
          t
        );
      })(),
      R = (function () {
        function t(i) {
          e(this, t), (this.opts = i);
        }
        return (
          n(t, [
            {
              key: "init",
              value: function () {
                var t = new X(this.opts).init({ responsiveOverride: !1 });
                return { config: t, globals: new H().init(t) };
              },
            },
          ]),
          t
        );
      })(),
      F = (function () {
        function t(i) {
          e(this, t),
            (this.ctx = i),
            (this.w = i.w),
            (this.twoDSeries = []),
            (this.threeDSeries = []),
            (this.twoDSeriesX = []),
            (this.seriesGoals = []),
            (this.coreUtils = new y(this.ctx));
        }
        return (
          n(t, [
            {
              key: "isMultiFormat",
              value: function () {
                return this.isFormatXY() || this.isFormat2DArray();
              },
            },
            {
              key: "isFormatXY",
              value: function () {
                var t = this.w.config.series.slice(),
                  e = new M(this.ctx);
                if (
                  ((this.activeSeriesIndex = e.getActiveConfigSeriesIndex()),
                  void 0 !== t[this.activeSeriesIndex].data &&
                    t[this.activeSeriesIndex].data.length > 0 &&
                    null !== t[this.activeSeriesIndex].data[0] &&
                    void 0 !== t[this.activeSeriesIndex].data[0].x &&
                    null !== t[this.activeSeriesIndex].data[0])
                )
                  return !0;
              },
            },
            {
              key: "isFormat2DArray",
              value: function () {
                var t = this.w.config.series.slice(),
                  e = new M(this.ctx);
                if (
                  ((this.activeSeriesIndex = e.getActiveConfigSeriesIndex()),
                  void 0 !== t[this.activeSeriesIndex].data &&
                    t[this.activeSeriesIndex].data.length > 0 &&
                    void 0 !== t[this.activeSeriesIndex].data[0] &&
                    null !== t[this.activeSeriesIndex].data[0] &&
                    t[this.activeSeriesIndex].data[0].constructor === Array)
                )
                  return !0;
              },
            },
            {
              key: "handleFormat2DArray",
              value: function (t, e) {
                for (
                  var i = this.w.config,
                    n = this.w.globals,
                    a =
                      "boxPlot" === i.chart.type ||
                      "boxPlot" === i.series[e].type,
                    s = 0;
                  s < t[e].data.length;
                  s++
                )
                  if (
                    (void 0 !== t[e].data[s][1] &&
                      (Array.isArray(t[e].data[s][1]) &&
                      4 === t[e].data[s][1].length &&
                      !a
                        ? this.twoDSeries.push(
                            p.parseNumber(t[e].data[s][1][3])
                          )
                        : t[e].data[s].length >= 5
                        ? this.twoDSeries.push(p.parseNumber(t[e].data[s][4]))
                        : this.twoDSeries.push(p.parseNumber(t[e].data[s][1])),
                      (n.dataFormatXNumeric = !0)),
                    "datetime" === i.xaxis.type)
                  ) {
                    var r = new Date(t[e].data[s][0]);
                    (r = new Date(r).getTime()), this.twoDSeriesX.push(r);
                  } else this.twoDSeriesX.push(t[e].data[s][0]);
                for (var o = 0; o < t[e].data.length; o++)
                  void 0 !== t[e].data[o][2] &&
                    (this.threeDSeries.push(t[e].data[o][2]),
                    (n.isDataXYZ = !0));
              },
            },
            {
              key: "handleFormatXY",
              value: function (t, e) {
                var i = this.w.config,
                  n = this.w.globals,
                  a = new D(this.ctx),
                  s = e;
                n.collapsedSeriesIndices.indexOf(e) > -1 &&
                  (s = this.activeSeriesIndex);
                for (var r = 0; r < t[e].data.length; r++)
                  void 0 !== t[e].data[r].y &&
                    (Array.isArray(t[e].data[r].y)
                      ? this.twoDSeries.push(
                          p.parseNumber(
                            t[e].data[r].y[t[e].data[r].y.length - 1]
                          )
                        )
                      : this.twoDSeries.push(p.parseNumber(t[e].data[r].y))),
                    void 0 !== t[e].data[r].goals &&
                    Array.isArray(t[e].data[r].goals)
                      ? (void 0 === this.seriesGoals[e] &&
                          (this.seriesGoals[e] = []),
                        this.seriesGoals[e].push(t[e].data[r].goals))
                      : (void 0 === this.seriesGoals[e] &&
                          (this.seriesGoals[e] = []),
                        this.seriesGoals[e].push(null));
                for (var o = 0; o < t[s].data.length; o++) {
                  var l = "string" == typeof t[s].data[o].x,
                    c = Array.isArray(t[s].data[o].x),
                    h = !c && !!a.isValidDate(t[s].data[o].x.toString());
                  if (l || h)
                    if (l || i.xaxis.convertedCatToNumeric) {
                      var d = n.isBarHorizontal && n.isRangeData;
                      "datetime" !== i.xaxis.type || d
                        ? ((this.fallbackToCategory = !0),
                          this.twoDSeriesX.push(t[s].data[o].x))
                        : this.twoDSeriesX.push(a.parseDate(t[s].data[o].x));
                    } else
                      "datetime" === i.xaxis.type
                        ? this.twoDSeriesX.push(
                            a.parseDate(t[s].data[o].x.toString())
                          )
                        : ((n.dataFormatXNumeric = !0),
                          (n.isXNumeric = !0),
                          this.twoDSeriesX.push(parseFloat(t[s].data[o].x)));
                  else
                    c
                      ? ((this.fallbackToCategory = !0),
                        this.twoDSeriesX.push(t[s].data[o].x))
                      : ((n.isXNumeric = !0),
                        (n.dataFormatXNumeric = !0),
                        this.twoDSeriesX.push(t[s].data[o].x));
                }
                if (t[e].data[0] && void 0 !== t[e].data[0].z) {
                  for (var u = 0; u < t[e].data.length; u++)
                    this.threeDSeries.push(t[e].data[u].z);
                  n.isDataXYZ = !0;
                }
              },
            },
            {
              key: "handleRangeData",
              value: function (t, e) {
                var i = this.w.config,
                  n = this.w.globals,
                  a = {};
                return (
                  this.isFormat2DArray()
                    ? (a = this.handleRangeDataFormat("array", t, e))
                    : this.isFormatXY() &&
                      (a = this.handleRangeDataFormat("xy", t, e)),
                  n.seriesRangeStart.push(a.start),
                  n.seriesRangeEnd.push(a.end),
                  "datetime" === i.xaxis.type &&
                    n.seriesRangeBarTimeline.push(a.rangeUniques),
                  n.seriesRangeBarTimeline.forEach(function (t, e) {
                    t &&
                      t.forEach(function (t, e) {
                        t.y.forEach(function (e, i) {
                          for (var n = 0; n < t.y.length; n++)
                            if (i !== n) {
                              var a = e.y1,
                                s = e.y2,
                                r = t.y[n].y1;
                              a <= t.y[n].y2 &&
                                r <= s &&
                                (t.overlaps.indexOf(e.rangeName) < 0 &&
                                  t.overlaps.push(e.rangeName),
                                t.overlaps.indexOf(t.y[n].rangeName) < 0 &&
                                  t.overlaps.push(t.y[n].rangeName));
                            }
                        });
                      });
                  }),
                  a
                );
              },
            },
            {
              key: "handleCandleStickBoxData",
              value: function (t, e) {
                var i = this.w.globals,
                  n = {};
                return (
                  this.isFormat2DArray()
                    ? (n = this.handleCandleStickBoxDataFormat("array", t, e))
                    : this.isFormatXY() &&
                      (n = this.handleCandleStickBoxDataFormat("xy", t, e)),
                  (i.seriesCandleO[e] = n.o),
                  (i.seriesCandleH[e] = n.h),
                  (i.seriesCandleM[e] = n.m),
                  (i.seriesCandleL[e] = n.l),
                  (i.seriesCandleC[e] = n.c),
                  n
                );
              },
            },
            {
              key: "handleRangeDataFormat",
              value: function (t, e, i) {
                var n = [],
                  a = [],
                  s = e[i].data
                    .filter(function (t, e, i) {
                      return (
                        e ===
                        i.findIndex(function (e) {
                          return e.x === t.x;
                        })
                      );
                    })
                    .map(function (t, e) {
                      return { x: t.x, overlaps: [], y: [] };
                    }),
                  r =
                    "Please provide [Start, End] values in valid format. Read more https://apexcharts.com/docs/series/#rangecharts",
                  o = new M(this.ctx).getActiveConfigSeriesIndex();
                if ("array" === t) {
                  if (2 !== e[o].data[0][1].length) throw new Error(r);
                  for (var l = 0; l < e[i].data.length; l++)
                    n.push(e[i].data[l][1][0]), a.push(e[i].data[l][1][1]);
                } else if ("xy" === t) {
                  if (2 !== e[o].data[0].y.length) throw new Error(r);
                  for (
                    var c = function (t) {
                        var r = p.randomId(),
                          o = e[i].data[t].x,
                          l = {
                            y1: e[i].data[t].y[0],
                            y2: e[i].data[t].y[1],
                            rangeName: r,
                          };
                        e[i].data[t].rangeName = r;
                        var c = s.findIndex(function (t) {
                          return t.x === o;
                        });
                        s[c].y.push(l), n.push(l.y1), a.push(l.y2);
                      },
                      h = 0;
                    h < e[i].data.length;
                    h++
                  )
                    c(h);
                }
                return { start: n, end: a, rangeUniques: s };
              },
            },
            {
              key: "handleCandleStickBoxDataFormat",
              value: function (t, e, i) {
                var n = this.w,
                  a =
                    "boxPlot" === n.config.chart.type ||
                    "boxPlot" === n.config.series[i].type,
                  s = [],
                  r = [],
                  o = [],
                  l = [],
                  c = [];
                if ("array" === t)
                  if (
                    (a && 6 === e[i].data[0].length) ||
                    (!a && 5 === e[i].data[0].length)
                  )
                    for (var h = 0; h < e[i].data.length; h++)
                      s.push(e[i].data[h][1]),
                        r.push(e[i].data[h][2]),
                        a
                          ? (o.push(e[i].data[h][3]),
                            l.push(e[i].data[h][4]),
                            c.push(e[i].data[h][5]))
                          : (l.push(e[i].data[h][3]), c.push(e[i].data[h][4]));
                  else
                    for (var d = 0; d < e[i].data.length; d++)
                      Array.isArray(e[i].data[d][1]) &&
                        (s.push(e[i].data[d][1][0]),
                        r.push(e[i].data[d][1][1]),
                        a
                          ? (o.push(e[i].data[d][1][2]),
                            l.push(e[i].data[d][1][3]),
                            c.push(e[i].data[d][1][4]))
                          : (l.push(e[i].data[d][1][2]),
                            c.push(e[i].data[d][1][3])));
                else if ("xy" === t)
                  for (var u = 0; u < e[i].data.length; u++)
                    Array.isArray(e[i].data[u].y) &&
                      (s.push(e[i].data[u].y[0]),
                      r.push(e[i].data[u].y[1]),
                      a
                        ? (o.push(e[i].data[u].y[2]),
                          l.push(e[i].data[u].y[3]),
                          c.push(e[i].data[u].y[4]))
                        : (l.push(e[i].data[u].y[2]),
                          c.push(e[i].data[u].y[3])));
                return { o: s, h: r, m: o, l: l, c: c };
              },
            },
            {
              key: "parseDataAxisCharts",
              value: function (t) {
                var e = this,
                  i =
                    arguments.length > 1 && void 0 !== arguments[1]
                      ? arguments[1]
                      : this.ctx,
                  n = this.w.config,
                  a = this.w.globals,
                  s = new D(i),
                  r =
                    n.labels.length > 0
                      ? n.labels.slice()
                      : n.xaxis.categories.slice();
                a.isTimelineBar =
                  "rangeBar" === n.chart.type && "datetime" === n.xaxis.type;
                for (
                  var o = function () {
                      for (var t = 0; t < r.length; t++)
                        if ("string" == typeof r[t]) {
                          if (!s.isValidDate(r[t]))
                            throw new Error(
                              "You have provided invalid Date format. Please provide a valid JavaScript Date"
                            );
                          e.twoDSeriesX.push(s.parseDate(r[t]));
                        } else e.twoDSeriesX.push(r[t]);
                    },
                    l = 0;
                  l < t.length;
                  l++
                ) {
                  if (
                    ((this.twoDSeries = []),
                    (this.twoDSeriesX = []),
                    (this.threeDSeries = []),
                    void 0 === t[l].data)
                  )
                    return void console.error(
                      "It is a possibility that you may have not included 'data' property in series."
                    );
                  if (
                    (("rangeBar" !== n.chart.type &&
                      "rangeArea" !== n.chart.type &&
                      "rangeBar" !== t[l].type &&
                      "rangeArea" !== t[l].type) ||
                      ((a.isRangeData = !0), this.handleRangeData(t, l)),
                    this.isMultiFormat())
                  )
                    this.isFormat2DArray()
                      ? this.handleFormat2DArray(t, l)
                      : this.isFormatXY() && this.handleFormatXY(t, l),
                      ("candlestick" !== n.chart.type &&
                        "candlestick" !== t[l].type &&
                        "boxPlot" !== n.chart.type &&
                        "boxPlot" !== t[l].type) ||
                        this.handleCandleStickBoxData(t, l),
                      a.series.push(this.twoDSeries),
                      a.labels.push(this.twoDSeriesX),
                      a.seriesX.push(this.twoDSeriesX),
                      (a.seriesGoals = this.seriesGoals),
                      l !== this.activeSeriesIndex ||
                        this.fallbackToCategory ||
                        (a.isXNumeric = !0);
                  else {
                    "datetime" === n.xaxis.type
                      ? ((a.isXNumeric = !0),
                        o(),
                        a.seriesX.push(this.twoDSeriesX))
                      : "numeric" === n.xaxis.type &&
                        ((a.isXNumeric = !0),
                        r.length > 0 &&
                          ((this.twoDSeriesX = r),
                          a.seriesX.push(this.twoDSeriesX))),
                      a.labels.push(this.twoDSeriesX);
                    var c = t[l].data.map(function (t) {
                      return p.parseNumber(t);
                    });
                    a.series.push(c);
                  }
                  a.seriesZ.push(this.threeDSeries),
                    void 0 !== t[l].name
                      ? a.seriesNames.push(t[l].name)
                      : a.seriesNames.push("series-" + parseInt(l + 1, 10)),
                    void 0 !== t[l].color
                      ? a.seriesColors.push(t[l].color)
                      : a.seriesColors.push(void 0);
                }
                return this.w;
              },
            },
            {
              key: "parseDataNonAxisCharts",
              value: function (t) {
                var e = this.w.globals,
                  i = this.w.config;
                (e.series = t.slice()), (e.seriesNames = i.labels.slice());
                for (var n = 0; n < e.series.length; n++)
                  void 0 === e.seriesNames[n] &&
                    e.seriesNames.push("series-" + (n + 1));
                return this.w;
              },
            },
            {
              key: "handleExternalLabelsData",
              value: function (t) {
                var e = this.w.config,
                  i = this.w.globals;
                e.xaxis.categories.length > 0
                  ? (i.labels = e.xaxis.categories)
                  : e.labels.length > 0
                  ? (i.labels = e.labels.slice())
                  : this.fallbackToCategory
                  ? ((i.labels = i.labels[0]),
                    i.seriesRangeBarTimeline.length &&
                      (i.seriesRangeBarTimeline.map(function (t) {
                        t.forEach(function (t) {
                          i.labels.indexOf(t.x) < 0 &&
                            t.x &&
                            i.labels.push(t.x);
                        });
                      }),
                      (i.labels = i.labels.filter(function (t, e, i) {
                        return i.indexOf(t) === e;
                      }))),
                    e.xaxis.convertedCatToNumeric &&
                      (new N(e).convertCatToNumericXaxis(
                        e,
                        this.ctx,
                        i.seriesX[0]
                      ),
                      this._generateExternalLabels(t)))
                  : this._generateExternalLabels(t);
              },
            },
            {
              key: "_generateExternalLabels",
              value: function (t) {
                var e = this.w.globals,
                  i = this.w.config,
                  n = [];
                if (e.axisCharts) {
                  if (e.series.length > 0)
                    for (
                      var a = 0;
                      a < e.series[e.maxValsInArrayIndex].length;
                      a++
                    )
                      n.push(a + 1);
                  e.seriesX = [];
                  for (var s = 0; s < t.length; s++) e.seriesX.push(n);
                  e.isXNumeric = !0;
                }
                if (0 === n.length) {
                  n = e.axisCharts
                    ? []
                    : e.series.map(function (t, e) {
                        return e + 1;
                      });
                  for (var r = 0; r < t.length; r++) e.seriesX.push(n);
                }
                (e.labels = n),
                  i.xaxis.convertedCatToNumeric &&
                    (e.categoryLabels = n.map(function (t) {
                      return i.xaxis.labels.formatter(t);
                    })),
                  (e.noLabelsProvided = !0);
              },
            },
            {
              key: "parseData",
              value: function (t) {
                var e = this.w,
                  i = e.config,
                  n = e.globals;
                if (
                  (this.excludeCollapsedSeriesInYAxis(),
                  (this.fallbackToCategory = !1),
                  this.ctx.core.resetGlobals(),
                  this.ctx.core.isMultipleY(),
                  n.axisCharts
                    ? this.parseDataAxisCharts(t)
                    : this.parseDataNonAxisCharts(t),
                  this.coreUtils.getLargestSeries(),
                  "bar" === i.chart.type && i.chart.stacked)
                ) {
                  var a = new M(this.ctx);
                  n.series = a.setNullSeriesToZeroValues(n.series);
                }
                this.coreUtils.getSeriesTotals(),
                  n.axisCharts && this.coreUtils.getStackedSeriesTotals(),
                  this.coreUtils.getPercentSeries(),
                  n.dataFormatXNumeric ||
                    (n.isXNumeric &&
                      ("numeric" !== i.xaxis.type ||
                        0 !== i.labels.length ||
                        0 !== i.xaxis.categories.length)) ||
                    this.handleExternalLabelsData(t);
                for (
                  var s = this.coreUtils.getCategoryLabels(n.labels), r = 0;
                  r < s.length;
                  r++
                )
                  if (Array.isArray(s[r])) {
                    n.isMultiLineX = !0;
                    break;
                  }
              },
            },
            {
              key: "excludeCollapsedSeriesInYAxis",
              value: function () {
                var t = this,
                  e = this.w;
                e.globals.ignoreYAxisIndexes = e.globals.collapsedSeries.map(
                  function (i, n) {
                    if (t.w.globals.isMultipleYAxis && !e.config.chart.stacked)
                      return i.index;
                  }
                );
              },
            },
          ]),
          t
        );
      })(),
      Y = (function () {
        function t(i) {
          e(this, t),
            (this.ctx = i),
            (this.w = i.w),
            (this.tooltipKeyFormat = "dd MMM");
        }
        return (
          n(t, [
            {
              key: "xLabelFormat",
              value: function (t, e, i, n) {
                var a = this.w;
                if (
                  "datetime" === a.config.xaxis.type &&
                  void 0 === a.config.xaxis.labels.formatter &&
                  void 0 === a.config.tooltip.x.formatter
                ) {
                  var s = new D(this.ctx);
                  return s.formatDate(s.getDate(e), a.config.tooltip.x.format);
                }
                return t(e, i, n);
              },
            },
            {
              key: "defaultGeneralFormatter",
              value: function (t) {
                return Array.isArray(t)
                  ? t.map(function (t) {
                      return t;
                    })
                  : t;
              },
            },
            {
              key: "defaultYFormatter",
              value: function (t, e, i) {
                var n = this.w;
                return (
                  p.isNumber(t) &&
                    (t =
                      0 !== n.globals.yValueDecimal
                        ? t.toFixed(
                            void 0 !== e.decimalsInFloat
                              ? e.decimalsInFloat
                              : n.globals.yValueDecimal
                          )
                        : n.globals.maxYArr[i] - n.globals.minYArr[i] < 5
                        ? t.toFixed(1)
                        : t.toFixed(0)),
                  t
                );
              },
            },
            {
              key: "setLabelFormatters",
              value: function () {
                var t = this,
                  e = this.w;
                return (
                  (e.globals.xaxisTooltipFormatter = function (e) {
                    return t.defaultGeneralFormatter(e);
                  }),
                  (e.globals.ttKeyFormatter = function (e) {
                    return t.defaultGeneralFormatter(e);
                  }),
                  (e.globals.ttZFormatter = function (t) {
                    return t;
                  }),
                  (e.globals.legendFormatter = function (e) {
                    return t.defaultGeneralFormatter(e);
                  }),
                  void 0 !== e.config.xaxis.labels.formatter
                    ? (e.globals.xLabelFormatter =
                        e.config.xaxis.labels.formatter)
                    : (e.globals.xLabelFormatter = function (t) {
                        if (p.isNumber(t)) {
                          if (
                            !e.config.xaxis.convertedCatToNumeric &&
                            "numeric" === e.config.xaxis.type
                          ) {
                            if (p.isNumber(e.config.xaxis.decimalsInFloat))
                              return t.toFixed(e.config.xaxis.decimalsInFloat);
                            var i = e.globals.maxX - e.globals.minX;
                            return i > 0 && i < 100
                              ? t.toFixed(1)
                              : t.toFixed(0);
                          }
                          return e.globals.isBarHorizontal &&
                            e.globals.maxY - e.globals.minYArr < 4
                            ? t.toFixed(1)
                            : t.toFixed(0);
                        }
                        return t;
                      }),
                  "function" == typeof e.config.tooltip.x.formatter
                    ? (e.globals.ttKeyFormatter = e.config.tooltip.x.formatter)
                    : (e.globals.ttKeyFormatter = e.globals.xLabelFormatter),
                  "function" == typeof e.config.xaxis.tooltip.formatter &&
                    (e.globals.xaxisTooltipFormatter =
                      e.config.xaxis.tooltip.formatter),
                  (Array.isArray(e.config.tooltip.y) ||
                    void 0 !== e.config.tooltip.y.formatter) &&
                    (e.globals.ttVal = e.config.tooltip.y),
                  void 0 !== e.config.tooltip.z.formatter &&
                    (e.globals.ttZFormatter = e.config.tooltip.z.formatter),
                  void 0 !== e.config.legend.formatter &&
                    (e.globals.legendFormatter = e.config.legend.formatter),
                  e.config.yaxis.forEach(function (i, n) {
                    void 0 !== i.labels.formatter
                      ? (e.globals.yLabelFormatters[n] = i.labels.formatter)
                      : (e.globals.yLabelFormatters[n] = function (a) {
                          return e.globals.xyCharts
                            ? Array.isArray(a)
                              ? a.map(function (e) {
                                  return t.defaultYFormatter(e, i, n);
                                })
                              : t.defaultYFormatter(a, i, n)
                            : a;
                        });
                  }),
                  e.globals
                );
              },
            },
            {
              key: "heatmapLabelFormatters",
              value: function () {
                var t = this.w;
                if ("heatmap" === t.config.chart.type) {
                  t.globals.yAxisScale[0].result =
                    t.globals.seriesNames.slice();
                  var e = t.globals.seriesNames.reduce(function (t, e) {
                    return t.length > e.length ? t : e;
                  }, 0);
                  (t.globals.yAxisScale[0].niceMax = e),
                    (t.globals.yAxisScale[0].niceMin = e);
                }
              },
            },
          ]),
          t
        );
      })(),
      W = (function () {
        function t(i) {
          e(this, t), (this.ctx = i), (this.w = i.w);
        }
        return (
          n(t, [
            {
              key: "getLabel",
              value: function (t, e, i, n) {
                var a =
                    arguments.length > 4 && void 0 !== arguments[4]
                      ? arguments[4]
                      : [],
                  s =
                    arguments.length > 5 && void 0 !== arguments[5]
                      ? arguments[5]
                      : "12px",
                  r = this.w,
                  o = void 0 === t[n] ? "" : t[n],
                  l = o,
                  c = r.globals.xLabelFormatter,
                  h = r.config.xaxis.labels.formatter,
                  d = !1,
                  u = new Y(this.ctx),
                  f = o;
                (l = u.xLabelFormat(c, o, f, {
                  i: n,
                  dateFormatter: new D(this.ctx).formatDate,
                  w: r,
                })),
                  void 0 !== h &&
                    (l = h(o, t[n], {
                      i: n,
                      dateFormatter: new D(this.ctx).formatDate,
                      w: r,
                    }));
                var p = function (t) {
                  var i = null;
                  return (
                    e.forEach(function (t) {
                      "month" === t.unit
                        ? (i = "year")
                        : "day" === t.unit
                        ? (i = "month")
                        : "hour" === t.unit
                        ? (i = "day")
                        : "minute" === t.unit && (i = "hour");
                    }),
                    i === t
                  );
                };
                e.length > 0
                  ? ((d = p(e[n].unit)), (i = e[n].position), (l = e[n].value))
                  : "datetime" === r.config.xaxis.type &&
                    void 0 === h &&
                    (l = ""),
                  void 0 === l && (l = ""),
                  (l = Array.isArray(l) ? l : l.toString());
                var g = new m(this.ctx),
                  x = {};
                x = r.globals.rotateXLabels
                  ? g.getTextRects(
                      l,
                      parseInt(s, 10),
                      null,
                      "rotate(".concat(r.config.xaxis.labels.rotate, " 0 0)"),
                      !1
                    )
                  : g.getTextRects(l, parseInt(s, 10));
                var v =
                  !r.config.xaxis.labels.showDuplicates && this.ctx.timeScale;
                return (
                  !Array.isArray(l) &&
                    (0 === l.indexOf("NaN") ||
                      0 === l.toLowerCase().indexOf("invalid") ||
                      l.toLowerCase().indexOf("infinity") >= 0 ||
                      (a.indexOf(l) >= 0 && v)) &&
                    (l = ""),
                  { x: i, text: l, textRect: x, isBold: d }
                );
              },
            },
            {
              key: "checkLabelBasedOnTickamount",
              value: function (t, e, i) {
                var n = this.w,
                  a = n.config.xaxis.tickAmount;
                return (
                  "dataPoints" === a &&
                    (a = Math.round(n.globals.gridWidth / 120)),
                  a > i || t % Math.round(i / (a + 1)) == 0 || (e.text = ""),
                  e
                );
              },
            },
            {
              key: "checkForOverflowingLabels",
              value: function (t, e, i, n, a) {
                var s = this.w;
                if (
                  (0 === t && s.globals.skipFirstTimelinelabel && (e.text = ""),
                  t === i - 1 &&
                    s.globals.skipLastTimelinelabel &&
                    (e.text = ""),
                  s.config.xaxis.labels.hideOverlappingLabels && n.length > 0)
                ) {
                  var r = a[a.length - 1];
                  e.x <
                    r.textRect.width /
                      (s.globals.rotateXLabels
                        ? Math.abs(s.config.xaxis.labels.rotate) / 12
                        : 1.01) +
                      r.x && (e.text = "");
                }
                return e;
              },
            },
            {
              key: "checkForReversedLabels",
              value: function (t, e) {
                var i = this.w;
                return (
                  i.config.yaxis[t] &&
                    i.config.yaxis[t].reversed &&
                    e.reverse(),
                  e
                );
              },
            },
            {
              key: "isYAxisHidden",
              value: function (t) {
                var e = this.w,
                  i = new y(this.ctx);
                return (
                  !e.config.yaxis[t].show ||
                  (!e.config.yaxis[t].showForNullSeries &&
                    i.isSeriesNull(t) &&
                    -1 === e.globals.collapsedSeriesIndices.indexOf(t))
                );
              },
            },
            {
              key: "getYAxisForeColor",
              value: function (t, e) {
                var i = this.w;
                return (
                  Array.isArray(t) &&
                    i.globals.yAxisScale[e] &&
                    this.ctx.theme.pushExtraColors(
                      t,
                      i.globals.yAxisScale[e].result.length,
                      !1
                    ),
                  t
                );
              },
            },
            {
              key: "drawYAxisTicks",
              value: function (t, e, i, n, a, s, r) {
                var o = this.w,
                  l = new m(this.ctx),
                  c = o.globals.translateY;
                if (n.show && e > 0) {
                  !0 === o.config.yaxis[a].opposite && (t += n.width);
                  for (var h = e; h >= 0; h--) {
                    var d = c + e / 10 + o.config.yaxis[a].labels.offsetY - 1;
                    o.globals.isBarHorizontal && (d = s * h),
                      "heatmap" === o.config.chart.type && (d += s / 2);
                    var u = l.drawLine(
                      t + i.offsetX - n.width + n.offsetX,
                      d + n.offsetY,
                      t + i.offsetX + n.offsetX,
                      d + n.offsetY,
                      n.color
                    );
                    r.add(u), (c += s);
                  }
                }
              },
            },
          ]),
          t
        );
      })(),
      B = (function () {
        function t(i) {
          e(this, t), (this.ctx = i), (this.w = i.w);
        }
        return (
          n(t, [
            {
              key: "scaleSvgNode",
              value: function (t, e) {
                var i = parseFloat(t.getAttributeNS(null, "width")),
                  n = parseFloat(t.getAttributeNS(null, "height"));
                t.setAttributeNS(null, "width", i * e),
                  t.setAttributeNS(null, "height", n * e),
                  t.setAttributeNS(null, "viewBox", "0 0 " + i + " " + n);
              },
            },
            {
              key: "fixSvgStringForIe11",
              value: function (t) {
                if (!p.isIE11()) return t;
                var e = 0,
                  i = t.replace(
                    /xmlns="http:\/\/www.w3.org\/2000\/svg"/g,
                    function (t) {
                      return 2 == ++e
                        ? 'xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:svgjs="http://svgjs.dev"'
                        : t;
                    }
                  );
                return (i = i.replace(/xmlns:NS\d+=""/g, "")).replace(
                  /NS\d+:(\w+:\w+=")/g,
                  "$1"
                );
              },
            },
            {
              key: "getSvgString",
              value: function (t) {
                var e = this.w.globals.dom.Paper.svg();
                if (1 !== t) {
                  var i = this.w.globals.dom.Paper.node.cloneNode(!0);
                  this.scaleSvgNode(i, t),
                    (e = new XMLSerializer().serializeToString(i));
                }
                return this.fixSvgStringForIe11(e);
              },
            },
            {
              key: "cleanup",
              value: function () {
                var t = this.w,
                  e = t.globals.dom.baseEl.getElementsByClassName(
                    "apexcharts-xcrosshairs"
                  ),
                  i = t.globals.dom.baseEl.getElementsByClassName(
                    "apexcharts-ycrosshairs"
                  ),
                  n = t.globals.dom.baseEl.querySelectorAll(
                    ".apexcharts-zoom-rect, .apexcharts-selection-rect"
                  );
                Array.prototype.forEach.call(n, function (t) {
                  t.setAttribute("width", 0);
                }),
                  e &&
                    e[0] &&
                    (e[0].setAttribute("x", -500),
                    e[0].setAttribute("x1", -500),
                    e[0].setAttribute("x2", -500)),
                  i &&
                    i[0] &&
                    (i[0].setAttribute("y", -100),
                    i[0].setAttribute("y1", -100),
                    i[0].setAttribute("y2", -100));
              },
            },
            {
              key: "svgUrl",
              value: function () {
                this.cleanup();
                var t = this.getSvgString(),
                  e = new Blob([t], { type: "image/svg+xml;charset=utf-8" });
                return URL.createObjectURL(e);
              },
            },
            {
              key: "dataURI",
              value: function (t) {
                var e = this;
                return new Promise(function (i) {
                  var n = e.w,
                    a = t ? t.scale || t.width / n.globals.svgWidth : 1;
                  e.cleanup();
                  var s = document.createElement("canvas");
                  (s.width = n.globals.svgWidth * a),
                    (s.height =
                      parseInt(n.globals.dom.elWrap.style.height, 10) * a);
                  var r =
                      "transparent" === n.config.chart.background
                        ? "#fff"
                        : n.config.chart.background,
                    o = s.getContext("2d");
                  (o.fillStyle = r),
                    o.fillRect(0, 0, s.width * a, s.height * a);
                  var l = e.getSvgString(a);
                  if (window.canvg && p.isIE11()) {
                    var c = window.canvg.Canvg.fromString(o, l, {
                      ignoreClear: !0,
                      ignoreDimensions: !0,
                    });
                    c.start();
                    var h = s.msToBlob();
                    c.stop(), i({ blob: h });
                  } else {
                    var d = "data:image/svg+xml," + encodeURIComponent(l),
                      u = new Image();
                    (u.crossOrigin = "anonymous"),
                      (u.onload = function () {
                        if ((o.drawImage(u, 0, 0), s.msToBlob)) {
                          var t = s.msToBlob();
                          i({ blob: t });
                        } else {
                          var e = s.toDataURL("image/png");
                          i({ imgURI: e });
                        }
                      }),
                      (u.src = d);
                  }
                });
              },
            },
            {
              key: "exportToSVG",
              value: function () {
                this.triggerDownload(
                  this.svgUrl(),
                  this.w.config.chart.toolbar.export.svg.filename,
                  ".svg"
                );
              },
            },
            {
              key: "exportToPng",
              value: function () {
                var t = this;
                this.dataURI().then(function (e) {
                  var i = e.imgURI,
                    n = e.blob;
                  n
                    ? navigator.msSaveOrOpenBlob(
                        n,
                        t.w.globals.chartID + ".png"
                      )
                    : t.triggerDownload(
                        i,
                        t.w.config.chart.toolbar.export.png.filename,
                        ".png"
                      );
                });
              },
            },
            {
              key: "exportToCSV",
              value: function (t) {
                var e = this,
                  i = t.series,
                  n = t.columnDelimiter,
                  a = t.lineDelimiter,
                  s = void 0 === a ? "\n" : a,
                  r = this.w,
                  o = [],
                  l = [],
                  c = "data:text/csv;charset=utf-8,\ufeff",
                  h = new F(this.ctx),
                  d = new W(this.ctx),
                  u = function (t) {
                    var i = "";
                    if (r.globals.axisCharts) {
                      if (
                        "category" === r.config.xaxis.type ||
                        r.config.xaxis.convertedCatToNumeric
                      )
                        if (r.globals.isBarHorizontal) {
                          var a = r.globals.yLabelFormatters[0],
                            s = new M(e.ctx).getActiveConfigSeriesIndex();
                          i = a(r.globals.labels[t], {
                            seriesIndex: s,
                            dataPointIndex: t,
                            w: r,
                          });
                        } else
                          i = d.getLabel(
                            r.globals.labels,
                            r.globals.timescaleLabels,
                            0,
                            t
                          ).text;
                      "datetime" === r.config.xaxis.type &&
                        (r.config.xaxis.categories.length
                          ? (i = r.config.xaxis.categories[t])
                          : r.config.labels.length && (i = r.config.labels[t]));
                    } else i = r.config.labels[t];
                    return (
                      Array.isArray(i) && (i = i.join(" ")),
                      p.isNumber(i) ? i : i.split(n).join("")
                    );
                  };
                o.push(r.config.chart.toolbar.export.csv.headerCategory),
                  i.map(function (t, e) {
                    var i = t.name ? t.name : "series-".concat(e);
                    r.globals.axisCharts &&
                      o.push(
                        i.split(n).join("")
                          ? i.split(n).join("")
                          : "series-".concat(e)
                      );
                  }),
                  r.globals.axisCharts ||
                    (o.push(r.config.chart.toolbar.export.csv.headerValue),
                    l.push(o.join(n))),
                  i.map(function (t, e) {
                    r.globals.axisCharts
                      ? (function (t, e) {
                          if (
                            (o.length && 0 === e && l.push(o.join(n)),
                            t.data && t.data.length)
                          )
                            for (var a = 0; a < t.data.length; a++) {
                              o = [];
                              var s = u(a);
                              if (
                                (s ||
                                  (h.isFormatXY()
                                    ? (s = i[e].data[a].x)
                                    : h.isFormat2DArray() &&
                                      (s = i[e].data[a]
                                        ? i[e].data[a][0]
                                        : "")),
                                0 === e)
                              ) {
                                o.push(
                                  ((d = s),
                                  "datetime" === r.config.xaxis.type &&
                                  String(d).length >= 10
                                    ? r.config.chart.toolbar.export.csv.dateFormatter(
                                        s
                                      )
                                    : p.isNumber(s)
                                    ? s
                                    : s.split(n).join(""))
                                );
                                for (
                                  var c = 0;
                                  c < r.globals.series.length;
                                  c++
                                )
                                  o.push(r.globals.series[c][a]);
                              }
                              ("candlestick" === r.config.chart.type ||
                                (t.type && "candlestick" === t.type)) &&
                                (o.pop(),
                                o.push(r.globals.seriesCandleO[e][a]),
                                o.push(r.globals.seriesCandleH[e][a]),
                                o.push(r.globals.seriesCandleL[e][a]),
                                o.push(r.globals.seriesCandleC[e][a])),
                                ("boxPlot" === r.config.chart.type ||
                                  (t.type && "boxPlot" === t.type)) &&
                                  (o.pop(),
                                  o.push(r.globals.seriesCandleO[e][a]),
                                  o.push(r.globals.seriesCandleH[e][a]),
                                  o.push(r.globals.seriesCandleM[e][a]),
                                  o.push(r.globals.seriesCandleL[e][a]),
                                  o.push(r.globals.seriesCandleC[e][a])),
                                "rangeBar" === r.config.chart.type &&
                                  (o.pop(),
                                  o.push(r.globals.seriesRangeStart[e][a]),
                                  o.push(r.globals.seriesRangeEnd[e][a])),
                                o.length && l.push(o.join(n));
                            }
                          var d;
                        })(t, e)
                      : ((o = []).push(r.globals.labels[e].split(n).join("")),
                        o.push(r.globals.series[e]),
                        l.push(o.join(n)));
                  }),
                  (c += l.join(s)),
                  this.triggerDownload(
                    encodeURI(c),
                    r.config.chart.toolbar.export.csv.filename,
                    ".csv"
                  );
              },
            },
            {
              key: "triggerDownload",
              value: function (t, e, i) {
                var n = document.createElement("a");
                (n.href = t),
                  (n.download = (e || this.w.globals.chartID) + i),
                  document.body.appendChild(n),
                  n.click(),
                  document.body.removeChild(n);
              },
            },
          ]),
          t
        );
      })(),
      j = (function () {
        function t(i) {
          e(this, t), (this.ctx = i), (this.w = i.w);
          var n = this.w;
          (this.axesUtils = new W(i)),
            (this.xaxisLabels = n.globals.labels.slice()),
            n.globals.timescaleLabels.length > 0 &&
              !n.globals.isBarHorizontal &&
              (this.xaxisLabels = n.globals.timescaleLabels.slice()),
            n.config.xaxis.overwriteCategories &&
              (this.xaxisLabels = n.config.xaxis.overwriteCategories),
            (this.drawnLabels = []),
            (this.drawnLabelsRects = []),
            "top" === n.config.xaxis.position
              ? (this.offY = 0)
              : (this.offY = n.globals.gridHeight + 1),
            (this.offY = this.offY + n.config.xaxis.axisBorder.offsetY),
            (this.isCategoryBarHorizontal =
              "bar" === n.config.chart.type &&
              n.config.plotOptions.bar.horizontal),
            (this.xaxisFontSize = n.config.xaxis.labels.style.fontSize),
            (this.xaxisFontFamily = n.config.xaxis.labels.style.fontFamily),
            (this.xaxisForeColors = n.config.xaxis.labels.style.colors),
            (this.xaxisBorderWidth = n.config.xaxis.axisBorder.width),
            this.isCategoryBarHorizontal &&
              (this.xaxisBorderWidth =
                n.config.yaxis[0].axisBorder.width.toString()),
            this.xaxisBorderWidth.indexOf("%") > -1
              ? (this.xaxisBorderWidth =
                  (n.globals.gridWidth * parseInt(this.xaxisBorderWidth, 10)) /
                  100)
              : (this.xaxisBorderWidth = parseInt(this.xaxisBorderWidth, 10)),
            (this.xaxisBorderHeight = n.config.xaxis.axisBorder.height),
            (this.yaxis = n.config.yaxis[0]);
        }
        return (
          n(t, [
            {
              key: "drawXaxis",
              value: function () {
                var t,
                  e = this,
                  i = this.w,
                  n = new m(this.ctx),
                  a = n.group({
                    class: "apexcharts-xaxis",
                    transform: "translate("
                      .concat(i.config.xaxis.offsetX, ", ")
                      .concat(i.config.xaxis.offsetY, ")"),
                  }),
                  s = n.group({
                    class: "apexcharts-xaxis-texts-g",
                    transform: "translate("
                      .concat(i.globals.translateXAxisX, ", ")
                      .concat(i.globals.translateXAxisY, ")"),
                  });
                a.add(s);
                for (
                  var r = i.globals.padHorizontal, o = [], l = 0;
                  l < this.xaxisLabels.length;
                  l++
                )
                  o.push(this.xaxisLabels[l]);
                var c = o.length;
                if (i.globals.isXNumeric) {
                  var h = c > 1 ? c - 1 : c;
                  (t = i.globals.gridWidth / h),
                    (r = r + t / 2 + i.config.xaxis.labels.offsetX);
                } else
                  (t = i.globals.gridWidth / o.length),
                    (r = r + t + i.config.xaxis.labels.offsetX);
                for (
                  var d = function (a) {
                      var l = r - t / 2 + i.config.xaxis.labels.offsetX;
                      0 === a &&
                        1 === c &&
                        t / 2 === r &&
                        1 === i.globals.dataPoints &&
                        (l = i.globals.gridWidth / 2);
                      var h = e.axesUtils.getLabel(
                          o,
                          i.globals.timescaleLabels,
                          l,
                          a,
                          e.drawnLabels,
                          e.xaxisFontSize
                        ),
                        d = 28;
                      if (
                        (i.globals.rotateXLabels && (d = 22),
                        (h =
                          void 0 !== i.config.xaxis.tickAmount &&
                          "dataPoints" !== i.config.xaxis.tickAmount &&
                          "datetime" !== i.config.xaxis.type
                            ? e.axesUtils.checkLabelBasedOnTickamount(a, h, c)
                            : e.axesUtils.checkForOverflowingLabels(
                                a,
                                h,
                                c,
                                e.drawnLabels,
                                e.drawnLabelsRects
                              )).text && i.globals.xaxisLabelsCount++,
                        i.config.xaxis.labels.show)
                      ) {
                        var u = n.drawText({
                          x: h.x,
                          y:
                            e.offY +
                            i.config.xaxis.labels.offsetY +
                            d -
                            ("top" === i.config.xaxis.position
                              ? i.globals.xAxisHeight +
                                i.config.xaxis.axisTicks.height -
                                2
                              : 0),
                          text: h.text,
                          textAnchor: "middle",
                          fontWeight: h.isBold
                            ? 600
                            : i.config.xaxis.labels.style.fontWeight,
                          fontSize: e.xaxisFontSize,
                          fontFamily: e.xaxisFontFamily,
                          foreColor: Array.isArray(e.xaxisForeColors)
                            ? i.config.xaxis.convertedCatToNumeric
                              ? e.xaxisForeColors[i.globals.minX + a - 1]
                              : e.xaxisForeColors[a]
                            : e.xaxisForeColors,
                          isPlainText: !1,
                          cssClass:
                            "apexcharts-xaxis-label " +
                            i.config.xaxis.labels.style.cssClass,
                        });
                        s.add(u);
                        var f = document.createElementNS(
                          i.globals.SVGNS,
                          "title"
                        );
                        (f.textContent = Array.isArray(h.text)
                          ? h.text.join(" ")
                          : h.text),
                          u.node.appendChild(f),
                          "" !== h.text &&
                            (e.drawnLabels.push(h.text),
                            e.drawnLabelsRects.push(h));
                      }
                      r += t;
                    },
                    u = 0;
                  u <= c - 1;
                  u++
                )
                  d(u);
                if (void 0 !== i.config.xaxis.title.text) {
                  var f = n.group({ class: "apexcharts-xaxis-title" }),
                    p = n.drawText({
                      x: i.globals.gridWidth / 2 + i.config.xaxis.title.offsetX,
                      y:
                        this.offY +
                        parseFloat(this.xaxisFontSize) +
                        i.globals.xAxisLabelsHeight +
                        i.config.xaxis.title.offsetY,
                      text: i.config.xaxis.title.text,
                      textAnchor: "middle",
                      fontSize: i.config.xaxis.title.style.fontSize,
                      fontFamily: i.config.xaxis.title.style.fontFamily,
                      fontWeight: i.config.xaxis.title.style.fontWeight,
                      foreColor: i.config.xaxis.title.style.color,
                      cssClass:
                        "apexcharts-xaxis-title-text " +
                        i.config.xaxis.title.style.cssClass,
                    });
                  f.add(p), a.add(f);
                }
                if (i.config.xaxis.axisBorder.show) {
                  var g = i.globals.barPadForNumericAxis,
                    x = n.drawLine(
                      i.globals.padHorizontal +
                        i.config.xaxis.axisBorder.offsetX -
                        g,
                      this.offY,
                      this.xaxisBorderWidth + g,
                      this.offY,
                      i.config.xaxis.axisBorder.color,
                      0,
                      this.xaxisBorderHeight
                    );
                  a.add(x);
                }
                return a;
              },
            },
            {
              key: "drawXaxisInversed",
              value: function (t) {
                var e,
                  i,
                  n = this,
                  a = this.w,
                  s = new m(this.ctx),
                  r = a.config.yaxis[0].opposite
                    ? a.globals.translateYAxisX[t]
                    : 0,
                  o = s.group({
                    class: "apexcharts-yaxis apexcharts-xaxis-inversed",
                    rel: t,
                  }),
                  l = s.group({
                    class:
                      "apexcharts-yaxis-texts-g apexcharts-xaxis-inversed-texts-g",
                    transform: "translate(" + r + ", 0)",
                  });
                o.add(l);
                var c = [];
                if (a.config.yaxis[t].show)
                  for (var h = 0; h < this.xaxisLabels.length; h++)
                    c.push(this.xaxisLabels[h]);
                (e = a.globals.gridHeight / c.length), (i = -e / 2.2);
                var d = a.globals.yLabelFormatters[0],
                  u = a.config.yaxis[0].labels;
                if (u.show)
                  for (
                    var f = function (r) {
                        var o = void 0 === c[r] ? "" : c[r];
                        o = d(o, { seriesIndex: t, dataPointIndex: r, w: a });
                        var h = n.axesUtils.getYAxisForeColor(
                            u.style.colors,
                            t
                          ),
                          f = 0;
                        Array.isArray(o) &&
                          (f = (o.length / 2) * parseInt(u.style.fontSize, 10));
                        var p = s.drawText({
                          x: u.offsetX - 15,
                          y: i + e + u.offsetY - f,
                          text: o,
                          textAnchor: n.yaxis.opposite ? "start" : "end",
                          foreColor: Array.isArray(h) ? h[r] : h,
                          fontSize: u.style.fontSize,
                          fontFamily: u.style.fontFamily,
                          fontWeight: u.style.fontWeight,
                          isPlainText: !1,
                          cssClass:
                            "apexcharts-yaxis-label " + u.style.cssClass,
                        });
                        l.add(p);
                        var g = document.createElementNS(
                          a.globals.SVGNS,
                          "title"
                        );
                        if (
                          ((g.textContent = Array.isArray(o) ? o.join(" ") : o),
                          p.node.appendChild(g),
                          0 !== a.config.yaxis[t].labels.rotate)
                        ) {
                          var x = s.rotateAroundCenter(p.node);
                          p.node.setAttribute(
                            "transform",
                            "rotate("
                              .concat(a.config.yaxis[t].labels.rotate, " 0 ")
                              .concat(x.y, ")")
                          );
                        }
                        i += e;
                      },
                      p = 0;
                    p <= c.length - 1;
                    p++
                  )
                    f(p);
                if (void 0 !== a.config.yaxis[0].title.text) {
                  var g = s.group({
                      class:
                        "apexcharts-yaxis-title apexcharts-xaxis-title-inversed",
                      transform: "translate(" + r + ", 0)",
                    }),
                    x = s.drawText({
                      x: 0,
                      y: a.globals.gridHeight / 2,
                      text: a.config.yaxis[0].title.text,
                      textAnchor: "middle",
                      foreColor: a.config.yaxis[0].title.style.color,
                      fontSize: a.config.yaxis[0].title.style.fontSize,
                      fontWeight: a.config.yaxis[0].title.style.fontWeight,
                      fontFamily: a.config.yaxis[0].title.style.fontFamily,
                      cssClass:
                        "apexcharts-yaxis-title-text " +
                        a.config.yaxis[0].title.style.cssClass,
                    });
                  g.add(x), o.add(g);
                }
                var v = 0;
                this.isCategoryBarHorizontal &&
                  a.config.yaxis[0].opposite &&
                  (v = a.globals.gridWidth);
                var b = a.config.xaxis.axisBorder;
                if (b.show) {
                  var y = s.drawLine(
                    a.globals.padHorizontal + b.offsetX + v,
                    1 + b.offsetY,
                    a.globals.padHorizontal + b.offsetX + v,
                    a.globals.gridHeight + b.offsetY,
                    b.color,
                    0
                  );
                  o.add(y);
                }
                return (
                  a.config.yaxis[0].axisTicks.show &&
                    this.axesUtils.drawYAxisTicks(
                      v,
                      c.length,
                      a.config.yaxis[0].axisBorder,
                      a.config.yaxis[0].axisTicks,
                      0,
                      e,
                      o
                    ),
                  o
                );
              },
            },
            {
              key: "drawXaxisTicks",
              value: function (t, e) {
                var i = this.w,
                  n = t;
                if (!(t < 0 || t - 2 > i.globals.gridWidth)) {
                  var a = this.offY + i.config.xaxis.axisTicks.offsetY,
                    s = a + i.config.xaxis.axisTicks.height;
                  if (
                    ("top" === i.config.xaxis.position &&
                      (s = a - i.config.xaxis.axisTicks.height),
                    i.config.xaxis.axisTicks.show)
                  ) {
                    var r = new m(this.ctx).drawLine(
                      t + i.config.xaxis.axisTicks.offsetX,
                      a + i.config.xaxis.offsetY,
                      n + i.config.xaxis.axisTicks.offsetX,
                      s + i.config.xaxis.offsetY,
                      i.config.xaxis.axisTicks.color
                    );
                    e.add(r), r.node.classList.add("apexcharts-xaxis-tick");
                  }
                }
              },
            },
            {
              key: "getXAxisTicksPositions",
              value: function () {
                var t = this.w,
                  e = [],
                  i = this.xaxisLabels.length,
                  n = t.globals.padHorizontal;
                if (t.globals.timescaleLabels.length > 0)
                  for (var a = 0; a < i; a++)
                    (n = this.xaxisLabels[a].position), e.push(n);
                else
                  for (var s = i, r = 0; r < s; r++) {
                    var o = s;
                    t.globals.isXNumeric &&
                      "bar" !== t.config.chart.type &&
                      (o -= 1),
                      (n += t.globals.gridWidth / o),
                      e.push(n);
                  }
                return e;
              },
            },
            {
              key: "xAxisLabelCorrections",
              value: function () {
                var t = this.w,
                  e = new m(this.ctx),
                  i = t.globals.dom.baseEl.querySelector(
                    ".apexcharts-xaxis-texts-g"
                  ),
                  n = t.globals.dom.baseEl.querySelectorAll(
                    ".apexcharts-xaxis-texts-g text"
                  ),
                  a = t.globals.dom.baseEl.querySelectorAll(
                    ".apexcharts-yaxis-inversed text"
                  ),
                  s = t.globals.dom.baseEl.querySelectorAll(
                    ".apexcharts-xaxis-inversed-texts-g text tspan"
                  );
                if (
                  t.globals.rotateXLabels ||
                  t.config.xaxis.labels.rotateAlways
                )
                  for (var r = 0; r < n.length; r++) {
                    var o = e.rotateAroundCenter(n[r]);
                    (o.y = o.y - 1),
                      (o.x = o.x + 1),
                      n[r].setAttribute(
                        "transform",
                        "rotate("
                          .concat(t.config.xaxis.labels.rotate, " ")
                          .concat(o.x, " ")
                          .concat(o.y, ")")
                      ),
                      n[r].setAttribute("text-anchor", "end"),
                      i.setAttribute(
                        "transform",
                        "translate(0, ".concat(-10, ")")
                      );
                    var l = n[r].childNodes;
                    t.config.xaxis.labels.trim &&
                      Array.prototype.forEach.call(l, function (i) {
                        e.placeTextWithEllipsis(
                          i,
                          i.textContent,
                          t.globals.xAxisLabelsHeight -
                            ("bottom" === t.config.legend.position ? 20 : 10)
                        );
                      });
                  }
                else
                  !(function () {
                    for (
                      var i =
                          t.globals.gridWidth / (t.globals.labels.length + 1),
                        a = 0;
                      a < n.length;
                      a++
                    ) {
                      var s = n[a].childNodes;
                      t.config.xaxis.labels.trim &&
                        "datetime" !== t.config.xaxis.type &&
                        Array.prototype.forEach.call(s, function (t) {
                          e.placeTextWithEllipsis(t, t.textContent, i);
                        });
                    }
                  })();
                if (a.length > 0) {
                  var c = a[a.length - 1].getBBox(),
                    h = a[0].getBBox();
                  c.x < -20 &&
                    a[a.length - 1].parentNode.removeChild(a[a.length - 1]),
                    h.x + h.width > t.globals.gridWidth &&
                      !t.globals.isBarHorizontal &&
                      a[0].parentNode.removeChild(a[0]);
                  for (var d = 0; d < s.length; d++)
                    e.placeTextWithEllipsis(
                      s[d],
                      s[d].textContent,
                      t.config.yaxis[0].labels.maxWidth -
                        2 * parseFloat(t.config.yaxis[0].title.style.fontSize) -
                        20
                    );
                }
              },
            },
          ]),
          t
        );
      })(),
      V = (function () {
        function t(i) {
          e(this, t), (this.ctx = i), (this.w = i.w);
          var n = this.w;
          (this.xaxisLabels = n.globals.labels.slice()),
            (this.axesUtils = new W(i)),
            (this.isTimelineBar =
              "datetime" === n.config.xaxis.type &&
              n.globals.seriesRangeBarTimeline.length),
            n.globals.timescaleLabels.length > 0 &&
              (this.xaxisLabels = n.globals.timescaleLabels.slice());
        }
        return (
          n(t, [
            {
              key: "drawGridArea",
              value: function () {
                var t =
                    arguments.length > 0 && void 0 !== arguments[0]
                      ? arguments[0]
                      : null,
                  e = this.w,
                  i = new m(this.ctx);
                null === t && (t = i.group({ class: "apexcharts-grid" }));
                var n = i.drawLine(
                    e.globals.padHorizontal,
                    1,
                    e.globals.padHorizontal,
                    e.globals.gridHeight,
                    "transparent"
                  ),
                  a = i.drawLine(
                    e.globals.padHorizontal,
                    e.globals.gridHeight,
                    e.globals.gridWidth,
                    e.globals.gridHeight,
                    "transparent"
                  );
                return t.add(a), t.add(n), t;
              },
            },
            {
              key: "drawGrid",
              value: function () {
                var t = null;
                return (
                  this.w.globals.axisCharts &&
                    ((t = this.renderGrid()), this.drawGridArea(t.el)),
                  t
                );
              },
            },
            {
              key: "createGridMask",
              value: function () {
                var t = this.w,
                  e = t.globals,
                  i = new m(this.ctx),
                  n = Array.isArray(t.config.stroke.width)
                    ? 0
                    : t.config.stroke.width;
                if (Array.isArray(t.config.stroke.width)) {
                  var a = 0;
                  t.config.stroke.width.forEach(function (t) {
                    a = Math.max(a, t);
                  }),
                    (n = a);
                }
                (e.dom.elGridRectMask = document.createElementNS(
                  e.SVGNS,
                  "clipPath"
                )),
                  e.dom.elGridRectMask.setAttribute(
                    "id",
                    "gridRectMask".concat(e.cuid)
                  ),
                  (e.dom.elGridRectMarkerMask = document.createElementNS(
                    e.SVGNS,
                    "clipPath"
                  )),
                  e.dom.elGridRectMarkerMask.setAttribute(
                    "id",
                    "gridRectMarkerMask".concat(e.cuid)
                  ),
                  (e.dom.elForecastMask = document.createElementNS(
                    e.SVGNS,
                    "clipPath"
                  )),
                  e.dom.elForecastMask.setAttribute(
                    "id",
                    "forecastMask".concat(e.cuid)
                  ),
                  (e.dom.elNonForecastMask = document.createElementNS(
                    e.SVGNS,
                    "clipPath"
                  )),
                  e.dom.elNonForecastMask.setAttribute(
                    "id",
                    "nonForecastMask".concat(e.cuid)
                  );
                var s = t.config.chart.type,
                  r = 0,
                  o = 0;
                ("bar" === s ||
                  "rangeBar" === s ||
                  "candlestick" === s ||
                  "boxPlot" === s ||
                  t.globals.comboBarCount > 0) &&
                  t.globals.isXNumeric &&
                  !t.globals.isBarHorizontal &&
                  ((r = t.config.grid.padding.left),
                  (o = t.config.grid.padding.right),
                  e.barPadForNumericAxis > r &&
                    ((r = e.barPadForNumericAxis),
                    (o = e.barPadForNumericAxis))),
                  (e.dom.elGridRect = i.drawRect(
                    -n / 2 - r - 2,
                    -n / 2,
                    e.gridWidth + n + o + r + 4,
                    e.gridHeight + n,
                    0,
                    "#fff"
                  )),
                  new y(this).getLargestMarkerSize();
                var l = t.globals.markers.largestSize + 1;
                (e.dom.elGridRectMarker = i.drawRect(
                  2 * -l,
                  2 * -l,
                  e.gridWidth + 4 * l,
                  e.gridHeight + 4 * l,
                  0,
                  "#fff"
                )),
                  e.dom.elGridRectMask.appendChild(e.dom.elGridRect.node),
                  e.dom.elGridRectMarkerMask.appendChild(
                    e.dom.elGridRectMarker.node
                  );
                var c = e.dom.baseEl.querySelector("defs");
                c.appendChild(e.dom.elGridRectMask),
                  c.appendChild(e.dom.elForecastMask),
                  c.appendChild(e.dom.elNonForecastMask),
                  c.appendChild(e.dom.elGridRectMarkerMask);
              },
            },
            {
              key: "_drawGridLines",
              value: function (t) {
                var e = t.i,
                  i = t.x1,
                  n = t.y1,
                  a = t.x2,
                  s = t.y2,
                  r = t.xCount,
                  o = t.parent,
                  l = this.w;
                (0 === e && l.globals.skipFirstTimelinelabel) ||
                  (e === r - 1 &&
                    l.globals.skipLastTimelinelabel &&
                    !l.config.xaxis.labels.formatter) ||
                  "radar" === l.config.chart.type ||
                  (l.config.grid.xaxis.lines.show &&
                    this._drawGridLine({
                      x1: i,
                      y1: n,
                      x2: a,
                      y2: s,
                      parent: o,
                    }),
                  new j(this.ctx).drawXaxisTicks(i, this.elg));
              },
            },
            {
              key: "_drawGridLine",
              value: function (t) {
                var e = t.x1,
                  i = t.y1,
                  n = t.x2,
                  a = t.y2,
                  s = t.parent,
                  r = this.w,
                  o = s.node.classList.contains(
                    "apexcharts-gridlines-horizontal"
                  ),
                  l = r.config.grid.strokeDashArray,
                  c = r.globals.barPadForNumericAxis,
                  h = new m(this).drawLine(
                    e - (o ? c : 0),
                    i,
                    n + (o ? c : 0),
                    a,
                    r.config.grid.borderColor,
                    l
                  );
                h.node.classList.add("apexcharts-gridline"), s.add(h);
              },
            },
            {
              key: "_drawGridBandRect",
              value: function (t) {
                var e = t.c,
                  i = t.x1,
                  n = t.y1,
                  a = t.x2,
                  s = t.y2,
                  r = t.type,
                  o = this.w,
                  l = new m(this.ctx),
                  c = o.globals.barPadForNumericAxis;
                if ("column" !== r || "datetime" !== o.config.xaxis.type) {
                  var h = o.config.grid[r].colors[e],
                    d = l.drawRect(
                      i - ("row" === r ? c : 0),
                      n,
                      a + ("row" === r ? 2 * c : 0),
                      s,
                      0,
                      h,
                      o.config.grid[r].opacity
                    );
                  this.elg.add(d),
                    d.attr(
                      "clip-path",
                      "url(#gridRectMask".concat(o.globals.cuid, ")")
                    ),
                    d.node.classList.add("apexcharts-grid-".concat(r));
                }
              },
            },
            {
              key: "_drawXYLines",
              value: function (t) {
                var e = this,
                  i = t.xCount,
                  n = t.tickAmount,
                  a = this.w;
                if (
                  a.config.grid.xaxis.lines.show ||
                  a.config.xaxis.axisTicks.show
                ) {
                  var s,
                    r = a.globals.padHorizontal,
                    o = a.globals.gridHeight;
                  a.globals.timescaleLabels.length
                    ? (function (t) {
                        for (
                          var n = t.xC,
                            a = t.x1,
                            s = t.y1,
                            r = t.x2,
                            o = t.y2,
                            l = 0;
                          l < n;
                          l++
                        )
                          (a = e.xaxisLabels[l].position),
                            (r = e.xaxisLabels[l].position),
                            e._drawGridLines({
                              i: l,
                              x1: a,
                              y1: s,
                              x2: r,
                              y2: o,
                              xCount: i,
                              parent: e.elgridLinesV,
                            });
                      })({ xC: i, x1: r, y1: 0, x2: s, y2: o })
                    : (a.globals.isXNumeric &&
                        (i = a.globals.xAxisScale.result.length),
                      a.config.xaxis.convertedCatToNumeric &&
                        (i = a.globals.xaxisLabelsCount),
                      (function (t) {
                        var n = t.xC,
                          s = t.x1,
                          r = t.y1,
                          o = t.x2,
                          l = t.y2;
                        if (
                          void 0 !== a.config.xaxis.tickAmount &&
                          "dataPoints" !== a.config.xaxis.tickAmount
                        )
                          a.globals.dom.baseEl
                            .querySelectorAll(
                              ".apexcharts-text.apexcharts-xaxis-label tspan:not(:empty)"
                            )
                            .forEach(function (t, n) {
                              var a = t.getBBox();
                              e._drawGridLines({
                                i: n,
                                x1: a.x + a.width / 2,
                                y1: r,
                                x2: a.x + a.width / 2,
                                y2: l,
                                xCount: i,
                                parent: e.elgridLinesV,
                              });
                            });
                        else
                          for (
                            var c = 0;
                            c < n + (a.globals.isXNumeric ? 0 : 1);
                            c++
                          )
                            0 === c &&
                              1 === n &&
                              1 === a.globals.dataPoints &&
                              (o = s = a.globals.gridWidth / 2),
                              e._drawGridLines({
                                i: c,
                                x1: s,
                                y1: r,
                                x2: o,
                                y2: l,
                                xCount: i,
                                parent: e.elgridLinesV,
                              }),
                              (o = s +=
                                a.globals.gridWidth /
                                (a.globals.isXNumeric ? n - 1 : n));
                      })({ xC: i, x1: r, y1: 0, x2: s, y2: o }));
                }
                if (a.config.grid.yaxis.lines.show) {
                  var l = 0,
                    c = 0,
                    h = a.globals.gridWidth,
                    d = n + 1;
                  this.isTimelineBar && (d = a.globals.labels.length);
                  for (var u = 0; u < d + (this.isTimelineBar ? 1 : 0); u++)
                    this._drawGridLine({
                      x1: 0,
                      y1: l,
                      x2: h,
                      y2: c,
                      parent: this.elgridLinesH,
                    }),
                      (c = l +=
                        a.globals.gridHeight / (this.isTimelineBar ? d : n));
                }
              },
            },
            {
              key: "_drawInvertedXYLines",
              value: function (t) {
                var e = t.xCount,
                  i = this.w;
                if (
                  i.config.grid.xaxis.lines.show ||
                  i.config.xaxis.axisTicks.show
                )
                  for (
                    var n,
                      a = i.globals.padHorizontal,
                      s = i.globals.gridHeight,
                      r = 0;
                    r < e + 1;
                    r++
                  )
                    i.config.grid.xaxis.lines.show &&
                      this._drawGridLine({
                        x1: a,
                        y1: 0,
                        x2: n,
                        y2: s,
                        parent: this.elgridLinesV,
                      }),
                      new j(this.ctx).drawXaxisTicks(a, this.elg),
                      (n = a = a + i.globals.gridWidth / e + 0.3);
                if (i.config.grid.yaxis.lines.show)
                  for (
                    var o = 0, l = 0, c = i.globals.gridWidth, h = 0;
                    h < i.globals.dataPoints + 1;
                    h++
                  )
                    this._drawGridLine({
                      x1: 0,
                      y1: o,
                      x2: c,
                      y2: l,
                      parent: this.elgridLinesH,
                    }),
                      (l = o += i.globals.gridHeight / i.globals.dataPoints);
              },
            },
            {
              key: "renderGrid",
              value: function () {
                var t = this.w,
                  e = new m(this.ctx);
                (this.elg = e.group({ class: "apexcharts-grid" })),
                  (this.elgridLinesH = e.group({
                    class: "apexcharts-gridlines-horizontal",
                  })),
                  (this.elgridLinesV = e.group({
                    class: "apexcharts-gridlines-vertical",
                  })),
                  this.elg.add(this.elgridLinesH),
                  this.elg.add(this.elgridLinesV),
                  t.config.grid.show ||
                    (this.elgridLinesV.hide(), this.elgridLinesH.hide());
                for (
                  var i,
                    n = t.globals.yAxisScale.length
                      ? t.globals.yAxisScale[0].result.length - 1
                      : 5,
                    a = 0;
                  a < t.globals.series.length &&
                  (void 0 !== t.globals.yAxisScale[a] &&
                    (n = t.globals.yAxisScale[a].result.length - 1),
                  !(n > 2));
                  a++
                );
                return (
                  !t.globals.isBarHorizontal || this.isTimelineBar
                    ? ((i = this.xaxisLabels.length),
                      this.isTimelineBar &&
                        ((n = t.globals.labels.length),
                        t.config.xaxis.tickAmount &&
                          t.config.xaxis.labels.formatter &&
                          (i = t.config.xaxis.tickAmount)),
                      this._drawXYLines({ xCount: i, tickAmount: n }))
                    : ((i = n),
                      (n = t.globals.xTickAmount),
                      this._drawInvertedXYLines({ xCount: i, tickAmount: n })),
                  this.drawGridBands(i, n),
                  { el: this.elg, xAxisTickWidth: t.globals.gridWidth / i }
                );
              },
            },
            {
              key: "drawGridBands",
              value: function (t, e) {
                var i = this.w;
                if (
                  void 0 !== i.config.grid.row.colors &&
                  i.config.grid.row.colors.length > 0
                )
                  for (
                    var n = 0,
                      a = i.globals.gridHeight / e,
                      s = i.globals.gridWidth,
                      r = 0,
                      o = 0;
                    r < e;
                    r++, o++
                  )
                    o >= i.config.grid.row.colors.length && (o = 0),
                      this._drawGridBandRect({
                        c: o,
                        x1: 0,
                        y1: n,
                        x2: s,
                        y2: a,
                        type: "row",
                      }),
                      (n += i.globals.gridHeight / e);
                if (
                  void 0 !== i.config.grid.column.colors &&
                  i.config.grid.column.colors.length > 0
                )
                  for (
                    var l =
                        i.globals.isBarHorizontal ||
                        ("category" !== i.config.xaxis.type &&
                          !i.config.xaxis.convertedCatToNumeric)
                          ? t
                          : t - 1,
                      c = i.globals.padHorizontal,
                      h = i.globals.padHorizontal + i.globals.gridWidth / l,
                      d = i.globals.gridHeight,
                      u = 0,
                      f = 0;
                    u < t;
                    u++, f++
                  )
                    f >= i.config.grid.column.colors.length && (f = 0),
                      this._drawGridBandRect({
                        c: f,
                        x1: c,
                        y1: 0,
                        x2: h,
                        y2: d,
                        type: "column",
                      }),
                      (c += i.globals.gridWidth / l);
              },
            },
          ]),
          t
        );
      })(),
      G = (function () {
        function t(i) {
          e(this, t), (this.ctx = i), (this.w = i.w);
        }
        return (
          n(t, [
            {
              key: "niceScale",
              value: function (t, e) {
                var i =
                    arguments.length > 2 && void 0 !== arguments[2]
                      ? arguments[2]
                      : 10,
                  n =
                    arguments.length > 3 && void 0 !== arguments[3]
                      ? arguments[3]
                      : 0,
                  a = arguments.length > 4 ? arguments[4] : void 0,
                  s = this.w,
                  r = Math.abs(e - t);
                if (
                  ("dataPoints" ===
                    (i = this._adjustTicksForSmallRange(i, n, r)) &&
                    (i = s.globals.dataPoints - 1),
                  (t === Number.MIN_VALUE && 0 === e) ||
                    (!p.isNumber(t) && !p.isNumber(e)) ||
                    (t === Number.MIN_VALUE && e === -Number.MAX_VALUE))
                ) {
                  (t = 0), (e = i);
                  var o = this.linearScale(t, e, i);
                  return o;
                }
                t > e
                  ? (console.warn("axis.min cannot be greater than axis.max"),
                    (e = t + 0.1))
                  : t === e &&
                    ((t = 0 === t ? 0 : t - 0.5), (e = 0 === e ? 2 : e + 0.5));
                var l = [];
                r < 1 &&
                  a &&
                  ("candlestick" === s.config.chart.type ||
                    "candlestick" === s.config.series[n].type ||
                    "boxPlot" === s.config.chart.type ||
                    "boxPlot" === s.config.series[n].type ||
                    s.globals.isRangeData) &&
                  (e *= 1.01);
                var c = i + 1;
                c < 2 ? (c = 2) : c > 2 && (c -= 2);
                var h = r / c,
                  d = Math.floor(p.log10(h)),
                  u = Math.pow(10, d),
                  f = Math.round(h / u);
                f < 1 && (f = 1);
                var g = f * u,
                  x = g * Math.floor(t / g),
                  m = g * Math.ceil(e / g),
                  v = x;
                if (a && r > 2) {
                  for (; l.push(v), !((v += g) > m); );
                  return { result: l, niceMin: l[0], niceMax: l[l.length - 1] };
                }
                var b = t;
                (l = []).push(b);
                for (var y = Math.abs(e - t) / i, w = 0; w <= i; w++)
                  (b += y), l.push(b);
                return (
                  l[l.length - 2] >= e && l.pop(),
                  { result: l, niceMin: l[0], niceMax: l[l.length - 1] }
                );
              },
            },
            {
              key: "linearScale",
              value: function (t, e) {
                var i =
                    arguments.length > 2 && void 0 !== arguments[2]
                      ? arguments[2]
                      : 10,
                  n = arguments.length > 3 ? arguments[3] : void 0,
                  a = Math.abs(e - t);
                "dataPoints" ===
                  (i = this._adjustTicksForSmallRange(i, n, a)) &&
                  (i = this.w.globals.dataPoints - 1);
                var s = a / i;
                i === Number.MAX_VALUE && ((i = 10), (s = 1));
                for (var r = [], o = t; i >= 0; ) r.push(o), (o += s), (i -= 1);
                return { result: r, niceMin: r[0], niceMax: r[r.length - 1] };
              },
            },
            {
              key: "logarithmicScale",
              value: function (t) {
                for (
                  var e = [], i = Math.ceil(Math.log10(t)) + 1, n = 0;
                  n < i;
                  n++
                )
                  e.push(Math.pow(10, n));
                return { result: e, niceMin: e[0], niceMax: e[e.length - 1] };
              },
            },
            {
              key: "_adjustTicksForSmallRange",
              value: function (t, e, i) {
                var n = t;
                if (
                  void 0 !== e &&
                  this.w.config.yaxis[e].labels.formatter &&
                  void 0 === this.w.config.yaxis[e].tickAmount
                ) {
                  var a = this.w.config.yaxis[e].labels.formatter(1);
                  p.isNumber(Number(a)) && !p.isFloat(a) && (n = Math.ceil(i));
                }
                return n < t ? n : t;
              },
            },
            {
              key: "setYScaleForIndex",
              value: function (t, e, i) {
                var n = this.w.globals,
                  a = this.w.config,
                  s = n.isBarHorizontal ? a.xaxis : a.yaxis[t];
                void 0 === n.yAxisScale[t] && (n.yAxisScale[t] = []);
                var r = Math.abs(i - e);
                if (
                  (s.logarithmic && r <= 5 && (n.invalidLogScale = !0),
                  s.logarithmic && r > 5)
                )
                  (n.allSeriesCollapsed = !1),
                    (n.yAxisScale[t] = this.logarithmicScale(i));
                else if (i !== -Number.MAX_VALUE && p.isNumber(i))
                  if (
                    ((n.allSeriesCollapsed = !1),
                    (void 0 === s.min && void 0 === s.max) || s.forceNiceScale)
                  ) {
                    var o =
                      (void 0 === a.yaxis[t].max &&
                        void 0 === a.yaxis[t].min) ||
                      a.yaxis[t].forceNiceScale;
                    n.yAxisScale[t] = this.niceScale(
                      e,
                      i,
                      s.tickAmount ? s.tickAmount : r < 5 && r > 1 ? r + 1 : 5,
                      t,
                      o
                    );
                  } else
                    n.yAxisScale[t] = this.linearScale(e, i, s.tickAmount, t);
                else n.yAxisScale[t] = this.linearScale(0, 5, 5);
              },
            },
            {
              key: "setXScale",
              value: function (t, e) {
                var i = this.w,
                  n = i.globals,
                  a = i.config.xaxis,
                  s = Math.abs(e - t);
                return (
                  e !== -Number.MAX_VALUE && p.isNumber(e)
                    ? (n.xAxisScale = this.linearScale(
                        t,
                        e,
                        a.tickAmount
                          ? a.tickAmount
                          : s < 5 && s > 1
                          ? s + 1
                          : 5,
                        0
                      ))
                    : (n.xAxisScale = this.linearScale(0, 5, 5)),
                  n.xAxisScale
                );
              },
            },
            {
              key: "setMultipleYScales",
              value: function () {
                var t = this,
                  e = this.w.globals,
                  i = this.w.config,
                  n = e.minYArr.concat([]),
                  a = e.maxYArr.concat([]),
                  s = [];
                i.yaxis.forEach(function (e, r) {
                  var o = r;
                  i.series.forEach(function (t, i) {
                    t.name === e.seriesName &&
                      ((o = i),
                      r !== i
                        ? s.push({
                            index: i,
                            similarIndex: r,
                            alreadyExists: !0,
                          })
                        : s.push({ index: i }));
                  });
                  var l = n[o],
                    c = a[o];
                  t.setYScaleForIndex(r, l, c);
                }),
                  this.sameScaleInMultipleAxes(n, a, s);
              },
            },
            {
              key: "sameScaleInMultipleAxes",
              value: function (t, e, i) {
                var n = this,
                  a = this.w.config,
                  s = this.w.globals,
                  r = [];
                i.forEach(function (t) {
                  t.alreadyExists &&
                    (void 0 === r[t.index] && (r[t.index] = []),
                    r[t.index].push(t.index),
                    r[t.index].push(t.similarIndex));
                }),
                  (s.yAxisSameScaleIndices = r),
                  r.forEach(function (t, e) {
                    r.forEach(function (i, n) {
                      var a, s;
                      e !== n &&
                        ((a = t),
                        (s = i),
                        a.filter(function (t) {
                          return -1 !== s.indexOf(t);
                        })).length > 0 &&
                        (r[e] = r[e].concat(r[n]));
                    });
                  });
                var o = r
                  .map(function (t) {
                    return t.filter(function (e, i) {
                      return t.indexOf(e) === i;
                    });
                  })
                  .map(function (t) {
                    return t.sort();
                  });
                r = r.filter(function (t) {
                  return !!t;
                });
                var l = o.slice(),
                  c = l.map(function (t) {
                    return JSON.stringify(t);
                  });
                l = l.filter(function (t, e) {
                  return c.indexOf(JSON.stringify(t)) === e;
                });
                var h = [],
                  d = [];
                t.forEach(function (t, i) {
                  l.forEach(function (n, a) {
                    n.indexOf(i) > -1 &&
                      (void 0 === h[a] && ((h[a] = []), (d[a] = [])),
                      h[a].push({ key: i, value: t }),
                      d[a].push({ key: i, value: e[i] }));
                  });
                });
                var u = Array.apply(null, Array(l.length)).map(
                    Number.prototype.valueOf,
                    Number.MIN_VALUE
                  ),
                  f = Array.apply(null, Array(l.length)).map(
                    Number.prototype.valueOf,
                    -Number.MAX_VALUE
                  );
                h.forEach(function (t, e) {
                  t.forEach(function (t, i) {
                    u[e] = Math.min(t.value, u[e]);
                  });
                }),
                  d.forEach(function (t, e) {
                    t.forEach(function (t, i) {
                      f[e] = Math.max(t.value, f[e]);
                    });
                  }),
                  t.forEach(function (t, e) {
                    d.forEach(function (t, i) {
                      var r = u[i],
                        o = f[i];
                      a.chart.stacked &&
                        ((o = 0),
                        t.forEach(function (t, e) {
                          t.value !== -Number.MAX_VALUE && (o += t.value),
                            r !== Number.MIN_VALUE && (r += h[i][e].value);
                        })),
                        t.forEach(function (i, l) {
                          t[l].key === e &&
                            (void 0 !== a.yaxis[e].min &&
                              (r =
                                "function" == typeof a.yaxis[e].min
                                  ? a.yaxis[e].min(s.minY)
                                  : a.yaxis[e].min),
                            void 0 !== a.yaxis[e].max &&
                              (o =
                                "function" == typeof a.yaxis[e].max
                                  ? a.yaxis[e].max(s.maxY)
                                  : a.yaxis[e].max),
                            n.setYScaleForIndex(e, r, o));
                        });
                    });
                  });
              },
            },
            {
              key: "autoScaleY",
              value: function (t, e, i) {
                t || (t = this);
                var n = t.w;
                if (
                  n.globals.isMultipleYAxis ||
                  n.globals.collapsedSeries.length
                )
                  return (
                    console.warn(
                      "autoScaleYaxis is not supported in a multi-yaxis chart."
                    ),
                    e
                  );
                var a = n.globals.seriesX[0],
                  s = n.config.chart.stacked;
                return (
                  e.forEach(function (t, r) {
                    for (var o = 0, l = 0; l < a.length; l++)
                      if (a[l] >= i.xaxis.min) {
                        o = l;
                        break;
                      }
                    var c,
                      h,
                      d = n.globals.minYArr[r],
                      u = n.globals.maxYArr[r],
                      f = n.globals.stackedSeriesTotals;
                    n.globals.series.forEach(function (r, l) {
                      var p = r[o];
                      s
                        ? ((p = f[o]),
                          (c = h = p),
                          f.forEach(function (t, e) {
                            a[e] <= i.xaxis.max &&
                              a[e] >= i.xaxis.min &&
                              (t > h && null !== t && (h = t),
                              r[e] < c && null !== r[e] && (c = r[e]));
                          }))
                        : ((c = h = p),
                          r.forEach(function (t, e) {
                            if (a[e] <= i.xaxis.max && a[e] >= i.xaxis.min) {
                              var s = t,
                                r = t;
                              n.globals.series.forEach(function (i, n) {
                                null !== t &&
                                  ((s = Math.min(i[e], s)),
                                  (r = Math.max(i[e], r)));
                              }),
                                r > h && null !== r && (h = r),
                                s < c && null !== s && (c = s);
                            }
                          })),
                        void 0 === c && void 0 === h && ((c = d), (h = u)),
                        (h *= h < 0 ? 0.9 : 1.1) < 0 && h < u && (h = u),
                        (c *= c < 0 ? 1.1 : 0.9) < 0 && c > d && (c = d),
                        e.length > 1
                          ? ((e[l].min = void 0 === t.min ? c : t.min),
                            (e[l].max = void 0 === t.max ? h : t.max))
                          : ((e[0].min = void 0 === t.min ? c : t.min),
                            (e[0].max = void 0 === t.max ? h : t.max));
                    });
                  }),
                  e
                );
              },
            },
          ]),
          t
        );
      })(),
      q = (function () {
        function t(i) {
          e(this, t), (this.ctx = i), (this.w = i.w), (this.scales = new G(i));
        }
        return (
          n(t, [
            {
              key: "init",
              value: function () {
                this.setYRange(), this.setXRange(), this.setZRange();
              },
            },
            {
              key: "getMinYMaxY",
              value: function (t) {
                var e =
                    arguments.length > 1 && void 0 !== arguments[1]
                      ? arguments[1]
                      : Number.MAX_VALUE,
                  i =
                    arguments.length > 2 && void 0 !== arguments[2]
                      ? arguments[2]
                      : -Number.MAX_VALUE,
                  n =
                    arguments.length > 3 && void 0 !== arguments[3]
                      ? arguments[3]
                      : null,
                  a = this.w.config,
                  s = this.w.globals,
                  r = -Number.MAX_VALUE,
                  o = Number.MIN_VALUE;
                null === n && (n = t + 1);
                var l = s.series,
                  c = l,
                  h = l;
                "candlestick" === a.chart.type
                  ? ((c = s.seriesCandleL), (h = s.seriesCandleH))
                  : "boxPlot" === a.chart.type
                  ? ((c = s.seriesCandleO), (h = s.seriesCandleC))
                  : s.isRangeData &&
                    ((c = s.seriesRangeStart), (h = s.seriesRangeEnd));
                for (var d = t; d < n; d++) {
                  s.dataPoints = Math.max(s.dataPoints, l[d].length);
                  for (var u = 0; u < s.series[d].length; u++) {
                    var f = l[d][u];
                    null !== f && p.isNumber(f)
                      ? (void 0 !== h[d][u] && (r = Math.max(r, h[d][u])),
                        void 0 !== c[d][u] &&
                          ((e = Math.min(e, c[d][u])),
                          (i = Math.max(i, c[d][u]))),
                        ("candlestick" !== this.w.config.chart.type &&
                          "boxPlot" !== this.w.config.chart.type) ||
                          (void 0 !== s.seriesCandleC[d][u] &&
                            ((r = Math.max(r, s.seriesCandleO[d][u])),
                            (r = Math.max(r, s.seriesCandleH[d][u])),
                            (r = Math.max(r, s.seriesCandleL[d][u])),
                            (r = Math.max(r, s.seriesCandleC[d][u])),
                            "boxPlot" === this.w.config.chart.type &&
                              (r = Math.max(r, s.seriesCandleM[d][u]))),
                          !a.series[d].type ||
                            ("candlestick" === a.series[d].type &&
                              "boxPlot" === a.series[d].type) ||
                            ((r = Math.max(r, s.series[d][u])),
                            (e = Math.min(e, s.series[d][u]))),
                          (i = r)),
                        s.seriesGoals[d] &&
                          s.seriesGoals[d][u] &&
                          Array.isArray(s.seriesGoals[d][u]) &&
                          s.seriesGoals[d][u].forEach(function (t) {
                            o !== Number.MIN_VALUE &&
                              ((o = Math.min(o, t.value)), (e = o)),
                              (r = Math.max(r, t.value)),
                              (i = r);
                          }),
                        p.isFloat(f) &&
                          ((f = p.noExponents(f)),
                          (s.yValueDecimal = Math.max(
                            s.yValueDecimal,
                            f.toString().split(".")[1].length
                          ))),
                        o > c[d][u] && c[d][u] < 0 && (o = c[d][u]))
                      : (s.hasNullValues = !0);
                  }
                }
                return (
                  "rangeBar" === a.chart.type &&
                    s.seriesRangeStart.length &&
                    s.isBarHorizontal &&
                    "datetime" === a.xaxis.type &&
                    (o = e),
                  "bar" === a.chart.type &&
                    (o < 0 && r < 0 && (r = 0),
                    o === Number.MIN_VALUE && (o = 0)),
                  { minY: o, maxY: r, lowestY: e, highestY: i }
                );
              },
            },
            {
              key: "setYRange",
              value: function () {
                var t = this.w.globals,
                  e = this.w.config;
                (t.maxY = -Number.MAX_VALUE), (t.minY = Number.MIN_VALUE);
                var i = Number.MAX_VALUE;
                if (t.isMultipleYAxis)
                  for (var n = 0; n < t.series.length; n++) {
                    var a = this.getMinYMaxY(n, i, null, n + 1);
                    t.minYArr.push(a.minY),
                      t.maxYArr.push(a.maxY),
                      (i = a.lowestY);
                  }
                var s = this.getMinYMaxY(0, i, null, t.series.length);
                if (
                  ((t.minY = s.minY),
                  (t.maxY = s.maxY),
                  (i = s.lowestY),
                  e.chart.stacked && this._setStackedMinMax(),
                  ("line" === e.chart.type ||
                    "area" === e.chart.type ||
                    "candlestick" === e.chart.type ||
                    "boxPlot" === e.chart.type ||
                    ("rangeBar" === e.chart.type && !t.isBarHorizontal)) &&
                    t.minY === Number.MIN_VALUE &&
                    i !== -Number.MAX_VALUE &&
                    i !== t.maxY)
                ) {
                  var r = t.maxY - i;
                  ((i >= 0 && i <= 10) ||
                    void 0 !== e.yaxis[0].min ||
                    void 0 !== e.yaxis[0].max) &&
                    (r = 0),
                    (t.minY = i - (5 * r) / 100),
                    i > 0 && t.minY < 0 && (t.minY = 0),
                    (t.maxY = t.maxY + (5 * r) / 100);
                }
                return (
                  e.yaxis.forEach(function (e, i) {
                    void 0 !== e.max &&
                      ("number" == typeof e.max
                        ? (t.maxYArr[i] = e.max)
                        : "function" == typeof e.max &&
                          (t.maxYArr[i] = e.max(
                            t.isMultipleYAxis ? t.maxYArr[i] : t.maxY
                          )),
                      (t.maxY = t.maxYArr[i])),
                      void 0 !== e.min &&
                        ("number" == typeof e.min
                          ? (t.minYArr[i] = e.min)
                          : "function" == typeof e.min &&
                            (t.minYArr[i] = e.min(
                              t.isMultipleYAxis
                                ? t.minYArr[i] === Number.MIN_VALUE
                                  ? 0
                                  : t.minYArr[i]
                                : t.minY
                            )),
                        (t.minY = t.minYArr[i]));
                  }),
                  t.isBarHorizontal &&
                    ["min", "max"].forEach(function (i) {
                      void 0 !== e.xaxis[i] &&
                        "number" == typeof e.xaxis[i] &&
                        ("min" === i
                          ? (t.minY = e.xaxis[i])
                          : (t.maxY = e.xaxis[i]));
                    }),
                  t.isMultipleYAxis
                    ? (this.scales.setMultipleYScales(),
                      (t.minY = i),
                      t.yAxisScale.forEach(function (e, i) {
                        (t.minYArr[i] = e.niceMin), (t.maxYArr[i] = e.niceMax);
                      }))
                    : (this.scales.setYScaleForIndex(0, t.minY, t.maxY),
                      (t.minY = t.yAxisScale[0].niceMin),
                      (t.maxY = t.yAxisScale[0].niceMax),
                      (t.minYArr[0] = t.yAxisScale[0].niceMin),
                      (t.maxYArr[0] = t.yAxisScale[0].niceMax)),
                  {
                    minY: t.minY,
                    maxY: t.maxY,
                    minYArr: t.minYArr,
                    maxYArr: t.maxYArr,
                    yAxisScale: t.yAxisScale,
                  }
                );
              },
            },
            {
              key: "setXRange",
              value: function () {
                var t = this.w.globals,
                  e = this.w.config,
                  i =
                    "numeric" === e.xaxis.type ||
                    "datetime" === e.xaxis.type ||
                    ("category" === e.xaxis.type && !t.noLabelsProvided) ||
                    t.noLabelsProvided ||
                    t.isXNumeric;
                if (
                  (t.isXNumeric &&
                    (function () {
                      for (var e = 0; e < t.series.length; e++)
                        if (t.labels[e])
                          for (var i = 0; i < t.labels[e].length; i++)
                            null !== t.labels[e][i] &&
                              p.isNumber(t.labels[e][i]) &&
                              ((t.maxX = Math.max(t.maxX, t.labels[e][i])),
                              (t.initialMaxX = Math.max(
                                t.maxX,
                                t.labels[e][i]
                              )),
                              (t.minX = Math.min(t.minX, t.labels[e][i])),
                              (t.initialMinX = Math.min(
                                t.minX,
                                t.labels[e][i]
                              )));
                    })(),
                  t.noLabelsProvided &&
                    0 === e.xaxis.categories.length &&
                    ((t.maxX = t.labels[t.labels.length - 1]),
                    (t.initialMaxX = t.labels[t.labels.length - 1]),
                    (t.minX = 1),
                    (t.initialMinX = 1)),
                  t.isXNumeric || t.noLabelsProvided || t.dataFormatXNumeric)
                ) {
                  var n;
                  if (
                    (void 0 === e.xaxis.tickAmount
                      ? ((n = Math.round(t.svgWidth / 150)),
                        "numeric" === e.xaxis.type &&
                          t.dataPoints < 30 &&
                          (n = t.dataPoints - 1),
                        n > t.dataPoints &&
                          0 !== t.dataPoints &&
                          (n = t.dataPoints - 1))
                      : "dataPoints" === e.xaxis.tickAmount
                      ? (t.series.length > 1 &&
                          (n = t.series[t.maxValsInArrayIndex].length - 1),
                        t.isXNumeric && (n = t.maxX - t.minX - 1))
                      : (n = e.xaxis.tickAmount),
                    (t.xTickAmount = n),
                    void 0 !== e.xaxis.max &&
                      "number" == typeof e.xaxis.max &&
                      (t.maxX = e.xaxis.max),
                    void 0 !== e.xaxis.min &&
                      "number" == typeof e.xaxis.min &&
                      (t.minX = e.xaxis.min),
                    void 0 !== e.xaxis.range &&
                      (t.minX = t.maxX - e.xaxis.range),
                    t.minX !== Number.MAX_VALUE && t.maxX !== -Number.MAX_VALUE)
                  )
                    if (
                      e.xaxis.convertedCatToNumeric &&
                      !t.dataFormatXNumeric
                    ) {
                      for (var a = [], s = t.minX - 1; s < t.maxX; s++)
                        a.push(s + 1);
                      t.xAxisScale = {
                        result: a,
                        niceMin: a[0],
                        niceMax: a[a.length - 1],
                      };
                    } else t.xAxisScale = this.scales.setXScale(t.minX, t.maxX);
                  else
                    (t.xAxisScale = this.scales.linearScale(1, n, n)),
                      t.noLabelsProvided &&
                        t.labels.length > 0 &&
                        ((t.xAxisScale = this.scales.linearScale(
                          1,
                          t.labels.length,
                          n - 1
                        )),
                        (t.seriesX = t.labels.slice()));
                  i && (t.labels = t.xAxisScale.result.slice());
                }
                return (
                  t.isBarHorizontal &&
                    t.labels.length &&
                    (t.xTickAmount = t.labels.length),
                  this._handleSingleDataPoint(),
                  this._getMinXDiff(),
                  { minX: t.minX, maxX: t.maxX }
                );
              },
            },
            {
              key: "setZRange",
              value: function () {
                var t = this.w.globals;
                if (t.isDataXYZ)
                  for (var e = 0; e < t.series.length; e++)
                    if (void 0 !== t.seriesZ[e])
                      for (var i = 0; i < t.seriesZ[e].length; i++)
                        null !== t.seriesZ[e][i] &&
                          p.isNumber(t.seriesZ[e][i]) &&
                          ((t.maxZ = Math.max(t.maxZ, t.seriesZ[e][i])),
                          (t.minZ = Math.min(t.minZ, t.seriesZ[e][i])));
              },
            },
            {
              key: "_handleSingleDataPoint",
              value: function () {
                var t = this.w.globals,
                  e = this.w.config;
                if (t.minX === t.maxX) {
                  var i = new D(this.ctx);
                  if ("datetime" === e.xaxis.type) {
                    var n = i.getDate(t.minX);
                    n.setUTCDate(n.getDate() - 2),
                      (t.minX = new Date(n).getTime());
                    var a = i.getDate(t.maxX);
                    a.setUTCDate(a.getDate() + 2),
                      (t.maxX = new Date(a).getTime());
                  } else
                    ("numeric" === e.xaxis.type ||
                      ("category" === e.xaxis.type && !t.noLabelsProvided)) &&
                      ((t.minX = t.minX - 2),
                      (t.initialMinX = t.minX),
                      (t.maxX = t.maxX + 2),
                      (t.initialMaxX = t.maxX));
                }
              },
            },
            {
              key: "_getMinXDiff",
              value: function () {
                var t = this.w.globals;
                t.isXNumeric &&
                  t.seriesX.forEach(function (e, i) {
                    1 === e.length &&
                      e.push(
                        t.seriesX[t.maxValsInArrayIndex][
                          t.seriesX[t.maxValsInArrayIndex].length - 1
                        ]
                      );
                    var n = e.slice();
                    n.sort(function (t, e) {
                      return t - e;
                    }),
                      n.forEach(function (e, i) {
                        if (i > 0) {
                          var a = e - n[i - 1];
                          a > 0 && (t.minXDiff = Math.min(a, t.minXDiff));
                        }
                      }),
                      1 === t.dataPoints &&
                        t.minXDiff === Number.MAX_VALUE &&
                        (t.minXDiff = 0.5);
                  });
              },
            },
            {
              key: "_setStackedMinMax",
              value: function () {
                var t = this.w.globals,
                  e = [],
                  i = [];
                if (t.series.length)
                  for (
                    var n = 0;
                    n < t.series[t.maxValsInArrayIndex].length;
                    n++
                  )
                    for (var a = 0, s = 0, r = 0; r < t.series.length; r++)
                      null !== t.series[r][n] &&
                        p.isNumber(t.series[r][n]) &&
                        (t.series[r][n] > 0
                          ? (a = a + parseFloat(t.series[r][n]) + 1e-4)
                          : (s += parseFloat(t.series[r][n]))),
                        r === t.series.length - 1 && (e.push(a), i.push(s));
                for (var o = 0; o < e.length; o++)
                  (t.maxY = Math.max(t.maxY, e[o])),
                    (t.minY = Math.min(t.minY, i[o]));
              },
            },
          ]),
          t
        );
      })(),
      U = (function () {
        function t(i) {
          e(this, t), (this.ctx = i), (this.w = i.w);
          var n = this.w;
          (this.xaxisFontSize = n.config.xaxis.labels.style.fontSize),
            (this.axisFontFamily = n.config.xaxis.labels.style.fontFamily),
            (this.xaxisForeColors = n.config.xaxis.labels.style.colors),
            (this.isCategoryBarHorizontal =
              "bar" === n.config.chart.type &&
              n.config.plotOptions.bar.horizontal),
            (this.xAxisoffX = 0),
            "bottom" === n.config.xaxis.position &&
              (this.xAxisoffX = n.globals.gridHeight),
            (this.drawnLabels = []),
            (this.axesUtils = new W(i));
        }
        return (
          n(t, [
            {
              key: "drawYaxis",
              value: function (t) {
                var e = this,
                  i = this.w,
                  n = new m(this.ctx),
                  a = i.config.yaxis[t].labels.style,
                  s = a.fontSize,
                  r = a.fontFamily,
                  o = a.fontWeight,
                  l = n.group({
                    class: "apexcharts-yaxis",
                    rel: t,
                    transform:
                      "translate(" + i.globals.translateYAxisX[t] + ", 0)",
                  });
                if (this.axesUtils.isYAxisHidden(t)) return l;
                var c = n.group({ class: "apexcharts-yaxis-texts-g" });
                l.add(c);
                var h = i.globals.yAxisScale[t].result.length - 1,
                  d = i.globals.gridHeight / h,
                  u = i.globals.translateY,
                  f = i.globals.yLabelFormatters[t],
                  p = i.globals.yAxisScale[t].result.slice();
                p = this.axesUtils.checkForReversedLabels(t, p);
                var g = "";
                if (i.config.yaxis[t].labels.show)
                  for (
                    var x = function (l) {
                        var x = p[l];
                        x = f(x, l, i);
                        var m = i.config.yaxis[t].labels.padding;
                        i.config.yaxis[t].opposite &&
                          0 !== i.config.yaxis.length &&
                          (m *= -1);
                        var v = e.axesUtils.getYAxisForeColor(a.colors, t),
                          b = n.drawText({
                            x: m,
                            y:
                              u + h / 10 + i.config.yaxis[t].labels.offsetY + 1,
                            text: x,
                            textAnchor: i.config.yaxis[t].opposite
                              ? "start"
                              : "end",
                            fontSize: s,
                            fontFamily: r,
                            fontWeight: o,
                            foreColor: Array.isArray(v) ? v[l] : v,
                            isPlainText: !1,
                            cssClass: "apexcharts-yaxis-label " + a.cssClass,
                          });
                        l === h && (g = b), c.add(b);
                        var y = document.createElementNS(
                          i.globals.SVGNS,
                          "title"
                        );
                        if (
                          ((y.textContent = Array.isArray(x) ? x.join(" ") : x),
                          b.node.appendChild(y),
                          0 !== i.config.yaxis[t].labels.rotate)
                        ) {
                          var w = n.rotateAroundCenter(g.node),
                            k = n.rotateAroundCenter(b.node);
                          b.node.setAttribute(
                            "transform",
                            "rotate("
                              .concat(i.config.yaxis[t].labels.rotate, " ")
                              .concat(w.x, " ")
                              .concat(k.y, ")")
                          );
                        }
                        u += d;
                      },
                      v = h;
                    v >= 0;
                    v--
                  )
                    x(v);
                if (void 0 !== i.config.yaxis[t].title.text) {
                  var b = n.group({ class: "apexcharts-yaxis-title" }),
                    y = 0;
                  i.config.yaxis[t].opposite &&
                    (y = i.globals.translateYAxisX[t]);
                  var w = n.drawText({
                    x: y,
                    y:
                      i.globals.gridHeight / 2 +
                      i.globals.translateY +
                      i.config.yaxis[t].title.offsetY,
                    text: i.config.yaxis[t].title.text,
                    textAnchor: "end",
                    foreColor: i.config.yaxis[t].title.style.color,
                    fontSize: i.config.yaxis[t].title.style.fontSize,
                    fontWeight: i.config.yaxis[t].title.style.fontWeight,
                    fontFamily: i.config.yaxis[t].title.style.fontFamily,
                    cssClass:
                      "apexcharts-yaxis-title-text " +
                      i.config.yaxis[t].title.style.cssClass,
                  });
                  b.add(w), l.add(b);
                }
                var k = i.config.yaxis[t].axisBorder,
                  A = 31 + k.offsetX;
                if (
                  (i.config.yaxis[t].opposite && (A = -31 - k.offsetX), k.show)
                ) {
                  var S = n.drawLine(
                    A,
                    i.globals.translateY + k.offsetY - 2,
                    A,
                    i.globals.gridHeight + i.globals.translateY + k.offsetY + 2,
                    k.color,
                    0,
                    k.width
                  );
                  l.add(S);
                }
                return (
                  i.config.yaxis[t].axisTicks.show &&
                    this.axesUtils.drawYAxisTicks(
                      A,
                      h,
                      k,
                      i.config.yaxis[t].axisTicks,
                      t,
                      d,
                      l
                    ),
                  l
                );
              },
            },
            {
              key: "drawYaxisInversed",
              value: function (t) {
                var e = this.w,
                  i = new m(this.ctx),
                  n = i.group({
                    class: "apexcharts-xaxis apexcharts-yaxis-inversed",
                  }),
                  a = i.group({
                    class: "apexcharts-xaxis-texts-g",
                    transform: "translate("
                      .concat(e.globals.translateXAxisX, ", ")
                      .concat(e.globals.translateXAxisY, ")"),
                  });
                n.add(a);
                var s = e.globals.yAxisScale[t].result.length - 1,
                  r = e.globals.gridWidth / s + 0.1,
                  o = r + e.config.xaxis.labels.offsetX,
                  l = e.globals.xLabelFormatter,
                  c = e.globals.yAxisScale[t].result.slice(),
                  h = e.globals.timescaleLabels;
                h.length > 0 &&
                  ((this.xaxisLabels = h.slice()),
                  (s = (c = h.slice()).length)),
                  (c = this.axesUtils.checkForReversedLabels(t, c));
                var d = h.length;
                if (e.config.xaxis.labels.show)
                  for (var u = d ? 0 : s; d ? u < d : u >= 0; d ? u++ : u--) {
                    var f = c[u];
                    f = l(f, u, e);
                    var p =
                      e.globals.gridWidth +
                      e.globals.padHorizontal -
                      (o - r + e.config.xaxis.labels.offsetX);
                    if (h.length) {
                      var g = this.axesUtils.getLabel(
                        c,
                        h,
                        p,
                        u,
                        this.drawnLabels,
                        this.xaxisFontSize
                      );
                      (p = g.x),
                        (f = g.text),
                        this.drawnLabels.push(g.text),
                        0 === u && e.globals.skipFirstTimelinelabel && (f = ""),
                        u === c.length - 1 &&
                          e.globals.skipLastTimelinelabel &&
                          (f = "");
                    }
                    var x = i.drawText({
                      x: p,
                      y:
                        this.xAxisoffX +
                        e.config.xaxis.labels.offsetY +
                        30 -
                        ("top" === e.config.xaxis.position
                          ? e.globals.xAxisHeight +
                            e.config.xaxis.axisTicks.height -
                            2
                          : 0),
                      text: f,
                      textAnchor: "middle",
                      foreColor: Array.isArray(this.xaxisForeColors)
                        ? this.xaxisForeColors[t]
                        : this.xaxisForeColors,
                      fontSize: this.xaxisFontSize,
                      fontFamily: this.xaxisFontFamily,
                      fontWeight: e.config.xaxis.labels.style.fontWeight,
                      isPlainText: !1,
                      cssClass:
                        "apexcharts-xaxis-label " +
                        e.config.xaxis.labels.style.cssClass,
                    });
                    a.add(x), x.tspan(f);
                    var v = document.createElementNS(e.globals.SVGNS, "title");
                    (v.textContent = f), x.node.appendChild(v), (o += r);
                  }
                return (
                  this.inversedYAxisTitleText(n), this.inversedYAxisBorder(n), n
                );
              },
            },
            {
              key: "inversedYAxisBorder",
              value: function (t) {
                var e = this.w,
                  i = new m(this.ctx),
                  n = e.config.xaxis.axisBorder;
                if (n.show) {
                  var a = 0;
                  "bar" === e.config.chart.type &&
                    e.globals.isXNumeric &&
                    (a -= 15);
                  var s = i.drawLine(
                    e.globals.padHorizontal + a + n.offsetX,
                    this.xAxisoffX,
                    e.globals.gridWidth,
                    this.xAxisoffX,
                    n.color,
                    0,
                    n.height
                  );
                  t.add(s);
                }
              },
            },
            {
              key: "inversedYAxisTitleText",
              value: function (t) {
                var e = this.w,
                  i = new m(this.ctx);
                if (void 0 !== e.config.xaxis.title.text) {
                  var n = i.group({
                      class:
                        "apexcharts-xaxis-title apexcharts-yaxis-title-inversed",
                    }),
                    a = i.drawText({
                      x: e.globals.gridWidth / 2 + e.config.xaxis.title.offsetX,
                      y:
                        this.xAxisoffX +
                        parseFloat(this.xaxisFontSize) +
                        parseFloat(e.config.xaxis.title.style.fontSize) +
                        e.config.xaxis.title.offsetY +
                        20,
                      text: e.config.xaxis.title.text,
                      textAnchor: "middle",
                      fontSize: e.config.xaxis.title.style.fontSize,
                      fontFamily: e.config.xaxis.title.style.fontFamily,
                      fontWeight: e.config.xaxis.title.style.fontWeight,
                      foreColor: e.config.xaxis.title.style.color,
                      cssClass:
                        "apexcharts-xaxis-title-text " +
                        e.config.xaxis.title.style.cssClass,
                    });
                  n.add(a), t.add(n);
                }
              },
            },
            {
              key: "yAxisTitleRotate",
              value: function (t, e) {
                var i = this.w,
                  n = new m(this.ctx),
                  a = { width: 0, height: 0 },
                  s = { width: 0, height: 0 },
                  r = i.globals.dom.baseEl.querySelector(
                    " .apexcharts-yaxis[rel='".concat(
                      t,
                      "'] .apexcharts-yaxis-texts-g"
                    )
                  );
                null !== r && (a = r.getBoundingClientRect());
                var o = i.globals.dom.baseEl.querySelector(
                  ".apexcharts-yaxis[rel='".concat(
                    t,
                    "'] .apexcharts-yaxis-title text"
                  )
                );
                if (
                  (null !== o && (s = o.getBoundingClientRect()), null !== o)
                ) {
                  var l = this.xPaddingForYAxisTitle(t, a, s, e);
                  o.setAttribute("x", l.xPos - (e ? 10 : 0));
                }
                if (null !== o) {
                  var c = n.rotateAroundCenter(o);
                  o.setAttribute(
                    "transform",
                    "rotate("
                      .concat(
                        e
                          ? -1 * i.config.yaxis[t].title.rotate
                          : i.config.yaxis[t].title.rotate,
                        " "
                      )
                      .concat(c.x, " ")
                      .concat(c.y, ")")
                  );
                }
              },
            },
            {
              key: "xPaddingForYAxisTitle",
              value: function (t, e, i, n) {
                var a = this.w,
                  s = 0,
                  r = 0,
                  o = 10;
                return void 0 === a.config.yaxis[t].title.text || t < 0
                  ? { xPos: r, padd: 0 }
                  : (n
                      ? ((r =
                          e.width +
                          a.config.yaxis[t].title.offsetX +
                          i.width / 2 +
                          o / 2),
                        0 === (s += 1) && (r -= o / 2))
                      : ((r =
                          -1 * e.width +
                          a.config.yaxis[t].title.offsetX +
                          o / 2 +
                          i.width / 2),
                        a.globals.isBarHorizontal &&
                          ((o = 25),
                          (r =
                            -1 * e.width -
                            a.config.yaxis[t].title.offsetX -
                            o))),
                    { xPos: r, padd: o });
              },
            },
            {
              key: "setYAxisXPosition",
              value: function (t, e) {
                var i = this.w,
                  n = 0,
                  a = 0,
                  s = 18,
                  r = 1;
                i.config.yaxis.length > 1 && (this.multipleYs = !0),
                  i.config.yaxis.map(function (o, l) {
                    var c =
                        i.globals.ignoreYAxisIndexes.indexOf(l) > -1 ||
                        !o.show ||
                        o.floating ||
                        0 === t[l].width,
                      h = t[l].width + e[l].width;
                    o.opposite
                      ? i.globals.isBarHorizontal
                        ? ((a = i.globals.gridWidth + i.globals.translateX - 1),
                          (i.globals.translateYAxisX[l] = a - o.labels.offsetX))
                        : ((a = i.globals.gridWidth + i.globals.translateX + r),
                          c || (r = r + h + 20),
                          (i.globals.translateYAxisX[l] =
                            a - o.labels.offsetX + 20))
                      : ((n = i.globals.translateX - s),
                        c || (s = s + h + 20),
                        (i.globals.translateYAxisX[l] = n + o.labels.offsetX));
                  });
              },
            },
            {
              key: "setYAxisTextAlignments",
              value: function () {
                var t = this.w,
                  e =
                    t.globals.dom.baseEl.getElementsByClassName(
                      "apexcharts-yaxis"
                    );
                (e = p.listToArray(e)).forEach(function (e, i) {
                  var n = t.config.yaxis[i];
                  if (n && void 0 !== n.labels.align) {
                    var a = t.globals.dom.baseEl.querySelector(
                        ".apexcharts-yaxis[rel='".concat(
                          i,
                          "'] .apexcharts-yaxis-texts-g"
                        )
                      ),
                      s = t.globals.dom.baseEl.querySelectorAll(
                        ".apexcharts-yaxis[rel='".concat(
                          i,
                          "'] .apexcharts-yaxis-label"
                        )
                      );
                    s = p.listToArray(s);
                    var r = a.getBoundingClientRect();
                    "left" === n.labels.align
                      ? (s.forEach(function (t, e) {
                          t.setAttribute("text-anchor", "start");
                        }),
                        n.opposite ||
                          a.setAttribute(
                            "transform",
                            "translate(-".concat(r.width, ", 0)")
                          ))
                      : "center" === n.labels.align
                      ? (s.forEach(function (t, e) {
                          t.setAttribute("text-anchor", "middle");
                        }),
                        a.setAttribute(
                          "transform",
                          "translate(".concat(
                            (r.width / 2) * (n.opposite ? 1 : -1),
                            ", 0)"
                          )
                        ))
                      : "right" === n.labels.align &&
                        (s.forEach(function (t, e) {
                          t.setAttribute("text-anchor", "end");
                        }),
                        n.opposite &&
                          a.setAttribute(
                            "transform",
                            "translate(".concat(r.width, ", 0)")
                          ));
                  }
                });
              },
            },
          ]),
          t
        );
      })(),
      $ = (function () {
        function t(i) {
          e(this, t),
            (this.ctx = i),
            (this.w = i.w),
            (this.documentEvent = p.bind(this.documentEvent, this));
        }
        return (
          n(t, [
            {
              key: "addEventListener",
              value: function (t, e) {
                var i = this.w;
                i.globals.events.hasOwnProperty(t)
                  ? i.globals.events[t].push(e)
                  : (i.globals.events[t] = [e]);
              },
            },
            {
              key: "removeEventListener",
              value: function (t, e) {
                var i = this.w;
                if (i.globals.events.hasOwnProperty(t)) {
                  var n = i.globals.events[t].indexOf(e);
                  -1 !== n && i.globals.events[t].splice(n, 1);
                }
              },
            },
            {
              key: "fireEvent",
              value: function (t, e) {
                var i = this.w;
                if (i.globals.events.hasOwnProperty(t)) {
                  (e && e.length) || (e = []);
                  for (
                    var n = i.globals.events[t], a = n.length, s = 0;
                    s < a;
                    s++
                  )
                    n[s].apply(null, e);
                }
              },
            },
            {
              key: "setupEventHandlers",
              value: function () {
                var t = this,
                  e = this.w,
                  i = this.ctx,
                  n = e.globals.dom.baseEl.querySelector(e.globals.chartClass);
                this.ctx.eventList.forEach(function (t) {
                  n.addEventListener(
                    t,
                    function (t) {
                      var n = Object.assign({}, e, {
                        seriesIndex: e.globals.capturedSeriesIndex,
                        dataPointIndex: e.globals.capturedDataPointIndex,
                      });
                      "mousemove" === t.type || "touchmove" === t.type
                        ? "function" ==
                            typeof e.config.chart.events.mouseMove &&
                          e.config.chart.events.mouseMove(t, i, n)
                        : "mouseleave" === t.type || "touchleave" === t.type
                        ? "function" ==
                            typeof e.config.chart.events.mouseLeave &&
                          e.config.chart.events.mouseLeave(t, i, n)
                        : (("mouseup" === t.type && 1 === t.which) ||
                            "touchend" === t.type) &&
                          ("function" == typeof e.config.chart.events.click &&
                            e.config.chart.events.click(t, i, n),
                          i.ctx.events.fireEvent("click", [t, i, n]));
                    },
                    { capture: !1, passive: !0 }
                  );
                }),
                  this.ctx.eventList.forEach(function (i) {
                    e.globals.dom.baseEl.addEventListener(i, t.documentEvent, {
                      passive: !0,
                    });
                  }),
                  this.ctx.core.setupBrushHandler();
              },
            },
            {
              key: "documentEvent",
              value: function (t) {
                var e = this.w,
                  i = t.target.className;
                if ("click" === t.type) {
                  var n =
                    e.globals.dom.baseEl.querySelector(".apexcharts-menu");
                  n &&
                    n.classList.contains("apexcharts-menu-open") &&
                    "apexcharts-menu-icon" !== i &&
                    n.classList.remove("apexcharts-menu-open");
                }
                (e.globals.clientX =
                  "touchmove" === t.type ? t.touches[0].clientX : t.clientX),
                  (e.globals.clientY =
                    "touchmove" === t.type ? t.touches[0].clientY : t.clientY);
              },
            },
          ]),
          t
        );
      })(),
      Z = (function () {
        function t(i) {
          e(this, t), (this.ctx = i), (this.w = i.w);
        }
        return (
          n(t, [
            {
              key: "setCurrentLocaleValues",
              value: function (t) {
                var e = this.w.config.chart.locales;
                window.Apex.chart &&
                  window.Apex.chart.locales &&
                  window.Apex.chart.locales.length > 0 &&
                  (e = this.w.config.chart.locales.concat(
                    window.Apex.chart.locales
                  ));
                var i = e.filter(function (e) {
                  return e.name === t;
                })[0];
                if (!i)
                  throw new Error(
                    "Wrong locale name provided. Please make sure you set the correct locale name in options"
                  );
                var n = p.extend(A, i);
                this.w.globals.locale = n.options;
              },
            },
          ]),
          t
        );
      })(),
      Q = (function () {
        function t(i) {
          e(this, t), (this.ctx = i), (this.w = i.w);
        }
        return (
          n(t, [
            {
              key: "drawAxis",
              value: function (t, e) {
                var i,
                  n,
                  a = this.w.globals,
                  s = this.w.config,
                  r = new j(this.ctx),
                  o = new U(this.ctx);
                a.axisCharts &&
                  "radar" !== t &&
                  (a.isBarHorizontal
                    ? ((n = o.drawYaxisInversed(0)),
                      (i = r.drawXaxisInversed(0)),
                      a.dom.elGraphical.add(i),
                      a.dom.elGraphical.add(n))
                    : ((i = r.drawXaxis()),
                      a.dom.elGraphical.add(i),
                      s.yaxis.map(function (t, e) {
                        -1 === a.ignoreYAxisIndexes.indexOf(e) &&
                          ((n = o.drawYaxis(e)), a.dom.Paper.add(n));
                      })));
              },
            },
          ]),
          t
        );
      })(),
      K = (function () {
        function t(i) {
          e(this, t), (this.ctx = i), (this.w = i.w);
        }
        return (
          n(t, [
            {
              key: "drawXCrosshairs",
              value: function () {
                var t = this.w,
                  e = new m(this.ctx),
                  i = new x(this.ctx),
                  n = t.config.xaxis.crosshairs.fill.gradient,
                  a = t.config.xaxis.crosshairs.dropShadow,
                  s = t.config.xaxis.crosshairs.fill.type,
                  r = n.colorFrom,
                  o = n.colorTo,
                  l = n.opacityFrom,
                  c = n.opacityTo,
                  h = n.stops,
                  d = a.enabled,
                  u = a.left,
                  f = a.top,
                  g = a.blur,
                  v = a.color,
                  b = a.opacity,
                  y = t.config.xaxis.crosshairs.fill.color;
                if (t.config.xaxis.crosshairs.show) {
                  "gradient" === s &&
                    (y = e.drawGradient("vertical", r, o, l, c, null, h, null));
                  var w = e.drawRect();
                  1 === t.config.xaxis.crosshairs.width && (w = e.drawLine());
                  var k = t.globals.gridHeight;
                  (!p.isNumber(k) || k < 0) && (k = 0);
                  var A = t.config.xaxis.crosshairs.width;
                  (!p.isNumber(A) || A < 0) && (A = 0),
                    w.attr({
                      class: "apexcharts-xcrosshairs",
                      x: 0,
                      y: 0,
                      y2: k,
                      width: A,
                      height: k,
                      fill: y,
                      filter: "none",
                      "fill-opacity": t.config.xaxis.crosshairs.opacity,
                      stroke: t.config.xaxis.crosshairs.stroke.color,
                      "stroke-width": t.config.xaxis.crosshairs.stroke.width,
                      "stroke-dasharray":
                        t.config.xaxis.crosshairs.stroke.dashArray,
                    }),
                    d &&
                      (w = i.dropShadow(w, {
                        left: u,
                        top: f,
                        blur: g,
                        color: v,
                        opacity: b,
                      })),
                    t.globals.dom.elGraphical.add(w);
                }
              },
            },
            {
              key: "drawYCrosshairs",
              value: function () {
                var t = this.w,
                  e = new m(this.ctx),
                  i = t.config.yaxis[0].crosshairs,
                  n = t.globals.barPadForNumericAxis;
                if (t.config.yaxis[0].crosshairs.show) {
                  var a = e.drawLine(
                    -n,
                    0,
                    t.globals.gridWidth + n,
                    0,
                    i.stroke.color,
                    i.stroke.dashArray,
                    i.stroke.width
                  );
                  a.attr({ class: "apexcharts-ycrosshairs" }),
                    t.globals.dom.elGraphical.add(a);
                }
                var s = e.drawLine(
                  -n,
                  0,
                  t.globals.gridWidth + n,
                  0,
                  i.stroke.color,
                  0,
                  0
                );
                s.attr({ class: "apexcharts-ycrosshairs-hidden" }),
                  t.globals.dom.elGraphical.add(s);
              },
            },
          ]),
          t
        );
      })(),
      J = (function () {
        function t(i) {
          e(this, t), (this.ctx = i), (this.w = i.w);
        }
        return (
          n(t, [
            {
              key: "checkResponsiveConfig",
              value: function (t) {
                var e = this,
                  i = this.w,
                  n = i.config;
                if (0 !== n.responsive.length) {
                  var a = n.responsive.slice();
                  a.sort(function (t, e) {
                    return t.breakpoint > e.breakpoint
                      ? 1
                      : e.breakpoint > t.breakpoint
                      ? -1
                      : 0;
                  }).reverse();
                  var s = new X({}),
                    r = function () {
                      var t =
                          arguments.length > 0 && void 0 !== arguments[0]
                            ? arguments[0]
                            : {},
                        n = a[0].breakpoint,
                        r =
                          window.innerWidth > 0
                            ? window.innerWidth
                            : screen.width;
                      if (r > n) {
                        var o = y.extendArrayProps(
                          s,
                          i.globals.initialConfig,
                          i
                        );
                        (t = p.extend(o, t)),
                          (t = p.extend(i.config, t)),
                          e.overrideResponsiveOptions(t);
                      } else
                        for (var l = 0; l < a.length; l++)
                          r < a[l].breakpoint &&
                            ((t = y.extendArrayProps(s, a[l].options, i)),
                            (t = p.extend(i.config, t)),
                            e.overrideResponsiveOptions(t));
                    };
                  if (t) {
                    var o = y.extendArrayProps(s, t, i);
                    (o = p.extend(i.config, o)), r((o = p.extend(o, t)));
                  } else r({});
                }
              },
            },
            {
              key: "overrideResponsiveOptions",
              value: function (t) {
                var e = new X(t).init({ responsiveOverride: !0 });
                this.w.config = e;
              },
            },
          ]),
          t
        );
      })(),
      tt = (function () {
        function t(i) {
          e(this, t), (this.ctx = i), (this.colors = []), (this.w = i.w);
          var n = this.w;
          (this.isColorFn = !1),
            (this.isHeatmapDistributed =
              ("treemap" === n.config.chart.type &&
                n.config.plotOptions.treemap.distributed) ||
              ("heatmap" === n.config.chart.type &&
                n.config.plotOptions.heatmap.distributed)),
            (this.isBarDistributed =
              n.config.plotOptions.bar.distributed &&
              ("bar" === n.config.chart.type ||
                "rangeBar" === n.config.chart.type));
        }
        return (
          n(t, [
            {
              key: "init",
              value: function () {
                this.setDefaultColors();
              },
            },
            {
              key: "setDefaultColors",
              value: function () {
                var t = this,
                  e = this.w,
                  i = new p();
                if (
                  (e.globals.dom.elWrap.classList.add(
                    "apexcharts-theme-".concat(e.config.theme.mode)
                  ),
                  void 0 === e.config.colors
                    ? (e.globals.colors = this.predefined())
                    : ((e.globals.colors = e.config.colors),
                      Array.isArray(e.config.colors) &&
                        e.config.colors.length > 0 &&
                        "function" == typeof e.config.colors[0] &&
                        (e.globals.colors = e.config.series.map(function (
                          i,
                          n
                        ) {
                          var a = e.config.colors[n];
                          return (
                            a || (a = e.config.colors[0]),
                            "function" == typeof a
                              ? ((t.isColorFn = !0),
                                a({
                                  value: e.globals.axisCharts
                                    ? e.globals.series[n][0]
                                      ? e.globals.series[n][0]
                                      : 0
                                    : e.globals.series[n],
                                  seriesIndex: n,
                                  dataPointIndex: n,
                                  w: e,
                                }))
                              : a
                          );
                        }))),
                  e.globals.seriesColors.map(function (t, i) {
                    t && (e.globals.colors[i] = t);
                  }),
                  e.config.theme.monochrome.enabled)
                ) {
                  var n = [],
                    a = e.globals.series.length;
                  (this.isBarDistributed || this.isHeatmapDistributed) &&
                    (a = e.globals.series[0].length * e.globals.series.length);
                  for (
                    var s = e.config.theme.monochrome.color,
                      r = 1 / (a / e.config.theme.monochrome.shadeIntensity),
                      o = e.config.theme.monochrome.shadeTo,
                      l = 0,
                      c = 0;
                    c < a;
                    c++
                  ) {
                    var h = void 0;
                    "dark" === o
                      ? ((h = i.shadeColor(-1 * l, s)), (l += r))
                      : ((h = i.shadeColor(l, s)), (l += r)),
                      n.push(h);
                  }
                  e.globals.colors = n.slice();
                }
                var d = e.globals.colors.slice();
                this.pushExtraColors(e.globals.colors),
                  ["fill", "stroke"].forEach(function (i) {
                    void 0 === e.config[i].colors
                      ? (e.globals[i].colors = t.isColorFn
                          ? e.config.colors
                          : d)
                      : (e.globals[i].colors = e.config[i].colors.slice()),
                      t.pushExtraColors(e.globals[i].colors);
                  }),
                  void 0 === e.config.dataLabels.style.colors
                    ? (e.globals.dataLabels.style.colors = d)
                    : (e.globals.dataLabels.style.colors =
                        e.config.dataLabels.style.colors.slice()),
                  this.pushExtraColors(e.globals.dataLabels.style.colors, 50),
                  void 0 === e.config.plotOptions.radar.polygons.fill.colors
                    ? (e.globals.radarPolygons.fill.colors = [
                        "dark" === e.config.theme.mode ? "#424242" : "none",
                      ])
                    : (e.globals.radarPolygons.fill.colors =
                        e.config.plotOptions.radar.polygons.fill.colors.slice()),
                  this.pushExtraColors(e.globals.radarPolygons.fill.colors, 20),
                  void 0 === e.config.markers.colors
                    ? (e.globals.markers.colors = d)
                    : (e.globals.markers.colors =
                        e.config.markers.colors.slice()),
                  this.pushExtraColors(e.globals.markers.colors);
              },
            },
            {
              key: "pushExtraColors",
              value: function (t, e) {
                var i =
                    arguments.length > 2 && void 0 !== arguments[2]
                      ? arguments[2]
                      : null,
                  n = this.w,
                  a = e || n.globals.series.length;
                if (
                  (null === i &&
                    (i =
                      this.isBarDistributed ||
                      this.isHeatmapDistributed ||
                      ("heatmap" === n.config.chart.type &&
                        n.config.plotOptions.heatmap.colorScale.inverse)),
                  i &&
                    n.globals.series.length &&
                    (a =
                      n.globals.series[n.globals.maxValsInArrayIndex].length *
                      n.globals.series.length),
                  t.length < a)
                )
                  for (var s = a - t.length, r = 0; r < s; r++) t.push(t[r]);
              },
            },
            {
              key: "updateThemeOptions",
              value: function (t) {
                (t.chart = t.chart || {}), (t.tooltip = t.tooltip || {});
                var e = t.theme.mode || "light",
                  i = t.theme.palette
                    ? t.theme.palette
                    : "dark" === e
                    ? "palette4"
                    : "palette1",
                  n = t.chart.foreColor
                    ? t.chart.foreColor
                    : "dark" === e
                    ? "#f6f7f8"
                    : "#373d3f";
                return (
                  (t.tooltip.theme = e),
                  (t.chart.foreColor = n),
                  (t.theme.palette = i),
                  t
                );
              },
            },
            {
              key: "predefined",
              value: function () {
                switch (this.w.config.theme.palette) {
                  default:
                    this.colors = [
                      "#008FFB",
                      "#00E396",
                      "#FEB019",
                      "#FF4560",
                      "#775DD0",
                    ];
                    break;
                  case "palette2":
                    this.colors = [
                      "#3f51b5",
                      "#03a9f4",
                      "#4caf50",
                      "#f9ce1d",
                      "#FF9800",
                    ];
                    break;
                  case "palette3":
                    this.colors = [
                      "#33b2df",
                      "#546E7A",
                      "#d4526e",
                      "#13d8aa",
                      "#A5978B",
                    ];
                    break;
                  case "palette4":
                    this.colors = [
                      "#4ecdc4",
                      "#c7f464",
                      "#81D4FA",
                      "#fd6a6a",
                      "#546E7A",
                    ];
                    break;
                  case "palette5":
                    this.colors = [
                      "#2b908f",
                      "#f9a3a4",
                      "#90ee7e",
                      "#fa4443",
                      "#69d2e7",
                    ];
                    break;
                  case "palette6":
                    this.colors = [
                      "#449DD1",
                      "#F86624",
                      "#EA3546",
                      "#662E9B",
                      "#C5D86D",
                    ];
                    break;
                  case "palette7":
                    this.colors = [
                      "#D7263D",
                      "#1B998B",
                      "#2E294E",
                      "#F46036",
                      "#E2C044",
                    ];
                    break;
                  case "palette8":
                    this.colors = [
                      "#662E9B",
                      "#F86624",
                      "#F9C80E",
                      "#EA3546",
                      "#43BCCD",
                    ];
                    break;
                  case "palette9":
                    this.colors = [
                      "#5C4742",
                      "#A5978B",
                      "#8D5B4C",
                      "#5A2A27",
                      "#C4BBAF",
                    ];
                    break;
                  case "palette10":
                    this.colors = [
                      "#A300D6",
                      "#7D02EB",
                      "#5653FE",
                      "#2983FF",
                      "#00B1F2",
                    ];
                }
                return this.colors;
              },
            },
          ]),
          t
        );
      })(),
      et = (function () {
        function t(i) {
          e(this, t), (this.ctx = i), (this.w = i.w);
        }
        return (
          n(t, [
            {
              key: "draw",
              value: function () {
                this.drawTitleSubtitle("title"),
                  this.drawTitleSubtitle("subtitle");
              },
            },
            {
              key: "drawTitleSubtitle",
              value: function (t) {
                var e = this.w,
                  i = "title" === t ? e.config.title : e.config.subtitle,
                  n = e.globals.svgWidth / 2,
                  a = i.offsetY,
                  s = "middle";
                if (
                  ("left" === i.align
                    ? ((n = 10), (s = "start"))
                    : "right" === i.align &&
                      ((n = e.globals.svgWidth - 10), (s = "end")),
                  (n += i.offsetX),
                  (a = a + parseInt(i.style.fontSize, 10) + i.margin / 2),
                  void 0 !== i.text)
                ) {
                  var r = new m(this.ctx).drawText({
                    x: n,
                    y: a,
                    text: i.text,
                    textAnchor: s,
                    fontSize: i.style.fontSize,
                    fontFamily: i.style.fontFamily,
                    fontWeight: i.style.fontWeight,
                    foreColor: i.style.color,
                    opacity: 1,
                  });
                  r.node.setAttribute(
                    "class",
                    "apexcharts-".concat(t, "-text")
                  ),
                    e.globals.dom.Paper.add(r);
                }
              },
            },
          ]),
          t
        );
      })(),
      it = (function () {
        function t(i) {
          e(this, t), (this.w = i.w), (this.dCtx = i);
        }
        return (
          n(t, [
            {
              key: "getTitleSubtitleCoords",
              value: function (t) {
                var e = this.w,
                  i = 0,
                  n = 0,
                  a =
                    "title" === t
                      ? e.config.title.floating
                      : e.config.subtitle.floating,
                  s = e.globals.dom.baseEl.querySelector(
                    ".apexcharts-".concat(t, "-text")
                  );
                if (null !== s && !a) {
                  var r = s.getBoundingClientRect();
                  (i = r.width),
                    (n = e.globals.axisCharts ? r.height + 5 : r.height);
                }
                return { width: i, height: n };
              },
            },
            {
              key: "getLegendsRect",
              value: function () {
                var t = this.w,
                  e = t.globals.dom.baseEl.querySelector(".apexcharts-legend");
                t.config.legend.height ||
                  ("top" !== t.config.legend.position &&
                    "bottom" !== t.config.legend.position) ||
                  (e.style.maxHeight = t.globals.svgHeight / 2 + "px");
                var i = Object.assign({}, p.getBoundingClientRect(e));
                return (
                  null !== e &&
                  !t.config.legend.floating &&
                  t.config.legend.show
                    ? (this.dCtx.lgRect = {
                        x: i.x,
                        y: i.y,
                        height: i.height,
                        width: 0 === i.height ? 0 : i.width,
                      })
                    : (this.dCtx.lgRect = { x: 0, y: 0, height: 0, width: 0 }),
                  ("left" !== t.config.legend.position &&
                    "right" !== t.config.legend.position) ||
                    (1.5 * this.dCtx.lgRect.width > t.globals.svgWidth &&
                      (this.dCtx.lgRect.width = t.globals.svgWidth / 1.5)),
                  this.dCtx.lgRect
                );
              },
            },
            {
              key: "getLargestStringFromMultiArr",
              value: function (t, e) {
                var i = t;
                if (this.w.globals.isMultiLineX) {
                  var n = e.map(function (t, e) {
                      return Array.isArray(t) ? t.length : 1;
                    }),
                    a = Math.max.apply(Math, u(n));
                  i = e[n.indexOf(a)];
                }
                return i;
              },
            },
          ]),
          t
        );
      })(),
      nt = (function () {
        function t(i) {
          e(this, t), (this.w = i.w), (this.dCtx = i);
        }
        return (
          n(t, [
            {
              key: "getxAxisLabelsCoords",
              value: function () {
                var t,
                  e = this.w,
                  i = e.globals.labels.slice();
                if (
                  (e.config.xaxis.convertedCatToNumeric &&
                    0 === i.length &&
                    (i = e.globals.categoryLabels),
                  e.globals.timescaleLabels.length > 0)
                ) {
                  var n = this.getxAxisTimeScaleLabelsCoords();
                  (t = { width: n.width, height: n.height }),
                    (e.globals.rotateXLabels = !1);
                } else {
                  this.dCtx.lgWidthForSideLegends =
                    ("left" !== e.config.legend.position &&
                      "right" !== e.config.legend.position) ||
                    e.config.legend.floating
                      ? 0
                      : this.dCtx.lgRect.width;
                  var a = e.globals.xLabelFormatter,
                    s = p.getLargestStringFromArr(i),
                    r = this.dCtx.dimHelpers.getLargestStringFromMultiArr(s, i);
                  e.globals.isBarHorizontal &&
                    (r = s =
                      e.globals.yAxisScale[0].result.reduce(function (t, e) {
                        return t.length > e.length ? t : e;
                      }, 0));
                  var o = new Y(this.dCtx.ctx),
                    l = s;
                  (s = o.xLabelFormat(a, s, l, {
                    i: void 0,
                    dateFormatter: new D(this.dCtx.ctx).formatDate,
                    w: e,
                  })),
                    (r = o.xLabelFormat(a, r, l, {
                      i: void 0,
                      dateFormatter: new D(this.dCtx.ctx).formatDate,
                      w: e,
                    })),
                    ((e.config.xaxis.convertedCatToNumeric && void 0 === s) ||
                      "" === String(s).trim()) &&
                      (r = s = "1");
                  var c = new m(this.dCtx.ctx),
                    h = c.getTextRects(s, e.config.xaxis.labels.style.fontSize),
                    d = h;
                  if (
                    (s !== r &&
                      (d = c.getTextRects(
                        r,
                        e.config.xaxis.labels.style.fontSize
                      )),
                    ((t = {
                      width: h.width >= d.width ? h.width : d.width,
                      height: h.height >= d.height ? h.height : d.height,
                    }).width *
                      i.length >
                      e.globals.svgWidth -
                        this.dCtx.lgWidthForSideLegends -
                        this.dCtx.yAxisWidth -
                        this.dCtx.gridPad.left -
                        this.dCtx.gridPad.right &&
                      0 !== e.config.xaxis.labels.rotate) ||
                      e.config.xaxis.labels.rotateAlways)
                  ) {
                    if (!e.globals.isBarHorizontal) {
                      e.globals.rotateXLabels = !0;
                      var u = function (t) {
                        return c.getTextRects(
                          t,
                          e.config.xaxis.labels.style.fontSize,
                          e.config.xaxis.labels.style.fontFamily,
                          "rotate(".concat(
                            e.config.xaxis.labels.rotate,
                            " 0 0)"
                          ),
                          !1
                        );
                      };
                      (h = u(s)),
                        s !== r && (d = u(r)),
                        (t.height =
                          (h.height > d.height ? h.height : d.height) / 1.5),
                        (t.width = h.width > d.width ? h.width : d.width);
                    }
                  } else e.globals.rotateXLabels = !1;
                }
                return (
                  e.config.xaxis.labels.show || (t = { width: 0, height: 0 }),
                  { width: t.width, height: t.height }
                );
              },
            },
            {
              key: "getxAxisTitleCoords",
              value: function () {
                var t = this.w,
                  e = 0,
                  i = 0;
                if (void 0 !== t.config.xaxis.title.text) {
                  var n = new m(this.dCtx.ctx).getTextRects(
                    t.config.xaxis.title.text,
                    t.config.xaxis.title.style.fontSize
                  );
                  (e = n.width), (i = n.height);
                }
                return { width: e, height: i };
              },
            },
            {
              key: "getxAxisTimeScaleLabelsCoords",
              value: function () {
                var t,
                  e = this.w;
                this.dCtx.timescaleLabels = e.globals.timescaleLabels.slice();
                var i = this.dCtx.timescaleLabels.map(function (t) {
                    return t.value;
                  }),
                  n = i.reduce(function (t, e) {
                    return void 0 === t
                      ? (console.error(
                          "You have possibly supplied invalid Date format. Please supply a valid JavaScript Date"
                        ),
                        0)
                      : t.length > e.length
                      ? t
                      : e;
                  }, 0);
                return (
                  1.05 *
                    (t = new m(this.dCtx.ctx).getTextRects(
                      n,
                      e.config.xaxis.labels.style.fontSize
                    )).width *
                    i.length >
                    e.globals.gridWidth &&
                    0 !== e.config.xaxis.labels.rotate &&
                    (e.globals.overlappingXLabels = !0),
                  t
                );
              },
            },
            {
              key: "additionalPaddingXLabels",
              value: function (t) {
                var e = this,
                  i = this.w,
                  n = i.globals,
                  a = i.config,
                  s = a.xaxis.type,
                  r = t.width;
                (n.skipLastTimelinelabel = !1), (n.skipFirstTimelinelabel = !1);
                var o = i.config.yaxis[0].opposite && i.globals.isBarHorizontal,
                  l = function (t, o) {
                    (function (t) {
                      return -1 !== n.collapsedSeriesIndices.indexOf(t);
                    })(o) ||
                      (function (t) {
                        if (
                          e.dCtx.timescaleLabels &&
                          e.dCtx.timescaleLabels.length
                        ) {
                          var o = e.dCtx.timescaleLabels[0],
                            l =
                              e.dCtx.timescaleLabels[
                                e.dCtx.timescaleLabels.length - 1
                              ].position +
                              r / 1.75 -
                              e.dCtx.yAxisWidthRight,
                            c = o.position - r / 1.75 + e.dCtx.yAxisWidthLeft,
                            h =
                              "right" === i.config.legend.position &&
                              e.dCtx.lgRect.width > 0
                                ? e.dCtx.lgRect.width
                                : 0;
                          l > n.svgWidth - n.translateX - h &&
                            (n.skipLastTimelinelabel = !0),
                            c <
                              -((t.show && !t.floating) ||
                              ("bar" !== a.chart.type &&
                                "candlestick" !== a.chart.type &&
                                "rangeBar" !== a.chart.type &&
                                "boxPlot" !== a.chart.type)
                                ? 10
                                : r / 1.75) && (n.skipFirstTimelinelabel = !0);
                        } else
                          "datetime" === s
                            ? e.dCtx.gridPad.right < r &&
                              !n.rotateXLabels &&
                              (n.skipLastTimelinelabel = !0)
                            : "datetime" !== s &&
                              e.dCtx.gridPad.right <
                                r / 2 - e.dCtx.yAxisWidthRight &&
                              !n.rotateXLabels &&
                              !i.config.xaxis.labels.trim &&
                              ("between" !== i.config.xaxis.tickPlacement ||
                                i.globals.isBarHorizontal) &&
                              (e.dCtx.xPadRight = r / 2 + 1);
                      })(t);
                  };
                a.yaxis.forEach(function (t, i) {
                  o
                    ? (e.dCtx.gridPad.left < r && (e.dCtx.xPadLeft = r / 2 + 1),
                      (e.dCtx.xPadRight = r / 2 + 1))
                    : l(t, i);
                });
              },
            },
          ]),
          t
        );
      })(),
      at = (function () {
        function t(i) {
          e(this, t), (this.w = i.w), (this.dCtx = i);
        }
        return (
          n(t, [
            {
              key: "getyAxisLabelsCoords",
              value: function () {
                var t = this,
                  e = this.w,
                  i = [],
                  n = 10,
                  a = new W(this.dCtx.ctx);
                return (
                  e.config.yaxis.map(function (s, r) {
                    var o = e.globals.yAxisScale[r],
                      l = 0;
                    if (
                      (!a.isYAxisHidden(r) &&
                        s.labels.show &&
                        void 0 !== s.labels.minWidth &&
                        (l = s.labels.minWidth),
                      !a.isYAxisHidden(r) && s.labels.show && o.result.length)
                    ) {
                      var c = e.globals.yLabelFormatters[r],
                        h = o.niceMin === Number.MIN_VALUE ? 0 : o.niceMin,
                        d =
                          String(h).length > String(o.niceMax).length
                            ? h
                            : o.niceMax,
                        u = c(d, { seriesIndex: r, dataPointIndex: -1, w: e }),
                        f = u;
                      if (
                        ((void 0 !== u && 0 !== u.length) || (u = d),
                        e.globals.isBarHorizontal)
                      ) {
                        n = 0;
                        var g = e.globals.labels.slice();
                        (u = c((u = p.getLargestStringFromArr(g)), {
                          seriesIndex: r,
                          dataPointIndex: -1,
                          w: e,
                        })),
                          (f = t.dCtx.dimHelpers.getLargestStringFromMultiArr(
                            u,
                            g
                          ));
                      }
                      var x = new m(t.dCtx.ctx),
                        v = "rotate(".concat(s.labels.rotate, " 0 0)"),
                        b = x.getTextRects(
                          u,
                          s.labels.style.fontSize,
                          s.labels.style.fontFamily,
                          v,
                          !1
                        ),
                        y = b;
                      u !== f &&
                        (y = x.getTextRects(
                          f,
                          s.labels.style.fontSize,
                          s.labels.style.fontFamily,
                          v,
                          !1
                        )),
                        i.push({
                          width:
                            (l > y.width || l > b.width
                              ? l
                              : y.width > b.width
                              ? y.width
                              : b.width) + n,
                          height: y.height > b.height ? y.height : b.height,
                        });
                    } else i.push({ width: 0, height: 0 });
                  }),
                  i
                );
              },
            },
            {
              key: "getyAxisTitleCoords",
              value: function () {
                var t = this,
                  e = this.w,
                  i = [];
                return (
                  e.config.yaxis.map(function (e, n) {
                    if (e.show && void 0 !== e.title.text) {
                      var a = new m(t.dCtx.ctx),
                        s = "rotate(".concat(e.title.rotate, " 0 0)"),
                        r = a.getTextRects(
                          e.title.text,
                          e.title.style.fontSize,
                          e.title.style.fontFamily,
                          s,
                          !1
                        );
                      i.push({ width: r.width, height: r.height });
                    } else i.push({ width: 0, height: 0 });
                  }),
                  i
                );
              },
            },
            {
              key: "getTotalYAxisWidth",
              value: function () {
                var t = this.w,
                  e = 0,
                  i = 0,
                  n = 0,
                  a = t.globals.yAxisScale.length > 1 ? 10 : 0,
                  s = new W(this.dCtx.ctx),
                  r = function (r, o) {
                    var l = t.config.yaxis[o].floating,
                      c = 0;
                    r.width > 0 && !l
                      ? ((c = r.width + a),
                        (function (e) {
                          return t.globals.ignoreYAxisIndexes.indexOf(e) > -1;
                        })(o) && (c = c - r.width - a))
                      : (c = l || s.isYAxisHidden(o) ? 0 : 5),
                      t.config.yaxis[o].opposite ? (n += c) : (i += c),
                      (e += c);
                  };
                return (
                  t.globals.yLabelsCoords.map(function (t, e) {
                    r(t, e);
                  }),
                  t.globals.yTitleCoords.map(function (t, e) {
                    r(t, e);
                  }),
                  t.globals.isBarHorizontal &&
                    !t.config.yaxis[0].floating &&
                    (e =
                      t.globals.yLabelsCoords[0].width +
                      t.globals.yTitleCoords[0].width +
                      15),
                  (this.dCtx.yAxisWidthLeft = i),
                  (this.dCtx.yAxisWidthRight = n),
                  e
                );
              },
            },
          ]),
          t
        );
      })(),
      st = (function () {
        function t(i) {
          e(this, t), (this.w = i.w), (this.dCtx = i);
        }
        return (
          n(t, [
            {
              key: "gridPadForColumnsInNumericAxis",
              value: function (t) {
                var e = this.w;
                if (e.globals.noData || e.globals.allSeriesCollapsed) return 0;
                var i = function (t) {
                    return (
                      "bar" === t ||
                      "rangeBar" === t ||
                      "candlestick" === t ||
                      "boxPlot" === t
                    );
                  },
                  n = e.config.chart.type,
                  a = 0,
                  s = i(n) ? e.config.series.length : 1;
                if (
                  (e.globals.comboBarCount > 0 && (s = e.globals.comboBarCount),
                  e.globals.collapsedSeries.forEach(function (t) {
                    i(t.type) && (s -= 1);
                  }),
                  e.config.chart.stacked && (s = 1),
                  (i(n) || e.globals.comboBarCount > 0) &&
                    e.globals.isXNumeric &&
                    !e.globals.isBarHorizontal &&
                    s > 0)
                ) {
                  var r,
                    o,
                    l = Math.abs(e.globals.initialMaxX - e.globals.initialMinX);
                  l <= 3 && (l = e.globals.dataPoints),
                    (r = l / t),
                    e.globals.minXDiff &&
                      e.globals.minXDiff / r > 0 &&
                      (o = e.globals.minXDiff / r),
                    o > t / 2 && (o /= 2),
                    (a =
                      ((o / s) *
                        parseInt(e.config.plotOptions.bar.columnWidth, 10)) /
                      100) < 1 && (a = 1),
                    (a = a / (s > 1 ? 1 : 1.5) + 5),
                    (e.globals.barPadForNumericAxis = a);
                }
                return a;
              },
            },
            {
              key: "gridPadFortitleSubtitle",
              value: function () {
                var t = this,
                  e = this.w,
                  i = e.globals,
                  n = this.dCtx.isSparkline || !e.globals.axisCharts ? 0 : 10;
                ["title", "subtitle"].forEach(function (i) {
                  void 0 !== e.config[i].text
                    ? (n += e.config[i].margin)
                    : (n +=
                        t.dCtx.isSparkline || !e.globals.axisCharts ? 0 : 5);
                }),
                  !e.config.legend.show ||
                    "bottom" !== e.config.legend.position ||
                    e.config.legend.floating ||
                    e.globals.axisCharts ||
                    (n += 10);
                var a = this.dCtx.dimHelpers.getTitleSubtitleCoords("title"),
                  s = this.dCtx.dimHelpers.getTitleSubtitleCoords("subtitle");
                (i.gridHeight = i.gridHeight - a.height - s.height - n),
                  (i.translateY = i.translateY + a.height + s.height + n);
              },
            },
            {
              key: "setGridXPosForDualYAxis",
              value: function (t, e) {
                var i = this.w,
                  n = new W(this.dCtx.ctx);
                i.config.yaxis.map(function (a, s) {
                  -1 !== i.globals.ignoreYAxisIndexes.indexOf(s) ||
                    a.floating ||
                    n.isYAxisHidden(s) ||
                    (a.opposite &&
                      (i.globals.translateX =
                        i.globals.translateX -
                        (e[s].width + t[s].width) -
                        parseInt(i.config.yaxis[s].labels.style.fontSize, 10) /
                          1.2 -
                        12),
                    i.globals.translateX < 2 && (i.globals.translateX = 2));
                });
              },
            },
          ]),
          t
        );
      })(),
      rt = (function () {
        function t(i) {
          e(this, t),
            (this.ctx = i),
            (this.w = i.w),
            (this.lgRect = {}),
            (this.yAxisWidth = 0),
            (this.yAxisWidthLeft = 0),
            (this.yAxisWidthRight = 0),
            (this.xAxisHeight = 0),
            (this.isSparkline = this.w.config.chart.sparkline.enabled),
            (this.dimHelpers = new it(this)),
            (this.dimYAxis = new at(this)),
            (this.dimXAxis = new nt(this)),
            (this.dimGrid = new st(this)),
            (this.lgWidthForSideLegends = 0),
            (this.gridPad = this.w.config.grid.padding),
            (this.xPadRight = 0),
            (this.xPadLeft = 0);
        }
        return (
          n(t, [
            {
              key: "plotCoords",
              value: function () {
                var t = this.w.globals;
                (this.lgRect = this.dimHelpers.getLegendsRect()),
                  t.axisCharts
                    ? this.setDimensionsForAxisCharts()
                    : this.setDimensionsForNonAxisCharts(),
                  this.dimGrid.gridPadFortitleSubtitle(),
                  (t.gridHeight =
                    t.gridHeight - this.gridPad.top - this.gridPad.bottom),
                  (t.gridWidth =
                    t.gridWidth -
                    this.gridPad.left -
                    this.gridPad.right -
                    this.xPadRight -
                    this.xPadLeft);
                var e = this.dimGrid.gridPadForColumnsInNumericAxis(
                  t.gridWidth
                );
                (t.gridWidth = t.gridWidth - 2 * e),
                  (t.translateX =
                    t.translateX +
                    this.gridPad.left +
                    this.xPadLeft +
                    (e > 0 ? e + 4 : 0)),
                  (t.translateY = t.translateY + this.gridPad.top);
              },
            },
            {
              key: "setDimensionsForAxisCharts",
              value: function () {
                var t = this,
                  e = this.w,
                  i = e.globals,
                  n = this.dimYAxis.getyAxisLabelsCoords(),
                  a = this.dimYAxis.getyAxisTitleCoords();
                (e.globals.yLabelsCoords = []),
                  (e.globals.yTitleCoords = []),
                  e.config.yaxis.map(function (t, i) {
                    e.globals.yLabelsCoords.push({
                      width: n[i].width,
                      index: i,
                    }),
                      e.globals.yTitleCoords.push({
                        width: a[i].width,
                        index: i,
                      });
                  }),
                  (this.yAxisWidth = this.dimYAxis.getTotalYAxisWidth());
                var s = this.dimXAxis.getxAxisLabelsCoords(),
                  r = this.dimXAxis.getxAxisTitleCoords();
                this.conditionalChecksForAxisCoords(s, r),
                  (i.translateXAxisY = e.globals.rotateXLabels
                    ? this.xAxisHeight / 8
                    : -4),
                  (i.translateXAxisX =
                    e.globals.rotateXLabels &&
                    e.globals.isXNumeric &&
                    e.config.xaxis.labels.rotate <= -45
                      ? -this.xAxisWidth / 4
                      : 0),
                  e.globals.isBarHorizontal &&
                    ((i.rotateXLabels = !1),
                    (i.translateXAxisY =
                      (parseInt(e.config.xaxis.labels.style.fontSize, 10) /
                        1.5) *
                      -1)),
                  (i.translateXAxisY =
                    i.translateXAxisY + e.config.xaxis.labels.offsetY),
                  (i.translateXAxisX =
                    i.translateXAxisX + e.config.xaxis.labels.offsetX);
                var o = this.yAxisWidth,
                  l = this.xAxisHeight;
                (i.xAxisLabelsHeight = this.xAxisHeight - r.height),
                  (i.xAxisLabelsWidth = this.xAxisWidth),
                  (i.xAxisHeight = this.xAxisHeight);
                var c = 10;
                ("radar" === e.config.chart.type || this.isSparkline) &&
                  ((o = 0), (l = i.goldenPadding)),
                  this.isSparkline && (this.lgRect = { height: 0, width: 0 }),
                  (this.isSparkline || "treemap" === e.config.chart.type) &&
                    ((o = 0), (l = 0), (c = 0)),
                  this.isSparkline || this.dimXAxis.additionalPaddingXLabels(s);
                var h = function () {
                  (i.translateX = o),
                    (i.gridHeight =
                      i.svgHeight -
                      t.lgRect.height -
                      l -
                      (t.isSparkline || "treemap" === e.config.chart.type
                        ? 0
                        : e.globals.rotateXLabels
                        ? 10
                        : 15)),
                    (i.gridWidth = i.svgWidth - o);
                };
                switch (
                  ("top" === e.config.xaxis.position &&
                    (c = i.xAxisHeight - e.config.xaxis.axisTicks.height - 5),
                  e.config.legend.position)
                ) {
                  case "bottom":
                    (i.translateY = c), h();
                    break;
                  case "top":
                    (i.translateY = this.lgRect.height + c), h();
                    break;
                  case "left":
                    (i.translateY = c),
                      (i.translateX = this.lgRect.width + o),
                      (i.gridHeight = i.svgHeight - l - 12),
                      (i.gridWidth = i.svgWidth - this.lgRect.width - o);
                    break;
                  case "right":
                    (i.translateY = c),
                      (i.translateX = o),
                      (i.gridHeight = i.svgHeight - l - 12),
                      (i.gridWidth = i.svgWidth - this.lgRect.width - o - 5);
                    break;
                  default:
                    throw new Error("Legend position not supported");
                }
                this.dimGrid.setGridXPosForDualYAxis(a, n),
                  new U(this.ctx).setYAxisXPosition(n, a);
              },
            },
            {
              key: "setDimensionsForNonAxisCharts",
              value: function () {
                var t = this.w,
                  e = t.globals,
                  i = t.config,
                  n = 0;
                t.config.legend.show && !t.config.legend.floating && (n = 20);
                var a =
                    "pie" === i.chart.type ||
                    "polarArea" === i.chart.type ||
                    "donut" === i.chart.type
                      ? "pie"
                      : "radialBar",
                  s = i.plotOptions[a].offsetY,
                  r = i.plotOptions[a].offsetX;
                if (!i.legend.show || i.legend.floating)
                  return (
                    (e.gridHeight =
                      e.svgHeight - i.grid.padding.left + i.grid.padding.right),
                    (e.gridWidth = e.gridHeight),
                    (e.translateY = s),
                    void (e.translateX = r + (e.svgWidth - e.gridWidth) / 2)
                  );
                switch (i.legend.position) {
                  case "bottom":
                    (e.gridHeight =
                      e.svgHeight - this.lgRect.height - e.goldenPadding),
                      (e.gridWidth = e.svgWidth),
                      (e.translateY = s - 10),
                      (e.translateX = r + (e.svgWidth - e.gridWidth) / 2);
                    break;
                  case "top":
                    (e.gridHeight =
                      e.svgHeight - this.lgRect.height - e.goldenPadding),
                      (e.gridWidth = e.svgWidth),
                      (e.translateY = this.lgRect.height + s + 10),
                      (e.translateX = r + (e.svgWidth - e.gridWidth) / 2);
                    break;
                  case "left":
                    (e.gridWidth = e.svgWidth - this.lgRect.width - n),
                      (e.gridHeight =
                        "auto" !== i.chart.height ? e.svgHeight : e.gridWidth),
                      (e.translateY = s),
                      (e.translateX = r + this.lgRect.width + n);
                    break;
                  case "right":
                    (e.gridWidth = e.svgWidth - this.lgRect.width - n - 5),
                      (e.gridHeight =
                        "auto" !== i.chart.height ? e.svgHeight : e.gridWidth),
                      (e.translateY = s),
                      (e.translateX = r + 10);
                    break;
                  default:
                    throw new Error("Legend position not supported");
                }
              },
            },
            {
              key: "conditionalChecksForAxisCoords",
              value: function (t, e) {
                var i = this.w;
                (this.xAxisHeight =
                  (t.height + e.height) *
                    (i.globals.isMultiLineX
                      ? 1.2
                      : i.globals.LINE_HEIGHT_RATIO) +
                  (i.globals.rotateXLabels ? 22 : 10)),
                  (this.xAxisWidth = t.width),
                  this.xAxisHeight - e.height >
                    i.config.xaxis.labels.maxHeight &&
                    (this.xAxisHeight = i.config.xaxis.labels.maxHeight),
                  i.config.xaxis.labels.minHeight &&
                    this.xAxisHeight < i.config.xaxis.labels.minHeight &&
                    (this.xAxisHeight = i.config.xaxis.labels.minHeight),
                  i.config.xaxis.floating && (this.xAxisHeight = 0);
                var n = 0,
                  a = 0;
                i.config.yaxis.forEach(function (t) {
                  (n += t.labels.minWidth), (a += t.labels.maxWidth);
                }),
                  this.yAxisWidth < n && (this.yAxisWidth = n),
                  this.yAxisWidth > a && (this.yAxisWidth = a);
              },
            },
          ]),
          t
        );
      })(),
      ot = (function () {
        function t(i) {
          e(this, t), (this.w = i.w), (this.lgCtx = i);
        }
        return (
          n(t, [
            {
              key: "getLegendStyles",
              value: function () {
                var t = document.createElement("style");
                t.setAttribute("type", "text/css");
                var e = document.createTextNode(
                  "\t\n    \t\n      .apexcharts-legend {\t\n        display: flex;\t\n        overflow: auto;\t\n        padding: 0 10px;\t\n      }\t\n      .apexcharts-legend.apx-legend-position-bottom, .apexcharts-legend.apx-legend-position-top {\t\n        flex-wrap: wrap\t\n      }\t\n      .apexcharts-legend.apx-legend-position-right, .apexcharts-legend.apx-legend-position-left {\t\n        flex-direction: column;\t\n        bottom: 0;\t\n      }\t\n      .apexcharts-legend.apx-legend-position-bottom.apexcharts-align-left, .apexcharts-legend.apx-legend-position-top.apexcharts-align-left, .apexcharts-legend.apx-legend-position-right, .apexcharts-legend.apx-legend-position-left {\t\n        justify-content: flex-start;\t\n      }\t\n      .apexcharts-legend.apx-legend-position-bottom.apexcharts-align-center, .apexcharts-legend.apx-legend-position-top.apexcharts-align-center {\t\n        justify-content: center;  \t\n      }\t\n      .apexcharts-legend.apx-legend-position-bottom.apexcharts-align-right, .apexcharts-legend.apx-legend-position-top.apexcharts-align-right {\t\n        justify-content: flex-end;\t\n      }\t\n      .apexcharts-legend-series {\t\n        cursor: pointer;\t\n        line-height: normal;\t\n      }\t\n      .apexcharts-legend.apx-legend-position-bottom .apexcharts-legend-series, .apexcharts-legend.apx-legend-position-top .apexcharts-legend-series{\t\n        display: flex;\t\n        align-items: center;\t\n      }\t\n      .apexcharts-legend-text {\t\n        position: relative;\t\n        font-size: 14px;\t\n      }\t\n      .apexcharts-legend-text *, .apexcharts-legend-marker * {\t\n        pointer-events: none;\t\n      }\t\n      .apexcharts-legend-marker {\t\n        position: relative;\t\n        display: inline-block;\t\n        cursor: pointer;\t\n        margin-right: 3px;\t\n        border-style: solid;\n      }\t\n      \t\n      .apexcharts-legend.apexcharts-align-right .apexcharts-legend-series, .apexcharts-legend.apexcharts-align-left .apexcharts-legend-series{\t\n        display: inline-block;\t\n      }\t\n      .apexcharts-legend-series.apexcharts-no-click {\t\n        cursor: auto;\t\n      }\t\n      .apexcharts-legend .apexcharts-hidden-zero-series, .apexcharts-legend .apexcharts-hidden-null-series {\t\n        display: none !important;\t\n      }\t\n      .apexcharts-inactive-legend {\t\n        opacity: 0.45;\t\n      }"
                );
                return t.appendChild(e), t;
              },
            },
            {
              key: "getLegendBBox",
              value: function () {
                var t = this.w.globals.dom.baseEl
                    .querySelector(".apexcharts-legend")
                    .getBoundingClientRect(),
                  e = t.width;
                return { clwh: t.height, clww: e };
              },
            },
            {
              key: "appendToForeignObject",
              value: function () {
                var t = this.w.globals;
                t.dom.elLegendForeign = document.createElementNS(
                  t.SVGNS,
                  "foreignObject"
                );
                var e = t.dom.elLegendForeign;
                e.setAttribute("x", 0),
                  e.setAttribute("y", 0),
                  e.setAttribute("width", t.svgWidth),
                  e.setAttribute("height", t.svgHeight),
                  t.dom.elLegendWrap.setAttribute(
                    "xmlns",
                    "http://www.w3.org/1999/xhtml"
                  ),
                  e.appendChild(t.dom.elLegendWrap),
                  e.appendChild(this.getLegendStyles()),
                  t.dom.Paper.node.insertBefore(e, t.dom.elGraphical.node);
              },
            },
            {
              key: "toggleDataSeries",
              value: function (t, e) {
                var i = this,
                  n = this.w;
                if (
                  n.globals.axisCharts ||
                  "radialBar" === n.config.chart.type
                ) {
                  n.globals.resized = !0;
                  var a = null,
                    s = null;
                  (n.globals.risingSeries = []),
                    n.globals.axisCharts
                      ? ((a = n.globals.dom.baseEl.querySelector(
                          ".apexcharts-series[data\\:realIndex='".concat(
                            t,
                            "']"
                          )
                        )),
                        (s = parseInt(a.getAttribute("data:realIndex"), 10)))
                      : ((a = n.globals.dom.baseEl.querySelector(
                          ".apexcharts-series[rel='".concat(t + 1, "']")
                        )),
                        (s = parseInt(a.getAttribute("rel"), 10) - 1)),
                    e
                      ? [
                          {
                            cs: n.globals.collapsedSeries,
                            csi: n.globals.collapsedSeriesIndices,
                          },
                          {
                            cs: n.globals.ancillaryCollapsedSeries,
                            csi: n.globals.ancillaryCollapsedSeriesIndices,
                          },
                        ].forEach(function (t) {
                          i.riseCollapsedSeries(t.cs, t.csi, s);
                        })
                      : this.hideSeries({ seriesEl: a, realIndex: s });
                } else {
                  var r = n.globals.dom.Paper.select(
                      " .apexcharts-series[rel='".concat(t + 1, "'] path")
                    ),
                    o = n.config.chart.type;
                  if ("pie" === o || "polarArea" === o || "donut" === o) {
                    var l = n.config.plotOptions.pie.donut.labels;
                    new m(this.lgCtx.ctx).pathMouseDown(r.members[0], null),
                      this.lgCtx.ctx.pie.printDataLabelsInner(
                        r.members[0].node,
                        l
                      );
                  }
                  r.fire("click");
                }
              },
            },
            {
              key: "hideSeries",
              value: function (t) {
                var e = t.seriesEl,
                  i = t.realIndex,
                  n = this.w,
                  a = p.clone(n.config.series);
                if (n.globals.axisCharts) {
                  var s = !1;
                  if (
                    (n.config.yaxis[i] &&
                      n.config.yaxis[i].show &&
                      n.config.yaxis[i].showAlways &&
                      ((s = !0),
                      n.globals.ancillaryCollapsedSeriesIndices.indexOf(i) <
                        0 &&
                        (n.globals.ancillaryCollapsedSeries.push({
                          index: i,
                          data: a[i].data.slice(),
                          type: e.parentNode.className.baseVal.split("-")[1],
                        }),
                        n.globals.ancillaryCollapsedSeriesIndices.push(i))),
                    !s)
                  ) {
                    n.globals.collapsedSeries.push({
                      index: i,
                      data: a[i].data.slice(),
                      type: e.parentNode.className.baseVal.split("-")[1],
                    }),
                      n.globals.collapsedSeriesIndices.push(i);
                    var r = n.globals.risingSeries.indexOf(i);
                    n.globals.risingSeries.splice(r, 1);
                  }
                } else
                  n.globals.collapsedSeries.push({ index: i, data: a[i] }),
                    n.globals.collapsedSeriesIndices.push(i);
                for (var o = e.childNodes, l = 0; l < o.length; l++)
                  o[l].classList.contains("apexcharts-series-markers-wrap") &&
                    (o[l].classList.contains("apexcharts-hide")
                      ? o[l].classList.remove("apexcharts-hide")
                      : o[l].classList.add("apexcharts-hide"));
                (n.globals.allSeriesCollapsed =
                  n.globals.collapsedSeries.length === n.config.series.length),
                  (a = this._getSeriesBasedOnCollapsedState(a)),
                  this.lgCtx.ctx.updateHelpers._updateSeries(
                    a,
                    n.config.chart.animations.dynamicAnimation.enabled
                  );
              },
            },
            {
              key: "riseCollapsedSeries",
              value: function (t, e, i) {
                var n = this.w,
                  a = p.clone(n.config.series);
                if (t.length > 0) {
                  for (var s = 0; s < t.length; s++)
                    t[s].index === i &&
                      (n.globals.axisCharts
                        ? ((a[i].data = t[s].data.slice()),
                          t.splice(s, 1),
                          e.splice(s, 1),
                          n.globals.risingSeries.push(i))
                        : ((a[i] = t[s].data),
                          t.splice(s, 1),
                          e.splice(s, 1),
                          n.globals.risingSeries.push(i)));
                  (a = this._getSeriesBasedOnCollapsedState(a)),
                    this.lgCtx.ctx.updateHelpers._updateSeries(
                      a,
                      n.config.chart.animations.dynamicAnimation.enabled
                    );
                }
              },
            },
            {
              key: "_getSeriesBasedOnCollapsedState",
              value: function (t) {
                var e = this.w;
                return (
                  e.globals.axisCharts
                    ? t.forEach(function (i, n) {
                        e.globals.collapsedSeriesIndices.indexOf(n) > -1 &&
                          (t[n].data = []);
                      })
                    : t.forEach(function (i, n) {
                        e.globals.collapsedSeriesIndices.indexOf(n) > -1 &&
                          (t[n] = 0);
                      }),
                  t
                );
              },
            },
          ]),
          t
        );
      })(),
      lt = (function () {
        function t(i, n) {
          e(this, t),
            (this.ctx = i),
            (this.w = i.w),
            (this.onLegendClick = this.onLegendClick.bind(this)),
            (this.onLegendHovered = this.onLegendHovered.bind(this)),
            (this.isBarsDistributed =
              "bar" === this.w.config.chart.type &&
              this.w.config.plotOptions.bar.distributed &&
              1 === this.w.config.series.length),
            (this.legendHelpers = new ot(this));
        }
        return (
          n(t, [
            {
              key: "init",
              value: function () {
                var t = this.w,
                  e = t.globals,
                  i = t.config;
                if (
                  ((i.legend.showForSingleSeries && 1 === e.series.length) ||
                    this.isBarsDistributed ||
                    e.series.length > 1 ||
                    !e.axisCharts) &&
                  i.legend.show
                ) {
                  for (; e.dom.elLegendWrap.firstChild; )
                    e.dom.elLegendWrap.removeChild(
                      e.dom.elLegendWrap.firstChild
                    );
                  this.drawLegends(),
                    p.isIE11()
                      ? document
                          .getElementsByTagName("head")[0]
                          .appendChild(this.legendHelpers.getLegendStyles())
                      : this.legendHelpers.appendToForeignObject(),
                    "bottom" === i.legend.position ||
                    "top" === i.legend.position
                      ? this.legendAlignHorizontal()
                      : ("right" !== i.legend.position &&
                          "left" !== i.legend.position) ||
                        this.legendAlignVertical();
                }
              },
            },
            {
              key: "drawLegends",
              value: function () {
                var t = this,
                  e = this.w,
                  i = e.config.legend.fontFamily,
                  n = e.globals.seriesNames,
                  a = e.globals.colors.slice();
                if ("heatmap" === e.config.chart.type) {
                  var s = e.config.plotOptions.heatmap.colorScale.ranges;
                  (n = s.map(function (t) {
                    return t.name ? t.name : t.from + " - " + t.to;
                  })),
                    (a = s.map(function (t) {
                      return t.color;
                    }));
                } else this.isBarsDistributed && (n = e.globals.labels.slice());
                e.config.legend.customLegendItems.length &&
                  (n = e.config.legend.customLegendItems);
                for (
                  var r = e.globals.legendFormatter,
                    o = e.config.legend.inverseOrder,
                    l = o ? n.length - 1 : 0;
                  o ? l >= 0 : l <= n.length - 1;
                  o ? l-- : l++
                ) {
                  var c = r(n[l], { seriesIndex: l, w: e }),
                    h = !1,
                    d = !1;
                  if (e.globals.collapsedSeries.length > 0)
                    for (var u = 0; u < e.globals.collapsedSeries.length; u++)
                      e.globals.collapsedSeries[u].index === l && (h = !0);
                  if (e.globals.ancillaryCollapsedSeriesIndices.length > 0)
                    for (
                      var f = 0;
                      f < e.globals.ancillaryCollapsedSeriesIndices.length;
                      f++
                    )
                      e.globals.ancillaryCollapsedSeriesIndices[f] === l &&
                        (d = !0);
                  var g = document.createElement("span");
                  g.classList.add("apexcharts-legend-marker");
                  var x = e.config.legend.markers.offsetX,
                    v = e.config.legend.markers.offsetY,
                    b = e.config.legend.markers.height,
                    w = e.config.legend.markers.width,
                    k = e.config.legend.markers.strokeWidth,
                    A = e.config.legend.markers.strokeColor,
                    S = e.config.legend.markers.radius,
                    C = g.style;
                  (C.background = a[l]),
                    (C.color = a[l]),
                    C.setProperty("background", a[l], "important"),
                    e.config.legend.markers.fillColors &&
                      e.config.legend.markers.fillColors[l] &&
                      (C.background = e.config.legend.markers.fillColors[l]),
                    void 0 !== e.globals.seriesColors[l] &&
                      ((C.background = e.globals.seriesColors[l]),
                      (C.color = e.globals.seriesColors[l])),
                    (C.height = Array.isArray(b)
                      ? parseFloat(b[l]) + "px"
                      : parseFloat(b) + "px"),
                    (C.width = Array.isArray(w)
                      ? parseFloat(w[l]) + "px"
                      : parseFloat(w) + "px"),
                    (C.left =
                      (Array.isArray(x) ? parseFloat(x[l]) : parseFloat(x)) +
                      "px"),
                    (C.top =
                      (Array.isArray(v) ? parseFloat(v[l]) : parseFloat(v)) +
                      "px"),
                    (C.borderWidth = Array.isArray(k) ? k[l] : k),
                    (C.borderColor = Array.isArray(A) ? A[l] : A),
                    (C.borderRadius = Array.isArray(S)
                      ? parseFloat(S[l]) + "px"
                      : parseFloat(S) + "px"),
                    e.config.legend.markers.customHTML &&
                      (Array.isArray(e.config.legend.markers.customHTML)
                        ? e.config.legend.markers.customHTML[l] &&
                          (g.innerHTML =
                            e.config.legend.markers.customHTML[l]())
                        : (g.innerHTML = e.config.legend.markers.customHTML())),
                    m.setAttrs(g, { rel: l + 1, "data:collapsed": h || d }),
                    (h || d) && g.classList.add("apexcharts-inactive-legend");
                  var T = document.createElement("div"),
                    E = document.createElement("span");
                  E.classList.add("apexcharts-legend-text"),
                    (E.innerHTML = Array.isArray(c) ? c.join(" ") : c);
                  var _ = e.config.legend.labels.useSeriesColors
                    ? e.globals.colors[l]
                    : e.config.legend.labels.colors;
                  _ || (_ = e.config.chart.foreColor),
                    (E.style.color = _),
                    (E.style.fontSize =
                      parseFloat(e.config.legend.fontSize) + "px"),
                    (E.style.fontWeight = e.config.legend.fontWeight),
                    (E.style.fontFamily = i || e.config.chart.fontFamily),
                    m.setAttrs(E, {
                      rel: l + 1,
                      i: l,
                      "data:default-text": encodeURIComponent(c),
                      "data:collapsed": h || d,
                    }),
                    T.appendChild(g),
                    T.appendChild(E);
                  var L = new y(this.ctx);
                  e.config.legend.showForZeroSeries ||
                    (0 === L.getSeriesTotalByIndex(l) &&
                      L.seriesHaveSameValues(l) &&
                      !L.isSeriesNull(l) &&
                      -1 === e.globals.collapsedSeriesIndices.indexOf(l) &&
                      -1 ===
                        e.globals.ancillaryCollapsedSeriesIndices.indexOf(l) &&
                      T.classList.add("apexcharts-hidden-zero-series")),
                    e.config.legend.showForNullSeries ||
                      (L.isSeriesNull(l) &&
                        -1 === e.globals.collapsedSeriesIndices.indexOf(l) &&
                        -1 ===
                          e.globals.ancillaryCollapsedSeriesIndices.indexOf(
                            l
                          ) &&
                        T.classList.add("apexcharts-hidden-null-series")),
                    e.globals.dom.elLegendWrap.appendChild(T),
                    e.globals.dom.elLegendWrap.classList.add(
                      "apexcharts-align-".concat(
                        e.config.legend.horizontalAlign
                      )
                    ),
                    e.globals.dom.elLegendWrap.classList.add(
                      "apx-legend-position-" + e.config.legend.position
                    ),
                    T.classList.add("apexcharts-legend-series"),
                    (T.style.margin = ""
                      .concat(e.config.legend.itemMargin.vertical, "px ")
                      .concat(e.config.legend.itemMargin.horizontal, "px")),
                    (e.globals.dom.elLegendWrap.style.width = e.config.legend
                      .width
                      ? e.config.legend.width + "px"
                      : ""),
                    (e.globals.dom.elLegendWrap.style.height = e.config.legend
                      .height
                      ? e.config.legend.height + "px"
                      : ""),
                    m.setAttrs(T, {
                      rel: l + 1,
                      seriesName: p.escapeString(n[l]),
                      "data:collapsed": h || d,
                    }),
                    (h || d) && T.classList.add("apexcharts-inactive-legend"),
                    e.config.legend.onItemClick.toggleDataSeries ||
                      T.classList.add("apexcharts-no-click");
                }
                e.globals.dom.elWrap.addEventListener(
                  "click",
                  t.onLegendClick,
                  !0
                ),
                  e.config.legend.onItemHover.highlightDataSeries &&
                    0 === e.config.legend.customLegendItems.length &&
                    (e.globals.dom.elWrap.addEventListener(
                      "mousemove",
                      t.onLegendHovered,
                      !0
                    ),
                    e.globals.dom.elWrap.addEventListener(
                      "mouseout",
                      t.onLegendHovered,
                      !0
                    ));
              },
            },
            {
              key: "setLegendWrapXY",
              value: function (t, e) {
                var i = this.w,
                  n = i.globals.dom.baseEl.querySelector(".apexcharts-legend"),
                  a = n.getBoundingClientRect(),
                  s = 0,
                  r = 0;
                if ("bottom" === i.config.legend.position)
                  r += i.globals.svgHeight - a.height / 2;
                else if ("top" === i.config.legend.position) {
                  var o = new rt(this.ctx),
                    l = o.dimHelpers.getTitleSubtitleCoords("title").height,
                    c = o.dimHelpers.getTitleSubtitleCoords("subtitle").height;
                  r = r + (l > 0 ? l - 10 : 0) + (c > 0 ? c - 10 : 0);
                }
                (n.style.position = "absolute"),
                  (s = s + t + i.config.legend.offsetX),
                  (r = r + e + i.config.legend.offsetY),
                  (n.style.left = s + "px"),
                  (n.style.top = r + "px"),
                  "bottom" === i.config.legend.position
                    ? ((n.style.top = "auto"),
                      (n.style.bottom = 5 - i.config.legend.offsetY + "px"))
                    : "right" === i.config.legend.position &&
                      ((n.style.left = "auto"),
                      (n.style.right = 25 + i.config.legend.offsetX + "px")),
                  ["width", "height"].forEach(function (t) {
                    n.style[t] &&
                      (n.style[t] = parseInt(i.config.legend[t], 10) + "px");
                  });
              },
            },
            {
              key: "legendAlignHorizontal",
              value: function () {
                var t = this.w;
                t.globals.dom.baseEl.querySelector(
                  ".apexcharts-legend"
                ).style.right = 0;
                var e = this.legendHelpers.getLegendBBox(),
                  i = new rt(this.ctx),
                  n = i.dimHelpers.getTitleSubtitleCoords("title"),
                  a = i.dimHelpers.getTitleSubtitleCoords("subtitle"),
                  s = 0;
                "bottom" === t.config.legend.position
                  ? (s = -e.clwh / 1.8)
                  : "top" === t.config.legend.position &&
                    (s =
                      n.height +
                      a.height +
                      t.config.title.margin +
                      t.config.subtitle.margin -
                      10),
                  this.setLegendWrapXY(20, s);
              },
            },
            {
              key: "legendAlignVertical",
              value: function () {
                var t = this.w,
                  e = this.legendHelpers.getLegendBBox(),
                  i = 0;
                "left" === t.config.legend.position && (i = 20),
                  "right" === t.config.legend.position &&
                    (i = t.globals.svgWidth - e.clww - 10),
                  this.setLegendWrapXY(i, 20);
              },
            },
            {
              key: "onLegendHovered",
              value: function (t) {
                var e = this.w,
                  i =
                    t.target.classList.contains("apexcharts-legend-text") ||
                    t.target.classList.contains("apexcharts-legend-marker");
                if (
                  "heatmap" === e.config.chart.type ||
                  this.isBarsDistributed
                ) {
                  if (i) {
                    var n = parseInt(t.target.getAttribute("rel"), 10) - 1;
                    this.ctx.events.fireEvent("legendHover", [
                      this.ctx,
                      n,
                      this.w,
                    ]),
                      new M(this.ctx).highlightRangeInSeries(t, t.target);
                  }
                } else
                  !t.target.classList.contains("apexcharts-inactive-legend") &&
                    i &&
                    new M(this.ctx).toggleSeriesOnHover(t, t.target);
              },
            },
            {
              key: "onLegendClick",
              value: function (t) {
                var e = this.w;
                if (
                  !e.config.legend.customLegendItems.length &&
                  (t.target.classList.contains("apexcharts-legend-text") ||
                    t.target.classList.contains("apexcharts-legend-marker"))
                ) {
                  var i = parseInt(t.target.getAttribute("rel"), 10) - 1,
                    n = "true" === t.target.getAttribute("data:collapsed"),
                    a = this.w.config.chart.events.legendClick;
                  "function" == typeof a && a(this.ctx, i, this.w),
                    this.ctx.events.fireEvent("legendClick", [
                      this.ctx,
                      i,
                      this.w,
                    ]);
                  var s = this.w.config.legend.markers.onClick;
                  "function" == typeof s &&
                    t.target.classList.contains("apexcharts-legend-marker") &&
                    (s(this.ctx, i, this.w),
                    this.ctx.events.fireEvent("legendMarkerClick", [
                      this.ctx,
                      i,
                      this.w,
                    ])),
                    "treemap" !== e.config.chart.type &&
                      "heatmap" !== e.config.chart.type &&
                      !this.isBarsDistributed &&
                      e.config.legend.onItemClick.toggleDataSeries &&
                      this.legendHelpers.toggleDataSeries(i, n);
                }
              },
            },
          ]),
          t
        );
      })(),
      ct = (function () {
        function t(i) {
          e(this, t), (this.ctx = i), (this.w = i.w);
          var n = this.w;
          (this.ev = this.w.config.chart.events),
            (this.selectedClass = "apexcharts-selected"),
            (this.localeValues = this.w.globals.locale.toolbar),
            (this.minX = n.globals.minX),
            (this.maxX = n.globals.maxX);
        }
        return (
          n(t, [
            {
              key: "createToolbar",
              value: function () {
                var t = this,
                  e = this.w,
                  i = function () {
                    return document.createElement("div");
                  },
                  n = i();
                if (
                  (n.setAttribute("class", "apexcharts-toolbar"),
                  (n.style.top = e.config.chart.toolbar.offsetY + "px"),
                  (n.style.right = 3 - e.config.chart.toolbar.offsetX + "px"),
                  e.globals.dom.elWrap.appendChild(n),
                  (this.elZoom = i()),
                  (this.elZoomIn = i()),
                  (this.elZoomOut = i()),
                  (this.elPan = i()),
                  (this.elSelection = i()),
                  (this.elZoomReset = i()),
                  (this.elMenuIcon = i()),
                  (this.elMenu = i()),
                  (this.elCustomIcons = []),
                  (this.t = e.config.chart.toolbar.tools),
                  Array.isArray(this.t.customIcons))
                )
                  for (var a = 0; a < this.t.customIcons.length; a++)
                    this.elCustomIcons.push(i());
                var s = [],
                  r = function (i, n, a) {
                    var r = i.toLowerCase();
                    t.t[r] &&
                      e.config.chart.zoom.enabled &&
                      s.push({
                        el: n,
                        icon: "string" == typeof t.t[r] ? t.t[r] : a,
                        title: t.localeValues[i],
                        class: "apexcharts-".concat(r, "-icon"),
                      });
                  };
                r(
                  "zoomIn",
                  this.elZoomIn,
                  '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24">\n    <path d="M0 0h24v24H0z" fill="none"/>\n    <path d="M13 7h-2v4H7v2h4v4h2v-4h4v-2h-4V7zm-1-5C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8z"/>\n</svg>\n'
                ),
                  r(
                    "zoomOut",
                    this.elZoomOut,
                    '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24">\n    <path d="M0 0h24v24H0z" fill="none"/>\n    <path d="M7 11v2h10v-2H7zm5-9C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8z"/>\n</svg>\n'
                  );
                var o = function (i) {
                  t.t[i] &&
                    e.config.chart[i].enabled &&
                    s.push({
                      el: "zoom" === i ? t.elZoom : t.elSelection,
                      icon:
                        "string" == typeof t.t[i]
                          ? t.t[i]
                          : "zoom" === i
                          ? '<svg xmlns="http://www.w3.org/2000/svg" fill="#000000" height="24" viewBox="0 0 24 24" width="24">\n    <path d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"/>\n    <path d="M0 0h24v24H0V0z" fill="none"/>\n    <path d="M12 10h-2v2H9v-2H7V9h2V7h1v2h2v1z"/>\n</svg>'
                          : '<svg fill="#6E8192" height="24" viewBox="0 0 24 24" width="24" xmlns="http://www.w3.org/2000/svg">\n    <path d="M0 0h24v24H0z" fill="none"/>\n    <path d="M3 5h2V3c-1.1 0-2 .9-2 2zm0 8h2v-2H3v2zm4 8h2v-2H7v2zM3 9h2V7H3v2zm10-6h-2v2h2V3zm6 0v2h2c0-1.1-.9-2-2-2zM5 21v-2H3c0 1.1.9 2 2 2zm-2-4h2v-2H3v2zM9 3H7v2h2V3zm2 18h2v-2h-2v2zm8-8h2v-2h-2v2zm0 8c1.1 0 2-.9 2-2h-2v2zm0-12h2V7h-2v2zm0 8h2v-2h-2v2zm-4 4h2v-2h-2v2zm0-16h2V3h-2v2z"/>\n</svg>',
                      title:
                        t.localeValues[
                          "zoom" === i ? "selectionZoom" : "selection"
                        ],
                      class: e.globals.isTouchDevice
                        ? "apexcharts-element-hidden"
                        : "apexcharts-".concat(i, "-icon"),
                    });
                };
                o("zoom"),
                  o("selection"),
                  this.t.pan &&
                    e.config.chart.zoom.enabled &&
                    s.push({
                      el: this.elPan,
                      icon:
                        "string" == typeof this.t.pan
                          ? this.t.pan
                          : '<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" fill="#000000" height="24" viewBox="0 0 24 24" width="24">\n    <defs>\n        <path d="M0 0h24v24H0z" id="a"/>\n    </defs>\n    <clipPath id="b">\n        <use overflow="visible" xlink:href="#a"/>\n    </clipPath>\n    <path clip-path="url(#b)" d="M23 5.5V20c0 2.2-1.8 4-4 4h-7.3c-1.08 0-2.1-.43-2.85-1.19L1 14.83s1.26-1.23 1.3-1.25c.22-.19.49-.29.79-.29.22 0 .42.06.6.16.04.01 4.31 2.46 4.31 2.46V4c0-.83.67-1.5 1.5-1.5S11 3.17 11 4v7h1V1.5c0-.83.67-1.5 1.5-1.5S15 .67 15 1.5V11h1V2.5c0-.83.67-1.5 1.5-1.5s1.5.67 1.5 1.5V11h1V5.5c0-.83.67-1.5 1.5-1.5s1.5.67 1.5 1.5z"/>\n</svg>',
                      title: this.localeValues.pan,
                      class: e.globals.isTouchDevice
                        ? "apexcharts-element-hidden"
                        : "apexcharts-pan-icon",
                    }),
                  r(
                    "reset",
                    this.elZoomReset,
                    '<svg fill="#000000" height="24" viewBox="0 0 24 24" width="24" xmlns="http://www.w3.org/2000/svg">\n    <path d="M10 20v-6h4v6h5v-8h3L12 3 2 12h3v8z"/>\n    <path d="M0 0h24v24H0z" fill="none"/>\n</svg>'
                  ),
                  this.t.download &&
                    s.push({
                      el: this.elMenuIcon,
                      icon:
                        "string" == typeof this.t.download
                          ? this.t.download
                          : '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"><path fill="none" d="M0 0h24v24H0V0z"/><path d="M3 18h18v-2H3v2zm0-5h18v-2H3v2zm0-7v2h18V6H3z"/></svg>',
                      title: this.localeValues.menu,
                      class: "apexcharts-menu-icon",
                    });
                for (var l = 0; l < this.elCustomIcons.length; l++)
                  s.push({
                    el: this.elCustomIcons[l],
                    icon: this.t.customIcons[l].icon,
                    title: this.t.customIcons[l].title,
                    index: this.t.customIcons[l].index,
                    class:
                      "apexcharts-toolbar-custom-icon " +
                      this.t.customIcons[l].class,
                  });
                s.forEach(function (t, e) {
                  t.index && p.moveIndexInArray(s, e, t.index);
                });
                for (var c = 0; c < s.length; c++)
                  m.setAttrs(s[c].el, { class: s[c].class, title: s[c].title }),
                    (s[c].el.innerHTML = s[c].icon),
                    n.appendChild(s[c].el);
                this._createHamburgerMenu(n),
                  e.globals.zoomEnabled
                    ? this.elZoom.classList.add(this.selectedClass)
                    : e.globals.panEnabled
                    ? this.elPan.classList.add(this.selectedClass)
                    : e.globals.selectionEnabled &&
                      this.elSelection.classList.add(this.selectedClass),
                  this.addToolbarEventListeners();
              },
            },
            {
              key: "_createHamburgerMenu",
              value: function (t) {
                (this.elMenuItems = []),
                  t.appendChild(this.elMenu),
                  m.setAttrs(this.elMenu, { class: "apexcharts-menu" });
                var e = [
                  { name: "exportSVG", title: this.localeValues.exportToSVG },
                  { name: "exportPNG", title: this.localeValues.exportToPNG },
                  { name: "exportCSV", title: this.localeValues.exportToCSV },
                ];
                this.w.globals.allSeriesHasEqualX || e.splice(2, 1);
                for (var i = 0; i < e.length; i++)
                  this.elMenuItems.push(document.createElement("div")),
                    (this.elMenuItems[i].innerHTML = e[i].title),
                    m.setAttrs(this.elMenuItems[i], {
                      class: "apexcharts-menu-item ".concat(e[i].name),
                      title: e[i].title,
                    }),
                    this.elMenu.appendChild(this.elMenuItems[i]);
              },
            },
            {
              key: "addToolbarEventListeners",
              value: function () {
                var t = this;
                this.elZoomReset.addEventListener(
                  "click",
                  this.handleZoomReset.bind(this)
                ),
                  this.elSelection.addEventListener(
                    "click",
                    this.toggleZoomSelection.bind(this, "selection")
                  ),
                  this.elZoom.addEventListener(
                    "click",
                    this.toggleZoomSelection.bind(this, "zoom")
                  ),
                  this.elZoomIn.addEventListener(
                    "click",
                    this.handleZoomIn.bind(this)
                  ),
                  this.elZoomOut.addEventListener(
                    "click",
                    this.handleZoomOut.bind(this)
                  ),
                  this.elPan.addEventListener(
                    "click",
                    this.togglePanning.bind(this)
                  ),
                  this.elMenuIcon.addEventListener(
                    "click",
                    this.toggleMenu.bind(this)
                  ),
                  this.elMenuItems.forEach(function (e) {
                    e.classList.contains("exportSVG")
                      ? e.addEventListener(
                          "click",
                          t.handleDownload.bind(t, "svg")
                        )
                      : e.classList.contains("exportPNG")
                      ? e.addEventListener(
                          "click",
                          t.handleDownload.bind(t, "png")
                        )
                      : e.classList.contains("exportCSV") &&
                        e.addEventListener(
                          "click",
                          t.handleDownload.bind(t, "csv")
                        );
                  });
                for (var e = 0; e < this.t.customIcons.length; e++)
                  this.elCustomIcons[e].addEventListener(
                    "click",
                    this.t.customIcons[e].click.bind(this, this.ctx, this.ctx.w)
                  );
              },
            },
            {
              key: "toggleZoomSelection",
              value: function (t) {
                this.ctx.getSyncedCharts().forEach(function (e) {
                  e.ctx.toolbar.toggleOtherControls();
                  var i =
                      "selection" === t
                        ? e.ctx.toolbar.elSelection
                        : e.ctx.toolbar.elZoom,
                    n = "selection" === t ? "selectionEnabled" : "zoomEnabled";
                  (e.w.globals[n] = !e.w.globals[n]),
                    i.classList.contains(e.ctx.toolbar.selectedClass)
                      ? i.classList.remove(e.ctx.toolbar.selectedClass)
                      : i.classList.add(e.ctx.toolbar.selectedClass);
                });
              },
            },
            {
              key: "getToolbarIconsReference",
              value: function () {
                var t = this.w;
                this.elZoom ||
                  (this.elZoom = t.globals.dom.baseEl.querySelector(
                    ".apexcharts-zoom-icon"
                  )),
                  this.elPan ||
                    (this.elPan = t.globals.dom.baseEl.querySelector(
                      ".apexcharts-pan-icon"
                    )),
                  this.elSelection ||
                    (this.elSelection = t.globals.dom.baseEl.querySelector(
                      ".apexcharts-selection-icon"
                    ));
              },
            },
            {
              key: "enableZoomPanFromToolbar",
              value: function (t) {
                this.toggleOtherControls(),
                  "pan" === t
                    ? (this.w.globals.panEnabled = !0)
                    : (this.w.globals.zoomEnabled = !0);
                var e = "pan" === t ? this.elPan : this.elZoom,
                  i = "pan" === t ? this.elZoom : this.elPan;
                e && e.classList.add(this.selectedClass),
                  i && i.classList.remove(this.selectedClass);
              },
            },
            {
              key: "togglePanning",
              value: function () {
                this.ctx.getSyncedCharts().forEach(function (t) {
                  t.ctx.toolbar.toggleOtherControls(),
                    (t.w.globals.panEnabled = !t.w.globals.panEnabled),
                    t.ctx.toolbar.elPan.classList.contains(
                      t.ctx.toolbar.selectedClass
                    )
                      ? t.ctx.toolbar.elPan.classList.remove(
                          t.ctx.toolbar.selectedClass
                        )
                      : t.ctx.toolbar.elPan.classList.add(
                          t.ctx.toolbar.selectedClass
                        );
                });
              },
            },
            {
              key: "toggleOtherControls",
              value: function () {
                var t = this,
                  e = this.w;
                (e.globals.panEnabled = !1),
                  (e.globals.zoomEnabled = !1),
                  (e.globals.selectionEnabled = !1),
                  this.getToolbarIconsReference(),
                  [this.elPan, this.elSelection, this.elZoom].forEach(function (
                    e
                  ) {
                    e && e.classList.remove(t.selectedClass);
                  });
              },
            },
            {
              key: "handleZoomIn",
              value: function () {
                var t = this.w;
                t.globals.isTimelineBar &&
                  ((this.minX = t.globals.minY), (this.maxX = t.globals.maxY));
                var e = (this.minX + this.maxX) / 2,
                  i = (this.minX + e) / 2,
                  n = (this.maxX + e) / 2,
                  a = this._getNewMinXMaxX(i, n);
                t.globals.disableZoomIn ||
                  this.zoomUpdateOptions(a.minX, a.maxX);
              },
            },
            {
              key: "handleZoomOut",
              value: function () {
                var t = this.w;
                if (
                  (t.globals.isTimelineBar &&
                    ((this.minX = t.globals.minY),
                    (this.maxX = t.globals.maxY)),
                  !(
                    "datetime" === t.config.xaxis.type &&
                    new Date(this.minX).getUTCFullYear() < 1e3
                  ))
                ) {
                  var e = (this.minX + this.maxX) / 2,
                    i = this.minX - (e - this.minX),
                    n = this.maxX - (e - this.maxX),
                    a = this._getNewMinXMaxX(i, n);
                  t.globals.disableZoomOut ||
                    this.zoomUpdateOptions(a.minX, a.maxX);
                }
              },
            },
            {
              key: "_getNewMinXMaxX",
              value: function (t, e) {
                var i = this.w.config.xaxis.convertedCatToNumeric;
                return {
                  minX: i ? Math.floor(t) : t,
                  maxX: i ? Math.floor(e) : e,
                };
              },
            },
            {
              key: "zoomUpdateOptions",
              value: function (t, e) {
                var i = this.w;
                if (void 0 !== t || void 0 !== e) {
                  if (
                    !(
                      i.config.xaxis.convertedCatToNumeric &&
                      (t < 1 && ((t = 1), (e = i.globals.dataPoints)),
                      e - t < 2)
                    )
                  ) {
                    var n = { min: t, max: e },
                      a = this.getBeforeZoomRange(n);
                    a && (n = a.xaxis);
                    var s = { xaxis: n },
                      r = p.clone(i.globals.initialConfig.yaxis);
                    i.config.chart.zoom.autoScaleYaxis &&
                      (r = new G(this.ctx).autoScaleY(this.ctx, r, {
                        xaxis: n,
                      })),
                      i.config.chart.group || (s.yaxis = r),
                      (this.w.globals.zoomed = !0),
                      this.ctx.updateHelpers._updateOptions(
                        s,
                        !1,
                        this.w.config.chart.animations.dynamicAnimation.enabled
                      ),
                      this.zoomCallback(n, r);
                  }
                } else this.handleZoomReset();
              },
            },
            {
              key: "zoomCallback",
              value: function (t, e) {
                "function" == typeof this.ev.zoomed &&
                  this.ev.zoomed(this.ctx, { xaxis: t, yaxis: e });
              },
            },
            {
              key: "getBeforeZoomRange",
              value: function (t, e) {
                var i = null;
                return (
                  "function" == typeof this.ev.beforeZoom &&
                    (i = this.ev.beforeZoom(this, { xaxis: t, yaxis: e })),
                  i
                );
              },
            },
            {
              key: "toggleMenu",
              value: function () {
                var t = this;
                window.setTimeout(function () {
                  t.elMenu.classList.contains("apexcharts-menu-open")
                    ? t.elMenu.classList.remove("apexcharts-menu-open")
                    : t.elMenu.classList.add("apexcharts-menu-open");
                }, 0);
              },
            },
            {
              key: "handleDownload",
              value: function (t) {
                var e = this.w,
                  i = new B(this.ctx);
                switch (t) {
                  case "svg":
                    i.exportToSVG(this.ctx);
                    break;
                  case "png":
                    i.exportToPng(this.ctx);
                    break;
                  case "csv":
                    i.exportToCSV({
                      series: e.config.series,
                      columnDelimiter:
                        e.config.chart.toolbar.export.csv.columnDelimiter,
                    });
                }
              },
            },
            {
              key: "handleZoomReset",
              value: function (t) {
                this.ctx.getSyncedCharts().forEach(function (t) {
                  var e = t.w;
                  if (
                    ((e.globals.lastXAxis.min = void 0),
                    (e.globals.lastXAxis.max = void 0),
                    t.updateHelpers.revertDefaultAxisMinMax(),
                    "function" == typeof e.config.chart.events.beforeResetZoom)
                  ) {
                    var i = e.config.chart.events.beforeResetZoom(t, e);
                    i && t.updateHelpers.revertDefaultAxisMinMax(i);
                  }
                  "function" == typeof e.config.chart.events.zoomed &&
                    t.ctx.toolbar.zoomCallback({
                      min: e.config.xaxis.min,
                      max: e.config.xaxis.max,
                    }),
                    (e.globals.zoomed = !1);
                  var n = t.ctx.series.emptyCollapsedSeries(
                    p.clone(e.globals.initialSeries)
                  );
                  t.updateHelpers._updateSeries(
                    n,
                    e.config.chart.animations.dynamicAnimation.enabled
                  );
                });
              },
            },
            {
              key: "destroy",
              value: function () {
                (this.elZoom = null),
                  (this.elZoomIn = null),
                  (this.elZoomOut = null),
                  (this.elPan = null),
                  (this.elSelection = null),
                  (this.elZoomReset = null),
                  (this.elMenuIcon = null);
              },
            },
          ]),
          t
        );
      })(),
      ht = (function (t) {
        o(a, t);
        var i = d(a);
        function a(t) {
          var n;
          return (
            e(this, a),
            ((n = i.call(this, t)).ctx = t),
            (n.w = t.w),
            (n.dragged = !1),
            (n.graphics = new m(n.ctx)),
            (n.eventList = [
              "mousedown",
              "mouseleave",
              "mousemove",
              "touchstart",
              "touchmove",
              "mouseup",
              "touchend",
            ]),
            (n.clientX = 0),
            (n.clientY = 0),
            (n.startX = 0),
            (n.endX = 0),
            (n.dragX = 0),
            (n.startY = 0),
            (n.endY = 0),
            (n.dragY = 0),
            (n.moveDirection = "none"),
            n
          );
        }
        return (
          n(a, [
            {
              key: "init",
              value: function (t) {
                var e = this,
                  i = t.xyRatios,
                  n = this.w,
                  a = this;
                (this.xyRatios = i),
                  (this.zoomRect = this.graphics.drawRect(0, 0, 0, 0)),
                  (this.selectionRect = this.graphics.drawRect(0, 0, 0, 0)),
                  (this.gridRect =
                    n.globals.dom.baseEl.querySelector(".apexcharts-grid")),
                  this.zoomRect.node.classList.add("apexcharts-zoom-rect"),
                  this.selectionRect.node.classList.add(
                    "apexcharts-selection-rect"
                  ),
                  n.globals.dom.elGraphical.add(this.zoomRect),
                  n.globals.dom.elGraphical.add(this.selectionRect),
                  "x" === n.config.chart.selection.type
                    ? (this.slDraggableRect = this.selectionRect
                        .draggable({
                          minX: 0,
                          minY: 0,
                          maxX: n.globals.gridWidth,
                          maxY: n.globals.gridHeight,
                        })
                        .on(
                          "dragmove",
                          this.selectionDragging.bind(this, "dragging")
                        ))
                    : "y" === n.config.chart.selection.type
                    ? (this.slDraggableRect = this.selectionRect
                        .draggable({ minX: 0, maxX: n.globals.gridWidth })
                        .on(
                          "dragmove",
                          this.selectionDragging.bind(this, "dragging")
                        ))
                    : (this.slDraggableRect = this.selectionRect
                        .draggable()
                        .on(
                          "dragmove",
                          this.selectionDragging.bind(this, "dragging")
                        )),
                  this.preselectedSelection(),
                  (this.hoverArea = n.globals.dom.baseEl.querySelector(
                    "".concat(n.globals.chartClass, " .apexcharts-svg")
                  )),
                  this.hoverArea.classList.add("apexcharts-zoomable"),
                  this.eventList.forEach(function (t) {
                    e.hoverArea.addEventListener(
                      t,
                      a.svgMouseEvents.bind(a, i),
                      { capture: !1, passive: !0 }
                    );
                  });
              },
            },
            {
              key: "destroy",
              value: function () {
                this.slDraggableRect &&
                  (this.slDraggableRect.draggable(!1),
                  this.slDraggableRect.off(),
                  this.selectionRect.off()),
                  (this.selectionRect = null),
                  (this.zoomRect = null),
                  (this.gridRect = null);
              },
            },
            {
              key: "svgMouseEvents",
              value: function (t, e) {
                var i = this.w,
                  n = this,
                  a = this.ctx.toolbar,
                  s = i.globals.zoomEnabled
                    ? i.config.chart.zoom.type
                    : i.config.chart.selection.type,
                  r = i.config.chart.toolbar.autoSelected;
                e.shiftKey
                  ? ((this.shiftWasPressed = !0),
                    a.enableZoomPanFromToolbar("pan" === r ? "zoom" : "pan"))
                  : this.shiftWasPressed &&
                    (a.enableZoomPanFromToolbar(r),
                    (this.shiftWasPressed = !1));
                var o = e.target.classList;
                if (
                  !(
                    o.contains("apexcharts-selection-rect") ||
                    o.contains("apexcharts-legend-marker") ||
                    o.contains("apexcharts-legend-text") ||
                    e.target.parentNode.classList.contains("apexcharts-toolbar")
                  )
                ) {
                  if (
                    ((n.clientX =
                      "touchmove" === e.type || "touchstart" === e.type
                        ? e.touches[0].clientX
                        : "touchend" === e.type
                        ? e.changedTouches[0].clientX
                        : e.clientX),
                    (n.clientY =
                      "touchmove" === e.type || "touchstart" === e.type
                        ? e.touches[0].clientY
                        : "touchend" === e.type
                        ? e.changedTouches[0].clientY
                        : e.clientY),
                    "mousedown" === e.type && 1 === e.which)
                  ) {
                    var l = n.gridRect.getBoundingClientRect();
                    (n.startX = n.clientX - l.left),
                      (n.startY = n.clientY - l.top),
                      (n.dragged = !1),
                      (n.w.globals.mousedown = !0);
                  }
                  if (
                    ((("mousemove" === e.type && 1 === e.which) ||
                      "touchmove" === e.type) &&
                      ((n.dragged = !0),
                      i.globals.panEnabled
                        ? ((i.globals.selection = null),
                          n.w.globals.mousedown &&
                            n.panDragging({
                              context: n,
                              zoomtype: s,
                              xyRatios: t,
                            }))
                        : ((n.w.globals.mousedown && i.globals.zoomEnabled) ||
                            (n.w.globals.mousedown &&
                              i.globals.selectionEnabled)) &&
                          (n.selection = n.selectionDrawing({
                            context: n,
                            zoomtype: s,
                          }))),
                    "mouseup" === e.type ||
                      "touchend" === e.type ||
                      "mouseleave" === e.type)
                  ) {
                    var c = n.gridRect.getBoundingClientRect();
                    n.w.globals.mousedown &&
                      ((n.endX = n.clientX - c.left),
                      (n.endY = n.clientY - c.top),
                      (n.dragX = Math.abs(n.endX - n.startX)),
                      (n.dragY = Math.abs(n.endY - n.startY)),
                      (i.globals.zoomEnabled || i.globals.selectionEnabled) &&
                        n.selectionDrawn({ context: n, zoomtype: s }),
                      i.globals.panEnabled &&
                        i.config.xaxis.convertedCatToNumeric &&
                        n.delayedPanScrolled()),
                      i.globals.zoomEnabled &&
                        n.hideSelectionRect(this.selectionRect),
                      (n.dragged = !1),
                      (n.w.globals.mousedown = !1);
                  }
                  this.makeSelectionRectDraggable();
                }
              },
            },
            {
              key: "makeSelectionRectDraggable",
              value: function () {
                var t = this.w;
                if (this.selectionRect) {
                  var e = this.selectionRect.node.getBoundingClientRect();
                  e.width > 0 &&
                    e.height > 0 &&
                    this.slDraggableRect
                      .selectize({
                        points: "l, r",
                        pointSize: 8,
                        pointType: "rect",
                      })
                      .resize({
                        constraint: {
                          minX: 0,
                          minY: 0,
                          maxX: t.globals.gridWidth,
                          maxY: t.globals.gridHeight,
                        },
                      })
                      .on(
                        "resizing",
                        this.selectionDragging.bind(this, "resizing")
                      );
                }
              },
            },
            {
              key: "preselectedSelection",
              value: function () {
                var t = this.w,
                  e = this.xyRatios;
                if (!t.globals.zoomEnabled)
                  if (
                    void 0 !== t.globals.selection &&
                    null !== t.globals.selection
                  )
                    this.drawSelectionRect(t.globals.selection);
                  else if (
                    void 0 !== t.config.chart.selection.xaxis.min &&
                    void 0 !== t.config.chart.selection.xaxis.max
                  ) {
                    var i =
                        (t.config.chart.selection.xaxis.min - t.globals.minX) /
                        e.xRatio,
                      n = {
                        x: i,
                        y: 0,
                        width:
                          t.globals.gridWidth -
                          (t.globals.maxX -
                            t.config.chart.selection.xaxis.max) /
                            e.xRatio -
                          i,
                        height: t.globals.gridHeight,
                        translateX: 0,
                        translateY: 0,
                        selectionEnabled: !0,
                      };
                    this.drawSelectionRect(n),
                      this.makeSelectionRectDraggable(),
                      "function" == typeof t.config.chart.events.selection &&
                        t.config.chart.events.selection(this.ctx, {
                          xaxis: {
                            min: t.config.chart.selection.xaxis.min,
                            max: t.config.chart.selection.xaxis.max,
                          },
                          yaxis: {},
                        });
                  }
              },
            },
            {
              key: "drawSelectionRect",
              value: function (t) {
                var e = t.x,
                  i = t.y,
                  n = t.width,
                  a = t.height,
                  s = t.translateX,
                  r = void 0 === s ? 0 : s,
                  o = t.translateY,
                  l = void 0 === o ? 0 : o,
                  c = this.w,
                  h = this.zoomRect,
                  d = this.selectionRect;
                if (this.dragged || null !== c.globals.selection) {
                  var u = { transform: "translate(" + r + ", " + l + ")" };
                  c.globals.zoomEnabled &&
                    this.dragged &&
                    (n < 0 && (n = 1),
                    h.attr({
                      x: e,
                      y: i,
                      width: n,
                      height: a,
                      fill: c.config.chart.zoom.zoomedArea.fill.color,
                      "fill-opacity":
                        c.config.chart.zoom.zoomedArea.fill.opacity,
                      stroke: c.config.chart.zoom.zoomedArea.stroke.color,
                      "stroke-width":
                        c.config.chart.zoom.zoomedArea.stroke.width,
                      "stroke-opacity":
                        c.config.chart.zoom.zoomedArea.stroke.opacity,
                    }),
                    m.setAttrs(h.node, u)),
                    c.globals.selectionEnabled &&
                      (d.attr({
                        x: e,
                        y: i,
                        width: n > 0 ? n : 0,
                        height: a > 0 ? a : 0,
                        fill: c.config.chart.selection.fill.color,
                        "fill-opacity": c.config.chart.selection.fill.opacity,
                        stroke: c.config.chart.selection.stroke.color,
                        "stroke-width": c.config.chart.selection.stroke.width,
                        "stroke-dasharray":
                          c.config.chart.selection.stroke.dashArray,
                        "stroke-opacity":
                          c.config.chart.selection.stroke.opacity,
                      }),
                      m.setAttrs(d.node, u));
                }
              },
            },
            {
              key: "hideSelectionRect",
              value: function (t) {
                t && t.attr({ x: 0, y: 0, width: 0, height: 0 });
              },
            },
            {
              key: "selectionDrawing",
              value: function (t) {
                var e,
                  i = t.context,
                  n = t.zoomtype,
                  a = this.w,
                  s = i,
                  r = this.gridRect.getBoundingClientRect(),
                  o = s.startX - 1,
                  l = s.startY,
                  c = !1,
                  h = !1,
                  d = s.clientX - r.left - o,
                  u = s.clientY - r.top - l;
                return (
                  Math.abs(d + o) > a.globals.gridWidth
                    ? (d = a.globals.gridWidth - o)
                    : s.clientX - r.left < 0 && (d = o),
                  o > s.clientX - r.left && ((c = !0), (d = Math.abs(d))),
                  l > s.clientY - r.top && ((h = !0), (u = Math.abs(u))),
                  (e =
                    "x" === n
                      ? {
                          x: c ? o - d : o,
                          y: 0,
                          width: d,
                          height: a.globals.gridHeight,
                        }
                      : "y" === n
                      ? {
                          x: 0,
                          y: h ? l - u : l,
                          width: a.globals.gridWidth,
                          height: u,
                        }
                      : {
                          x: c ? o - d : o,
                          y: h ? l - u : l,
                          width: d,
                          height: u,
                        }),
                  s.drawSelectionRect(e),
                  s.selectionDragging("resizing"),
                  e
                );
              },
            },
            {
              key: "selectionDragging",
              value: function (t, e) {
                var i = this,
                  n = this.w,
                  a = this.xyRatios,
                  s = this.selectionRect,
                  r = 0;
                "resizing" === t && (r = 30);
                var o = function (t) {
                    return parseFloat(s.node.getAttribute(t));
                  },
                  l = {
                    x: o("x"),
                    y: o("y"),
                    width: o("width"),
                    height: o("height"),
                  };
                (n.globals.selection = l),
                  "function" == typeof n.config.chart.events.selection &&
                    n.globals.selectionEnabled &&
                    (clearTimeout(this.w.globals.selectionResizeTimer),
                    (this.w.globals.selectionResizeTimer = window.setTimeout(
                      function () {
                        var t = i.gridRect.getBoundingClientRect(),
                          e = s.node.getBoundingClientRect(),
                          r = {
                            xaxis: {
                              min:
                                n.globals.xAxisScale.niceMin +
                                (e.left - t.left) * a.xRatio,
                              max:
                                n.globals.xAxisScale.niceMin +
                                (e.right - t.left) * a.xRatio,
                            },
                            yaxis: {
                              min:
                                n.globals.yAxisScale[0].niceMin +
                                (t.bottom - e.bottom) * a.yRatio[0],
                              max:
                                n.globals.yAxisScale[0].niceMax -
                                (e.top - t.top) * a.yRatio[0],
                            },
                          };
                        n.config.chart.events.selection(i.ctx, r),
                          n.config.chart.brush.enabled &&
                            void 0 !== n.config.chart.events.brushScrolled &&
                            n.config.chart.events.brushScrolled(i.ctx, r);
                      },
                      r
                    )));
              },
            },
            {
              key: "selectionDrawn",
              value: function (t) {
                var e = t.context,
                  i = t.zoomtype,
                  n = this.w,
                  a = e,
                  s = this.xyRatios,
                  r = this.ctx.toolbar;
                if (a.startX > a.endX) {
                  var o = a.startX;
                  (a.startX = a.endX), (a.endX = o);
                }
                if (a.startY > a.endY) {
                  var l = a.startY;
                  (a.startY = a.endY), (a.endY = l);
                }
                var c = void 0,
                  h = void 0;
                n.globals.isTimelineBar
                  ? ((c =
                      n.globals.yAxisScale[0].niceMin +
                      a.startX * s.invertedYRatio),
                    (h =
                      n.globals.yAxisScale[0].niceMin +
                      a.endX * s.invertedYRatio))
                  : ((c = n.globals.xAxisScale.niceMin + a.startX * s.xRatio),
                    (h = n.globals.xAxisScale.niceMin + a.endX * s.xRatio));
                var d = [],
                  u = [];
                if (
                  (n.config.yaxis.forEach(function (t, e) {
                    d.push(
                      n.globals.yAxisScale[e].niceMax - s.yRatio[e] * a.startY
                    ),
                      u.push(
                        n.globals.yAxisScale[e].niceMax - s.yRatio[e] * a.endY
                      );
                  }),
                  a.dragged && (a.dragX > 10 || a.dragY > 10) && c !== h)
                )
                  if (n.globals.zoomEnabled) {
                    var f = p.clone(n.globals.initialConfig.yaxis),
                      g = p.clone(n.globals.initialConfig.xaxis);
                    if (
                      ((n.globals.zoomed = !0),
                      n.config.xaxis.convertedCatToNumeric &&
                        ((c = Math.floor(c)),
                        (h = Math.floor(h)),
                        c < 1 && ((c = 1), (h = n.globals.dataPoints)),
                        h - c < 2 && (h = c + 1)),
                      ("xy" !== i && "x" !== i) || (g = { min: c, max: h }),
                      ("xy" !== i && "y" !== i) ||
                        f.forEach(function (t, e) {
                          (f[e].min = u[e]), (f[e].max = d[e]);
                        }),
                      n.config.chart.zoom.autoScaleYaxis)
                    ) {
                      var x = new G(a.ctx);
                      f = x.autoScaleY(a.ctx, f, { xaxis: g });
                    }
                    if (r) {
                      var m = r.getBeforeZoomRange(g, f);
                      m &&
                        ((g = m.xaxis ? m.xaxis : g),
                        (f = m.yaxis ? m.yaxis : f));
                    }
                    var v = { xaxis: g };
                    n.config.chart.group || (v.yaxis = f),
                      a.ctx.updateHelpers._updateOptions(
                        v,
                        !1,
                        a.w.config.chart.animations.dynamicAnimation.enabled
                      ),
                      "function" == typeof n.config.chart.events.zoomed &&
                        r.zoomCallback(g, f);
                  } else if (n.globals.selectionEnabled) {
                    var b,
                      y = null;
                    (b = { min: c, max: h }),
                      ("xy" !== i && "y" !== i) ||
                        (y = p.clone(n.config.yaxis)).forEach(function (t, e) {
                          (y[e].min = u[e]), (y[e].max = d[e]);
                        }),
                      (n.globals.selection = a.selection),
                      "function" == typeof n.config.chart.events.selection &&
                        n.config.chart.events.selection(a.ctx, {
                          xaxis: b,
                          yaxis: y,
                        });
                  }
              },
            },
            {
              key: "panDragging",
              value: function (t) {
                var e = t.context,
                  i = this.w,
                  n = e;
                if (void 0 !== i.globals.lastClientPosition.x) {
                  var a = i.globals.lastClientPosition.x - n.clientX,
                    s = i.globals.lastClientPosition.y - n.clientY;
                  Math.abs(a) > Math.abs(s) && a > 0
                    ? (this.moveDirection = "left")
                    : Math.abs(a) > Math.abs(s) && a < 0
                    ? (this.moveDirection = "right")
                    : Math.abs(s) > Math.abs(a) && s > 0
                    ? (this.moveDirection = "up")
                    : Math.abs(s) > Math.abs(a) &&
                      s < 0 &&
                      (this.moveDirection = "down");
                }
                i.globals.lastClientPosition = { x: n.clientX, y: n.clientY };
                var r = i.globals.isTimelineBar
                    ? i.globals.minY
                    : i.globals.minX,
                  o = i.globals.isTimelineBar ? i.globals.maxY : i.globals.maxX;
                i.config.xaxis.convertedCatToNumeric || n.panScrolled(r, o);
              },
            },
            {
              key: "delayedPanScrolled",
              value: function () {
                var t = this.w,
                  e = t.globals.minX,
                  i = t.globals.maxX,
                  n = (t.globals.maxX - t.globals.minX) / 2;
                "left" === this.moveDirection
                  ? ((e = t.globals.minX + n), (i = t.globals.maxX + n))
                  : "right" === this.moveDirection &&
                    ((e = t.globals.minX - n), (i = t.globals.maxX - n)),
                  (e = Math.floor(e)),
                  (i = Math.floor(i)),
                  this.updateScrolledChart({ xaxis: { min: e, max: i } }, e, i);
              },
            },
            {
              key: "panScrolled",
              value: function (t, e) {
                var i = this.w,
                  n = this.xyRatios,
                  a = p.clone(i.globals.initialConfig.yaxis),
                  s = n.xRatio,
                  r = i.globals.minX,
                  o = i.globals.maxX;
                i.globals.isTimelineBar &&
                  ((s = n.invertedYRatio),
                  (r = i.globals.minY),
                  (o = i.globals.maxY)),
                  "left" === this.moveDirection
                    ? ((t = r + (i.globals.gridWidth / 15) * s),
                      (e = o + (i.globals.gridWidth / 15) * s))
                    : "right" === this.moveDirection &&
                      ((t = r - (i.globals.gridWidth / 15) * s),
                      (e = o - (i.globals.gridWidth / 15) * s)),
                  i.globals.isTimelineBar ||
                    ((t < i.globals.initialMinX || e > i.globals.initialMaxX) &&
                      ((t = r), (e = o)));
                var l = { min: t, max: e };
                i.config.chart.zoom.autoScaleYaxis &&
                  (a = new G(this.ctx).autoScaleY(this.ctx, a, { xaxis: l }));
                var c = { xaxis: { min: t, max: e } };
                i.config.chart.group || (c.yaxis = a),
                  this.updateScrolledChart(c, t, e);
              },
            },
            {
              key: "updateScrolledChart",
              value: function (t, e, i) {
                var n = this.w;
                this.ctx.updateHelpers._updateOptions(t, !1, !1),
                  "function" == typeof n.config.chart.events.scrolled &&
                    n.config.chart.events.scrolled(this.ctx, {
                      xaxis: { min: e, max: i },
                    });
              },
            },
          ]),
          a
        );
      })(ct),
      dt = (function () {
        function t(i) {
          e(this, t), (this.w = i.w), (this.ttCtx = i), (this.ctx = i.ctx);
        }
        return (
          n(t, [
            {
              key: "getNearestValues",
              value: function (t) {
                var e = t.hoverArea,
                  i = t.elGrid,
                  n = t.clientX,
                  a = t.clientY,
                  s = this.w,
                  r = s.globals.gridWidth,
                  o = s.globals.gridHeight,
                  l = r / (s.globals.dataPoints - 1),
                  c = o / s.globals.dataPoints,
                  h = i.getBoundingClientRect(),
                  d = this.hasBars();
                (!s.globals.comboCharts && !d) ||
                  s.config.xaxis.convertedCatToNumeric ||
                  (l = r / s.globals.dataPoints);
                var u = n - h.left - s.globals.barPadForNumericAxis,
                  f = a - h.top;
                u < 0 ||
                f < 0 ||
                u > s.globals.gridWidth ||
                f > s.globals.gridHeight
                  ? (e.classList.remove("hovering-zoom"),
                    e.classList.remove("hovering-pan"))
                  : s.globals.zoomEnabled
                  ? (e.classList.remove("hovering-pan"),
                    e.classList.add("hovering-zoom"))
                  : s.globals.panEnabled &&
                    (e.classList.remove("hovering-zoom"),
                    e.classList.add("hovering-pan"));
                var g = Math.round(u / l),
                  x = Math.floor(f / c);
                d &&
                  !s.config.xaxis.convertedCatToNumeric &&
                  ((g = Math.ceil(u / l)), (g -= 1));
                for (
                  var m, v = null, b = null, y = [], w = 0;
                  w < s.globals.seriesXvalues.length;
                  w++
                )
                  y.push(
                    [s.globals.seriesXvalues[w][0] - 1e-6].concat(
                      s.globals.seriesXvalues[w]
                    )
                  );
                return (
                  (y = y.map(function (t) {
                    return t.filter(function (t) {
                      return t;
                    });
                  })),
                  (m = s.globals.seriesYvalues.map(function (t) {
                    return t.filter(function (t) {
                      return p.isNumber(t);
                    });
                  })),
                  s.globals.isXNumeric &&
                    ((v = (b = this.closestInMultiArray(u, f, y, m)).index),
                    (g = b.j),
                    null !== v &&
                      ((y = s.globals.seriesXvalues[v]),
                      (g = (b = this.closestInArray(u, y)).index))),
                  (s.globals.capturedSeriesIndex = null === v ? -1 : v),
                  (!g || g < 1) && (g = 0),
                  s.globals.isBarHorizontal
                    ? (s.globals.capturedDataPointIndex = x)
                    : (s.globals.capturedDataPointIndex = g),
                  {
                    capturedSeries: v,
                    j: s.globals.isBarHorizontal ? x : g,
                    hoverX: u,
                    hoverY: f,
                  }
                );
              },
            },
            {
              key: "closestInMultiArray",
              value: function (t, e, i, n) {
                var a = this.w,
                  s = 0,
                  r = null,
                  o = -1;
                a.globals.series.length > 1
                  ? (s = this.getFirstActiveXArray(i))
                  : (r = 0);
                var l = n[s][0],
                  c = i[s][0],
                  h = Math.abs(t - c),
                  d = Math.abs(e - l),
                  u = d + h;
                return (
                  n.map(function (a, s) {
                    a.map(function (a, l) {
                      var c = Math.abs(e - n[s][l]),
                        f = Math.abs(t - i[s][l]),
                        p = f + c;
                      p < u && ((u = p), (h = f), (d = c), (r = s), (o = l));
                    });
                  }),
                  { index: r, j: o }
                );
              },
            },
            {
              key: "getFirstActiveXArray",
              value: function (t) {
                for (
                  var e = 0,
                    i = t.map(function (t, e) {
                      return t.length > 0 ? e : -1;
                    }),
                    n = 0;
                  n < i.length;
                  n++
                )
                  if (-1 !== i[n]) {
                    e = i[n];
                    break;
                  }
                return e;
              },
            },
            {
              key: "closestInArray",
              value: function (t, e) {
                for (
                  var i = e[0], n = null, a = Math.abs(t - i), s = 0;
                  s < e.length;
                  s++
                ) {
                  var r = Math.abs(t - e[s]);
                  r < a && ((a = r), (n = s));
                }
                return { index: n };
              },
            },
            {
              key: "isXoverlap",
              value: function (t) {
                var e = [],
                  i = this.w.globals.seriesX.filter(function (t) {
                    return void 0 !== t[0];
                  });
                if (i.length > 0)
                  for (var n = 0; n < i.length - 1; n++)
                    void 0 !== i[n][t] &&
                      void 0 !== i[n + 1][t] &&
                      i[n][t] !== i[n + 1][t] &&
                      e.push("unEqual");
                return 0 === e.length;
              },
            },
            {
              key: "isInitialSeriesSameLen",
              value: function () {
                for (
                  var t = !0, e = this.w.globals.initialSeries, i = 0;
                  i < e.length - 1;
                  i++
                )
                  if (e[i].data.length !== e[i + 1].data.length) {
                    t = !1;
                    break;
                  }
                return t;
              },
            },
            {
              key: "getBarsHeight",
              value: function (t) {
                return u(t).reduce(function (t, e) {
                  return t + e.getBBox().height;
                }, 0);
              },
            },
            {
              key: "getElMarkers",
              value: function () {
                return this.w.globals.dom.baseEl.querySelectorAll(
                  " .apexcharts-series-markers"
                );
              },
            },
            {
              key: "getAllMarkers",
              value: function () {
                var t = this.w.globals.dom.baseEl.querySelectorAll(
                  ".apexcharts-series-markers-wrap"
                );
                (t = u(t)).sort(function (t, e) {
                  return Number(e.getAttribute("data:realIndex")) <
                    Number(t.getAttribute("data:realIndex"))
                    ? 0
                    : -1;
                });
                var e = [];
                return (
                  t.forEach(function (t) {
                    e.push(t.querySelector(".apexcharts-marker"));
                  }),
                  e
                );
              },
            },
            {
              key: "hasMarkers",
              value: function () {
                return this.getElMarkers().length > 0;
              },
            },
            {
              key: "getElBars",
              value: function () {
                return this.w.globals.dom.baseEl.querySelectorAll(
                  ".apexcharts-bar-series,  .apexcharts-candlestick-series, .apexcharts-boxPlot-series, .apexcharts-rangebar-series"
                );
              },
            },
            {
              key: "hasBars",
              value: function () {
                return this.getElBars().length > 0;
              },
            },
            {
              key: "getHoverMarkerSize",
              value: function (t) {
                var e = this.w,
                  i = e.config.markers.hover.size;
                return (
                  void 0 === i &&
                    (i =
                      e.globals.markers.size[t] +
                      e.config.markers.hover.sizeOffset),
                  i
                );
              },
            },
            {
              key: "toggleAllTooltipSeriesGroups",
              value: function (t) {
                var e = this.w,
                  i = this.ttCtx;
                0 === i.allTooltipSeriesGroups.length &&
                  (i.allTooltipSeriesGroups =
                    e.globals.dom.baseEl.querySelectorAll(
                      ".apexcharts-tooltip-series-group"
                    ));
                for (var n = i.allTooltipSeriesGroups, a = 0; a < n.length; a++)
                  "enable" === t
                    ? (n[a].classList.add("apexcharts-active"),
                      (n[a].style.display = e.config.tooltip.items.display))
                    : (n[a].classList.remove("apexcharts-active"),
                      (n[a].style.display = "none"));
              },
            },
          ]),
          t
        );
      })(),
      ut = (function () {
        function t(i) {
          e(this, t),
            (this.w = i.w),
            (this.ctx = i.ctx),
            (this.ttCtx = i),
            (this.tooltipUtil = new dt(i));
        }
        return (
          n(t, [
            {
              key: "drawSeriesTexts",
              value: function (t) {
                var e = t.shared,
                  i = void 0 === e || e,
                  n = t.ttItems,
                  a = t.i,
                  s = void 0 === a ? 0 : a,
                  r = t.j,
                  o = void 0 === r ? null : r,
                  l = t.y1,
                  c = t.y2,
                  h = t.e,
                  d = this.w;
                void 0 !== d.config.tooltip.custom
                  ? this.handleCustomTooltip({ i: s, j: o, y1: l, y2: c, w: d })
                  : this.toggleActiveInactiveSeries(i);
                var u = this.getValuesToPrint({ i: s, j: o });
                this.printLabels({
                  i: s,
                  j: o,
                  values: u,
                  ttItems: n,
                  shared: i,
                  e: h,
                });
                var f = this.ttCtx.getElTooltip();
                (this.ttCtx.tooltipRect.ttWidth =
                  f.getBoundingClientRect().width),
                  (this.ttCtx.tooltipRect.ttHeight =
                    f.getBoundingClientRect().height);
              },
            },
            {
              key: "printLabels",
              value: function (t) {
                var e,
                  i = this,
                  n = t.i,
                  a = t.j,
                  s = t.values,
                  o = t.ttItems,
                  l = t.shared,
                  c = t.e,
                  h = this.w,
                  d = [],
                  u = function (t) {
                    return (
                      h.globals.seriesGoals[t] &&
                      h.globals.seriesGoals[t][a] &&
                      Array.isArray(h.globals.seriesGoals[t][a])
                    );
                  },
                  f = s.xVal,
                  p = s.zVal,
                  g = s.xAxisTTVal,
                  x = "",
                  m = h.globals.colors[n];
                null !== a &&
                  h.config.plotOptions.bar.distributed &&
                  (m = h.globals.colors[a]);
                for (
                  var v = function (t, s) {
                      var v = i.getFormatters(n);
                      (x = i.getSeriesName({
                        fn: v.yLbTitleFormatter,
                        index: n,
                        seriesIndex: n,
                        j: a,
                      })),
                        "treemap" === h.config.chart.type &&
                          (x = v.yLbTitleFormatter(
                            String(h.config.series[n].data[a].x),
                            {
                              series: h.globals.series,
                              seriesIndex: n,
                              dataPointIndex: a,
                              w: h,
                            }
                          ));
                      var b = h.config.tooltip.inverseOrder ? s : t;
                      if (h.globals.axisCharts) {
                        var y = function (t) {
                          return v.yLbFormatter(h.globals.series[t][a], {
                            series: h.globals.series,
                            seriesIndex: t,
                            dataPointIndex: a,
                            w: h,
                          });
                        };
                        l
                          ? ((v = i.getFormatters(b)),
                            (x = i.getSeriesName({
                              fn: v.yLbTitleFormatter,
                              index: b,
                              seriesIndex: n,
                              j: a,
                            })),
                            (m = h.globals.colors[b]),
                            (e = y(b)),
                            u(b) &&
                              (d = h.globals.seriesGoals[b][a].map(function (
                                t
                              ) {
                                return {
                                  attrs: t,
                                  val: v.yLbFormatter(t.value, {
                                    seriesIndex: b,
                                    dataPointIndex: a,
                                    w: h,
                                  }),
                                };
                              })))
                          : (c &&
                              c.target &&
                              c.target.getAttribute("fill") &&
                              (m = c.target.getAttribute("fill")),
                            (e = y(n)),
                            u(n) &&
                              Array.isArray(h.globals.seriesGoals[n][a]) &&
                              (d = h.globals.seriesGoals[n][a].map(function (
                                t
                              ) {
                                return {
                                  attrs: t,
                                  val: v.yLbFormatter(t.value, {
                                    seriesIndex: n,
                                    dataPointIndex: a,
                                    w: h,
                                  }),
                                };
                              })));
                      }
                      null === a &&
                        (e = v.yLbFormatter(
                          h.globals.series[n],
                          r(r({}, h), {}, { seriesIndex: n, dataPointIndex: n })
                        )),
                        i.DOMHandling({
                          i: n,
                          t: b,
                          j: a,
                          ttItems: o,
                          values: {
                            val: e,
                            goalVals: d,
                            xVal: f,
                            xAxisTTVal: g,
                            zVal: p,
                          },
                          seriesName: x,
                          shared: l,
                          pColor: m,
                        });
                    },
                    b = 0,
                    y = h.globals.series.length - 1;
                  b < h.globals.series.length;
                  b++, y--
                )
                  v(b, y);
              },
            },
            {
              key: "getFormatters",
              value: function (t) {
                var e,
                  i = this.w,
                  n = i.globals.yLabelFormatters[t];
                return (
                  void 0 !== i.globals.ttVal
                    ? Array.isArray(i.globals.ttVal)
                      ? ((n =
                          i.globals.ttVal[t] && i.globals.ttVal[t].formatter),
                        (e =
                          i.globals.ttVal[t] &&
                          i.globals.ttVal[t].title &&
                          i.globals.ttVal[t].title.formatter))
                      : ((n = i.globals.ttVal.formatter),
                        "function" == typeof i.globals.ttVal.title.formatter &&
                          (e = i.globals.ttVal.title.formatter))
                    : (e = i.config.tooltip.y.title.formatter),
                  "function" != typeof n &&
                    (n = i.globals.yLabelFormatters[0]
                      ? i.globals.yLabelFormatters[0]
                      : function (t) {
                          return t;
                        }),
                  "function" != typeof e &&
                    (e = function (t) {
                      return t;
                    }),
                  { yLbFormatter: n, yLbTitleFormatter: e }
                );
              },
            },
            {
              key: "getSeriesName",
              value: function (t) {
                var e = t.fn,
                  i = t.index,
                  n = t.seriesIndex,
                  a = t.j,
                  s = this.w;
                return e(String(s.globals.seriesNames[i]), {
                  series: s.globals.series,
                  seriesIndex: n,
                  dataPointIndex: a,
                  w: s,
                });
              },
            },
            {
              key: "DOMHandling",
              value: function (t) {
                t.i;
                var e = t.t,
                  i = t.j,
                  n = t.ttItems,
                  a = t.values,
                  s = t.seriesName,
                  r = t.shared,
                  o = t.pColor,
                  l = this.w,
                  c = this.ttCtx,
                  h = a.val,
                  d = a.goalVals,
                  u = a.xVal,
                  f = a.xAxisTTVal,
                  p = a.zVal,
                  g = null;
                (g = n[e].children),
                  l.config.tooltip.fillSeriesColor &&
                    ((n[e].style.backgroundColor = o),
                    (g[0].style.display = "none")),
                  c.showTooltipTitle &&
                    (null === c.tooltipTitle &&
                      (c.tooltipTitle = l.globals.dom.baseEl.querySelector(
                        ".apexcharts-tooltip-title"
                      )),
                    (c.tooltipTitle.innerHTML = u)),
                  c.blxaxisTooltip &&
                    (c.xaxisTooltipText.innerHTML = "" !== f ? f : u);
                var x = n[e].querySelector(".apexcharts-tooltip-text-y-label");
                x && (x.innerHTML = s || "");
                var m = n[e].querySelector(".apexcharts-tooltip-text-y-value");
                m && (m.innerHTML = void 0 !== h ? h : ""),
                  g[0] &&
                    g[0].classList.contains("apexcharts-tooltip-marker") &&
                    (l.config.tooltip.marker.fillColors &&
                      Array.isArray(l.config.tooltip.marker.fillColors) &&
                      (o = l.config.tooltip.marker.fillColors[e]),
                    (g[0].style.backgroundColor = o)),
                  l.config.tooltip.marker.show || (g[0].style.display = "none");
                var v = n[e].querySelector(
                    ".apexcharts-tooltip-text-goals-label"
                  ),
                  b = n[e].querySelector(
                    ".apexcharts-tooltip-text-goals-value"
                  );
                if (d.length && l.globals.seriesGoals[e]) {
                  var y = function () {
                    var t = "<div >",
                      e = "<div>";
                    d.forEach(function (i, n) {
                      (t +=
                        ' <div style="display: flex"><span class="apexcharts-tooltip-marker" style="background-color: '
                          .concat(
                            i.attrs.strokeColor,
                            '; height: 3px; border-radius: 0; top: 5px;"></span> '
                          )
                          .concat(i.attrs.name, "</div>")),
                        (e += "<div>".concat(i.val, "</div>"));
                    }),
                      (v.innerHTML = t + "</div>"),
                      (b.innerHTML = e + "</div>");
                  };
                  r
                    ? l.globals.seriesGoals[e][i] &&
                      Array.isArray(l.globals.seriesGoals[e][i])
                      ? y()
                      : ((v.innerHTML = ""), (b.innerHTML = ""))
                    : y();
                } else (v.innerHTML = ""), (b.innerHTML = "");
                null !== p &&
                  ((n[e].querySelector(
                    ".apexcharts-tooltip-text-z-label"
                  ).innerHTML = l.config.tooltip.z.title),
                  (n[e].querySelector(
                    ".apexcharts-tooltip-text-z-value"
                  ).innerHTML = void 0 !== p ? p : "")),
                  r &&
                    g[0] &&
                    (null == h ||
                    l.globals.collapsedSeriesIndices.indexOf(e) > -1
                      ? (g[0].parentNode.style.display = "none")
                      : (g[0].parentNode.style.display =
                          l.config.tooltip.items.display));
              },
            },
            {
              key: "toggleActiveInactiveSeries",
              value: function (t) {
                var e = this.w;
                if (t) this.tooltipUtil.toggleAllTooltipSeriesGroups("enable");
                else {
                  this.tooltipUtil.toggleAllTooltipSeriesGroups("disable");
                  var i = e.globals.dom.baseEl.querySelector(
                    ".apexcharts-tooltip-series-group"
                  );
                  i &&
                    (i.classList.add("apexcharts-active"),
                    (i.style.display = e.config.tooltip.items.display));
                }
              },
            },
            {
              key: "getValuesToPrint",
              value: function (t) {
                var e = t.i,
                  i = t.j,
                  n = this.w,
                  a = this.ctx.series.filteredSeriesX(),
                  s = "",
                  r = "",
                  o = null,
                  l = null,
                  c = {
                    series: n.globals.series,
                    seriesIndex: e,
                    dataPointIndex: i,
                    w: n,
                  },
                  h = n.globals.ttZFormatter;
                null === i
                  ? (l = n.globals.series[e])
                  : n.globals.isXNumeric && "treemap" !== n.config.chart.type
                  ? ((s = a[e][i]),
                    0 === a[e].length &&
                      (s = a[this.tooltipUtil.getFirstActiveXArray(a)][i]))
                  : (s =
                      void 0 !== n.globals.labels[i]
                        ? n.globals.labels[i]
                        : "");
                var d = s;
                return (
                  (s =
                    n.globals.isXNumeric && "datetime" === n.config.xaxis.type
                      ? new Y(this.ctx).xLabelFormat(
                          n.globals.ttKeyFormatter,
                          d,
                          d,
                          {
                            i: void 0,
                            dateFormatter: new D(this.ctx).formatDate,
                            w: this.w,
                          }
                        )
                      : n.globals.isBarHorizontal
                      ? n.globals.yLabelFormatters[0](d, c)
                      : n.globals.xLabelFormatter(d, c)),
                  void 0 !== n.config.tooltip.x.formatter &&
                    (s = n.globals.ttKeyFormatter(d, c)),
                  n.globals.seriesZ.length > 0 &&
                    n.globals.seriesZ[e].length > 0 &&
                    (o = h(n.globals.seriesZ[e][i], n)),
                  (r =
                    "function" == typeof n.config.xaxis.tooltip.formatter
                      ? n.globals.xaxisTooltipFormatter(d, c)
                      : s),
                  {
                    val: Array.isArray(l) ? l.join(" ") : l,
                    xVal: Array.isArray(s) ? s.join(" ") : s,
                    xAxisTTVal: Array.isArray(r) ? r.join(" ") : r,
                    zVal: o,
                  }
                );
              },
            },
            {
              key: "handleCustomTooltip",
              value: function (t) {
                var e = t.i,
                  i = t.j,
                  n = t.y1,
                  a = t.y2,
                  s = t.w,
                  r = this.ttCtx.getElTooltip(),
                  o = s.config.tooltip.custom;
                Array.isArray(o) && o[e] && (o = o[e]),
                  (r.innerHTML = o({
                    ctx: this.ctx,
                    series: s.globals.series,
                    seriesIndex: e,
                    dataPointIndex: i,
                    y1: n,
                    y2: a,
                    w: s,
                  }));
              },
            },
          ]),
          t
        );
      })(),
      ft = (function () {
        function t(i) {
          e(this, t), (this.ttCtx = i), (this.ctx = i.ctx), (this.w = i.w);
        }
        return (
          n(t, [
            {
              key: "moveXCrosshairs",
              value: function (t) {
                var e =
                    arguments.length > 1 && void 0 !== arguments[1]
                      ? arguments[1]
                      : null,
                  i = this.ttCtx,
                  n = this.w,
                  a = i.getElXCrosshairs(),
                  s = t - i.xcrosshairsWidth / 2,
                  r = n.globals.labels.slice().length;
                if (
                  (null !== e && (s = (n.globals.gridWidth / r) * e),
                  null !== a &&
                    (a.setAttribute("x", s),
                    a.setAttribute("x1", s),
                    a.setAttribute("x2", s),
                    a.setAttribute("y2", n.globals.gridHeight),
                    a.classList.add("apexcharts-active")),
                  s < 0 && (s = 0),
                  s > n.globals.gridWidth && (s = n.globals.gridWidth),
                  i.blxaxisTooltip)
                ) {
                  var o = s;
                  ("tickWidth" !== n.config.xaxis.crosshairs.width &&
                    "barWidth" !== n.config.xaxis.crosshairs.width) ||
                    (o = s + i.xcrosshairsWidth / 2),
                    this.moveXAxisTooltip(o);
                }
              },
            },
            {
              key: "moveYCrosshairs",
              value: function (t) {
                var e = this.ttCtx;
                null !== e.ycrosshairs &&
                  m.setAttrs(e.ycrosshairs, { y1: t, y2: t }),
                  null !== e.ycrosshairsHidden &&
                    m.setAttrs(e.ycrosshairsHidden, { y1: t, y2: t });
              },
            },
            {
              key: "moveXAxisTooltip",
              value: function (t) {
                var e = this.w,
                  i = this.ttCtx;
                if (null !== i.xaxisTooltip) {
                  i.xaxisTooltip.classList.add("apexcharts-active");
                  var n,
                    a =
                      i.xaxisOffY +
                      e.config.xaxis.tooltip.offsetY +
                      e.globals.translateY +
                      1 +
                      e.config.xaxis.offsetY;
                  if (
                    ((t -= i.xaxisTooltip.getBoundingClientRect().width / 2),
                    !isNaN(t))
                  )
                    (t += e.globals.translateX),
                      (n = new m(this.ctx).getTextRects(
                        i.xaxisTooltipText.innerHTML
                      )),
                      (i.xaxisTooltipText.style.minWidth = n.width + "px"),
                      (i.xaxisTooltip.style.left = t + "px"),
                      (i.xaxisTooltip.style.top = a + "px");
                }
              },
            },
            {
              key: "moveYAxisTooltip",
              value: function (t) {
                var e = this.w,
                  i = this.ttCtx;
                null === i.yaxisTTEls &&
                  (i.yaxisTTEls = e.globals.dom.baseEl.querySelectorAll(
                    ".apexcharts-yaxistooltip"
                  ));
                var n = parseInt(i.ycrosshairsHidden.getAttribute("y1"), 10),
                  a = e.globals.translateY + n,
                  s = i.yaxisTTEls[t].getBoundingClientRect().height,
                  r = e.globals.translateYAxisX[t] - 2;
                e.config.yaxis[t].opposite && (r -= 26),
                  (a -= s / 2),
                  -1 === e.globals.ignoreYAxisIndexes.indexOf(t)
                    ? (i.yaxisTTEls[t].classList.add("apexcharts-active"),
                      (i.yaxisTTEls[t].style.top = a + "px"),
                      (i.yaxisTTEls[t].style.left =
                        r + e.config.yaxis[t].tooltip.offsetX + "px"))
                    : i.yaxisTTEls[t].classList.remove("apexcharts-active");
              },
            },
            {
              key: "moveTooltip",
              value: function (t, e) {
                var i =
                    arguments.length > 2 && void 0 !== arguments[2]
                      ? arguments[2]
                      : null,
                  n = this.w,
                  a = this.ttCtx,
                  s = a.getElTooltip(),
                  r = a.tooltipRect,
                  o = null !== i ? parseFloat(i) : 1,
                  l = parseFloat(t) + o + 5,
                  c = parseFloat(e) + o / 2;
                if (
                  (l > n.globals.gridWidth / 2 && (l = l - r.ttWidth - o - 15),
                  l > n.globals.gridWidth - r.ttWidth - 10 &&
                    (l = n.globals.gridWidth - r.ttWidth),
                  l < -20 && (l = -20),
                  n.config.tooltip.followCursor)
                ) {
                  var h = a.getElGrid(),
                    d = h.getBoundingClientRect();
                  c =
                    a.e.clientY + n.globals.translateY - d.top - r.ttHeight / 2;
                } else
                  n.globals.isBarHorizontal
                    ? (c -= r.ttHeight)
                    : (r.ttHeight / 2 + c > n.globals.gridHeight &&
                        (c =
                          n.globals.gridHeight -
                          r.ttHeight +
                          n.globals.translateY),
                      c < 0 && (c = 0));
                isNaN(l) ||
                  ((l += n.globals.translateX),
                  (s.style.left = l + "px"),
                  (s.style.top = c + "px"));
              },
            },
            {
              key: "moveMarkers",
              value: function (t, e) {
                var i = this.w,
                  n = this.ttCtx;
                if (i.globals.markers.size[t] > 0)
                  for (
                    var a = i.globals.dom.baseEl.querySelectorAll(
                        " .apexcharts-series[data\\:realIndex='".concat(
                          t,
                          "'] .apexcharts-marker"
                        )
                      ),
                      s = 0;
                    s < a.length;
                    s++
                  )
                    parseInt(a[s].getAttribute("rel"), 10) === e &&
                      (n.marker.resetPointsSize(),
                      n.marker.enlargeCurrentPoint(e, a[s]));
                else
                  n.marker.resetPointsSize(),
                    this.moveDynamicPointOnHover(e, t);
              },
            },
            {
              key: "moveDynamicPointOnHover",
              value: function (t, e) {
                var i,
                  n,
                  a = this.w,
                  s = this.ttCtx,
                  r = a.globals.pointsArray,
                  o = s.tooltipUtil.getHoverMarkerSize(e),
                  l = a.config.series[e].type;
                if (
                  !l ||
                  ("column" !== l && "candlestick" !== l && "boxPlot" !== l)
                ) {
                  (i = r[e][t][0]), (n = r[e][t][1] ? r[e][t][1] : 0);
                  var c = a.globals.dom.baseEl.querySelector(
                    ".apexcharts-series[data\\:realIndex='".concat(
                      e,
                      "'] .apexcharts-series-markers circle"
                    )
                  );
                  c &&
                    n < a.globals.gridHeight &&
                    n > 0 &&
                    (c.setAttribute("r", o),
                    c.setAttribute("cx", i),
                    c.setAttribute("cy", n)),
                    this.moveXCrosshairs(i),
                    s.fixedTooltip || this.moveTooltip(i, n, o);
                }
              },
            },
            {
              key: "moveDynamicPointsOnHover",
              value: function (t) {
                var e,
                  i = this.ttCtx,
                  n = i.w,
                  a = 0,
                  s = 0,
                  r = n.globals.pointsArray;
                e = new M(this.ctx).getActiveConfigSeriesIndex(!0);
                var o = i.tooltipUtil.getHoverMarkerSize(e);
                r[e] && ((a = r[e][t][0]), (s = r[e][t][1]));
                var l = i.tooltipUtil.getAllMarkers();
                if (null !== l)
                  for (var c = 0; c < n.globals.series.length; c++) {
                    var h = r[c];
                    if (
                      (n.globals.comboCharts &&
                        void 0 === h &&
                        l.splice(c, 0, null),
                      h && h.length)
                    ) {
                      var d = r[c][t][1];
                      l[c].setAttribute("cx", a),
                        null !== d &&
                        !isNaN(d) &&
                        d < n.globals.gridHeight &&
                        d > 0
                          ? (l[c] && l[c].setAttribute("r", o),
                            l[c] && l[c].setAttribute("cy", d))
                          : l[c] && l[c].setAttribute("r", 0);
                    }
                  }
                if ((this.moveXCrosshairs(a), !i.fixedTooltip)) {
                  var u = s || n.globals.gridHeight;
                  this.moveTooltip(a, u, o);
                }
              },
            },
            {
              key: "moveStickyTooltipOverBars",
              value: function (t) {
                var e = this.w,
                  i = this.ttCtx,
                  n = e.globals.columnSeries
                    ? e.globals.columnSeries.length
                    : e.globals.series.length,
                  a =
                    n >= 2 && n % 2 == 0
                      ? Math.floor(n / 2)
                      : Math.floor(n / 2) + 1;
                e.globals.isBarHorizontal &&
                  (a =
                    new M(this.ctx).getActiveConfigSeriesIndex(!1, "desc") + 1);
                var s = e.globals.dom.baseEl.querySelector(
                    ".apexcharts-bar-series .apexcharts-series[rel='"
                      .concat(a, "'] path[j='")
                      .concat(
                        t,
                        "'], .apexcharts-candlestick-series .apexcharts-series[rel='"
                      )
                      .concat(a, "'] path[j='")
                      .concat(
                        t,
                        "'], .apexcharts-boxPlot-series .apexcharts-series[rel='"
                      )
                      .concat(a, "'] path[j='")
                      .concat(
                        t,
                        "'], .apexcharts-rangebar-series .apexcharts-series[rel='"
                      )
                      .concat(a, "'] path[j='")
                      .concat(t, "']")
                  ),
                  r = s ? parseFloat(s.getAttribute("cx")) : 0,
                  o = s ? parseFloat(s.getAttribute("cy")) : 0,
                  l = s ? parseFloat(s.getAttribute("barWidth")) : 0,
                  c = s ? parseFloat(s.getAttribute("barHeight")) : 0,
                  h = i.getElGrid().getBoundingClientRect();
                if (
                  (e.globals.isXNumeric
                    ? ((r -= n % 2 != 0 ? l / 2 : 0),
                      s &&
                        (s.classList.contains("apexcharts-candlestick-area") ||
                          s.classList.contains("apexcharts-boxPlot-area")) &&
                        e.globals.comboCharts &&
                        (r -= l / 2))
                    : e.globals.isBarHorizontal ||
                      ((r =
                        i.xAxisTicksPositions[t - 1] +
                        i.dataPointsDividedWidth / 2),
                      isNaN(r) &&
                        (r =
                          i.xAxisTicksPositions[t] -
                          i.dataPointsDividedWidth / 2)),
                  e.globals.isBarHorizontal
                    ? (o += c / 3)
                    : (o = i.e.clientY - h.top - i.tooltipRect.ttHeight / 2),
                  e.globals.isBarHorizontal || this.moveXCrosshairs(r),
                  !i.fixedTooltip)
                ) {
                  var d = o || e.globals.gridHeight;
                  this.moveTooltip(r, d);
                }
              },
            },
          ]),
          t
        );
      })(),
      pt = (function () {
        function t(i) {
          e(this, t),
            (this.w = i.w),
            (this.ttCtx = i),
            (this.ctx = i.ctx),
            (this.tooltipPosition = new ft(i));
        }
        return (
          n(t, [
            {
              key: "drawDynamicPoints",
              value: function () {
                var t = this.w,
                  e = new m(this.ctx),
                  i = new E(this.ctx),
                  n =
                    t.globals.dom.baseEl.querySelectorAll(".apexcharts-series");
                (n = u(n)),
                  t.config.chart.stacked &&
                    n.sort(function (t, e) {
                      return (
                        parseFloat(t.getAttribute("data:realIndex")) -
                        parseFloat(e.getAttribute("data:realIndex"))
                      );
                    });
                for (var a = 0; a < n.length; a++) {
                  var s = n[a].querySelector(".apexcharts-series-markers-wrap");
                  if (null !== s) {
                    var r = void 0,
                      o = "apexcharts-marker w".concat(
                        (Math.random() + 1).toString(36).substring(4)
                      );
                    ("line" !== t.config.chart.type &&
                      "area" !== t.config.chart.type) ||
                      t.globals.comboCharts ||
                      t.config.tooltip.intersect ||
                      (o += " no-pointer-events");
                    var l = i.getMarkerConfig(o, a);
                    (r = e.drawMarker(0, 0, l)).node.setAttribute(
                      "default-marker-size",
                      0
                    );
                    var c = document.createElementNS(t.globals.SVGNS, "g");
                    c.classList.add("apexcharts-series-markers"),
                      c.appendChild(r.node),
                      s.appendChild(c);
                  }
                }
              },
            },
            {
              key: "enlargeCurrentPoint",
              value: function (t, e) {
                var i =
                    arguments.length > 2 && void 0 !== arguments[2]
                      ? arguments[2]
                      : null,
                  n =
                    arguments.length > 3 && void 0 !== arguments[3]
                      ? arguments[3]
                      : null,
                  a = this.w;
                "bubble" !== a.config.chart.type && this.newPointSize(t, e);
                var s = e.getAttribute("cx"),
                  r = e.getAttribute("cy");
                if (
                  (null !== i && null !== n && ((s = i), (r = n)),
                  this.tooltipPosition.moveXCrosshairs(s),
                  !this.fixedTooltip)
                ) {
                  if ("radar" === a.config.chart.type) {
                    var o = this.ttCtx.getElGrid(),
                      l = o.getBoundingClientRect();
                    s = this.ttCtx.e.clientX - l.left;
                  }
                  this.tooltipPosition.moveTooltip(
                    s,
                    r,
                    a.config.markers.hover.size
                  );
                }
              },
            },
            {
              key: "enlargePoints",
              value: function (t) {
                for (
                  var e = this.w,
                    i = this,
                    n = this.ttCtx,
                    a = t,
                    s = e.globals.dom.baseEl.querySelectorAll(
                      ".apexcharts-series:not(.apexcharts-series-collapsed) .apexcharts-marker"
                    ),
                    r = e.config.markers.hover.size,
                    o = 0;
                  o < s.length;
                  o++
                ) {
                  var l = s[o].getAttribute("rel"),
                    c = s[o].getAttribute("index");
                  if (
                    (void 0 === r &&
                      (r =
                        e.globals.markers.size[c] +
                        e.config.markers.hover.sizeOffset),
                    a === parseInt(l, 10))
                  ) {
                    i.newPointSize(a, s[o]);
                    var h = s[o].getAttribute("cx"),
                      d = s[o].getAttribute("cy");
                    i.tooltipPosition.moveXCrosshairs(h),
                      n.fixedTooltip || i.tooltipPosition.moveTooltip(h, d, r);
                  } else i.oldPointSize(s[o]);
                }
              },
            },
            {
              key: "newPointSize",
              value: function (t, e) {
                var i = this.w,
                  n = i.config.markers.hover.size,
                  a =
                    0 === t ? e.parentNode.firstChild : e.parentNode.lastChild;
                if ("0" !== a.getAttribute("default-marker-size")) {
                  var s = parseInt(a.getAttribute("index"), 10);
                  void 0 === n &&
                    (n =
                      i.globals.markers.size[s] +
                      i.config.markers.hover.sizeOffset),
                    n < 0 && (n = 0),
                    a.setAttribute("r", n);
                }
              },
            },
            {
              key: "oldPointSize",
              value: function (t) {
                var e = parseFloat(t.getAttribute("default-marker-size"));
                t.setAttribute("r", e);
              },
            },
            {
              key: "resetPointsSize",
              value: function () {
                for (
                  var t = this.w.globals.dom.baseEl.querySelectorAll(
                      ".apexcharts-series:not(.apexcharts-series-collapsed) .apexcharts-marker"
                    ),
                    e = 0;
                  e < t.length;
                  e++
                ) {
                  var i = parseFloat(t[e].getAttribute("default-marker-size"));
                  p.isNumber(i) && i >= 0
                    ? t[e].setAttribute("r", i)
                    : t[e].setAttribute("r", 0);
                }
              },
            },
          ]),
          t
        );
      })(),
      gt = (function () {
        function t(i) {
          e(this, t), (this.w = i.w), (this.ttCtx = i);
        }
        return (
          n(t, [
            {
              key: "getAttr",
              value: function (t, e) {
                return parseFloat(t.target.getAttribute(e));
              },
            },
            {
              key: "handleHeatTreeTooltip",
              value: function (t) {
                var e = t.e,
                  i = t.opt,
                  n = t.x,
                  a = t.y,
                  s = t.type,
                  r = this.ttCtx,
                  o = this.w;
                if (
                  e.target.classList.contains("apexcharts-".concat(s, "-rect"))
                ) {
                  var l = this.getAttr(e, "i"),
                    c = this.getAttr(e, "j"),
                    h = this.getAttr(e, "cx"),
                    d = this.getAttr(e, "cy"),
                    u = this.getAttr(e, "width"),
                    f = this.getAttr(e, "height");
                  if (
                    (r.tooltipLabels.drawSeriesTexts({
                      ttItems: i.ttItems,
                      i: l,
                      j: c,
                      shared: !1,
                      e: e,
                    }),
                    (o.globals.capturedSeriesIndex = l),
                    (o.globals.capturedDataPointIndex = c),
                    (n = h + r.tooltipRect.ttWidth / 2 + u),
                    (a = d + r.tooltipRect.ttHeight / 2 - f / 2),
                    r.tooltipPosition.moveXCrosshairs(h + u / 2),
                    n > o.globals.gridWidth / 2 &&
                      (n = h - r.tooltipRect.ttWidth / 2 + u),
                    r.w.config.tooltip.followCursor)
                  ) {
                    var p = o.globals.dom.elWrap.getBoundingClientRect();
                    (n =
                      o.globals.clientX - p.left - r.tooltipRect.ttWidth / 2),
                      (a =
                        o.globals.clientY - p.top - r.tooltipRect.ttHeight - 5);
                  }
                }
                return { x: n, y: a };
              },
            },
            {
              key: "handleMarkerTooltip",
              value: function (t) {
                var e,
                  i,
                  n = t.e,
                  a = t.opt,
                  s = t.x,
                  r = t.y,
                  o = this.w,
                  l = this.ttCtx;
                if (n.target.classList.contains("apexcharts-marker")) {
                  var c = parseInt(a.paths.getAttribute("cx"), 10),
                    h = parseInt(a.paths.getAttribute("cy"), 10),
                    d = parseFloat(a.paths.getAttribute("val"));
                  if (
                    ((i = parseInt(a.paths.getAttribute("rel"), 10)),
                    (e =
                      parseInt(
                        a.paths.parentNode.parentNode.parentNode.getAttribute(
                          "rel"
                        ),
                        10
                      ) - 1),
                    l.intersect)
                  ) {
                    var u = p.findAncestor(a.paths, "apexcharts-series");
                    u && (e = parseInt(u.getAttribute("data:realIndex"), 10));
                  }
                  if (
                    (l.tooltipLabels.drawSeriesTexts({
                      ttItems: a.ttItems,
                      i: e,
                      j: i,
                      shared: !l.showOnIntersect && o.config.tooltip.shared,
                      e: n,
                    }),
                    "mouseup" === n.type && l.markerClick(n, e, i),
                    (o.globals.capturedSeriesIndex = e),
                    (o.globals.capturedDataPointIndex = i),
                    (s = c),
                    (r =
                      h + o.globals.translateY - 1.4 * l.tooltipRect.ttHeight),
                    l.w.config.tooltip.followCursor)
                  ) {
                    var f = l.getElGrid().getBoundingClientRect();
                    r = l.e.clientY + o.globals.translateY - f.top;
                  }
                  d < 0 && (r = h),
                    l.marker.enlargeCurrentPoint(i, a.paths, s, r);
                }
                return { x: s, y: r };
              },
            },
            {
              key: "handleBarTooltip",
              value: function (t) {
                var e,
                  i,
                  n = t.e,
                  a = t.opt,
                  s = this.w,
                  r = this.ttCtx,
                  o = r.getElTooltip(),
                  l = 0,
                  c = 0,
                  h = 0,
                  d = this.getBarTooltipXY({ e: n, opt: a });
                e = d.i;
                var u = d.barHeight,
                  f = d.j;
                (s.globals.capturedSeriesIndex = e),
                  (s.globals.capturedDataPointIndex = f),
                  (s.globals.isBarHorizontal && r.tooltipUtil.hasBars()) ||
                  !s.config.tooltip.shared
                    ? ((c = d.x),
                      (h = d.y),
                      (i = Array.isArray(s.config.stroke.width)
                        ? s.config.stroke.width[e]
                        : s.config.stroke.width),
                      (l = c))
                    : s.globals.comboCharts ||
                      s.config.tooltip.shared ||
                      (l /= 2),
                  isNaN(h)
                    ? (h = s.globals.svgHeight - r.tooltipRect.ttHeight)
                    : h < 0 && (h = 0);
                var p = parseInt(
                    a.paths.parentNode.getAttribute("data:realIndex"),
                    10
                  ),
                  g = s.globals.isMultipleYAxis
                    ? s.config.yaxis[p] && s.config.yaxis[p].reversed
                    : s.config.yaxis[0].reversed;
                if (
                  (c + r.tooltipRect.ttWidth > s.globals.gridWidth && !g
                    ? (c -= r.tooltipRect.ttWidth)
                    : c < 0 && (c = 0),
                  r.w.config.tooltip.followCursor)
                ) {
                  var x = r.getElGrid().getBoundingClientRect();
                  h = r.e.clientY - x.top;
                }
                null === r.tooltip &&
                  (r.tooltip = s.globals.dom.baseEl.querySelector(
                    ".apexcharts-tooltip"
                  )),
                  s.config.tooltip.shared ||
                    (s.globals.comboBarCount > 0
                      ? r.tooltipPosition.moveXCrosshairs(l + i / 2)
                      : r.tooltipPosition.moveXCrosshairs(l)),
                  !r.fixedTooltip &&
                    (!s.config.tooltip.shared ||
                      (s.globals.isBarHorizontal && r.tooltipUtil.hasBars())) &&
                    (g && (c -= r.tooltipRect.ttWidth) < 0 && (c = 0),
                    (o.style.left = c + s.globals.translateX + "px"),
                    !g ||
                      (s.globals.isBarHorizontal && r.tooltipUtil.hasBars()) ||
                      (h = h + u - 2 * (s.globals.series[e][f] < 0 ? u : 0)),
                    r.tooltipRect.ttHeight + h > s.globals.gridHeight
                      ? ((h =
                          s.globals.gridHeight -
                          r.tooltipRect.ttHeight +
                          s.globals.translateY),
                        (o.style.top = h + "px"))
                      : (o.style.top =
                          h +
                          s.globals.translateY -
                          r.tooltipRect.ttHeight / 2 +
                          "px"));
              },
            },
            {
              key: "getBarTooltipXY",
              value: function (t) {
                var e = t.e,
                  i = t.opt,
                  n = this.w,
                  a = null,
                  s = this.ttCtx,
                  r = 0,
                  o = 0,
                  l = 0,
                  c = 0,
                  h = 0,
                  d = e.target.classList;
                if (
                  d.contains("apexcharts-bar-area") ||
                  d.contains("apexcharts-candlestick-area") ||
                  d.contains("apexcharts-boxPlot-area") ||
                  d.contains("apexcharts-rangebar-area")
                ) {
                  var u = e.target,
                    f = u.getBoundingClientRect(),
                    p = i.elGrid.getBoundingClientRect(),
                    g = f.height;
                  h = f.height;
                  var x = f.width,
                    m = parseInt(u.getAttribute("cx"), 10),
                    v = parseInt(u.getAttribute("cy"), 10);
                  c = parseFloat(u.getAttribute("barWidth"));
                  var b =
                    "touchmove" === e.type ? e.touches[0].clientX : e.clientX;
                  (a = parseInt(u.getAttribute("j"), 10)),
                    (r = parseInt(u.parentNode.getAttribute("rel"), 10) - 1);
                  var y = u.getAttribute("data-range-y1"),
                    w = u.getAttribute("data-range-y2");
                  n.globals.comboCharts &&
                    (r = parseInt(
                      u.parentNode.getAttribute("data:realIndex"),
                      10
                    )),
                    s.tooltipLabels.drawSeriesTexts({
                      ttItems: i.ttItems,
                      i: r,
                      j: a,
                      y1: y ? parseInt(y, 10) : null,
                      y2: w ? parseInt(w, 10) : null,
                      shared: !s.showOnIntersect && n.config.tooltip.shared,
                      e: e,
                    }),
                    n.config.tooltip.followCursor
                      ? n.globals.isBarHorizontal
                        ? ((o = b - p.left + 15),
                          (l =
                            v -
                            s.dataPointsDividedHeight +
                            g / 2 -
                            s.tooltipRect.ttHeight / 2))
                        : ((o = n.globals.isXNumeric
                            ? m - x / 2
                            : m - s.dataPointsDividedWidth + x / 2),
                          (l =
                            e.clientY -
                            p.top -
                            s.tooltipRect.ttHeight / 2 -
                            15))
                      : n.globals.isBarHorizontal
                      ? ((o = m) < s.xyRatios.baseLineInvertedY &&
                          (o = m - s.tooltipRect.ttWidth),
                        (l =
                          v -
                          s.dataPointsDividedHeight +
                          g / 2 -
                          s.tooltipRect.ttHeight / 2))
                      : ((o = n.globals.isXNumeric
                          ? m - x / 2
                          : m - s.dataPointsDividedWidth + x / 2),
                        (l = v));
                }
                return { x: o, y: l, barHeight: h, barWidth: c, i: r, j: a };
              },
            },
          ]),
          t
        );
      })(),
      xt = (function () {
        function t(i) {
          e(this, t), (this.w = i.w), (this.ttCtx = i);
        }
        return (
          n(t, [
            {
              key: "drawXaxisTooltip",
              value: function () {
                var t = this.w,
                  e = this.ttCtx,
                  i = "bottom" === t.config.xaxis.position;
                e.xaxisOffY = i
                  ? t.globals.gridHeight + 1
                  : -t.globals.xAxisHeight -
                    t.config.xaxis.axisTicks.height +
                    3;
                var n = i
                    ? "apexcharts-xaxistooltip apexcharts-xaxistooltip-bottom"
                    : "apexcharts-xaxistooltip apexcharts-xaxistooltip-top",
                  a = t.globals.dom.elWrap;
                e.blxaxisTooltip &&
                  null ===
                    t.globals.dom.baseEl.querySelector(
                      ".apexcharts-xaxistooltip"
                    ) &&
                  ((e.xaxisTooltip = document.createElement("div")),
                  e.xaxisTooltip.setAttribute(
                    "class",
                    n + " apexcharts-theme-" + t.config.tooltip.theme
                  ),
                  a.appendChild(e.xaxisTooltip),
                  (e.xaxisTooltipText = document.createElement("div")),
                  e.xaxisTooltipText.classList.add(
                    "apexcharts-xaxistooltip-text"
                  ),
                  (e.xaxisTooltipText.style.fontFamily =
                    t.config.xaxis.tooltip.style.fontFamily ||
                    t.config.chart.fontFamily),
                  (e.xaxisTooltipText.style.fontSize =
                    t.config.xaxis.tooltip.style.fontSize),
                  e.xaxisTooltip.appendChild(e.xaxisTooltipText));
              },
            },
            {
              key: "drawYaxisTooltip",
              value: function () {
                for (
                  var t = this.w,
                    e = this.ttCtx,
                    i = function (i) {
                      var n =
                        t.config.yaxis[i].opposite ||
                        t.config.yaxis[i].crosshairs.opposite;
                      e.yaxisOffX = n ? t.globals.gridWidth + 1 : 1;
                      var a =
                        "apexcharts-yaxistooltip apexcharts-yaxistooltip-".concat(
                          i,
                          n
                            ? " apexcharts-yaxistooltip-right"
                            : " apexcharts-yaxistooltip-left"
                        );
                      t.globals.yAxisSameScaleIndices.map(function (e, n) {
                        e.map(function (e, n) {
                          n === i &&
                            (a += t.config.yaxis[n].show
                              ? " "
                              : " apexcharts-yaxistooltip-hidden");
                        });
                      });
                      var s = t.globals.dom.elWrap;
                      null ===
                        t.globals.dom.baseEl.querySelector(
                          ".apexcharts-yaxistooltip apexcharts-yaxistooltip-".concat(
                            i
                          )
                        ) &&
                        ((e.yaxisTooltip = document.createElement("div")),
                        e.yaxisTooltip.setAttribute(
                          "class",
                          a + " apexcharts-theme-" + t.config.tooltip.theme
                        ),
                        s.appendChild(e.yaxisTooltip),
                        0 === i && (e.yaxisTooltipText = []),
                        (e.yaxisTooltipText[i] = document.createElement("div")),
                        e.yaxisTooltipText[i].classList.add(
                          "apexcharts-yaxistooltip-text"
                        ),
                        e.yaxisTooltip.appendChild(e.yaxisTooltipText[i]));
                    },
                    n = 0;
                  n < t.config.yaxis.length;
                  n++
                )
                  i(n);
              },
            },
            {
              key: "setXCrosshairWidth",
              value: function () {
                var t = this.w,
                  e = this.ttCtx,
                  i = e.getElXCrosshairs();
                if (
                  ((e.xcrosshairsWidth = parseInt(
                    t.config.xaxis.crosshairs.width,
                    10
                  )),
                  t.globals.comboCharts)
                ) {
                  var n = t.globals.dom.baseEl.querySelector(
                    ".apexcharts-bar-area"
                  );
                  if (
                    null !== n &&
                    "barWidth" === t.config.xaxis.crosshairs.width
                  ) {
                    var a = parseFloat(n.getAttribute("barWidth"));
                    e.xcrosshairsWidth = a;
                  } else if ("tickWidth" === t.config.xaxis.crosshairs.width) {
                    var s = t.globals.labels.length;
                    e.xcrosshairsWidth = t.globals.gridWidth / s;
                  }
                } else if ("tickWidth" === t.config.xaxis.crosshairs.width) {
                  var r = t.globals.labels.length;
                  e.xcrosshairsWidth = t.globals.gridWidth / r;
                } else if ("barWidth" === t.config.xaxis.crosshairs.width) {
                  var o = t.globals.dom.baseEl.querySelector(
                    ".apexcharts-bar-area"
                  );
                  if (null !== o) {
                    var l = parseFloat(o.getAttribute("barWidth"));
                    e.xcrosshairsWidth = l;
                  } else e.xcrosshairsWidth = 1;
                }
                t.globals.isBarHorizontal && (e.xcrosshairsWidth = 0),
                  null !== i &&
                    e.xcrosshairsWidth > 0 &&
                    i.setAttribute("width", e.xcrosshairsWidth);
              },
            },
            {
              key: "handleYCrosshair",
              value: function () {
                var t = this.w,
                  e = this.ttCtx;
                (e.ycrosshairs = t.globals.dom.baseEl.querySelector(
                  ".apexcharts-ycrosshairs"
                )),
                  (e.ycrosshairsHidden = t.globals.dom.baseEl.querySelector(
                    ".apexcharts-ycrosshairs-hidden"
                  ));
              },
            },
            {
              key: "drawYaxisTooltipText",
              value: function (t, e, i) {
                var n = this.ttCtx,
                  a = this.w,
                  s = a.globals.yLabelFormatters[t];
                if (n.yaxisTooltips[t]) {
                  var r = n.getElGrid().getBoundingClientRect(),
                    o = (e - r.top) * i.yRatio[t],
                    l = a.globals.maxYArr[t] - a.globals.minYArr[t],
                    c = a.globals.minYArr[t] + (l - o);
                  n.tooltipPosition.moveYCrosshairs(e - r.top),
                    (n.yaxisTooltipText[t].innerHTML = s(c)),
                    n.tooltipPosition.moveYAxisTooltip(t);
                }
              },
            },
          ]),
          t
        );
      })(),
      mt = (function () {
        function t(i) {
          e(this, t), (this.ctx = i), (this.w = i.w);
          var n = this.w;
          (this.tConfig = n.config.tooltip),
            (this.tooltipUtil = new dt(this)),
            (this.tooltipLabels = new ut(this)),
            (this.tooltipPosition = new ft(this)),
            (this.marker = new pt(this)),
            (this.intersect = new gt(this)),
            (this.axesTooltip = new xt(this)),
            (this.showOnIntersect = this.tConfig.intersect),
            (this.showTooltipTitle = this.tConfig.x.show),
            (this.fixedTooltip = this.tConfig.fixed.enabled),
            (this.xaxisTooltip = null),
            (this.yaxisTTEls = null),
            (this.isBarShared =
              !n.globals.isBarHorizontal && this.tConfig.shared);
        }
        return (
          n(t, [
            {
              key: "getElTooltip",
              value: function (t) {
                return (
                  t || (t = this),
                  t.w.globals.dom.baseEl.querySelector(".apexcharts-tooltip")
                );
              },
            },
            {
              key: "getElXCrosshairs",
              value: function () {
                return this.w.globals.dom.baseEl.querySelector(
                  ".apexcharts-xcrosshairs"
                );
              },
            },
            {
              key: "getElGrid",
              value: function () {
                return this.w.globals.dom.baseEl.querySelector(
                  ".apexcharts-grid"
                );
              },
            },
            {
              key: "drawTooltip",
              value: function (t) {
                var e = this.w;
                (this.xyRatios = t),
                  (this.blxaxisTooltip =
                    e.config.xaxis.tooltip.enabled && e.globals.axisCharts),
                  (this.yaxisTooltips = e.config.yaxis.map(function (t, i) {
                    return !!(
                      t.show &&
                      t.tooltip.enabled &&
                      e.globals.axisCharts
                    );
                  })),
                  (this.allTooltipSeriesGroups = []),
                  e.globals.axisCharts || (this.showTooltipTitle = !1);
                var i = document.createElement("div");
                if (
                  (i.classList.add("apexcharts-tooltip"),
                  i.classList.add(
                    "apexcharts-theme-".concat(this.tConfig.theme)
                  ),
                  e.globals.dom.elWrap.appendChild(i),
                  e.globals.axisCharts)
                ) {
                  this.axesTooltip.drawXaxisTooltip(),
                    this.axesTooltip.drawYaxisTooltip(),
                    this.axesTooltip.setXCrosshairWidth(),
                    this.axesTooltip.handleYCrosshair();
                  var n = new j(this.ctx);
                  this.xAxisTicksPositions = n.getXAxisTicksPositions();
                }
                if (
                  ((!e.globals.comboCharts &&
                    !this.tConfig.intersect &&
                    "rangeBar" !== e.config.chart.type) ||
                    this.tConfig.shared ||
                    (this.showOnIntersect = !0),
                  (0 !== e.config.markers.size &&
                    0 !== e.globals.markers.largestSize) ||
                    this.marker.drawDynamicPoints(this),
                  e.globals.collapsedSeries.length !== e.globals.series.length)
                ) {
                  (this.dataPointsDividedHeight =
                    e.globals.gridHeight / e.globals.dataPoints),
                    (this.dataPointsDividedWidth =
                      e.globals.gridWidth / e.globals.dataPoints),
                    this.showTooltipTitle &&
                      ((this.tooltipTitle = document.createElement("div")),
                      this.tooltipTitle.classList.add(
                        "apexcharts-tooltip-title"
                      ),
                      (this.tooltipTitle.style.fontFamily =
                        this.tConfig.style.fontFamily ||
                        e.config.chart.fontFamily),
                      (this.tooltipTitle.style.fontSize =
                        this.tConfig.style.fontSize),
                      i.appendChild(this.tooltipTitle));
                  var a = e.globals.series.length;
                  (e.globals.xyCharts || e.globals.comboCharts) &&
                    this.tConfig.shared &&
                    (a = this.showOnIntersect ? 1 : e.globals.series.length),
                    (this.legendLabels = e.globals.dom.baseEl.querySelectorAll(
                      ".apexcharts-legend-text"
                    )),
                    (this.ttItems = this.createTTElements(a)),
                    this.addSVGEvents();
                }
              },
            },
            {
              key: "createTTElements",
              value: function (t) {
                for (
                  var e = this,
                    i = this.w,
                    n = [],
                    a = this.getElTooltip(),
                    s = function (s) {
                      var r = document.createElement("div");
                      r.classList.add("apexcharts-tooltip-series-group"),
                        (r.style.order = i.config.tooltip.inverseOrder
                          ? t - s
                          : s + 1),
                        e.tConfig.shared &&
                          e.tConfig.enabledOnSeries &&
                          Array.isArray(e.tConfig.enabledOnSeries) &&
                          e.tConfig.enabledOnSeries.indexOf(s) < 0 &&
                          r.classList.add(
                            "apexcharts-tooltip-series-group-hidden"
                          );
                      var o = document.createElement("span");
                      o.classList.add("apexcharts-tooltip-marker"),
                        (o.style.backgroundColor = i.globals.colors[s]),
                        r.appendChild(o);
                      var l = document.createElement("div");
                      l.classList.add("apexcharts-tooltip-text"),
                        (l.style.fontFamily =
                          e.tConfig.style.fontFamily ||
                          i.config.chart.fontFamily),
                        (l.style.fontSize = e.tConfig.style.fontSize),
                        ["y", "goals", "z"].forEach(function (t) {
                          var e = document.createElement("div");
                          e.classList.add(
                            "apexcharts-tooltip-".concat(t, "-group")
                          );
                          var i = document.createElement("span");
                          i.classList.add(
                            "apexcharts-tooltip-text-".concat(t, "-label")
                          ),
                            e.appendChild(i);
                          var n = document.createElement("span");
                          n.classList.add(
                            "apexcharts-tooltip-text-".concat(t, "-value")
                          ),
                            e.appendChild(n),
                            l.appendChild(e);
                        }),
                        r.appendChild(l),
                        a.appendChild(r),
                        n.push(r);
                    },
                    r = 0;
                  r < t;
                  r++
                )
                  s(r);
                return n;
              },
            },
            {
              key: "addSVGEvents",
              value: function () {
                var t = this.w,
                  e = t.config.chart.type,
                  i = this.getElTooltip(),
                  n = !(
                    "bar" !== e &&
                    "candlestick" !== e &&
                    "boxPlot" !== e &&
                    "rangeBar" !== e
                  ),
                  a =
                    "area" === e ||
                    "line" === e ||
                    "scatter" === e ||
                    "bubble" === e ||
                    "radar" === e,
                  s = t.globals.dom.Paper.node,
                  r = this.getElGrid();
                r && (this.seriesBound = r.getBoundingClientRect());
                var o,
                  l = [],
                  c = [],
                  h = {
                    hoverArea: s,
                    elGrid: r,
                    tooltipEl: i,
                    tooltipY: l,
                    tooltipX: c,
                    ttItems: this.ttItems,
                  };
                if (
                  t.globals.axisCharts &&
                  (a
                    ? (o = t.globals.dom.baseEl.querySelectorAll(
                        ".apexcharts-series[data\\:longestSeries='true'] .apexcharts-marker"
                      ))
                    : n
                    ? (o = t.globals.dom.baseEl.querySelectorAll(
                        ".apexcharts-series .apexcharts-bar-area, .apexcharts-series .apexcharts-candlestick-area, .apexcharts-series .apexcharts-boxPlot-area, .apexcharts-series .apexcharts-rangebar-area"
                      ))
                    : ("heatmap" !== e && "treemap" !== e) ||
                      (o = t.globals.dom.baseEl.querySelectorAll(
                        ".apexcharts-series .apexcharts-heatmap, .apexcharts-series .apexcharts-treemap"
                      )),
                  o && o.length)
                )
                  for (var d = 0; d < o.length; d++)
                    l.push(o[d].getAttribute("cy")),
                      c.push(o[d].getAttribute("cx"));
                if (
                  (t.globals.xyCharts && !this.showOnIntersect) ||
                  (t.globals.comboCharts && !this.showOnIntersect) ||
                  (n && this.tooltipUtil.hasBars() && this.tConfig.shared)
                )
                  this.addPathsEventListeners([s], h);
                else if (
                  (n && !t.globals.comboCharts) ||
                  (a && this.showOnIntersect)
                )
                  this.addDatapointEventsListeners(h);
                else if (
                  !t.globals.axisCharts ||
                  "heatmap" === e ||
                  "treemap" === e
                ) {
                  var u =
                    t.globals.dom.baseEl.querySelectorAll(".apexcharts-series");
                  this.addPathsEventListeners(u, h);
                }
                if (this.showOnIntersect) {
                  var f = t.globals.dom.baseEl.querySelectorAll(
                    ".apexcharts-line-series .apexcharts-marker, .apexcharts-area-series .apexcharts-marker"
                  );
                  f.length > 0 && this.addPathsEventListeners(f, h),
                    this.tooltipUtil.hasBars() &&
                      !this.tConfig.shared &&
                      this.addDatapointEventsListeners(h);
                }
              },
            },
            {
              key: "drawFixedTooltipRect",
              value: function () {
                var t = this.w,
                  e = this.getElTooltip(),
                  i = e.getBoundingClientRect(),
                  n = i.width + 10,
                  a = i.height + 10,
                  s = this.tConfig.fixed.offsetX,
                  r = this.tConfig.fixed.offsetY,
                  o = this.tConfig.fixed.position.toLowerCase();
                return (
                  o.indexOf("right") > -1 &&
                    (s = s + t.globals.svgWidth - n + 10),
                  o.indexOf("bottom") > -1 &&
                    (r = r + t.globals.svgHeight - a - 10),
                  (e.style.left = s + "px"),
                  (e.style.top = r + "px"),
                  { x: s, y: r, ttWidth: n, ttHeight: a }
                );
              },
            },
            {
              key: "addDatapointEventsListeners",
              value: function (t) {
                var e = this.w.globals.dom.baseEl.querySelectorAll(
                  ".apexcharts-series-markers .apexcharts-marker, .apexcharts-bar-area, .apexcharts-candlestick-area, .apexcharts-boxPlot-area, .apexcharts-rangebar-area"
                );
                this.addPathsEventListeners(e, t);
              },
            },
            {
              key: "addPathsEventListeners",
              value: function (t, e) {
                for (
                  var i = this,
                    n = function (n) {
                      var a = {
                        paths: t[n],
                        tooltipEl: e.tooltipEl,
                        tooltipY: e.tooltipY,
                        tooltipX: e.tooltipX,
                        elGrid: e.elGrid,
                        hoverArea: e.hoverArea,
                        ttItems: e.ttItems,
                      };
                      [
                        "mousemove",
                        "mouseup",
                        "touchmove",
                        "mouseout",
                        "touchend",
                      ].map(function (e) {
                        return t[n].addEventListener(
                          e,
                          i.seriesHover.bind(i, a),
                          { capture: !1, passive: !0 }
                        );
                      });
                    },
                    a = 0;
                  a < t.length;
                  a++
                )
                  n(a);
              },
            },
            {
              key: "seriesHover",
              value: function (t, e) {
                var i = this,
                  n = [],
                  a = this.w;
                a.config.chart.group && (n = this.ctx.getGroupedCharts()),
                  (a.globals.axisCharts &&
                    ((a.globals.minX === -1 / 0 && a.globals.maxX === 1 / 0) ||
                      0 === a.globals.dataPoints)) ||
                    (n.length
                      ? n.forEach(function (n) {
                          var a = i.getElTooltip(n),
                            s = {
                              paths: t.paths,
                              tooltipEl: a,
                              tooltipY: t.tooltipY,
                              tooltipX: t.tooltipX,
                              elGrid: t.elGrid,
                              hoverArea: t.hoverArea,
                              ttItems: n.w.globals.tooltip.ttItems,
                            };
                          n.w.globals.minX === i.w.globals.minX &&
                            n.w.globals.maxX === i.w.globals.maxX &&
                            n.w.globals.tooltip.seriesHoverByContext({
                              chartCtx: n,
                              ttCtx: n.w.globals.tooltip,
                              opt: s,
                              e: e,
                            });
                        })
                      : this.seriesHoverByContext({
                          chartCtx: this.ctx,
                          ttCtx: this.w.globals.tooltip,
                          opt: t,
                          e: e,
                        }));
              },
            },
            {
              key: "seriesHoverByContext",
              value: function (t) {
                var e = t.chartCtx,
                  i = t.ttCtx,
                  n = t.opt,
                  a = t.e,
                  s = e.w,
                  r = this.getElTooltip();
                (i.tooltipRect = {
                  x: 0,
                  y: 0,
                  ttWidth: r.getBoundingClientRect().width,
                  ttHeight: r.getBoundingClientRect().height,
                }),
                  (i.e = a),
                  !i.tooltipUtil.hasBars() ||
                    s.globals.comboCharts ||
                    i.isBarShared ||
                    (this.tConfig.onDatasetHover.highlightDataSeries &&
                      new M(e).toggleSeriesOnHover(a, a.target.parentNode)),
                  i.fixedTooltip && i.drawFixedTooltipRect(),
                  s.globals.axisCharts
                    ? i.axisChartsTooltips({
                        e: a,
                        opt: n,
                        tooltipRect: i.tooltipRect,
                      })
                    : i.nonAxisChartsTooltips({
                        e: a,
                        opt: n,
                        tooltipRect: i.tooltipRect,
                      });
              },
            },
            {
              key: "axisChartsTooltips",
              value: function (t) {
                var e,
                  i,
                  n = t.e,
                  a = t.opt,
                  s = this.w,
                  r = a.elGrid.getBoundingClientRect(),
                  o = "touchmove" === n.type ? n.touches[0].clientX : n.clientX,
                  l = "touchmove" === n.type ? n.touches[0].clientY : n.clientY;
                if (
                  ((this.clientY = l),
                  (this.clientX = o),
                  (s.globals.capturedSeriesIndex = -1),
                  (s.globals.capturedDataPointIndex = -1),
                  l < r.top || l > r.top + r.height)
                )
                  this.handleMouseOut(a);
                else {
                  if (
                    Array.isArray(this.tConfig.enabledOnSeries) &&
                    !s.config.tooltip.shared
                  ) {
                    var c = parseInt(a.paths.getAttribute("index"), 10);
                    if (this.tConfig.enabledOnSeries.indexOf(c) < 0)
                      return void this.handleMouseOut(a);
                  }
                  var h = this.getElTooltip(),
                    d = this.getElXCrosshairs(),
                    u =
                      s.globals.xyCharts ||
                      ("bar" === s.config.chart.type &&
                        !s.globals.isBarHorizontal &&
                        this.tooltipUtil.hasBars() &&
                        this.tConfig.shared) ||
                      (s.globals.comboCharts && this.tooltipUtil.hasBars());
                  if (
                    "mousemove" === n.type ||
                    "touchmove" === n.type ||
                    "mouseup" === n.type
                  ) {
                    null !== d && d.classList.add("apexcharts-active");
                    var f = this.yaxisTooltips.filter(function (t) {
                      return !0 === t;
                    });
                    if (
                      (null !== this.ycrosshairs &&
                        f.length &&
                        this.ycrosshairs.classList.add("apexcharts-active"),
                      u && !this.showOnIntersect)
                    )
                      this.handleStickyTooltip(n, o, l, a);
                    else if (
                      "heatmap" === s.config.chart.type ||
                      "treemap" === s.config.chart.type
                    ) {
                      var p = this.intersect.handleHeatTreeTooltip({
                        e: n,
                        opt: a,
                        x: e,
                        y: i,
                        type: s.config.chart.type,
                      });
                      (e = p.x),
                        (i = p.y),
                        (h.style.left = e + "px"),
                        (h.style.top = i + "px");
                    } else
                      this.tooltipUtil.hasBars() &&
                        this.intersect.handleBarTooltip({ e: n, opt: a }),
                        this.tooltipUtil.hasMarkers() &&
                          this.intersect.handleMarkerTooltip({
                            e: n,
                            opt: a,
                            x: e,
                            y: i,
                          });
                    if (this.yaxisTooltips.length)
                      for (var g = 0; g < s.config.yaxis.length; g++)
                        this.axesTooltip.drawYaxisTooltipText(
                          g,
                          l,
                          this.xyRatios
                        );
                    a.tooltipEl.classList.add("apexcharts-active");
                  } else
                    ("mouseout" !== n.type && "touchend" !== n.type) ||
                      this.handleMouseOut(a);
                }
              },
            },
            {
              key: "nonAxisChartsTooltips",
              value: function (t) {
                var e = t.e,
                  i = t.opt,
                  n = t.tooltipRect,
                  a = this.w,
                  s = i.paths.getAttribute("rel"),
                  r = this.getElTooltip(),
                  o = a.globals.dom.elWrap.getBoundingClientRect();
                if ("mousemove" === e.type || "touchmove" === e.type) {
                  r.classList.add("apexcharts-active"),
                    this.tooltipLabels.drawSeriesTexts({
                      ttItems: i.ttItems,
                      i: parseInt(s, 10) - 1,
                      shared: !1,
                    });
                  var l = a.globals.clientX - o.left - n.ttWidth / 2,
                    c = a.globals.clientY - o.top - n.ttHeight - 10;
                  if (
                    ((r.style.left = l + "px"),
                    (r.style.top = c + "px"),
                    a.config.legend.tooltipHoverFormatter)
                  ) {
                    var h = s - 1,
                      d = (0, a.config.legend.tooltipHoverFormatter)(
                        this.legendLabels[h].getAttribute("data:default-text"),
                        { seriesIndex: h, dataPointIndex: h, w: a }
                      );
                    this.legendLabels[h].innerHTML = d;
                  }
                } else
                  ("mouseout" !== e.type && "touchend" !== e.type) ||
                    (r.classList.remove("apexcharts-active"),
                    a.config.legend.tooltipHoverFormatter &&
                      this.legendLabels.forEach(function (t) {
                        var e = t.getAttribute("data:default-text");
                        t.innerHTML = decodeURIComponent(e);
                      }));
              },
            },
            {
              key: "handleStickyTooltip",
              value: function (t, e, i, n) {
                var a = this.w,
                  s = this.tooltipUtil.getNearestValues({
                    context: this,
                    hoverArea: n.hoverArea,
                    elGrid: n.elGrid,
                    clientX: e,
                    clientY: i,
                  }),
                  r = s.j,
                  o = s.capturedSeries;
                s.hoverX < 0 || s.hoverX > a.globals.gridWidth
                  ? this.handleMouseOut(n)
                  : null !== o
                  ? this.handleStickyCapturedSeries(t, o, n, r)
                  : (this.tooltipUtil.isXoverlap(r) ||
                      a.globals.isBarHorizontal) &&
                    this.create(t, this, 0, r, n.ttItems);
              },
            },
            {
              key: "handleStickyCapturedSeries",
              value: function (t, e, i, n) {
                var a = this.w;
                null === a.globals.series[e][n]
                  ? this.handleMouseOut(i)
                  : void 0 !== a.globals.series[e][n]
                  ? this.tConfig.shared &&
                    this.tooltipUtil.isXoverlap(n) &&
                    this.tooltipUtil.isInitialSeriesSameLen()
                    ? this.create(t, this, e, n, i.ttItems)
                    : this.create(t, this, e, n, i.ttItems, !1)
                  : this.tooltipUtil.isXoverlap(n) &&
                    this.create(t, this, 0, n, i.ttItems);
              },
            },
            {
              key: "deactivateHoverFilter",
              value: function () {
                for (
                  var t = this.w,
                    e = new m(this.ctx),
                    i = t.globals.dom.Paper.select(".apexcharts-bar-area"),
                    n = 0;
                  n < i.length;
                  n++
                )
                  e.pathMouseLeave(i[n]);
              },
            },
            {
              key: "handleMouseOut",
              value: function (t) {
                var e = this.w,
                  i = this.getElXCrosshairs();
                if (
                  (t.tooltipEl.classList.remove("apexcharts-active"),
                  this.deactivateHoverFilter(),
                  "bubble" !== e.config.chart.type &&
                    this.marker.resetPointsSize(),
                  null !== i && i.classList.remove("apexcharts-active"),
                  null !== this.ycrosshairs &&
                    this.ycrosshairs.classList.remove("apexcharts-active"),
                  this.blxaxisTooltip &&
                    this.xaxisTooltip.classList.remove("apexcharts-active"),
                  this.yaxisTooltips.length)
                ) {
                  null === this.yaxisTTEls &&
                    (this.yaxisTTEls = e.globals.dom.baseEl.querySelectorAll(
                      ".apexcharts-yaxistooltip"
                    ));
                  for (var n = 0; n < this.yaxisTTEls.length; n++)
                    this.yaxisTTEls[n].classList.remove("apexcharts-active");
                }
                e.config.legend.tooltipHoverFormatter &&
                  this.legendLabels.forEach(function (t) {
                    var e = t.getAttribute("data:default-text");
                    t.innerHTML = decodeURIComponent(e);
                  });
              },
            },
            {
              key: "markerClick",
              value: function (t, e, i) {
                var n = this.w;
                "function" == typeof n.config.chart.events.markerClick &&
                  n.config.chart.events.markerClick(t, this.ctx, {
                    seriesIndex: e,
                    dataPointIndex: i,
                    w: n,
                  }),
                  this.ctx.events.fireEvent("markerClick", [
                    t,
                    this.ctx,
                    { seriesIndex: e, dataPointIndex: i, w: n },
                  ]);
              },
            },
            {
              key: "create",
              value: function (t, e, i, n, a) {
                var s =
                    arguments.length > 5 && void 0 !== arguments[5]
                      ? arguments[5]
                      : null,
                  r = this.w,
                  o = e;
                "mouseup" === t.type && this.markerClick(t, i, n),
                  null === s && (s = this.tConfig.shared);
                var l = this.tooltipUtil.hasMarkers(),
                  c = this.tooltipUtil.getElBars();
                if (r.config.legend.tooltipHoverFormatter) {
                  var h = r.config.legend.tooltipHoverFormatter,
                    d = Array.from(this.legendLabels);
                  d.forEach(function (t) {
                    var e = t.getAttribute("data:default-text");
                    t.innerHTML = decodeURIComponent(e);
                  });
                  for (var u = 0; u < d.length; u++) {
                    var f = d[u],
                      p = parseInt(f.getAttribute("i"), 10),
                      g = decodeURIComponent(
                        f.getAttribute("data:default-text")
                      ),
                      x = h(g, {
                        seriesIndex: s ? p : i,
                        dataPointIndex: n,
                        w: r,
                      });
                    if (s)
                      f.innerHTML =
                        r.globals.collapsedSeriesIndices.indexOf(p) < 0 ? x : g;
                    else if (((f.innerHTML = p === i ? x : g), i === p)) break;
                  }
                }
                if (s) {
                  if (
                    (o.tooltipLabels.drawSeriesTexts({
                      ttItems: a,
                      i: i,
                      j: n,
                      shared: !this.showOnIntersect && this.tConfig.shared,
                    }),
                    l &&
                      (r.globals.markers.largestSize > 0
                        ? o.marker.enlargePoints(n)
                        : o.tooltipPosition.moveDynamicPointsOnHover(n)),
                    this.tooltipUtil.hasBars() &&
                      ((this.barSeriesHeight =
                        this.tooltipUtil.getBarsHeight(c)),
                      this.barSeriesHeight > 0))
                  ) {
                    var v = new m(this.ctx),
                      b = r.globals.dom.Paper.select(
                        ".apexcharts-bar-area[j='".concat(n, "']")
                      );
                    this.deactivateHoverFilter(),
                      this.tooltipPosition.moveStickyTooltipOverBars(n);
                    for (var y = 0; y < b.length; y++) v.pathMouseEnter(b[y]);
                  }
                } else
                  o.tooltipLabels.drawSeriesTexts({
                    shared: !1,
                    ttItems: a,
                    i: i,
                    j: n,
                  }),
                    this.tooltipUtil.hasBars() &&
                      o.tooltipPosition.moveStickyTooltipOverBars(n),
                    l && o.tooltipPosition.moveMarkers(i, n);
              },
            },
          ]),
          t
        );
      })(),
      vt = (function (t) {
        o(a, t);
        var i = d(a);
        function a() {
          return e(this, a), i.apply(this, arguments);
        }
        return (
          n(a, [
            {
              key: "draw",
              value: function (t, e) {
                var i = this,
                  n = this.w;
                (this.graphics = new m(this.ctx)),
                  (this.bar = new O(this.ctx, this.xyRatios));
                var a = new y(this.ctx, n);
                (t = a.getLogSeries(t)),
                  (this.yRatio = a.getLogYRatios(this.yRatio)),
                  this.barHelpers.initVariables(t),
                  "100%" === n.config.chart.stackType &&
                    (t = n.globals.seriesPercent.slice()),
                  (this.series = t),
                  (this.totalItems = 0),
                  (this.prevY = []),
                  (this.prevX = []),
                  (this.prevYF = []),
                  (this.prevXF = []),
                  (this.prevYVal = []),
                  (this.prevXVal = []),
                  (this.xArrj = []),
                  (this.xArrjF = []),
                  (this.xArrjVal = []),
                  (this.yArrj = []),
                  (this.yArrjF = []),
                  (this.yArrjVal = []);
                for (var s = 0; s < t.length; s++)
                  t[s].length > 0 && (this.totalItems += t[s].length);
                for (
                  var o = this.graphics.group({
                      class: "apexcharts-bar-series apexcharts-plot-series",
                    }),
                    l = 0,
                    c = 0,
                    h = function (a, s) {
                      var h = void 0,
                        d = void 0,
                        u = void 0,
                        f = void 0,
                        g = [],
                        x = [],
                        m = n.globals.comboCharts ? e[a] : a;
                      i.yRatio.length > 1 && (i.yaxisIndex = m),
                        (i.isReversed =
                          n.config.yaxis[i.yaxisIndex] &&
                          n.config.yaxis[i.yaxisIndex].reversed);
                      var v = i.graphics.group({
                        class: "apexcharts-series",
                        seriesName: p.escapeString(n.globals.seriesNames[m]),
                        rel: a + 1,
                        "data:realIndex": m,
                      });
                      i.ctx.series.addCollapsedClassToSeries(v, m);
                      var b = i.graphics.group({
                          class: "apexcharts-datalabels",
                          "data:realIndex": m,
                        }),
                        y = 0,
                        w = 0,
                        k = i.initialPositions(l, c, h, d, u, f);
                      (c = k.y),
                        (y = k.barHeight),
                        (d = k.yDivision),
                        (f = k.zeroW),
                        (l = k.x),
                        (w = k.barWidth),
                        (h = k.xDivision),
                        (u = k.zeroH),
                        (i.yArrj = []),
                        (i.yArrjF = []),
                        (i.yArrjVal = []),
                        (i.xArrj = []),
                        (i.xArrjF = []),
                        (i.xArrjVal = []),
                        1 === i.prevY.length &&
                          i.prevY[0].every(function (t) {
                            return isNaN(t);
                          }) &&
                          ((i.prevY[0] = i.prevY[0].map(function (t) {
                            return u;
                          })),
                          (i.prevYF[0] = i.prevYF[0].map(function (t) {
                            return 0;
                          })));
                      for (var A = 0; A < n.globals.dataPoints; A++) {
                        var S = i.barHelpers.getStrokeWidth(a, A, m),
                          C = {
                            indexes: { i: a, j: A, realIndex: m, bc: s },
                            strokeWidth: S,
                            x: l,
                            y: c,
                            elSeries: v,
                          },
                          T = null;
                        i.isHorizontal
                          ? ((T = i.drawStackedBarPaths(
                              r(
                                r({}, C),
                                {},
                                { zeroW: f, barHeight: y, yDivision: d }
                              )
                            )),
                            (w = i.series[a][A] / i.invertedYRatio))
                          : ((T = i.drawStackedColumnPaths(
                              r(
                                r({}, C),
                                {},
                                { xDivision: h, barWidth: w, zeroH: u }
                              )
                            )),
                            (y = i.series[a][A] / i.yRatio[i.yaxisIndex])),
                          (c = T.y),
                          (l = T.x),
                          g.push(l),
                          x.push(c);
                        var E = i.barHelpers.getPathFillColor(t, a, A, m);
                        v = i.renderSeries({
                          realIndex: m,
                          pathFill: E,
                          j: A,
                          i: a,
                          pathFrom: T.pathFrom,
                          pathTo: T.pathTo,
                          strokeWidth: S,
                          elSeries: v,
                          x: l,
                          y: c,
                          series: t,
                          barHeight: y,
                          barWidth: w,
                          elDataLabelsWrap: b,
                          type: "bar",
                          visibleSeries: 0,
                        });
                      }
                      (n.globals.seriesXvalues[m] = g),
                        (n.globals.seriesYvalues[m] = x),
                        i.prevY.push(i.yArrj),
                        i.prevYF.push(i.yArrjF),
                        i.prevYVal.push(i.yArrjVal),
                        i.prevX.push(i.xArrj),
                        i.prevXF.push(i.xArrjF),
                        i.prevXVal.push(i.xArrjVal),
                        o.add(v);
                    },
                    d = 0,
                    u = 0;
                  d < t.length;
                  d++, u++
                )
                  h(d, u);
                return o;
              },
            },
            {
              key: "initialPositions",
              value: function (t, e, i, n, a, s) {
                var r,
                  o,
                  l = this.w;
                return (
                  this.isHorizontal
                    ? ((r =
                        ((r = n = l.globals.gridHeight / l.globals.dataPoints) *
                          parseInt(l.config.plotOptions.bar.barHeight, 10)) /
                        100),
                      (s =
                        this.baseLineInvertedY +
                        l.globals.padHorizontal +
                        (this.isReversed ? l.globals.gridWidth : 0) -
                        (this.isReversed ? 2 * this.baseLineInvertedY : 0)),
                      (e = (n - r) / 2))
                    : ((o = i = l.globals.gridWidth / l.globals.dataPoints),
                      (o =
                        l.globals.isXNumeric && l.globals.dataPoints > 1
                          ? ((i = l.globals.minXDiff / this.xRatio) *
                              parseInt(this.barOptions.columnWidth, 10)) /
                            100
                          : (o *
                              parseInt(
                                l.config.plotOptions.bar.columnWidth,
                                10
                              )) /
                            100),
                      (a =
                        this.baseLineY[this.yaxisIndex] +
                        (this.isReversed ? l.globals.gridHeight : 0) -
                        (this.isReversed
                          ? 2 * this.baseLineY[this.yaxisIndex]
                          : 0)),
                      (t = l.globals.padHorizontal + (i - o) / 2)),
                  {
                    x: t,
                    y: e,
                    yDivision: n,
                    xDivision: i,
                    barHeight: r,
                    barWidth: o,
                    zeroH: a,
                    zeroW: s,
                  }
                );
              },
            },
            {
              key: "drawStackedBarPaths",
              value: function (t) {
                for (
                  var e,
                    i = t.indexes,
                    n = t.barHeight,
                    a = t.strokeWidth,
                    s = t.zeroW,
                    r = t.x,
                    o = t.y,
                    l = t.yDivision,
                    c = t.elSeries,
                    h = this.w,
                    d = o,
                    u = i.i,
                    f = i.j,
                    p = 0,
                    g = 0;
                  g < this.prevXF.length;
                  g++
                )
                  p += this.prevXF[g][f];
                if (u > 0) {
                  var x = s;
                  this.prevXVal[u - 1][f] < 0
                    ? (x =
                        this.series[u][f] >= 0
                          ? this.prevX[u - 1][f] +
                            p -
                            2 * (this.isReversed ? p : 0)
                          : this.prevX[u - 1][f])
                    : this.prevXVal[u - 1][f] >= 0 &&
                      (x =
                        this.series[u][f] >= 0
                          ? this.prevX[u - 1][f]
                          : this.prevX[u - 1][f] -
                            p +
                            2 * (this.isReversed ? p : 0)),
                    (e = x);
                } else e = s;
                r =
                  null === this.series[u][f]
                    ? e
                    : e +
                      this.series[u][f] / this.invertedYRatio -
                      2 *
                        (this.isReversed
                          ? this.series[u][f] / this.invertedYRatio
                          : 0);
                var m = this.barHelpers.getBarpaths({
                  barYPosition: d,
                  barHeight: n,
                  x1: e,
                  x2: r,
                  strokeWidth: a,
                  series: this.series,
                  realIndex: i.realIndex,
                  i: u,
                  j: f,
                  w: h,
                });
                return (
                  this.barHelpers.barBackground({
                    j: f,
                    i: u,
                    y1: d,
                    y2: n,
                    elSeries: c,
                  }),
                  (o += l),
                  { pathTo: m.pathTo, pathFrom: m.pathFrom, x: r, y: o }
                );
              },
            },
            {
              key: "drawStackedColumnPaths",
              value: function (t) {
                var e = t.indexes,
                  i = t.x,
                  n = t.y,
                  a = t.xDivision,
                  s = t.barWidth,
                  r = t.zeroH;
                t.strokeWidth;
                var o = t.elSeries,
                  l = this.w,
                  c = e.i,
                  h = e.j,
                  d = e.bc;
                if (l.globals.isXNumeric) {
                  var u = l.globals.seriesX[c][h];
                  u || (u = 0),
                    (i = (u - l.globals.minX) / this.xRatio - s / 2);
                }
                for (var f, p = i, g = 0, x = 0; x < this.prevYF.length; x++)
                  g += isNaN(this.prevYF[x][h]) ? 0 : this.prevYF[x][h];
                if (
                  (c > 0 && !l.globals.isXNumeric) ||
                  (c > 0 &&
                    l.globals.isXNumeric &&
                    l.globals.seriesX[c - 1][h] === l.globals.seriesX[c][h])
                ) {
                  var m,
                    v,
                    b = Math.min(this.yRatio.length + 1, c + 1);
                  if (void 0 !== this.prevY[c - 1])
                    for (var y = 1; y < b; y++)
                      if (!isNaN(this.prevY[c - y][h])) {
                        v = this.prevY[c - y][h];
                        break;
                      }
                  for (var w = 1; w < b; w++) {
                    if (this.prevYVal[c - w][h] < 0) {
                      m =
                        this.series[c][h] >= 0
                          ? v - g + 2 * (this.isReversed ? g : 0)
                          : v;
                      break;
                    }
                    if (this.prevYVal[c - w][h] >= 0) {
                      m =
                        this.series[c][h] >= 0
                          ? v
                          : v + g - 2 * (this.isReversed ? g : 0);
                      break;
                    }
                  }
                  void 0 === m && (m = l.globals.gridHeight),
                    (f =
                      this.prevYF[0].every(function (t) {
                        return 0 === t;
                      }) &&
                      this.prevYF.slice(1, c).every(function (t) {
                        return t.every(function (t) {
                          return isNaN(t);
                        });
                      })
                        ? l.globals.gridHeight - r
                        : m);
                } else f = l.globals.gridHeight - r;
                n =
                  f -
                  this.series[c][h] / this.yRatio[this.yaxisIndex] +
                  2 *
                    (this.isReversed
                      ? this.series[c][h] / this.yRatio[this.yaxisIndex]
                      : 0);
                var k = this.barHelpers.getColumnPaths({
                  barXPosition: p,
                  barWidth: s,
                  y1: f,
                  y2: n,
                  yRatio: this.yRatio[this.yaxisIndex],
                  strokeWidth: this.strokeWidth,
                  series: this.series,
                  realIndex: e.realIndex,
                  i: c,
                  j: h,
                  w: l,
                });
                return (
                  this.barHelpers.barBackground({
                    bc: d,
                    j: h,
                    i: c,
                    x1: p,
                    x2: s,
                    elSeries: o,
                  }),
                  (i += a),
                  {
                    pathTo: k.pathTo,
                    pathFrom: k.pathFrom,
                    x: l.globals.isXNumeric ? i - a : i,
                    y: n,
                  }
                );
              },
            },
          ]),
          a
        );
      })(O),
      bt = (function (t) {
        o(a, t);
        var i = d(a);
        function a() {
          return e(this, a), i.apply(this, arguments);
        }
        return (
          n(a, [
            {
              key: "draw",
              value: function (t, e) {
                var i = this,
                  n = this.w,
                  a = new m(this.ctx),
                  s = new T(this.ctx);
                (this.candlestickOptions =
                  this.w.config.plotOptions.candlestick),
                  (this.boxOptions = this.w.config.plotOptions.boxPlot);
                var r = new y(this.ctx, n);
                (t = r.getLogSeries(t)),
                  (this.series = t),
                  (this.yRatio = r.getLogYRatios(this.yRatio)),
                  this.barHelpers.initVariables(t);
                for (
                  var o = a.group({
                      class: "apexcharts-".concat(
                        n.config.chart.type,
                        "-series apexcharts-plot-series"
                      ),
                    }),
                    l = function (r) {
                      i.isBoxPlot =
                        "boxPlot" === n.config.chart.type ||
                        "boxPlot" === n.config.series[r].type;
                      var l,
                        c,
                        h,
                        d,
                        u = void 0,
                        f = void 0,
                        g = [],
                        x = [],
                        m = n.globals.comboCharts ? e[r] : r,
                        v = a.group({
                          class: "apexcharts-series",
                          seriesName: p.escapeString(n.globals.seriesNames[m]),
                          rel: r + 1,
                          "data:realIndex": m,
                        });
                      t[r].length > 0 && (i.visibleI = i.visibleI + 1),
                        i.yRatio.length > 1 && (i.yaxisIndex = m);
                      var b = i.barHelpers.initialPositions();
                      (f = b.y),
                        (h = b.barHeight),
                        (u = b.x),
                        (d = b.barWidth),
                        (l = b.xDivision),
                        (c = b.zeroH),
                        x.push(u + d / 2);
                      for (
                        var y = a.group({
                            class: "apexcharts-datalabels",
                            "data:realIndex": m,
                          }),
                          w = function (e) {
                            var a = i.barHelpers.getStrokeWidth(r, e, m),
                              o = i.drawBoxPaths({
                                indexes: { i: r, j: e, realIndex: m },
                                x: u,
                                y: f,
                                xDivision: l,
                                barWidth: d,
                                zeroH: c,
                                strokeWidth: a,
                                elSeries: v,
                              });
                            (f = o.y),
                              (u = o.x),
                              e > 0 && x.push(u + d / 2),
                              g.push(f),
                              o.pathTo.forEach(function (l, c) {
                                var p =
                                    !i.isBoxPlot &&
                                    i.candlestickOptions.wick.useFillColor
                                      ? o.color[c]
                                      : n.globals.stroke.colors[r],
                                  g = s.fillPath({
                                    seriesNumber: m,
                                    dataPointIndex: e,
                                    color: o.color[c],
                                    value: t[r][e],
                                  });
                                i.renderSeries({
                                  realIndex: m,
                                  pathFill: g,
                                  lineFill: p,
                                  j: e,
                                  i: r,
                                  pathFrom: o.pathFrom,
                                  pathTo: l,
                                  strokeWidth: a,
                                  elSeries: v,
                                  x: u,
                                  y: f,
                                  series: t,
                                  barHeight: h,
                                  barWidth: d,
                                  elDataLabelsWrap: y,
                                  visibleSeries: i.visibleI,
                                  type: n.config.chart.type,
                                });
                              });
                          },
                          k = 0;
                        k < n.globals.dataPoints;
                        k++
                      )
                        w(k);
                      (n.globals.seriesXvalues[m] = x),
                        (n.globals.seriesYvalues[m] = g),
                        o.add(v);
                    },
                    c = 0;
                  c < t.length;
                  c++
                )
                  l(c);
                return o;
              },
            },
            {
              key: "drawBoxPaths",
              value: function (t) {
                var e = t.indexes,
                  i = t.x;
                t.y;
                var n = t.xDivision,
                  a = t.barWidth,
                  s = t.zeroH,
                  r = t.strokeWidth,
                  o = this.w,
                  l = new m(this.ctx),
                  c = e.i,
                  h = e.j,
                  d = !0,
                  u = o.config.plotOptions.candlestick.colors.upward,
                  f = o.config.plotOptions.candlestick.colors.downward,
                  p = "";
                this.isBoxPlot &&
                  (p = [
                    this.boxOptions.colors.lower,
                    this.boxOptions.colors.upper,
                  ]);
                var g = this.yRatio[this.yaxisIndex],
                  x = e.realIndex,
                  v = this.getOHLCValue(x, h),
                  b = s,
                  y = s;
                v.o > v.c && (d = !1);
                var w = Math.min(v.o, v.c),
                  k = Math.max(v.o, v.c),
                  A = v.m;
                o.globals.isXNumeric &&
                  (i =
                    (o.globals.seriesX[x][h] - o.globals.minX) / this.xRatio -
                    a / 2);
                var S = i + a * this.visibleI;
                void 0 === this.series[c][h] || null === this.series[c][h]
                  ? ((w = s), (k = s))
                  : ((w = s - w / g),
                    (k = s - k / g),
                    (b = s - v.h / g),
                    (y = s - v.l / g),
                    (A = s - v.m / g));
                var C = l.move(S, s),
                  T = l.move(S + a / 2, w);
                return (
                  o.globals.previousPaths.length > 0 &&
                    (T = this.getPreviousPath(x, h, !0)),
                  (C = this.isBoxPlot
                    ? [
                        l.move(S, w) +
                          l.line(S + a / 2, w) +
                          l.line(S + a / 2, b) +
                          l.line(S + a / 4, b) +
                          l.line(S + a - a / 4, b) +
                          l.line(S + a / 2, b) +
                          l.line(S + a / 2, w) +
                          l.line(S + a, w) +
                          l.line(S + a, A) +
                          l.line(S, A) +
                          l.line(S, w + r / 2),
                        l.move(S, A) +
                          l.line(S + a, A) +
                          l.line(S + a, k) +
                          l.line(S + a / 2, k) +
                          l.line(S + a / 2, y) +
                          l.line(S + a - a / 4, y) +
                          l.line(S + a / 4, y) +
                          l.line(S + a / 2, y) +
                          l.line(S + a / 2, k) +
                          l.line(S, k) +
                          l.line(S, A) +
                          "z",
                      ]
                    : [
                        l.move(S, k) +
                          l.line(S + a / 2, k) +
                          l.line(S + a / 2, b) +
                          l.line(S + a / 2, k) +
                          l.line(S + a, k) +
                          l.line(S + a, w) +
                          l.line(S + a / 2, w) +
                          l.line(S + a / 2, y) +
                          l.line(S + a / 2, w) +
                          l.line(S, w) +
                          l.line(S, k - r / 2),
                      ]),
                  (T += l.move(S, w)),
                  o.globals.isXNumeric || (i += n),
                  {
                    pathTo: C,
                    pathFrom: T,
                    x: i,
                    y: k,
                    barXPosition: S,
                    color: this.isBoxPlot ? p : d ? [u] : [f],
                  }
                );
              },
            },
            {
              key: "getOHLCValue",
              value: function (t, e) {
                var i = this.w;
                return {
                  o: this.isBoxPlot
                    ? i.globals.seriesCandleH[t][e]
                    : i.globals.seriesCandleO[t][e],
                  h: this.isBoxPlot
                    ? i.globals.seriesCandleO[t][e]
                    : i.globals.seriesCandleH[t][e],
                  m: i.globals.seriesCandleM[t][e],
                  l: this.isBoxPlot
                    ? i.globals.seriesCandleC[t][e]
                    : i.globals.seriesCandleL[t][e],
                  c: this.isBoxPlot
                    ? i.globals.seriesCandleL[t][e]
                    : i.globals.seriesCandleC[t][e],
                };
              },
            },
          ]),
          a
        );
      })(O),
      yt = (function () {
        function t(i) {
          e(this, t), (this.ctx = i), (this.w = i.w);
        }
        return (
          n(t, [
            {
              key: "checkColorRange",
              value: function () {
                var t = this.w,
                  e = !1,
                  i = t.config.plotOptions[t.config.chart.type];
                return (
                  i.colorScale.ranges.length > 0 &&
                    i.colorScale.ranges.map(function (t, i) {
                      t.from <= 0 && (e = !0);
                    }),
                  e
                );
              },
            },
            {
              key: "getShadeColor",
              value: function (t, e, i, n) {
                var a = this.w,
                  s = 1,
                  r = a.config.plotOptions[t].shadeIntensity,
                  o = this.determineColor(t, e, i);
                a.globals.hasNegs || n
                  ? (s = a.config.plotOptions[t].reverseNegativeShade
                      ? o.percent < 0
                        ? (o.percent / 100) * (1.25 * r)
                        : (1 - o.percent / 100) * (1.25 * r)
                      : o.percent <= 0
                      ? 1 - (1 + o.percent / 100) * r
                      : (1 - o.percent / 100) * r)
                  : ((s = 1 - o.percent / 100),
                    "treemap" === t &&
                      (s = (1 - o.percent / 100) * (1.25 * r)));
                var l = o.color,
                  c = new p();
                return (
                  a.config.plotOptions[t].enableShades &&
                    (l =
                      "dark" === this.w.config.theme.mode
                        ? p.hexToRgba(
                            c.shadeColor(-1 * s, o.color),
                            a.config.fill.opacity
                          )
                        : p.hexToRgba(
                            c.shadeColor(s, o.color),
                            a.config.fill.opacity
                          )),
                  { color: l, colorProps: o }
                );
              },
            },
            {
              key: "determineColor",
              value: function (t, e, i) {
                var n = this.w,
                  a = n.globals.series[e][i],
                  s = n.config.plotOptions[t],
                  r = s.colorScale.inverse ? i : e;
                n.config.plotOptions[t].distributed && (r = i);
                var o = n.globals.colors[r],
                  l = null,
                  c = Math.min.apply(Math, u(n.globals.series[e])),
                  h = Math.max.apply(Math, u(n.globals.series[e]));
                s.distributed ||
                  "heatmap" !== t ||
                  ((c = n.globals.minY), (h = n.globals.maxY)),
                  void 0 !== s.colorScale.min &&
                    ((c =
                      s.colorScale.min < n.globals.minY
                        ? s.colorScale.min
                        : n.globals.minY),
                    (h =
                      s.colorScale.max > n.globals.maxY
                        ? s.colorScale.max
                        : n.globals.maxY));
                var d = Math.abs(h) + Math.abs(c),
                  f = (100 * a) / (0 === d ? d - 1e-6 : d);
                return (
                  s.colorScale.ranges.length > 0 &&
                    s.colorScale.ranges.map(function (t, e) {
                      if (a >= t.from && a <= t.to) {
                        (o = t.color),
                          (l = t.foreColor ? t.foreColor : null),
                          (c = t.from),
                          (h = t.to);
                        var i = Math.abs(h) + Math.abs(c);
                        f = (100 * a) / (0 === i ? i - 1e-6 : i);
                      }
                    }),
                  { color: o, foreColor: l, percent: f }
                );
              },
            },
            {
              key: "calculateDataLabels",
              value: function (t) {
                var e = t.text,
                  i = t.x,
                  n = t.y,
                  a = t.i,
                  s = t.j,
                  r = t.colorProps,
                  o = t.fontSize,
                  l = this.w.config.dataLabels,
                  c = new m(this.ctx),
                  h = new L(this.ctx),
                  d = null;
                if (l.enabled) {
                  d = c.group({ class: "apexcharts-data-labels" });
                  var u = l.offsetX,
                    f = l.offsetY,
                    p = i + u,
                    g = n + parseFloat(l.style.fontSize) / 3 + f;
                  h.plotDataLabelsText({
                    x: p,
                    y: g,
                    text: e,
                    i: a,
                    j: s,
                    color: r.foreColor,
                    parent: d,
                    fontSize: o,
                    dataLabelsConfig: l,
                  });
                }
                return d;
              },
            },
            {
              key: "addListeners",
              value: function (t) {
                var e = new m(this.ctx);
                t.node.addEventListener(
                  "mouseenter",
                  e.pathMouseEnter.bind(this, t)
                ),
                  t.node.addEventListener(
                    "mouseleave",
                    e.pathMouseLeave.bind(this, t)
                  ),
                  t.node.addEventListener(
                    "mousedown",
                    e.pathMouseDown.bind(this, t)
                  );
              },
            },
          ]),
          t
        );
      })(),
      wt = (function () {
        function t(i, n) {
          e(this, t),
            (this.ctx = i),
            (this.w = i.w),
            (this.xRatio = n.xRatio),
            (this.yRatio = n.yRatio),
            (this.dynamicAnim =
              this.w.config.chart.animations.dynamicAnimation),
            (this.helpers = new yt(i)),
            (this.rectRadius = this.w.config.plotOptions.heatmap.radius),
            (this.strokeWidth = this.w.config.stroke.show
              ? this.w.config.stroke.width
              : 0);
        }
        return (
          n(t, [
            {
              key: "draw",
              value: function (t) {
                var e = this.w,
                  i = new m(this.ctx),
                  n = i.group({ class: "apexcharts-heatmap" });
                n.attr(
                  "clip-path",
                  "url(#gridRectMask".concat(e.globals.cuid, ")")
                );
                var a = e.globals.gridWidth / e.globals.dataPoints,
                  s = e.globals.gridHeight / e.globals.series.length,
                  r = 0,
                  o = !1;
                this.negRange = this.helpers.checkColorRange();
                var l = t.slice();
                e.config.yaxis[0].reversed && ((o = !0), l.reverse());
                for (
                  var c = o ? 0 : l.length - 1;
                  o ? c < l.length : c >= 0;
                  o ? c++ : c--
                ) {
                  var h = i.group({
                    class: "apexcharts-series apexcharts-heatmap-series",
                    seriesName: p.escapeString(e.globals.seriesNames[c]),
                    rel: c + 1,
                    "data:realIndex": c,
                  });
                  if (
                    (this.ctx.series.addCollapsedClassToSeries(h, c),
                    e.config.chart.dropShadow.enabled)
                  ) {
                    var d = e.config.chart.dropShadow;
                    new x(this.ctx).dropShadow(h, d, c);
                  }
                  for (
                    var u = 0,
                      f = e.config.plotOptions.heatmap.shadeIntensity,
                      g = 0;
                    g < l[c].length;
                    g++
                  ) {
                    var v = this.helpers.getShadeColor(
                        e.config.chart.type,
                        c,
                        g,
                        this.negRange
                      ),
                      b = v.color,
                      y = v.colorProps;
                    "image" === e.config.fill.type &&
                      (b = new T(this.ctx).fillPath({
                        seriesNumber: c,
                        dataPointIndex: g,
                        opacity: e.globals.hasNegs
                          ? y.percent < 0
                            ? 1 - (1 + y.percent / 100)
                            : f + y.percent / 100
                          : y.percent / 100,
                        patternID: p.randomId(),
                        width: e.config.fill.image.width
                          ? e.config.fill.image.width
                          : a,
                        height: e.config.fill.image.height
                          ? e.config.fill.image.height
                          : s,
                      }));
                    var w = this.rectRadius,
                      k = i.drawRect(u, r, a, s, w);
                    if (
                      (k.attr({ cx: u, cy: r }),
                      k.node.classList.add("apexcharts-heatmap-rect"),
                      h.add(k),
                      k.attr({
                        fill: b,
                        i: c,
                        index: c,
                        j: g,
                        val: l[c][g],
                        "stroke-width": this.strokeWidth,
                        stroke: e.config.plotOptions.heatmap
                          .useFillColorAsStroke
                          ? b
                          : e.globals.stroke.colors[0],
                        color: b,
                      }),
                      this.helpers.addListeners(k),
                      e.config.chart.animations.enabled &&
                        !e.globals.dataChanged)
                    ) {
                      var A = 1;
                      e.globals.resized ||
                        (A = e.config.chart.animations.speed),
                        this.animateHeatMap(k, u, r, a, s, A);
                    }
                    if (e.globals.dataChanged) {
                      var S = 1;
                      if (this.dynamicAnim.enabled && e.globals.shouldAnimate) {
                        S = this.dynamicAnim.speed;
                        var C =
                          e.globals.previousPaths[c] &&
                          e.globals.previousPaths[c][g] &&
                          e.globals.previousPaths[c][g].color;
                        C || (C = "rgba(255, 255, 255, 0)"),
                          this.animateHeatColor(
                            k,
                            p.isColorHex(C) ? C : p.rgb2hex(C),
                            p.isColorHex(b) ? b : p.rgb2hex(b),
                            S
                          );
                      }
                    }
                    var E = (0, e.config.dataLabels.formatter)(
                        e.globals.series[c][g],
                        {
                          value: e.globals.series[c][g],
                          seriesIndex: c,
                          dataPointIndex: g,
                          w: e,
                        }
                      ),
                      _ = this.helpers.calculateDataLabels({
                        text: E,
                        x: u + a / 2,
                        y: r + s / 2,
                        i: c,
                        j: g,
                        colorProps: y,
                        series: l,
                      });
                    null !== _ && h.add(_), (u += a);
                  }
                  (r += s), n.add(h);
                }
                var L = e.globals.yAxisScale[0].result.slice();
                e.config.yaxis[0].reversed ? L.unshift("") : L.push(""),
                  (e.globals.yAxisScale[0].result = L);
                var P = e.globals.gridHeight / e.globals.series.length;
                return (e.config.yaxis[0].labels.offsetY = -P / 2), n;
              },
            },
            {
              key: "animateHeatMap",
              value: function (t, e, i, n, a, s) {
                var r = new g(this.ctx);
                r.animateRect(
                  t,
                  { x: e + n / 2, y: i + a / 2, width: 0, height: 0 },
                  { x: e, y: i, width: n, height: a },
                  s,
                  function () {
                    r.animationCompleted(t);
                  }
                );
              },
            },
            {
              key: "animateHeatColor",
              value: function (t, e, i, n) {
                t.attr({ fill: e }).animate(n).attr({ fill: i });
              },
            },
          ]),
          t
        );
      })(),
      kt = (function () {
        function t(i) {
          e(this, t), (this.ctx = i), (this.w = i.w);
        }
        return (
          n(t, [
            {
              key: "drawYAxisTexts",
              value: function (t, e, i, n) {
                var a = this.w,
                  s = a.config.yaxis[0],
                  r = a.globals.yLabelFormatters[0];
                return new m(this.ctx).drawText({
                  x: t + s.labels.offsetX,
                  y: e + s.labels.offsetY,
                  text: r(n, i),
                  textAnchor: "middle",
                  fontSize: s.labels.style.fontSize,
                  fontFamily: s.labels.style.fontFamily,
                  foreColor: Array.isArray(s.labels.style.colors)
                    ? s.labels.style.colors[i]
                    : s.labels.style.colors,
                });
              },
            },
          ]),
          t
        );
      })(),
      At = (function () {
        function t(i) {
          e(this, t), (this.ctx = i), (this.w = i.w);
          var n = this.w;
          (this.chartType = this.w.config.chart.type),
            (this.initialAnim = this.w.config.chart.animations.enabled),
            (this.dynamicAnim =
              this.initialAnim &&
              this.w.config.chart.animations.dynamicAnimation.enabled),
            (this.animBeginArr = [0]),
            (this.animDur = 0),
            (this.donutDataLabels = this.w.config.plotOptions.pie.donut.labels),
            (this.lineColorArr =
              void 0 !== n.globals.stroke.colors
                ? n.globals.stroke.colors
                : n.globals.colors),
            (this.defaultSize = Math.min(
              n.globals.gridWidth,
              n.globals.gridHeight
            )),
            (this.centerY = this.defaultSize / 2),
            (this.centerX = n.globals.gridWidth / 2),
            "radialBar" === n.config.chart.type
              ? (this.fullAngle = 360)
              : (this.fullAngle = Math.abs(
                  n.config.plotOptions.pie.endAngle -
                    n.config.plotOptions.pie.startAngle
                )),
            (this.initialAngle =
              n.config.plotOptions.pie.startAngle % this.fullAngle),
            (n.globals.radialSize =
              this.defaultSize / 2.05 -
              n.config.stroke.width -
              (n.config.chart.sparkline.enabled
                ? 0
                : n.config.chart.dropShadow.blur)),
            (this.donutSize =
              (n.globals.radialSize *
                parseInt(n.config.plotOptions.pie.donut.size, 10)) /
              100),
            (this.maxY = 0),
            (this.sliceLabels = []),
            (this.sliceSizes = []),
            (this.prevSectorAngleArr = []);
        }
        return (
          n(t, [
            {
              key: "draw",
              value: function (t) {
                var e = this,
                  i = this.w,
                  n = new m(this.ctx);
                if (
                  ((this.ret = n.group({ class: "apexcharts-pie" })),
                  i.globals.noData)
                )
                  return this.ret;
                for (var a = 0, s = 0; s < t.length; s++)
                  a += p.negToZero(t[s]);
                var r = [],
                  o = n.group();
                0 === a && (a = 1e-5),
                  t.forEach(function (t) {
                    e.maxY = Math.max(e.maxY, t);
                  }),
                  i.config.yaxis[0].max && (this.maxY = i.config.yaxis[0].max),
                  "back" === i.config.grid.position &&
                    "polarArea" === this.chartType &&
                    this.drawPolarElements(this.ret);
                for (var l = 0; l < t.length; l++) {
                  var c = (this.fullAngle * p.negToZero(t[l])) / a;
                  r.push(c),
                    "polarArea" === this.chartType
                      ? ((r[l] = this.fullAngle / t.length),
                        this.sliceSizes.push(
                          (i.globals.radialSize * t[l]) / this.maxY
                        ))
                      : this.sliceSizes.push(i.globals.radialSize);
                }
                if (i.globals.dataChanged) {
                  for (
                    var h, d = 0, u = 0;
                    u < i.globals.previousPaths.length;
                    u++
                  )
                    d += p.negToZero(i.globals.previousPaths[u]);
                  for (var f = 0; f < i.globals.previousPaths.length; f++)
                    (h =
                      (this.fullAngle *
                        p.negToZero(i.globals.previousPaths[f])) /
                      d),
                      this.prevSectorAngleArr.push(h);
                }
                this.donutSize < 0 && (this.donutSize = 0);
                var g = i.config.plotOptions.pie.customScale,
                  x = i.globals.gridWidth / 2,
                  v = i.globals.gridHeight / 2,
                  b = x - (i.globals.gridWidth / 2) * g,
                  y = v - (i.globals.gridHeight / 2) * g;
                if ("donut" === this.chartType) {
                  var w = n.drawCircle(this.donutSize);
                  w.attr({
                    cx: this.centerX,
                    cy: this.centerY,
                    fill: i.config.plotOptions.pie.donut.background
                      ? i.config.plotOptions.pie.donut.background
                      : "transparent",
                  }),
                    o.add(w);
                }
                var k = this.drawArcs(r, t);
                if (
                  (this.sliceLabels.forEach(function (t) {
                    k.add(t);
                  }),
                  o.attr({
                    transform: "translate("
                      .concat(b, ", ")
                      .concat(y, ") scale(")
                      .concat(g, ")"),
                  }),
                  o.add(k),
                  this.ret.add(o),
                  this.donutDataLabels.show)
                ) {
                  var A = this.renderInnerDataLabels(this.donutDataLabels, {
                    hollowSize: this.donutSize,
                    centerX: this.centerX,
                    centerY: this.centerY,
                    opacity: this.donutDataLabels.show,
                    translateX: b,
                    translateY: y,
                  });
                  this.ret.add(A);
                }
                return (
                  "front" === i.config.grid.position &&
                    "polarArea" === this.chartType &&
                    this.drawPolarElements(this.ret),
                  this.ret
                );
              },
            },
            {
              key: "drawArcs",
              value: function (t, e) {
                var i = this.w,
                  n = new x(this.ctx),
                  a = new m(this.ctx),
                  s = new T(this.ctx),
                  r = a.group({ class: "apexcharts-slices" }),
                  o = this.initialAngle,
                  l = this.initialAngle,
                  c = this.initialAngle,
                  h = this.initialAngle;
                this.strokeWidth = i.config.stroke.show
                  ? i.config.stroke.width
                  : 0;
                for (var d = 0; d < t.length; d++) {
                  var u = a.group({
                    class: "apexcharts-series apexcharts-pie-series",
                    seriesName: p.escapeString(i.globals.seriesNames[d]),
                    rel: d + 1,
                    "data:realIndex": d,
                  });
                  r.add(u),
                    (l = h),
                    (c = (o = c) + t[d]),
                    (h = l + this.prevSectorAngleArr[d]);
                  var f = c < o ? this.fullAngle + c - o : c - o,
                    g = s.fillPath({
                      seriesNumber: d,
                      size: this.sliceSizes[d],
                      value: e[d],
                    }),
                    v = this.getChangedPath(l, h),
                    b = a.drawPath({
                      d: v,
                      stroke: Array.isArray(this.lineColorArr)
                        ? this.lineColorArr[d]
                        : this.lineColorArr,
                      strokeWidth: 0,
                      fill: g,
                      fillOpacity: i.config.fill.opacity,
                      classes: "apexcharts-pie-area apexcharts-"
                        .concat(this.chartType.toLowerCase(), "-slice-")
                        .concat(d),
                    });
                  if (
                    (b.attr({ index: 0, j: d }),
                    n.setSelectionFilter(b, 0, d),
                    i.config.chart.dropShadow.enabled)
                  ) {
                    var y = i.config.chart.dropShadow;
                    n.dropShadow(b, y, d);
                  }
                  this.addListeners(b, this.donutDataLabels),
                    m.setAttrs(b.node, {
                      "data:angle": f,
                      "data:startAngle": o,
                      "data:strokeWidth": this.strokeWidth,
                      "data:value": e[d],
                    });
                  var w = { x: 0, y: 0 };
                  "pie" === this.chartType || "polarArea" === this.chartType
                    ? (w = p.polarToCartesian(
                        this.centerX,
                        this.centerY,
                        i.globals.radialSize / 1.25 +
                          i.config.plotOptions.pie.dataLabels.offset,
                        (o + f / 2) % this.fullAngle
                      ))
                    : "donut" === this.chartType &&
                      (w = p.polarToCartesian(
                        this.centerX,
                        this.centerY,
                        (i.globals.radialSize + this.donutSize) / 2 +
                          i.config.plotOptions.pie.dataLabels.offset,
                        (o + f / 2) % this.fullAngle
                      )),
                    u.add(b);
                  var k = 0;
                  if (
                    (!this.initialAnim ||
                    i.globals.resized ||
                    i.globals.dataChanged
                      ? this.animBeginArr.push(0)
                      : (0 ==
                          (k =
                            (f / this.fullAngle) *
                            i.config.chart.animations.speed) && (k = 1),
                        (this.animDur = k + this.animDur),
                        this.animBeginArr.push(this.animDur)),
                    this.dynamicAnim && i.globals.dataChanged
                      ? this.animatePaths(b, {
                          size: this.sliceSizes[d],
                          endAngle: c,
                          startAngle: o,
                          prevStartAngle: l,
                          prevEndAngle: h,
                          animateStartingPos: !0,
                          i: d,
                          animBeginArr: this.animBeginArr,
                          shouldSetPrevPaths: !0,
                          dur: i.config.chart.animations.dynamicAnimation.speed,
                        })
                      : this.animatePaths(b, {
                          size: this.sliceSizes[d],
                          endAngle: c,
                          startAngle: o,
                          i: d,
                          totalItems: t.length - 1,
                          animBeginArr: this.animBeginArr,
                          dur: k,
                        }),
                    i.config.plotOptions.pie.expandOnClick &&
                      "polarArea" !== this.chartType &&
                      b.click(this.pieClicked.bind(this, d)),
                    void 0 !== i.globals.selectedDataPoints[0] &&
                      i.globals.selectedDataPoints[0].indexOf(d) > -1 &&
                      this.pieClicked(d),
                    i.config.dataLabels.enabled)
                  ) {
                    var A = w.x,
                      S = w.y,
                      C = (100 * f) / this.fullAngle + "%";
                    if (
                      0 !== f &&
                      i.config.plotOptions.pie.dataLabels.minAngleToShowLabel <
                        t[d]
                    ) {
                      var E = i.config.dataLabels.formatter;
                      void 0 !== E &&
                        (C = E(i.globals.seriesPercent[d][0], {
                          seriesIndex: d,
                          w: i,
                        }));
                      var _ = i.globals.dataLabels.style.colors[d],
                        L = a.group({ class: "apexcharts-datalabels" }),
                        P = a.drawText({
                          x: A,
                          y: S,
                          text: C,
                          textAnchor: "middle",
                          fontSize: i.config.dataLabels.style.fontSize,
                          fontFamily: i.config.dataLabels.style.fontFamily,
                          fontWeight: i.config.dataLabels.style.fontWeight,
                          foreColor: _,
                        });
                      if ((L.add(P), i.config.dataLabels.dropShadow.enabled)) {
                        var M = i.config.dataLabels.dropShadow;
                        n.dropShadow(P, M);
                      }
                      P.node.classList.add("apexcharts-pie-label"),
                        i.config.chart.animations.animate &&
                          !1 === i.globals.resized &&
                          (P.node.classList.add("apexcharts-pie-label-delay"),
                          (P.node.style.animationDelay =
                            i.config.chart.animations.speed / 940 + "s")),
                        this.sliceLabels.push(L);
                    }
                  }
                }
                return r;
              },
            },
            {
              key: "addListeners",
              value: function (t, e) {
                var i = new m(this.ctx);
                t.node.addEventListener(
                  "mouseenter",
                  i.pathMouseEnter.bind(this, t)
                ),
                  t.node.addEventListener(
                    "mouseleave",
                    i.pathMouseLeave.bind(this, t)
                  ),
                  t.node.addEventListener(
                    "mouseleave",
                    this.revertDataLabelsInner.bind(this, t.node, e)
                  ),
                  t.node.addEventListener(
                    "mousedown",
                    i.pathMouseDown.bind(this, t)
                  ),
                  this.donutDataLabels.total.showAlways ||
                    (t.node.addEventListener(
                      "mouseenter",
                      this.printDataLabelsInner.bind(this, t.node, e)
                    ),
                    t.node.addEventListener(
                      "mousedown",
                      this.printDataLabelsInner.bind(this, t.node, e)
                    ));
              },
            },
            {
              key: "animatePaths",
              value: function (t, e) {
                var i = this.w,
                  n =
                    e.endAngle < e.startAngle
                      ? this.fullAngle + e.endAngle - e.startAngle
                      : e.endAngle - e.startAngle,
                  a = n,
                  s = e.startAngle,
                  r = e.startAngle;
                void 0 !== e.prevStartAngle &&
                  void 0 !== e.prevEndAngle &&
                  ((s = e.prevEndAngle),
                  (a =
                    e.prevEndAngle < e.prevStartAngle
                      ? this.fullAngle + e.prevEndAngle - e.prevStartAngle
                      : e.prevEndAngle - e.prevStartAngle)),
                  e.i === i.config.series.length - 1 &&
                    (n + r > this.fullAngle
                      ? (e.endAngle = e.endAngle - (n + r))
                      : n + r < this.fullAngle &&
                        (e.endAngle = e.endAngle + (this.fullAngle - (n + r)))),
                  n === this.fullAngle && (n = this.fullAngle - 0.01),
                  this.animateArc(t, s, r, n, a, e);
              },
            },
            {
              key: "animateArc",
              value: function (t, e, i, n, a, s) {
                var r,
                  o = this,
                  l = this.w,
                  c = new g(this.ctx),
                  h = s.size;
                (isNaN(e) || isNaN(a)) && ((e = i), (a = n), (s.dur = 0));
                var d = n,
                  u = i,
                  f = e < i ? this.fullAngle + e - i : e - i;
                l.globals.dataChanged &&
                  s.shouldSetPrevPaths &&
                  s.prevEndAngle &&
                  ((r = o.getPiePath({
                    me: o,
                    startAngle: s.prevStartAngle,
                    angle:
                      s.prevEndAngle < s.prevStartAngle
                        ? this.fullAngle + s.prevEndAngle - s.prevStartAngle
                        : s.prevEndAngle - s.prevStartAngle,
                    size: h,
                  })),
                  t.attr({ d: r })),
                  0 !== s.dur
                    ? t
                        .animate(s.dur, l.globals.easing, s.animBeginArr[s.i])
                        .afterAll(function () {
                          ("pie" !== o.chartType &&
                            "donut" !== o.chartType &&
                            "polarArea" !== o.chartType) ||
                            this.animate(
                              l.config.chart.animations.dynamicAnimation.speed
                            ).attr({ "stroke-width": o.strokeWidth }),
                            s.i === l.config.series.length - 1 &&
                              c.animationCompleted(t);
                        })
                        .during(function (l) {
                          (d = f + (n - f) * l),
                            s.animateStartingPos &&
                              ((d = a + (n - a) * l),
                              (u = e - a + (i - (e - a)) * l)),
                            (r = o.getPiePath({
                              me: o,
                              startAngle: u,
                              angle: d,
                              size: h,
                            })),
                            t.node.setAttribute("data:pathOrig", r),
                            t.attr({ d: r });
                        })
                    : ((r = o.getPiePath({
                        me: o,
                        startAngle: u,
                        angle: n,
                        size: h,
                      })),
                      s.isTrack || (l.globals.animationEnded = !0),
                      t.node.setAttribute("data:pathOrig", r),
                      t.attr({ d: r, "stroke-width": o.strokeWidth }));
              },
            },
            {
              key: "pieClicked",
              value: function (t) {
                var e,
                  i = this.w,
                  n = this,
                  a =
                    n.sliceSizes[t] +
                    (i.config.plotOptions.pie.expandOnClick ? 4 : 0),
                  s = i.globals.dom.Paper.select(
                    ".apexcharts-"
                      .concat(n.chartType.toLowerCase(), "-slice-")
                      .concat(t)
                  ).members[0];
                if ("true" !== s.attr("data:pieClicked")) {
                  var r = i.globals.dom.baseEl.getElementsByClassName(
                    "apexcharts-pie-area"
                  );
                  Array.prototype.forEach.call(r, function (t) {
                    t.setAttribute("data:pieClicked", "false");
                    var e = t.getAttribute("data:pathOrig");
                    t.setAttribute("d", e);
                  }),
                    s.attr("data:pieClicked", "true");
                  var o = parseInt(s.attr("data:startAngle"), 10),
                    l = parseInt(s.attr("data:angle"), 10);
                  (e = n.getPiePath({
                    me: n,
                    startAngle: o,
                    angle: l,
                    size: a,
                  })),
                    360 !== l && s.plot(e);
                } else {
                  s.attr({ "data:pieClicked": "false" }),
                    this.revertDataLabelsInner(s.node, this.donutDataLabels);
                  var c = s.attr("data:pathOrig");
                  s.attr({ d: c });
                }
              },
            },
            {
              key: "getChangedPath",
              value: function (t, e) {
                var i = "";
                return (
                  this.dynamicAnim &&
                    this.w.globals.dataChanged &&
                    (i = this.getPiePath({
                      me: this,
                      startAngle: t,
                      angle: e - t,
                      size: this.size,
                    })),
                  i
                );
              },
            },
            {
              key: "getPiePath",
              value: function (t) {
                var e = t.me,
                  i = t.startAngle,
                  n = t.angle,
                  a = t.size,
                  s = i,
                  r = (Math.PI * (s - 90)) / 180,
                  o = n + i;
                Math.ceil(o) >=
                  this.fullAngle +
                    (this.w.config.plotOptions.pie.startAngle %
                      this.fullAngle) &&
                  (o =
                    this.fullAngle +
                    (this.w.config.plotOptions.pie.startAngle %
                      this.fullAngle) -
                    0.01),
                  Math.ceil(o) > this.fullAngle && (o -= this.fullAngle);
                var l = (Math.PI * (o - 90)) / 180,
                  c = e.centerX + a * Math.cos(r),
                  h = e.centerY + a * Math.sin(r),
                  d = e.centerX + a * Math.cos(l),
                  u = e.centerY + a * Math.sin(l),
                  f = p.polarToCartesian(e.centerX, e.centerY, e.donutSize, o),
                  g = p.polarToCartesian(e.centerX, e.centerY, e.donutSize, s),
                  x = n > 180 ? 1 : 0,
                  m = ["M", c, h, "A", a, a, 0, x, 1, d, u];
                return "donut" === e.chartType
                  ? []
                      .concat(m, [
                        "L",
                        f.x,
                        f.y,
                        "A",
                        e.donutSize,
                        e.donutSize,
                        0,
                        x,
                        0,
                        g.x,
                        g.y,
                        "L",
                        c,
                        h,
                        "z",
                      ])
                      .join(" ")
                  : "pie" === e.chartType || "polarArea" === e.chartType
                  ? []
                      .concat(m, ["L", e.centerX, e.centerY, "L", c, h])
                      .join(" ")
                  : [].concat(m).join(" ");
              },
            },
            {
              key: "drawPolarElements",
              value: function (t) {
                var e = this.w,
                  i = new G(this.ctx),
                  n = new m(this.ctx),
                  a = new kt(this.ctx),
                  s = n.group(),
                  r = n.group(),
                  o = i.niceScale(
                    0,
                    Math.ceil(this.maxY),
                    e.config.yaxis[0].tickAmount,
                    0,
                    !0
                  ),
                  l = o.result.reverse(),
                  c = o.result.length;
                this.maxY = o.niceMax;
                for (
                  var h = e.globals.radialSize, d = h / (c - 1), u = 0;
                  u < c - 1;
                  u++
                ) {
                  var f = n.drawCircle(h);
                  if (
                    (f.attr({
                      cx: this.centerX,
                      cy: this.centerY,
                      fill: "none",
                      "stroke-width":
                        e.config.plotOptions.polarArea.rings.strokeWidth,
                      stroke: e.config.plotOptions.polarArea.rings.strokeColor,
                    }),
                    e.config.yaxis[0].show)
                  ) {
                    var p = a.drawYAxisTexts(
                      this.centerX,
                      this.centerY -
                        h +
                        parseInt(e.config.yaxis[0].labels.style.fontSize, 10) /
                          2,
                      u,
                      l[u]
                    );
                    r.add(p);
                  }
                  s.add(f), (h -= d);
                }
                this.drawSpokes(t), t.add(s), t.add(r);
              },
            },
            {
              key: "renderInnerDataLabels",
              value: function (t, e) {
                var i = this.w,
                  n = new m(this.ctx),
                  a = n.group({
                    class: "apexcharts-datalabels-group",
                    transform: "translate("
                      .concat(e.translateX ? e.translateX : 0, ", ")
                      .concat(e.translateY ? e.translateY : 0, ") scale(")
                      .concat(i.config.plotOptions.pie.customScale, ")"),
                  }),
                  s = t.total.show;
                a.node.style.opacity = e.opacity;
                var r,
                  o,
                  l = e.centerX,
                  c = e.centerY;
                r =
                  void 0 === t.name.color ? i.globals.colors[0] : t.name.color;
                var h = t.name.fontSize,
                  d = t.name.fontFamily,
                  u = t.value.fontWeight;
                o =
                  void 0 === t.value.color
                    ? i.config.chart.foreColor
                    : t.value.color;
                var f = t.value.formatter,
                  p = "",
                  g = "";
                if (
                  (s
                    ? ((r = t.total.color),
                      (h = t.total.fontSize),
                      (d = t.total.fontFamily),
                      (u = t.total.fontWeight),
                      (g = t.total.label),
                      (p = t.total.formatter(i)))
                    : 1 === i.globals.series.length &&
                      ((p = f(i.globals.series[0], i)),
                      (g = i.globals.seriesNames[0])),
                  g && (g = t.name.formatter(g, t.total.show, i)),
                  t.name.show)
                ) {
                  var x = n.drawText({
                    x: l,
                    y: c + parseFloat(t.name.offsetY),
                    text: g,
                    textAnchor: "middle",
                    foreColor: r,
                    fontSize: h,
                    fontWeight: u,
                    fontFamily: d,
                  });
                  x.node.classList.add("apexcharts-datalabel-label"), a.add(x);
                }
                if (t.value.show) {
                  var v = t.name.show
                      ? parseFloat(t.value.offsetY) + 16
                      : t.value.offsetY,
                    b = n.drawText({
                      x: l,
                      y: c + v,
                      text: p,
                      textAnchor: "middle",
                      foreColor: o,
                      fontWeight: t.value.fontWeight,
                      fontSize: t.value.fontSize,
                      fontFamily: t.value.fontFamily,
                    });
                  b.node.classList.add("apexcharts-datalabel-value"), a.add(b);
                }
                return a;
              },
            },
            {
              key: "printInnerLabels",
              value: function (t, e, i, n) {
                var a,
                  s = this.w;
                n
                  ? (a =
                      void 0 === t.name.color
                        ? s.globals.colors[
                            parseInt(n.parentNode.getAttribute("rel"), 10) - 1
                          ]
                        : t.name.color)
                  : s.globals.series.length > 1 &&
                    t.total.show &&
                    (a = t.total.color);
                var r = s.globals.dom.baseEl.querySelector(
                    ".apexcharts-datalabel-label"
                  ),
                  o = s.globals.dom.baseEl.querySelector(
                    ".apexcharts-datalabel-value"
                  );
                (i = (0, t.value.formatter)(i, s)),
                  n ||
                    "function" != typeof t.total.formatter ||
                    (i = t.total.formatter(s));
                var l = e === t.total.label;
                (e = t.name.formatter(e, l, s)),
                  null !== r && (r.textContent = e),
                  null !== o && (o.textContent = i),
                  null !== r && (r.style.fill = a);
              },
            },
            {
              key: "printDataLabelsInner",
              value: function (t, e) {
                var i = this.w,
                  n = t.getAttribute("data:value"),
                  a =
                    i.globals.seriesNames[
                      parseInt(t.parentNode.getAttribute("rel"), 10) - 1
                    ];
                i.globals.series.length > 1 &&
                  this.printInnerLabels(e, a, n, t);
                var s = i.globals.dom.baseEl.querySelector(
                  ".apexcharts-datalabels-group"
                );
                null !== s && (s.style.opacity = 1);
              },
            },
            {
              key: "drawSpokes",
              value: function (t) {
                var e = this,
                  i = this.w,
                  n = new m(this.ctx),
                  a = i.config.plotOptions.polarArea.spokes;
                if (0 !== a.strokeWidth) {
                  for (
                    var s = [], r = 360 / i.globals.series.length, o = 0;
                    o < i.globals.series.length;
                    o++
                  )
                    s.push(
                      p.polarToCartesian(
                        this.centerX,
                        this.centerY,
                        i.globals.radialSize,
                        i.config.plotOptions.pie.startAngle + r * o
                      )
                    );
                  s.forEach(function (i, s) {
                    var r = n.drawLine(
                      i.x,
                      i.y,
                      e.centerX,
                      e.centerY,
                      Array.isArray(a.connectorColors)
                        ? a.connectorColors[s]
                        : a.connectorColors
                    );
                    t.add(r);
                  });
                }
              },
            },
            {
              key: "revertDataLabelsInner",
              value: function (t, e, i) {
                var n = this,
                  a = this.w,
                  s = a.globals.dom.baseEl.querySelector(
                    ".apexcharts-datalabels-group"
                  ),
                  r = !1,
                  o = a.globals.dom.baseEl.getElementsByClassName(
                    "apexcharts-pie-area"
                  ),
                  l = function (t) {
                    var i = t.makeSliceOut,
                      a = t.printLabel;
                    Array.prototype.forEach.call(o, function (t) {
                      "true" === t.getAttribute("data:pieClicked") &&
                        (i && (r = !0), a && n.printDataLabelsInner(t, e));
                    });
                  };
                if (
                  (l({ makeSliceOut: !0, printLabel: !1 }),
                  e.total.show && a.globals.series.length > 1)
                )
                  r && !e.total.showAlways
                    ? l({ makeSliceOut: !1, printLabel: !0 })
                    : this.printInnerLabels(
                        e,
                        e.total.label,
                        e.total.formatter(a)
                      );
                else if ((l({ makeSliceOut: !1, printLabel: !0 }), !r))
                  if (
                    a.globals.selectedDataPoints.length &&
                    a.globals.series.length > 1
                  )
                    if (a.globals.selectedDataPoints[0].length > 0) {
                      var c = a.globals.selectedDataPoints[0],
                        h = a.globals.dom.baseEl.querySelector(
                          ".apexcharts-"
                            .concat(this.chartType.toLowerCase(), "-slice-")
                            .concat(c)
                        );
                      this.printDataLabelsInner(h, e);
                    } else
                      s &&
                        a.globals.selectedDataPoints.length &&
                        0 === a.globals.selectedDataPoints[0].length &&
                        (s.style.opacity = 0);
                  else
                    s && a.globals.series.length > 1 && (s.style.opacity = 0);
              },
            },
          ]),
          t
        );
      })(),
      St = (function () {
        function t(i) {
          e(this, t),
            (this.ctx = i),
            (this.w = i.w),
            (this.chartType = this.w.config.chart.type),
            (this.initialAnim = this.w.config.chart.animations.enabled),
            (this.dynamicAnim =
              this.initialAnim &&
              this.w.config.chart.animations.dynamicAnimation.enabled),
            (this.animDur = 0);
          var n = this.w;
          (this.graphics = new m(this.ctx)),
            (this.lineColorArr =
              void 0 !== n.globals.stroke.colors
                ? n.globals.stroke.colors
                : n.globals.colors),
            (this.defaultSize =
              n.globals.svgHeight < n.globals.svgWidth
                ? n.globals.gridHeight + 1.5 * n.globals.goldenPadding
                : n.globals.gridWidth),
            (this.isLog = n.config.yaxis[0].logarithmic),
            (this.coreUtils = new y(this.ctx)),
            (this.maxValue = this.isLog
              ? this.coreUtils.getLogVal(n.globals.maxY, 0)
              : n.globals.maxY),
            (this.minValue = this.isLog
              ? this.coreUtils.getLogVal(this.w.globals.minY, 0)
              : n.globals.minY),
            (this.polygons = n.config.plotOptions.radar.polygons),
            (this.strokeWidth = n.config.stroke.show
              ? n.config.stroke.width
              : 0),
            (this.size =
              this.defaultSize / 2.1 -
              this.strokeWidth -
              n.config.chart.dropShadow.blur),
            n.config.xaxis.labels.show &&
              (this.size = this.size - n.globals.xAxisLabelsWidth / 1.75),
            void 0 !== n.config.plotOptions.radar.size &&
              (this.size = n.config.plotOptions.radar.size),
            (this.dataRadiusOfPercent = []),
            (this.dataRadius = []),
            (this.angleArr = []),
            (this.yaxisLabelsTextsPos = []);
        }
        return (
          n(t, [
            {
              key: "draw",
              value: function (t) {
                var e = this,
                  i = this.w,
                  n = new T(this.ctx),
                  a = [],
                  s = new L(this.ctx);
                t.length &&
                  (this.dataPointsLen =
                    t[i.globals.maxValsInArrayIndex].length),
                  (this.disAngle = (2 * Math.PI) / this.dataPointsLen);
                var o = i.globals.gridWidth / 2,
                  l = i.globals.gridHeight / 2,
                  c = o + i.config.plotOptions.radar.offsetX,
                  h = l + i.config.plotOptions.radar.offsetY,
                  d = this.graphics.group({
                    class: "apexcharts-radar-series apexcharts-plot-series",
                    transform: "translate("
                      .concat(c || 0, ", ")
                      .concat(h || 0, ")"),
                  }),
                  u = [],
                  f = null,
                  g = null;
                if (
                  ((this.yaxisLabels = this.graphics.group({
                    class: "apexcharts-yaxis",
                  })),
                  t.forEach(function (t, o) {
                    var l = t.length === i.globals.dataPoints,
                      c = e.graphics
                        .group()
                        .attr({
                          class: "apexcharts-series",
                          "data:longestSeries": l,
                          seriesName: p.escapeString(i.globals.seriesNames[o]),
                          rel: o + 1,
                          "data:realIndex": o,
                        });
                    (e.dataRadiusOfPercent[o] = []),
                      (e.dataRadius[o] = []),
                      (e.angleArr[o] = []),
                      t.forEach(function (t, i) {
                        var n = Math.abs(e.maxValue - e.minValue);
                        (t += Math.abs(e.minValue)),
                          e.isLog && (t = e.coreUtils.getLogVal(t, 0)),
                          (e.dataRadiusOfPercent[o][i] = t / n),
                          (e.dataRadius[o][i] =
                            e.dataRadiusOfPercent[o][i] * e.size),
                          (e.angleArr[o][i] = i * e.disAngle);
                      }),
                      (u = e.getDataPointsPos(e.dataRadius[o], e.angleArr[o]));
                    var h = e.createPaths(u, { x: 0, y: 0 });
                    (f = e.graphics.group({
                      class:
                        "apexcharts-series-markers-wrap apexcharts-element-hidden",
                    })),
                      (g = e.graphics.group({
                        class: "apexcharts-datalabels",
                        "data:realIndex": o,
                      })),
                      i.globals.delayedElements.push({ el: f.node, index: o });
                    var d = {
                        i: o,
                        realIndex: o,
                        animationDelay: o,
                        initialSpeed: i.config.chart.animations.speed,
                        dataChangeSpeed:
                          i.config.chart.animations.dynamicAnimation.speed,
                        className: "apexcharts-radar",
                        shouldClipToGrid: !1,
                        bindEventsOnPaths: !1,
                        stroke: i.globals.stroke.colors[o],
                        strokeLineCap: i.config.stroke.lineCap,
                      },
                      m = null;
                    i.globals.previousPaths.length > 0 &&
                      (m = e.getPreviousPath(o));
                    for (var v = 0; v < h.linePathsTo.length; v++) {
                      var b = e.graphics.renderPaths(
                        r(
                          r({}, d),
                          {},
                          {
                            pathFrom: null === m ? h.linePathsFrom[v] : m,
                            pathTo: h.linePathsTo[v],
                            strokeWidth: Array.isArray(e.strokeWidth)
                              ? e.strokeWidth[o]
                              : e.strokeWidth,
                            fill: "none",
                            drawShadow: !1,
                          }
                        )
                      );
                      c.add(b);
                      var y = n.fillPath({ seriesNumber: o }),
                        w = e.graphics.renderPaths(
                          r(
                            r({}, d),
                            {},
                            {
                              pathFrom: null === m ? h.areaPathsFrom[v] : m,
                              pathTo: h.areaPathsTo[v],
                              strokeWidth: 0,
                              fill: y,
                              drawShadow: !1,
                            }
                          )
                        );
                      if (i.config.chart.dropShadow.enabled) {
                        var k = new x(e.ctx),
                          A = i.config.chart.dropShadow;
                        k.dropShadow(
                          w,
                          Object.assign({}, A, { noUserSpaceOnUse: !0 }),
                          o
                        );
                      }
                      c.add(w);
                    }
                    t.forEach(function (t, n) {
                      var a = new E(e.ctx).getMarkerConfig(
                          "apexcharts-marker",
                          o,
                          n
                        ),
                        l = e.graphics.drawMarker(u[n].x, u[n].y, a);
                      l.attr("rel", n),
                        l.attr("j", n),
                        l.attr("index", o),
                        l.node.setAttribute("default-marker-size", a.pSize);
                      var h = e.graphics.group({
                        class: "apexcharts-series-markers",
                      });
                      h && h.add(l), f.add(h), c.add(f);
                      var d = i.config.dataLabels;
                      if (d.enabled) {
                        var p = d.formatter(i.globals.series[o][n], {
                          seriesIndex: o,
                          dataPointIndex: n,
                          w: i,
                        });
                        s.plotDataLabelsText({
                          x: u[n].x,
                          y: u[n].y,
                          text: p,
                          textAnchor: "middle",
                          i: o,
                          j: o,
                          parent: g,
                          offsetCorrection: !1,
                          dataLabelsConfig: r({}, d),
                        });
                      }
                      c.add(g);
                    }),
                      a.push(c);
                  }),
                  this.drawPolygons({ parent: d }),
                  i.config.xaxis.labels.show)
                ) {
                  var m = this.drawXAxisTexts();
                  d.add(m);
                }
                return (
                  a.forEach(function (t) {
                    d.add(t);
                  }),
                  d.add(this.yaxisLabels),
                  d
                );
              },
            },
            {
              key: "drawPolygons",
              value: function (t) {
                for (
                  var e = this,
                    i = this.w,
                    n = t.parent,
                    a = new kt(this.ctx),
                    s = i.globals.yAxisScale[0].result.reverse(),
                    r = s.length,
                    o = [],
                    l = this.size / (r - 1),
                    c = 0;
                  c < r;
                  c++
                )
                  o[c] = l * c;
                o.reverse();
                var h = [],
                  d = [];
                o.forEach(function (t, i) {
                  var n = p.getPolygonPos(t, e.dataPointsLen),
                    a = "";
                  n.forEach(function (t, n) {
                    if (0 === i) {
                      var s = e.graphics.drawLine(
                        t.x,
                        t.y,
                        0,
                        0,
                        Array.isArray(e.polygons.connectorColors)
                          ? e.polygons.connectorColors[n]
                          : e.polygons.connectorColors
                      );
                      d.push(s);
                    }
                    0 === n && e.yaxisLabelsTextsPos.push({ x: t.x, y: t.y }),
                      (a += t.x + "," + t.y + " ");
                  }),
                    h.push(a);
                }),
                  h.forEach(function (t, a) {
                    var s = e.polygons.strokeColors,
                      r = e.polygons.strokeWidth,
                      o = e.graphics.drawPolygon(
                        t,
                        Array.isArray(s) ? s[a] : s,
                        Array.isArray(r) ? r[a] : r,
                        i.globals.radarPolygons.fill.colors[a]
                      );
                    n.add(o);
                  }),
                  d.forEach(function (t) {
                    n.add(t);
                  }),
                  i.config.yaxis[0].show &&
                    this.yaxisLabelsTextsPos.forEach(function (t, i) {
                      var n = a.drawYAxisTexts(t.x, t.y, i, s[i]);
                      e.yaxisLabels.add(n);
                    });
              },
            },
            {
              key: "drawXAxisTexts",
              value: function () {
                var t = this,
                  e = this.w,
                  i = e.config.xaxis.labels,
                  n = this.graphics.group({ class: "apexcharts-xaxis" }),
                  a = p.getPolygonPos(this.size, this.dataPointsLen);
                return (
                  e.globals.labels.forEach(function (s, o) {
                    var l = e.config.xaxis.labels.formatter,
                      c = new L(t.ctx);
                    if (a[o]) {
                      var h = t.getTextPos(a[o], t.size),
                        d = l(s, { seriesIndex: -1, dataPointIndex: o, w: e });
                      c.plotDataLabelsText({
                        x: h.newX,
                        y: h.newY,
                        text: d,
                        textAnchor: h.textAnchor,
                        i: o,
                        j: o,
                        parent: n,
                        color:
                          Array.isArray(i.style.colors) && i.style.colors[o]
                            ? i.style.colors[o]
                            : "#a8a8a8",
                        dataLabelsConfig: r(
                          {
                            textAnchor: h.textAnchor,
                            dropShadow: { enabled: !1 },
                          },
                          i
                        ),
                        offsetCorrection: !1,
                      });
                    }
                  }),
                  n
                );
              },
            },
            {
              key: "createPaths",
              value: function (t, e) {
                var i = this,
                  n = [],
                  a = [],
                  s = [],
                  r = [];
                if (t.length) {
                  (a = [this.graphics.move(e.x, e.y)]),
                    (r = [this.graphics.move(e.x, e.y)]);
                  var o = this.graphics.move(t[0].x, t[0].y),
                    l = this.graphics.move(t[0].x, t[0].y);
                  t.forEach(function (e, n) {
                    (o += i.graphics.line(e.x, e.y)),
                      (l += i.graphics.line(e.x, e.y)),
                      n === t.length - 1 && ((o += "Z"), (l += "Z"));
                  }),
                    n.push(o),
                    s.push(l);
                }
                return {
                  linePathsFrom: a,
                  linePathsTo: n,
                  areaPathsFrom: r,
                  areaPathsTo: s,
                };
              },
            },
            {
              key: "getTextPos",
              value: function (t, e) {
                var i = "middle",
                  n = t.x,
                  a = t.y;
                return (
                  Math.abs(t.x) >= 10
                    ? t.x > 0
                      ? ((i = "start"), (n += 10))
                      : t.x < 0 && ((i = "end"), (n -= 10))
                    : (i = "middle"),
                  Math.abs(t.y) >= e - 10 &&
                    (t.y < 0 ? (a -= 10) : t.y > 0 && (a += 10)),
                  { textAnchor: i, newX: n, newY: a }
                );
              },
            },
            {
              key: "getPreviousPath",
              value: function (t) {
                for (
                  var e = this.w, i = null, n = 0;
                  n < e.globals.previousPaths.length;
                  n++
                ) {
                  var a = e.globals.previousPaths[n];
                  a.paths.length > 0 &&
                    parseInt(a.realIndex, 10) === parseInt(t, 10) &&
                    void 0 !== e.globals.previousPaths[n].paths[0] &&
                    (i = e.globals.previousPaths[n].paths[0].d);
                }
                return i;
              },
            },
            {
              key: "getDataPointsPos",
              value: function (t, e) {
                var i =
                  arguments.length > 2 && void 0 !== arguments[2]
                    ? arguments[2]
                    : this.dataPointsLen;
                (t = t || []), (e = e || []);
                for (var n = [], a = 0; a < i; a++) {
                  var s = {};
                  (s.x = t[a] * Math.sin(e[a])),
                    (s.y = -t[a] * Math.cos(e[a])),
                    n.push(s);
                }
                return n;
              },
            },
          ]),
          t
        );
      })(),
      Ct = (function (t) {
        o(a, t);
        var i = d(a);
        function a(t) {
          var n;
          e(this, a),
            ((n = i.call(this, t)).ctx = t),
            (n.w = t.w),
            (n.animBeginArr = [0]),
            (n.animDur = 0);
          var s = n.w;
          return (
            (n.startAngle = s.config.plotOptions.radialBar.startAngle),
            (n.endAngle = s.config.plotOptions.radialBar.endAngle),
            (n.totalAngle = Math.abs(
              s.config.plotOptions.radialBar.endAngle -
                s.config.plotOptions.radialBar.startAngle
            )),
            (n.trackStartAngle =
              s.config.plotOptions.radialBar.track.startAngle),
            (n.trackEndAngle = s.config.plotOptions.radialBar.track.endAngle),
            (n.radialDataLabels = s.config.plotOptions.radialBar.dataLabels),
            n.trackStartAngle || (n.trackStartAngle = n.startAngle),
            n.trackEndAngle || (n.trackEndAngle = n.endAngle),
            360 === n.endAngle && (n.endAngle = 359.99),
            (n.margin = parseInt(
              s.config.plotOptions.radialBar.track.margin,
              10
            )),
            n
          );
        }
        return (
          n(a, [
            {
              key: "draw",
              value: function (t) {
                var e = this.w,
                  i = new m(this.ctx),
                  n = i.group({ class: "apexcharts-radialbar" });
                if (e.globals.noData) return n;
                var a = i.group(),
                  s = this.defaultSize / 2,
                  r = e.globals.gridWidth / 2,
                  o = this.defaultSize / 2.05;
                e.config.chart.sparkline.enabled ||
                  (o =
                    o - e.config.stroke.width - e.config.chart.dropShadow.blur);
                var l = e.globals.fill.colors;
                if (e.config.plotOptions.radialBar.track.show) {
                  var c = this.drawTracks({
                    size: o,
                    centerX: r,
                    centerY: s,
                    colorArr: l,
                    series: t,
                  });
                  a.add(c);
                }
                var h = this.drawArcs({
                    size: o,
                    centerX: r,
                    centerY: s,
                    colorArr: l,
                    series: t,
                  }),
                  d = 360;
                e.config.plotOptions.radialBar.startAngle < 0 &&
                  (d = this.totalAngle);
                var u = (360 - d) / 360;
                if (
                  ((e.globals.radialSize = o - o * u),
                  this.radialDataLabels.value.show)
                ) {
                  var f = Math.max(
                    this.radialDataLabels.value.offsetY,
                    this.radialDataLabels.name.offsetY
                  );
                  e.globals.radialSize += f * u;
                }
                return (
                  a.add(h.g),
                  "front" === e.config.plotOptions.radialBar.hollow.position &&
                    (h.g.add(h.elHollow),
                    h.dataLabels && h.g.add(h.dataLabels)),
                  n.add(a),
                  n
                );
              },
            },
            {
              key: "drawTracks",
              value: function (t) {
                var e = this.w,
                  i = new m(this.ctx),
                  n = i.group({ class: "apexcharts-tracks" }),
                  a = new x(this.ctx),
                  s = new T(this.ctx),
                  r = this.getStrokeWidth(t);
                t.size = t.size - r / 2;
                for (var o = 0; o < t.series.length; o++) {
                  var l = i.group({
                    class: "apexcharts-radialbar-track apexcharts-track",
                  });
                  n.add(l),
                    l.attr({ rel: o + 1 }),
                    (t.size = t.size - r - this.margin);
                  var c = e.config.plotOptions.radialBar.track,
                    h = s.fillPath({
                      seriesNumber: 0,
                      size: t.size,
                      fillColors: Array.isArray(c.background)
                        ? c.background[o]
                        : c.background,
                      solid: !0,
                    }),
                    d = this.trackStartAngle,
                    u = this.trackEndAngle;
                  Math.abs(u) + Math.abs(d) >= 360 &&
                    (u = 360 - Math.abs(this.startAngle) - 0.1);
                  var f = i.drawPath({
                    d: "",
                    stroke: h,
                    strokeWidth: (r * parseInt(c.strokeWidth, 10)) / 100,
                    fill: "none",
                    strokeOpacity: c.opacity,
                    classes: "apexcharts-radialbar-area",
                  });
                  if (c.dropShadow.enabled) {
                    var p = c.dropShadow;
                    a.dropShadow(f, p);
                  }
                  l.add(f),
                    f.attr("id", "apexcharts-radialbarTrack-" + o),
                    this.animatePaths(f, {
                      centerX: t.centerX,
                      centerY: t.centerY,
                      endAngle: u,
                      startAngle: d,
                      size: t.size,
                      i: o,
                      totalItems: 2,
                      animBeginArr: 0,
                      dur: 0,
                      isTrack: !0,
                      easing: e.globals.easing,
                    });
                }
                return n;
              },
            },
            {
              key: "drawArcs",
              value: function (t) {
                var e = this.w,
                  i = new m(this.ctx),
                  n = new T(this.ctx),
                  a = new x(this.ctx),
                  s = i.group(),
                  r = this.getStrokeWidth(t);
                t.size = t.size - r / 2;
                var o = e.config.plotOptions.radialBar.hollow.background,
                  l =
                    t.size -
                    r * t.series.length -
                    this.margin * t.series.length -
                    (r *
                      parseInt(
                        e.config.plotOptions.radialBar.track.strokeWidth,
                        10
                      )) /
                      100 /
                      2,
                  c = l - e.config.plotOptions.radialBar.hollow.margin;
                void 0 !== e.config.plotOptions.radialBar.hollow.image &&
                  (o = this.drawHollowImage(t, s, l, o));
                var h = this.drawHollow({
                  size: c,
                  centerX: t.centerX,
                  centerY: t.centerY,
                  fill: o || "transparent",
                });
                if (e.config.plotOptions.radialBar.hollow.dropShadow.enabled) {
                  var d = e.config.plotOptions.radialBar.hollow.dropShadow;
                  a.dropShadow(h, d);
                }
                var u = 1;
                !this.radialDataLabels.total.show &&
                  e.globals.series.length > 1 &&
                  (u = 0);
                var f = null;
                this.radialDataLabels.show &&
                  (f = this.renderInnerDataLabels(this.radialDataLabels, {
                    hollowSize: l,
                    centerX: t.centerX,
                    centerY: t.centerY,
                    opacity: u,
                  })),
                  "back" === e.config.plotOptions.radialBar.hollow.position &&
                    (s.add(h), f && s.add(f));
                var g = !1;
                e.config.plotOptions.radialBar.inverseOrder && (g = !0);
                for (
                  var v = g ? t.series.length - 1 : 0;
                  g ? v >= 0 : v < t.series.length;
                  g ? v-- : v++
                ) {
                  var b = i.group({
                    class: "apexcharts-series apexcharts-radial-series",
                    seriesName: p.escapeString(e.globals.seriesNames[v]),
                  });
                  s.add(b),
                    b.attr({ rel: v + 1, "data:realIndex": v }),
                    this.ctx.series.addCollapsedClassToSeries(b, v),
                    (t.size = t.size - r - this.margin);
                  var y = n.fillPath({
                      seriesNumber: v,
                      size: t.size,
                      value: t.series[v],
                    }),
                    w = this.startAngle,
                    k = void 0,
                    A =
                      p.negToZero(t.series[v] > 100 ? 100 : t.series[v]) / 100,
                    S = Math.round(this.totalAngle * A) + this.startAngle,
                    C = void 0;
                  e.globals.dataChanged &&
                    ((k = this.startAngle),
                    (C =
                      Math.round(
                        (this.totalAngle *
                          p.negToZero(e.globals.previousPaths[v])) /
                          100
                      ) + k)),
                    Math.abs(S) + Math.abs(w) >= 360 && (S -= 0.01),
                    Math.abs(C) + Math.abs(k) >= 360 && (C -= 0.01);
                  var E = S - w,
                    _ = Array.isArray(e.config.stroke.dashArray)
                      ? e.config.stroke.dashArray[v]
                      : e.config.stroke.dashArray,
                    L = i.drawPath({
                      d: "",
                      stroke: y,
                      strokeWidth: r,
                      fill: "none",
                      fillOpacity: e.config.fill.opacity,
                      classes:
                        "apexcharts-radialbar-area apexcharts-radialbar-slice-" +
                        v,
                      strokeDashArray: _,
                    });
                  if (
                    (m.setAttrs(L.node, {
                      "data:angle": E,
                      "data:value": t.series[v],
                    }),
                    e.config.chart.dropShadow.enabled)
                  ) {
                    var P = e.config.chart.dropShadow;
                    a.dropShadow(L, P, v);
                  }
                  a.setSelectionFilter(L, 0, v),
                    this.addListeners(L, this.radialDataLabels),
                    b.add(L),
                    L.attr({ index: 0, j: v });
                  var M = 0;
                  !this.initialAnim ||
                    e.globals.resized ||
                    e.globals.dataChanged ||
                    ((M = ((S - w) / 360) * e.config.chart.animations.speed),
                    (this.animDur = M / (1.2 * t.series.length) + this.animDur),
                    this.animBeginArr.push(this.animDur)),
                    e.globals.dataChanged &&
                      ((M =
                        ((S - w) / 360) *
                        e.config.chart.animations.dynamicAnimation.speed),
                      (this.animDur =
                        M / (1.2 * t.series.length) + this.animDur),
                      this.animBeginArr.push(this.animDur)),
                    this.animatePaths(L, {
                      centerX: t.centerX,
                      centerY: t.centerY,
                      endAngle: S,
                      startAngle: w,
                      prevEndAngle: C,
                      prevStartAngle: k,
                      size: t.size,
                      i: v,
                      totalItems: 2,
                      animBeginArr: this.animBeginArr,
                      dur: M,
                      shouldSetPrevPaths: !0,
                      easing: e.globals.easing,
                    });
                }
                return { g: s, elHollow: h, dataLabels: f };
              },
            },
            {
              key: "drawHollow",
              value: function (t) {
                var e = new m(this.ctx).drawCircle(2 * t.size);
                return (
                  e.attr({
                    class: "apexcharts-radialbar-hollow",
                    cx: t.centerX,
                    cy: t.centerY,
                    r: t.size,
                    fill: t.fill,
                  }),
                  e
                );
              },
            },
            {
              key: "drawHollowImage",
              value: function (t, e, i, n) {
                var a = this.w,
                  s = new T(this.ctx),
                  r = p.randomId(),
                  o = a.config.plotOptions.radialBar.hollow.image;
                if (a.config.plotOptions.radialBar.hollow.imageClipped)
                  s.clippedImgArea({
                    width: i,
                    height: i,
                    image: o,
                    patternID: "pattern".concat(a.globals.cuid).concat(r),
                  }),
                    (n = "url(#pattern".concat(a.globals.cuid).concat(r, ")"));
                else {
                  var l = a.config.plotOptions.radialBar.hollow.imageWidth,
                    c = a.config.plotOptions.radialBar.hollow.imageHeight;
                  if (void 0 === l && void 0 === c) {
                    var h = a.globals.dom.Paper.image(o).loaded(function (e) {
                      this.move(
                        t.centerX -
                          e.width / 2 +
                          a.config.plotOptions.radialBar.hollow.imageOffsetX,
                        t.centerY -
                          e.height / 2 +
                          a.config.plotOptions.radialBar.hollow.imageOffsetY
                      );
                    });
                    e.add(h);
                  } else {
                    var d = a.globals.dom.Paper.image(o).loaded(function (e) {
                      this.move(
                        t.centerX -
                          l / 2 +
                          a.config.plotOptions.radialBar.hollow.imageOffsetX,
                        t.centerY -
                          c / 2 +
                          a.config.plotOptions.radialBar.hollow.imageOffsetY
                      ),
                        this.size(l, c);
                    });
                    e.add(d);
                  }
                }
                return n;
              },
            },
            {
              key: "getStrokeWidth",
              value: function (t) {
                var e = this.w;
                return (
                  (t.size *
                    (100 -
                      parseInt(
                        e.config.plotOptions.radialBar.hollow.size,
                        10
                      ))) /
                    100 /
                    (t.series.length + 1) -
                  this.margin
                );
              },
            },
          ]),
          a
        );
      })(At),
      Tt = (function () {
        function t(i) {
          e(this, t), (this.w = i.w), (this.lineCtx = i);
        }
        return (
          n(t, [
            {
              key: "sameValueSeriesFix",
              value: function (t, e) {
                var i = this.w;
                if (
                  "line" === i.config.chart.type &&
                  ("gradient" === i.config.fill.type ||
                    "gradient" === i.config.fill.type[t]) &&
                  new y(this.lineCtx.ctx, i).seriesHaveSameValues(t)
                ) {
                  var n = e[t].slice();
                  (n[n.length - 1] = n[n.length - 1] + 1e-6), (e[t] = n);
                }
                return e;
              },
            },
            {
              key: "calculatePoints",
              value: function (t) {
                var e = t.series,
                  i = t.realIndex,
                  n = t.x,
                  a = t.y,
                  s = t.i,
                  r = t.j,
                  o = t.prevY,
                  l = this.w,
                  c = [],
                  h = [];
                if (0 === r) {
                  var d =
                    this.lineCtx.categoryAxisCorrection +
                    l.config.markers.offsetX;
                  l.globals.isXNumeric &&
                    (d =
                      (l.globals.seriesX[i][0] - l.globals.minX) /
                        this.lineCtx.xRatio +
                      l.config.markers.offsetX),
                    c.push(d),
                    h.push(
                      p.isNumber(e[s][0]) ? o + l.config.markers.offsetY : null
                    ),
                    c.push(n + l.config.markers.offsetX),
                    h.push(
                      p.isNumber(e[s][r + 1])
                        ? a + l.config.markers.offsetY
                        : null
                    );
                } else
                  c.push(n + l.config.markers.offsetX),
                    h.push(
                      p.isNumber(e[s][r + 1])
                        ? a + l.config.markers.offsetY
                        : null
                    );
                return { x: c, y: h };
              },
            },
            {
              key: "checkPreviousPaths",
              value: function (t) {
                for (
                  var e = t.pathFromLine,
                    i = t.pathFromArea,
                    n = t.realIndex,
                    a = this.w,
                    s = 0;
                  s < a.globals.previousPaths.length;
                  s++
                ) {
                  var r = a.globals.previousPaths[s];
                  ("line" === r.type || "area" === r.type) &&
                    r.paths.length > 0 &&
                    parseInt(r.realIndex, 10) === parseInt(n, 10) &&
                    ("line" === r.type
                      ? ((this.lineCtx.appendPathFrom = !1),
                        (e = a.globals.previousPaths[s].paths[0].d))
                      : "area" === r.type &&
                        ((this.lineCtx.appendPathFrom = !1),
                        (i = a.globals.previousPaths[s].paths[0].d),
                        a.config.stroke.show &&
                          a.globals.previousPaths[s].paths[1] &&
                          (e = a.globals.previousPaths[s].paths[1].d)));
                }
                return { pathFromLine: e, pathFromArea: i };
              },
            },
            {
              key: "determineFirstPrevY",
              value: function (t) {
                var e = t.i,
                  i = t.series,
                  n = t.prevY,
                  a = t.lineYPosition,
                  s = this.w;
                if (void 0 !== i[e][0])
                  n =
                    (a =
                      s.config.chart.stacked && e > 0
                        ? this.lineCtx.prevSeriesY[e - 1][0]
                        : this.lineCtx.zeroY) -
                    i[e][0] / this.lineCtx.yRatio[this.lineCtx.yaxisIndex] +
                    2 *
                      (this.lineCtx.isReversed
                        ? i[e][0] / this.lineCtx.yRatio[this.lineCtx.yaxisIndex]
                        : 0);
                else if (s.config.chart.stacked && e > 0 && void 0 === i[e][0])
                  for (var r = e - 1; r >= 0; r--)
                    if (null !== i[r][0] && void 0 !== i[r][0]) {
                      n = a = this.lineCtx.prevSeriesY[r][0];
                      break;
                    }
                return { prevY: n, lineYPosition: a };
              },
            },
          ]),
          t
        );
      })(),
      Et = (function () {
        function t(i, n, a) {
          e(this, t),
            (this.ctx = i),
            (this.w = i.w),
            (this.xyRatios = n),
            (this.pointsChart =
              !(
                "bubble" !== this.w.config.chart.type &&
                "scatter" !== this.w.config.chart.type
              ) || a),
            (this.scatter = new _(this.ctx)),
            (this.noNegatives = this.w.globals.minX === Number.MAX_VALUE),
            (this.lineHelpers = new Tt(this)),
            (this.markers = new E(this.ctx)),
            (this.prevSeriesY = []),
            (this.categoryAxisCorrection = 0),
            (this.yaxisIndex = 0);
        }
        return (
          n(t, [
            {
              key: "draw",
              value: function (t, e, i) {
                var n = this.w,
                  a = new m(this.ctx),
                  s = n.globals.comboCharts ? e : n.config.chart.type,
                  r = a.group({
                    class: "apexcharts-".concat(
                      s,
                      "-series apexcharts-plot-series"
                    ),
                  }),
                  o = new y(this.ctx, n);
                (this.yRatio = this.xyRatios.yRatio),
                  (this.zRatio = this.xyRatios.zRatio),
                  (this.xRatio = this.xyRatios.xRatio),
                  (this.baseLineY = this.xyRatios.baseLineY),
                  (t = o.getLogSeries(t)),
                  (this.yRatio = o.getLogYRatios(this.yRatio));
                for (var l = [], c = 0; c < t.length; c++) {
                  t = this.lineHelpers.sameValueSeriesFix(c, t);
                  var h = n.globals.comboCharts ? i[c] : c;
                  this._initSerieVariables(t, c, h);
                  var d = [],
                    u = [],
                    f = n.globals.padHorizontal + this.categoryAxisCorrection;
                  this.ctx.series.addCollapsedClassToSeries(this.elSeries, h),
                    n.globals.isXNumeric &&
                      n.globals.seriesX.length > 0 &&
                      (f =
                        (n.globals.seriesX[h][0] - n.globals.minX) /
                        this.xRatio),
                    u.push(f);
                  var p,
                    g = f,
                    x = g,
                    v = this.zeroY;
                  (v = this.lineHelpers.determineFirstPrevY({
                    i: c,
                    series: t,
                    prevY: v,
                    lineYPosition: 0,
                  }).prevY),
                    d.push(v),
                    (p = v);
                  var b = this._calculatePathsFrom({
                      series: t,
                      i: c,
                      realIndex: h,
                      prevX: x,
                      prevY: v,
                    }),
                    w = this._iterateOverDataPoints({
                      series: t,
                      realIndex: h,
                      i: c,
                      x: f,
                      y: 1,
                      pX: g,
                      pY: p,
                      pathsFrom: b,
                      linePaths: [],
                      areaPaths: [],
                      seriesIndex: i,
                      lineYPosition: 0,
                      xArrj: u,
                      yArrj: d,
                    });
                  this._handlePaths({ type: s, realIndex: h, i: c, paths: w }),
                    this.elSeries.add(this.elPointsMain),
                    this.elSeries.add(this.elDataLabelsWrap),
                    l.push(this.elSeries);
                }
                if (n.config.chart.stacked)
                  for (var k = l.length; k > 0; k--) r.add(l[k - 1]);
                else for (var A = 0; A < l.length; A++) r.add(l[A]);
                return r;
              },
            },
            {
              key: "_initSerieVariables",
              value: function (t, e, i) {
                var n = this.w,
                  a = new m(this.ctx);
                (this.xDivision =
                  n.globals.gridWidth /
                  (n.globals.dataPoints -
                    ("on" === n.config.xaxis.tickPlacement ? 1 : 0))),
                  (this.strokeWidth = Array.isArray(n.config.stroke.width)
                    ? n.config.stroke.width[i]
                    : n.config.stroke.width),
                  this.yRatio.length > 1 && (this.yaxisIndex = i),
                  (this.isReversed =
                    n.config.yaxis[this.yaxisIndex] &&
                    n.config.yaxis[this.yaxisIndex].reversed),
                  (this.zeroY =
                    n.globals.gridHeight -
                    this.baseLineY[this.yaxisIndex] -
                    (this.isReversed ? n.globals.gridHeight : 0) +
                    (this.isReversed
                      ? 2 * this.baseLineY[this.yaxisIndex]
                      : 0)),
                  (this.areaBottomY = this.zeroY),
                  (this.zeroY > n.globals.gridHeight ||
                    "end" === n.config.plotOptions.area.fillTo) &&
                    (this.areaBottomY = n.globals.gridHeight),
                  (this.categoryAxisCorrection = this.xDivision / 2),
                  (this.elSeries = a.group({
                    class: "apexcharts-series",
                    seriesName: p.escapeString(n.globals.seriesNames[i]),
                  })),
                  (this.elPointsMain = a.group({
                    class: "apexcharts-series-markers-wrap",
                    "data:realIndex": i,
                  })),
                  (this.elDataLabelsWrap = a.group({
                    class: "apexcharts-datalabels",
                    "data:realIndex": i,
                  }));
                var s = t[e].length === n.globals.dataPoints;
                this.elSeries.attr({
                  "data:longestSeries": s,
                  rel: e + 1,
                  "data:realIndex": i,
                }),
                  (this.appendPathFrom = !0);
              },
            },
            {
              key: "_calculatePathsFrom",
              value: function (t) {
                var e,
                  i,
                  n,
                  a,
                  s = t.series,
                  r = t.i,
                  o = t.realIndex,
                  l = t.prevX,
                  c = t.prevY,
                  h = this.w,
                  d = new m(this.ctx);
                if (null === s[r][0]) {
                  for (var u = 0; u < s[r].length; u++)
                    if (null !== s[r][u]) {
                      (l = this.xDivision * u),
                        (c =
                          this.zeroY - s[r][u] / this.yRatio[this.yaxisIndex]),
                        (e = d.move(l, c)),
                        (i = d.move(l, this.areaBottomY));
                      break;
                    }
                } else
                  (e = d.move(l, c)),
                    (i = d.move(l, this.areaBottomY) + d.line(l, c));
                if (
                  ((n = d.move(-1, this.zeroY) + d.line(-1, this.zeroY)),
                  (a = d.move(-1, this.zeroY) + d.line(-1, this.zeroY)),
                  h.globals.previousPaths.length > 0)
                ) {
                  var f = this.lineHelpers.checkPreviousPaths({
                    pathFromLine: n,
                    pathFromArea: a,
                    realIndex: o,
                  });
                  (n = f.pathFromLine), (a = f.pathFromArea);
                }
                return {
                  prevX: l,
                  prevY: c,
                  linePath: e,
                  areaPath: i,
                  pathFromLine: n,
                  pathFromArea: a,
                };
              },
            },
            {
              key: "_handlePaths",
              value: function (t) {
                var e = t.type,
                  i = t.realIndex,
                  n = t.i,
                  a = t.paths,
                  s = this.w,
                  o = new m(this.ctx),
                  l = new T(this.ctx);
                this.prevSeriesY.push(a.yArrj),
                  (s.globals.seriesXvalues[i] = a.xArrj),
                  (s.globals.seriesYvalues[i] = a.yArrj);
                var c = s.config.forecastDataPoints;
                if (c.count > 0) {
                  var h =
                      s.globals.seriesXvalues[i][
                        s.globals.seriesXvalues[i].length - c.count - 1
                      ],
                    d = o.drawRect(
                      h,
                      0,
                      s.globals.gridWidth,
                      s.globals.gridHeight,
                      0
                    );
                  s.globals.dom.elForecastMask.appendChild(d.node);
                  var u = o.drawRect(0, 0, h, s.globals.gridHeight, 0);
                  s.globals.dom.elNonForecastMask.appendChild(u.node);
                }
                this.pointsChart ||
                  s.globals.delayedElements.push({
                    el: this.elPointsMain.node,
                    index: i,
                  });
                var f = {
                  i: n,
                  realIndex: i,
                  animationDelay: n,
                  initialSpeed: s.config.chart.animations.speed,
                  dataChangeSpeed:
                    s.config.chart.animations.dynamicAnimation.speed,
                  className: "apexcharts-".concat(e),
                };
                if ("area" === e)
                  for (
                    var p = l.fillPath({ seriesNumber: i }), g = 0;
                    g < a.areaPaths.length;
                    g++
                  ) {
                    var x = o.renderPaths(
                      r(
                        r({}, f),
                        {},
                        {
                          pathFrom: a.pathFromArea,
                          pathTo: a.areaPaths[g],
                          stroke: "none",
                          strokeWidth: 0,
                          strokeLineCap: null,
                          fill: p,
                        }
                      )
                    );
                    this.elSeries.add(x);
                  }
                if (s.config.stroke.show && !this.pointsChart) {
                  var v;
                  v =
                    "line" === e
                      ? l.fillPath({ seriesNumber: i, i: n })
                      : s.globals.stroke.colors[i];
                  for (var b = 0; b < a.linePaths.length; b++) {
                    var y = r(
                        r({}, f),
                        {},
                        {
                          pathFrom: a.pathFromLine,
                          pathTo: a.linePaths[b],
                          stroke: v,
                          strokeWidth: this.strokeWidth,
                          strokeLineCap: s.config.stroke.lineCap,
                          fill: "none",
                        }
                      ),
                      w = o.renderPaths(y);
                    if ((this.elSeries.add(w), c.count > 0)) {
                      var k = o.renderPaths(y);
                      k.node.setAttribute("stroke-dasharray", c.dashArray),
                        c.strokeWidth &&
                          k.node.setAttribute("stroke-width", c.strokeWidth),
                        this.elSeries.add(k),
                        k.attr(
                          "clip-path",
                          "url(#forecastMask".concat(s.globals.cuid, ")")
                        ),
                        w.attr(
                          "clip-path",
                          "url(#nonForecastMask".concat(s.globals.cuid, ")")
                        );
                    }
                  }
                }
              },
            },
            {
              key: "_iterateOverDataPoints",
              value: function (t) {
                for (
                  var e = t.series,
                    i = t.realIndex,
                    n = t.i,
                    a = t.x,
                    s = t.y,
                    r = t.pX,
                    o = t.pY,
                    l = t.pathsFrom,
                    c = t.linePaths,
                    h = t.areaPaths,
                    d = t.seriesIndex,
                    u = t.lineYPosition,
                    f = t.xArrj,
                    g = t.yArrj,
                    x = this.w,
                    v = new m(this.ctx),
                    b = this.yRatio,
                    y = l.prevY,
                    w = l.linePath,
                    k = l.areaPath,
                    A = l.pathFromLine,
                    S = l.pathFromArea,
                    C = p.isNumber(x.globals.minYArr[i])
                      ? x.globals.minYArr[i]
                      : x.globals.minY,
                    T =
                      x.globals.dataPoints > 1
                        ? x.globals.dataPoints - 1
                        : x.globals.dataPoints,
                    E = 0;
                  E < T;
                  E++
                ) {
                  var _ = void 0 === e[n][E + 1] || null === e[n][E + 1];
                  if (x.globals.isXNumeric) {
                    var L = x.globals.seriesX[i][E + 1];
                    void 0 === x.globals.seriesX[i][E + 1] &&
                      (L = x.globals.seriesX[i][T - 1]),
                      (a = (L - x.globals.minX) / this.xRatio);
                  } else a += this.xDivision;
                  (u =
                    x.config.chart.stacked &&
                    n > 0 &&
                    x.globals.collapsedSeries.length <
                      x.config.series.length - 1
                      ? this.prevSeriesY[
                          (function (t) {
                            for (
                              var e = t, i = 0;
                              i < x.globals.series.length;
                              i++
                            )
                              if (
                                x.globals.collapsedSeriesIndices.indexOf(t) > -1
                              ) {
                                e--;
                                break;
                              }
                            return e >= 0 ? e : 0;
                          })(n - 1)
                        ][E + 1]
                      : this.zeroY),
                    (s = _
                      ? u -
                        C / b[this.yaxisIndex] +
                        2 * (this.isReversed ? C / b[this.yaxisIndex] : 0)
                      : u -
                        e[n][E + 1] / b[this.yaxisIndex] +
                        2 *
                          (this.isReversed
                            ? e[n][E + 1] / b[this.yaxisIndex]
                            : 0)),
                    f.push(a),
                    g.push(s);
                  var P = this.lineHelpers.calculatePoints({
                      series: e,
                      x: a,
                      y: s,
                      realIndex: i,
                      i: n,
                      j: E,
                      prevY: y,
                    }),
                    M = this._createPaths({
                      series: e,
                      i: n,
                      realIndex: i,
                      j: E,
                      x: a,
                      y: s,
                      pX: r,
                      pY: o,
                      linePath: w,
                      areaPath: k,
                      linePaths: c,
                      areaPaths: h,
                      seriesIndex: d,
                    });
                  (h = M.areaPaths),
                    (c = M.linePaths),
                    (r = M.pX),
                    (o = M.pY),
                    (k = M.areaPath),
                    (w = M.linePath),
                    this.appendPathFrom &&
                      ((A += v.line(a, this.zeroY)),
                      (S += v.line(a, this.zeroY))),
                    this.handleNullDataPoints(e, P, n, E, i),
                    this._handleMarkersAndLabels({
                      pointsPos: P,
                      series: e,
                      x: a,
                      y: s,
                      prevY: y,
                      i: n,
                      j: E,
                      realIndex: i,
                    });
                }
                return {
                  yArrj: g,
                  xArrj: f,
                  pathFromArea: S,
                  areaPaths: h,
                  pathFromLine: A,
                  linePaths: c,
                };
              },
            },
            {
              key: "_handleMarkersAndLabels",
              value: function (t) {
                var e = t.pointsPos;
                t.series, t.x, t.y, t.prevY;
                var i = t.i,
                  n = t.j,
                  a = t.realIndex,
                  s = this.w,
                  r = new L(this.ctx);
                if (this.pointsChart)
                  this.scatter.draw(this.elSeries, n, {
                    realIndex: a,
                    pointsPos: e,
                    zRatio: this.zRatio,
                    elParent: this.elPointsMain,
                  });
                else {
                  s.globals.series[i].length > 1 &&
                    this.elPointsMain.node.classList.add(
                      "apexcharts-element-hidden"
                    );
                  var o = this.markers.plotChartMarkers(e, a, n + 1);
                  null !== o && this.elPointsMain.add(o);
                }
                var l = r.drawDataLabel(e, a, n + 1, null);
                null !== l && this.elDataLabelsWrap.add(l);
              },
            },
            {
              key: "_createPaths",
              value: function (t) {
                var e = t.series,
                  i = t.i,
                  n = t.realIndex,
                  a = t.j,
                  s = t.x,
                  r = t.y,
                  o = t.pX,
                  l = t.pY,
                  c = t.linePath,
                  h = t.areaPath,
                  d = t.linePaths,
                  u = t.areaPaths,
                  f = t.seriesIndex,
                  p = this.w,
                  g = new m(this.ctx),
                  x = p.config.stroke.curve,
                  v = this.areaBottomY;
                if (
                  (Array.isArray(p.config.stroke.curve) &&
                    (x = Array.isArray(f)
                      ? p.config.stroke.curve[f[i]]
                      : p.config.stroke.curve[i]),
                  "smooth" === x)
                ) {
                  var b = 0.35 * (s - o);
                  p.globals.hasNullValues
                    ? (null !== e[i][a] &&
                        (null !== e[i][a + 1]
                          ? ((c =
                              g.move(o, l) +
                              g.curve(o + b, l, s - b, r, s + 1, r)),
                            (h =
                              g.move(o + 1, l) +
                              g.curve(o + b, l, s - b, r, s + 1, r) +
                              g.line(s, v) +
                              g.line(o, v) +
                              "z"))
                          : ((c = g.move(o, l)), (h = g.move(o, l) + "z"))),
                      d.push(c),
                      u.push(h))
                    : ((c += g.curve(o + b, l, s - b, r, s, r)),
                      (h += g.curve(o + b, l, s - b, r, s, r))),
                    (o = s),
                    (l = r),
                    a === e[i].length - 2 &&
                      ((h = h + g.curve(o, l, s, r, s, v) + g.move(s, r) + "z"),
                      p.globals.hasNullValues || (d.push(c), u.push(h)));
                } else {
                  if (null === e[i][a + 1]) {
                    c += g.move(s, r);
                    var y = p.globals.isXNumeric
                      ? (p.globals.seriesX[n][a] - p.globals.minX) / this.xRatio
                      : s - this.xDivision;
                    h = h + g.line(y, v) + g.move(s, r) + "z";
                  }
                  null === e[i][a] &&
                    ((c += g.move(s, r)), (h += g.move(s, v))),
                    "stepline" === x
                      ? ((c = c + g.line(s, null, "H") + g.line(null, r, "V")),
                        (h = h + g.line(s, null, "H") + g.line(null, r, "V")))
                      : "straight" === x &&
                        ((c += g.line(s, r)), (h += g.line(s, r))),
                    a === e[i].length - 2 &&
                      ((h = h + g.line(s, v) + g.move(s, r) + "z"),
                      d.push(c),
                      u.push(h));
                }
                return {
                  linePaths: d,
                  areaPaths: u,
                  pX: o,
                  pY: l,
                  linePath: c,
                  areaPath: h,
                };
              },
            },
            {
              key: "handleNullDataPoints",
              value: function (t, e, i, n, a) {
                var s = this.w;
                if (
                  (null === t[i][n] && s.config.markers.showNullDataPoints) ||
                  1 === t[i].length
                ) {
                  var r = this.markers.plotChartMarkers(
                    e,
                    a,
                    n + 1,
                    this.strokeWidth - s.config.markers.strokeWidth / 2,
                    !0
                  );
                  null !== r && this.elPointsMain.add(r);
                }
              },
            },
          ]),
          t
        );
      })();
    (window.TreemapSquared = {}),
      (window.TreemapSquared.generate = (function () {
        function t(e, i, n, a) {
          (this.xoffset = e),
            (this.yoffset = i),
            (this.height = a),
            (this.width = n),
            (this.shortestEdge = function () {
              return Math.min(this.height, this.width);
            }),
            (this.getCoordinates = function (t) {
              var e,
                i = [],
                n = this.xoffset,
                a = this.yoffset,
                r = s(t) / this.height,
                o = s(t) / this.width;
              if (this.width >= this.height)
                for (e = 0; e < t.length; e++)
                  i.push([n, a, n + r, a + t[e] / r]), (a += t[e] / r);
              else
                for (e = 0; e < t.length; e++)
                  i.push([n, a, n + t[e] / o, a + o]), (n += t[e] / o);
              return i;
            }),
            (this.cutArea = function (e) {
              var i;
              if (this.width >= this.height) {
                var n = e / this.height,
                  a = this.width - n;
                i = new t(this.xoffset + n, this.yoffset, a, this.height);
              } else {
                var s = e / this.width,
                  r = this.height - s;
                i = new t(this.xoffset, this.yoffset + s, this.width, r);
              }
              return i;
            });
        }
        function e(e, n, a, r, o) {
          return (
            (r = void 0 === r ? 0 : r),
            (o = void 0 === o ? 0 : o),
            (function (t) {
              var e,
                i,
                n = [];
              for (e = 0; e < t.length; e++)
                for (i = 0; i < t[e].length; i++) n.push(t[e][i]);
              return n;
            })(
              i(
                (function (t, e) {
                  var i,
                    n = [],
                    a = e / s(t);
                  for (i = 0; i < t.length; i++) n[i] = t[i] * a;
                  return n;
                })(e, n * a),
                [],
                new t(r, o, n, a),
                []
              )
            )
          );
        }
        function i(t, e, a, r) {
          var o, l, c;
          if (0 !== t.length)
            return (
              (o = a.shortestEdge()),
              (function (t, e, i) {
                var a;
                return (
                  0 === t.length ||
                  ((a = t.slice()).push(e), n(t, i) >= n(a, i))
                );
              })(e, (l = t[0]), o)
                ? (e.push(l), i(t.slice(1), e, a, r))
                : ((c = a.cutArea(s(e), r)),
                  r.push(a.getCoordinates(e)),
                  i(t, [], c, r)),
              r
            );
          r.push(a.getCoordinates(e));
        }
        function n(t, e) {
          var i = Math.min.apply(Math, t),
            n = Math.max.apply(Math, t),
            a = s(t);
          return Math.max(
            (Math.pow(e, 2) * n) / Math.pow(a, 2),
            Math.pow(a, 2) / (Math.pow(e, 2) * i)
          );
        }
        function a(t) {
          return t && t.constructor === Array;
        }
        function s(t) {
          var e,
            i = 0;
          for (e = 0; e < t.length; e++) i += t[e];
          return i;
        }
        function r(t) {
          var e,
            i = 0;
          if (a(t[0])) for (e = 0; e < t.length; e++) i += r(t[e]);
          else i = s(t);
          return i;
        }
        return function t(i, n, s, o, l) {
          (o = void 0 === o ? 0 : o), (l = void 0 === l ? 0 : l);
          var c,
            h,
            d = [],
            u = [];
          if (a(i[0])) {
            for (h = 0; h < i.length; h++) d[h] = r(i[h]);
            for (c = e(d, n, s, o, l), h = 0; h < i.length; h++)
              u.push(
                t(i[h], c[h][2] - c[h][0], c[h][3] - c[h][1], c[h][0], c[h][1])
              );
          } else u = e(i, n, s, o, l);
          return u;
        };
      })());
    var _t,
      Lt,
      Pt = (function () {
        function t(i, n) {
          e(this, t),
            (this.ctx = i),
            (this.w = i.w),
            (this.strokeWidth = this.w.config.stroke.width),
            (this.helpers = new yt(i)),
            (this.dynamicAnim =
              this.w.config.chart.animations.dynamicAnimation),
            (this.labels = []);
        }
        return (
          n(t, [
            {
              key: "draw",
              value: function (t) {
                var e = this,
                  i = this.w,
                  n = new m(this.ctx),
                  a = new T(this.ctx),
                  s = n.group({ class: "apexcharts-treemap" });
                if (i.globals.noData) return s;
                var r = [];
                return (
                  t.forEach(function (t) {
                    var e = t.map(function (t) {
                      return Math.abs(t);
                    });
                    r.push(e);
                  }),
                  (this.negRange = this.helpers.checkColorRange()),
                  i.config.series.forEach(function (t, i) {
                    t.data.forEach(function (t) {
                      Array.isArray(e.labels[i]) || (e.labels[i] = []),
                        e.labels[i].push(t.x);
                    });
                  }),
                  window.TreemapSquared.generate(
                    r,
                    i.globals.gridWidth,
                    i.globals.gridHeight
                  ).forEach(function (r, o) {
                    var l = n.group({
                      class: "apexcharts-series apexcharts-treemap-series",
                      seriesName: p.escapeString(i.globals.seriesNames[o]),
                      rel: o + 1,
                      "data:realIndex": o,
                    });
                    if (i.config.chart.dropShadow.enabled) {
                      var c = i.config.chart.dropShadow;
                      new x(e.ctx).dropShadow(s, c, o);
                    }
                    var h = n.group({ class: "apexcharts-data-labels" });
                    r.forEach(function (s, r) {
                      var c = s[0],
                        h = s[1],
                        d = s[2],
                        u = s[3],
                        f = n.drawRect(
                          c,
                          h,
                          d - c,
                          u - h,
                          0,
                          "#fff",
                          1,
                          e.strokeWidth,
                          i.config.plotOptions.treemap.useFillColorAsStroke
                            ? g
                            : i.globals.stroke.colors[o]
                        );
                      f.attr({
                        cx: c,
                        cy: h,
                        index: o,
                        i: o,
                        j: r,
                        width: d - c,
                        height: u - h,
                      });
                      var p = e.helpers.getShadeColor(
                          i.config.chart.type,
                          o,
                          r,
                          e.negRange
                        ),
                        g = p.color;
                      void 0 !== i.config.series[o].data[r] &&
                        i.config.series[o].data[r].fillColor &&
                        (g = i.config.series[o].data[r].fillColor);
                      var x = a.fillPath({
                        color: g,
                        seriesNumber: o,
                        dataPointIndex: r,
                      });
                      f.node.classList.add("apexcharts-treemap-rect"),
                        f.attr({ fill: x }),
                        e.helpers.addListeners(f);
                      var m = {
                          x: c + (d - c) / 2,
                          y: h + (u - h) / 2,
                          width: 0,
                          height: 0,
                        },
                        v = { x: c, y: h, width: d - c, height: u - h };
                      if (
                        i.config.chart.animations.enabled &&
                        !i.globals.dataChanged
                      ) {
                        var b = 1;
                        i.globals.resized ||
                          (b = i.config.chart.animations.speed),
                          e.animateTreemap(f, m, v, b);
                      }
                      if (i.globals.dataChanged) {
                        var y = 1;
                        e.dynamicAnim.enabled &&
                          i.globals.shouldAnimate &&
                          ((y = e.dynamicAnim.speed),
                          i.globals.previousPaths[o] &&
                            i.globals.previousPaths[o][r] &&
                            i.globals.previousPaths[o][r].rect &&
                            (m = i.globals.previousPaths[o][r].rect),
                          e.animateTreemap(f, m, v, y));
                      }
                      var w = e.getFontSize(s),
                        k = i.config.dataLabels.formatter(e.labels[o][r], {
                          value: i.globals.series[o][r],
                          seriesIndex: o,
                          dataPointIndex: r,
                          w: i,
                        }),
                        A = e.helpers.calculateDataLabels({
                          text: k,
                          x: (c + d) / 2,
                          y: (h + u) / 2 + e.strokeWidth / 2 + w / 3,
                          i: o,
                          j: r,
                          colorProps: p,
                          fontSize: w,
                          series: t,
                        });
                      i.config.dataLabels.enabled &&
                        A &&
                        e.rotateToFitLabel(A, k, c, h, d, u),
                        l.add(f),
                        null !== A && l.add(A);
                    }),
                      l.add(h),
                      s.add(l);
                  }),
                  s
                );
              },
            },
            {
              key: "getFontSize",
              value: function (t) {
                var e,
                  i,
                  n = this.w,
                  a =
                    (function t(e) {
                      var i,
                        n = 0;
                      if (Array.isArray(e[0]))
                        for (i = 0; i < e.length; i++) n += t(e[i]);
                      else for (i = 0; i < e.length; i++) n += e[i].length;
                      return n;
                    })(this.labels) /
                    (function t(e) {
                      var i,
                        n = 0;
                      if (Array.isArray(e[0]))
                        for (i = 0; i < e.length; i++) n += t(e[i]);
                      else for (i = 0; i < e.length; i++) n += 1;
                      return n;
                    })(this.labels);
                return (
                  (e = (t[2] - t[0]) * (t[3] - t[1])),
                  (i = Math.pow(e, 0.5)),
                  Math.min(
                    i / a,
                    parseInt(n.config.dataLabels.style.fontSize, 10)
                  )
                );
              },
            },
            {
              key: "rotateToFitLabel",
              value: function (t, e, i, n, a, s) {
                var r = new m(this.ctx),
                  o = r.getTextRects(e);
                if (o.width + 5 > a - i && o.width <= s - n) {
                  var l = r.rotateAroundCenter(t.node);
                  t.node.setAttribute(
                    "transform",
                    "rotate(-90 ".concat(l.x, " ").concat(l.y, ")")
                  );
                }
              },
            },
            {
              key: "animateTreemap",
              value: function (t, e, i, n) {
                var a = new g(this.ctx);
                a.animateRect(
                  t,
                  { x: e.x, y: e.y, width: e.width, height: e.height },
                  { x: i.x, y: i.y, width: i.width, height: i.height },
                  n,
                  function () {
                    a.animationCompleted(t);
                  }
                );
              },
            },
          ]),
          t
        );
      })(),
      Mt = (function () {
        function t(i) {
          e(this, t),
            (this.ctx = i),
            (this.w = i.w),
            (this.timeScaleArray = []),
            (this.utc = this.w.config.xaxis.labels.datetimeUTC);
        }
        return (
          n(t, [
            {
              key: "calculateTimeScaleTicks",
              value: function (t, e) {
                var i = this,
                  n = this.w;
                if (n.globals.allSeriesCollapsed)
                  return (
                    (n.globals.labels = []),
                    (n.globals.timescaleLabels = []),
                    []
                  );
                var a = new D(this.ctx),
                  s = (e - t) / 864e5;
                this.determineInterval(s),
                  (n.globals.disableZoomIn = !1),
                  (n.globals.disableZoomOut = !1),
                  s < 0.00011574074074074075
                    ? (n.globals.disableZoomIn = !0)
                    : s > 5e4 && (n.globals.disableZoomOut = !0);
                var o = a.getTimeUnitsfromTimestamp(t, e, this.utc),
                  l = n.globals.gridWidth / s,
                  c = l / 24,
                  h = c / 60,
                  d = h / 60,
                  u = Math.floor(24 * s),
                  f = Math.floor(1440 * s),
                  p = Math.floor(86400 * s),
                  g = Math.floor(s),
                  x = Math.floor(s / 30),
                  m = Math.floor(s / 365),
                  v = {
                    minMillisecond: o.minMillisecond,
                    minSecond: o.minSecond,
                    minMinute: o.minMinute,
                    minHour: o.minHour,
                    minDate: o.minDate,
                    minMonth: o.minMonth,
                    minYear: o.minYear,
                  },
                  b = {
                    firstVal: v,
                    currentMillisecond: v.minMillisecond,
                    currentSecond: v.minSecond,
                    currentMinute: v.minMinute,
                    currentHour: v.minHour,
                    currentMonthDate: v.minDate,
                    currentDate: v.minDate,
                    currentMonth: v.minMonth,
                    currentYear: v.minYear,
                    daysWidthOnXAxis: l,
                    hoursWidthOnXAxis: c,
                    minutesWidthOnXAxis: h,
                    secondsWidthOnXAxis: d,
                    numberOfSeconds: p,
                    numberOfMinutes: f,
                    numberOfHours: u,
                    numberOfDays: g,
                    numberOfMonths: x,
                    numberOfYears: m,
                  };
                switch (this.tickInterval) {
                  case "years":
                    this.generateYearScale(b);
                    break;
                  case "months":
                  case "half_year":
                    this.generateMonthScale(b);
                    break;
                  case "months_days":
                  case "months_fortnight":
                  case "days":
                  case "week_days":
                    this.generateDayScale(b);
                    break;
                  case "hours":
                    this.generateHourScale(b);
                    break;
                  case "minutes_fives":
                  case "minutes":
                    this.generateMinuteScale(b);
                    break;
                  case "seconds_tens":
                  case "seconds_fives":
                  case "seconds":
                    this.generateSecondScale(b);
                }
                var y = this.timeScaleArray.map(function (t) {
                  var e = {
                    position: t.position,
                    unit: t.unit,
                    year: t.year,
                    day: t.day ? t.day : 1,
                    hour: t.hour ? t.hour : 0,
                    month: t.month + 1,
                  };
                  return "month" === t.unit
                    ? r(r({}, e), {}, { day: 1, value: t.value + 1 })
                    : "day" === t.unit || "hour" === t.unit
                    ? r(r({}, e), {}, { value: t.value })
                    : "minute" === t.unit
                    ? r(r({}, e), {}, { value: t.value, minute: t.value })
                    : "second" === t.unit
                    ? r(
                        r({}, e),
                        {},
                        { value: t.value, minute: t.minute, second: t.second }
                      )
                    : t;
                });
                return y.filter(function (t) {
                  var e = 1,
                    a = Math.ceil(n.globals.gridWidth / 120),
                    s = t.value;
                  void 0 !== n.config.xaxis.tickAmount &&
                    (a = n.config.xaxis.tickAmount),
                    y.length > a && (e = Math.floor(y.length / a));
                  var r = !1,
                    o = !1;
                  switch (i.tickInterval) {
                    case "years":
                      "year" === t.unit && (r = !0);
                      break;
                    case "half_year":
                      (e = 7), "year" === t.unit && (r = !0);
                      break;
                    case "months":
                      (e = 1), "year" === t.unit && (r = !0);
                      break;
                    case "months_fortnight":
                      (e = 15),
                        ("year" !== t.unit && "month" !== t.unit) || (r = !0),
                        30 === s && (o = !0);
                      break;
                    case "months_days":
                      (e = 10),
                        "month" === t.unit && (r = !0),
                        30 === s && (o = !0);
                      break;
                    case "week_days":
                      (e = 8), "month" === t.unit && (r = !0);
                      break;
                    case "days":
                      (e = 1), "month" === t.unit && (r = !0);
                      break;
                    case "hours":
                      "day" === t.unit && (r = !0);
                      break;
                    case "minutes_fives":
                    case "seconds_fives":
                      s % 5 != 0 && (o = !0);
                      break;
                    case "seconds_tens":
                      s % 10 != 0 && (o = !0);
                  }
                  if (
                    "hours" === i.tickInterval ||
                    "minutes_fives" === i.tickInterval ||
                    "seconds_tens" === i.tickInterval ||
                    "seconds_fives" === i.tickInterval
                  ) {
                    if (!o) return !0;
                  } else if ((s % e == 0 || r) && !o) return !0;
                });
              },
            },
            {
              key: "recalcDimensionsBasedOnFormat",
              value: function (t, e) {
                var i = this.w,
                  n = this.formatDates(t),
                  a = this.removeOverlappingTS(n);
                (i.globals.timescaleLabels = a.slice()),
                  new rt(this.ctx).plotCoords();
              },
            },
            {
              key: "determineInterval",
              value: function (t) {
                var e = 24 * t,
                  i = 60 * e;
                switch (!0) {
                  case t / 365 > 5:
                    this.tickInterval = "years";
                    break;
                  case t > 800:
                    this.tickInterval = "half_year";
                    break;
                  case t > 180:
                    this.tickInterval = "months";
                    break;
                  case t > 90:
                    this.tickInterval = "months_fortnight";
                    break;
                  case t > 60:
                    this.tickInterval = "months_days";
                    break;
                  case t > 30:
                    this.tickInterval = "week_days";
                    break;
                  case t > 2:
                    this.tickInterval = "days";
                    break;
                  case e > 2.4:
                    this.tickInterval = "hours";
                    break;
                  case i > 15:
                    this.tickInterval = "minutes_fives";
                    break;
                  case i > 5:
                    this.tickInterval = "minutes";
                    break;
                  case i > 1:
                    this.tickInterval = "seconds_tens";
                    break;
                  case 60 * i > 20:
                    this.tickInterval = "seconds_fives";
                    break;
                  default:
                    this.tickInterval = "seconds";
                }
              },
            },
            {
              key: "generateYearScale",
              value: function (t) {
                var e = t.firstVal,
                  i = t.currentMonth,
                  n = t.currentYear,
                  a = t.daysWidthOnXAxis,
                  s = t.numberOfYears,
                  r = e.minYear,
                  o = 0,
                  l = new D(this.ctx),
                  c = "year";
                if (e.minDate > 1 || e.minMonth > 0) {
                  var h = l.determineRemainingDaysOfYear(
                    e.minYear,
                    e.minMonth,
                    e.minDate
                  );
                  (o = (l.determineDaysOfYear(e.minYear) - h + 1) * a),
                    (r = e.minYear + 1),
                    this.timeScaleArray.push({
                      position: o,
                      value: r,
                      unit: c,
                      year: r,
                      month: p.monthMod(i + 1),
                    });
                } else
                  1 === e.minDate &&
                    0 === e.minMonth &&
                    this.timeScaleArray.push({
                      position: o,
                      value: r,
                      unit: c,
                      year: n,
                      month: p.monthMod(i + 1),
                    });
                for (var d = r, u = o, f = 0; f < s; f++)
                  d++,
                    (u = l.determineDaysOfYear(d - 1) * a + u),
                    this.timeScaleArray.push({
                      position: u,
                      value: d,
                      unit: c,
                      year: d,
                      month: 1,
                    });
              },
            },
            {
              key: "generateMonthScale",
              value: function (t) {
                var e = t.firstVal,
                  i = t.currentMonthDate,
                  n = t.currentMonth,
                  a = t.currentYear,
                  s = t.daysWidthOnXAxis,
                  r = t.numberOfMonths,
                  o = n,
                  l = 0,
                  c = new D(this.ctx),
                  h = "month",
                  d = 0;
                if (e.minDate > 1) {
                  (l = (c.determineDaysOfMonths(n + 1, e.minYear) - i + 1) * s),
                    (o = p.monthMod(n + 1));
                  var u = a + d,
                    f = p.monthMod(o),
                    g = o;
                  0 === o && ((h = "year"), (g = u), (f = 1), (u += d += 1)),
                    this.timeScaleArray.push({
                      position: l,
                      value: g,
                      unit: h,
                      year: u,
                      month: f,
                    });
                } else
                  this.timeScaleArray.push({
                    position: l,
                    value: o,
                    unit: h,
                    year: a,
                    month: p.monthMod(n),
                  });
                for (var x = o + 1, m = l, v = 0, b = 1; v < r; v++, b++) {
                  0 === (x = p.monthMod(x))
                    ? ((h = "year"), (d += 1))
                    : (h = "month");
                  var y = this._getYear(a, x, d);
                  m = c.determineDaysOfMonths(x, y) * s + m;
                  var w = 0 === x ? y : x;
                  this.timeScaleArray.push({
                    position: m,
                    value: w,
                    unit: h,
                    year: y,
                    month: 0 === x ? 1 : x,
                  }),
                    x++;
                }
              },
            },
            {
              key: "generateDayScale",
              value: function (t) {
                var e = t.firstVal,
                  i = t.currentMonth,
                  n = t.currentYear,
                  a = t.hoursWidthOnXAxis,
                  s = t.numberOfDays,
                  r = new D(this.ctx),
                  o = "day",
                  l = e.minDate + 1,
                  c = l,
                  h = function (t, e, i) {
                    return t > r.determineDaysOfMonths(e + 1, i)
                      ? ((c = 1), (o = "month"), (u = e += 1), e)
                      : e;
                  },
                  d = (24 - e.minHour) * a,
                  u = l,
                  f = h(c, i, n);
                0 === e.minHour && 1 === e.minDate
                  ? ((d = 0),
                    (u = p.monthMod(e.minMonth)),
                    (o = "month"),
                    (c = e.minDate),
                    s++)
                  : 1 !== e.minDate &&
                    0 === e.minHour &&
                    0 === e.minMinute &&
                    ((d = 0), (l = e.minDate), (u = l), (f = h((c = l), i, n))),
                  this.timeScaleArray.push({
                    position: d,
                    value: u,
                    unit: o,
                    year: this._getYear(n, f, 0),
                    month: p.monthMod(f),
                    day: c,
                  });
                for (var g = d, x = 0; x < s; x++) {
                  (o = "day"), (f = h((c += 1), f, this._getYear(n, f, 0)));
                  var m = this._getYear(n, f, 0);
                  g = 24 * a + g;
                  var v = 1 === c ? p.monthMod(f) : c;
                  this.timeScaleArray.push({
                    position: g,
                    value: v,
                    unit: o,
                    year: m,
                    month: p.monthMod(f),
                    day: v,
                  });
                }
              },
            },
            {
              key: "generateHourScale",
              value: function (t) {
                var e = t.firstVal,
                  i = t.currentDate,
                  n = t.currentMonth,
                  a = t.currentYear,
                  s = t.minutesWidthOnXAxis,
                  r = t.numberOfHours,
                  o = new D(this.ctx),
                  l = "hour",
                  c = function (t, e) {
                    return (
                      t > o.determineDaysOfMonths(e + 1, a) &&
                        ((x = 1), (e += 1)),
                      { month: e, date: x }
                    );
                  },
                  h = function (t, e) {
                    return t > o.determineDaysOfMonths(e + 1, a) ? (e += 1) : e;
                  },
                  d = 60 - (e.minMinute + e.minSecond / 60),
                  u = d * s,
                  f = e.minHour + 1,
                  g = f + 1;
                60 === d && ((u = 0), (g = (f = e.minHour) + 1));
                var x = i,
                  m = h(x, n);
                this.timeScaleArray.push({
                  position: u,
                  value: f,
                  unit: l,
                  day: x,
                  hour: g,
                  year: a,
                  month: p.monthMod(m),
                });
                for (var v = u, b = 0; b < r; b++) {
                  (l = "hour"),
                    g >= 24 &&
                      ((g = 0),
                      (l = "day"),
                      (m = c((x += 1), m).month),
                      (m = h(x, m)));
                  var y = this._getYear(a, m, 0);
                  v = 0 === g && 0 === b ? d * s : 60 * s + v;
                  var w = 0 === g ? x : g;
                  this.timeScaleArray.push({
                    position: v,
                    value: w,
                    unit: l,
                    hour: g,
                    day: x,
                    year: y,
                    month: p.monthMod(m),
                  }),
                    g++;
                }
              },
            },
            {
              key: "generateMinuteScale",
              value: function (t) {
                for (
                  var e = t.currentMillisecond,
                    i = t.currentSecond,
                    n = t.currentMinute,
                    a = t.currentHour,
                    s = t.currentDate,
                    r = t.currentMonth,
                    o = t.currentYear,
                    l = t.minutesWidthOnXAxis,
                    c = t.secondsWidthOnXAxis,
                    h = t.numberOfMinutes,
                    d = n + 1,
                    u = s,
                    f = r,
                    g = o,
                    x = a,
                    m = (60 - i - e / 1e3) * c,
                    v = 0;
                  v < h;
                  v++
                )
                  d >= 60 && ((d = 0), 24 === (x += 1) && (x = 0)),
                    this.timeScaleArray.push({
                      position: m,
                      value: d,
                      unit: "minute",
                      hour: x,
                      minute: d,
                      day: u,
                      year: this._getYear(g, f, 0),
                      month: p.monthMod(f),
                    }),
                    (m += l),
                    d++;
              },
            },
            {
              key: "generateSecondScale",
              value: function (t) {
                for (
                  var e = t.currentMillisecond,
                    i = t.currentSecond,
                    n = t.currentMinute,
                    a = t.currentHour,
                    s = t.currentDate,
                    r = t.currentMonth,
                    o = t.currentYear,
                    l = t.secondsWidthOnXAxis,
                    c = t.numberOfSeconds,
                    h = i + 1,
                    d = n,
                    u = s,
                    f = r,
                    g = o,
                    x = a,
                    m = ((1e3 - e) / 1e3) * l,
                    v = 0;
                  v < c;
                  v++
                )
                  h >= 60 &&
                    ((h = 0), ++d >= 60 && ((d = 0), 24 == ++x && (x = 0))),
                    this.timeScaleArray.push({
                      position: m,
                      value: h,
                      unit: "second",
                      hour: x,
                      minute: d,
                      second: h,
                      day: u,
                      year: this._getYear(g, f, 0),
                      month: p.monthMod(f),
                    }),
                    (m += l),
                    h++;
              },
            },
            {
              key: "createRawDateString",
              value: function (t, e) {
                var i = t.year;
                return (
                  0 === t.month && (t.month = 1),
                  (i += "-" + ("0" + t.month.toString()).slice(-2)),
                  "day" === t.unit
                    ? (i +=
                        "day" === t.unit ? "-" + ("0" + e).slice(-2) : "-01")
                    : (i += "-" + ("0" + (t.day ? t.day : "1")).slice(-2)),
                  "hour" === t.unit
                    ? (i +=
                        "hour" === t.unit ? "T" + ("0" + e).slice(-2) : "T00")
                    : (i += "T" + ("0" + (t.hour ? t.hour : "0")).slice(-2)),
                  "minute" === t.unit
                    ? (i += ":" + ("0" + e).slice(-2))
                    : (i +=
                        ":" + (t.minute ? ("0" + t.minute).slice(-2) : "00")),
                  "second" === t.unit
                    ? (i += ":" + ("0" + e).slice(-2))
                    : (i += ":00"),
                  this.utc && (i += ".000Z"),
                  i
                );
              },
            },
            {
              key: "formatDates",
              value: function (t) {
                var e = this,
                  i = this.w;
                return t.map(function (t) {
                  var n = t.value.toString(),
                    a = new D(e.ctx),
                    s = e.createRawDateString(t, n),
                    r = a.getDate(a.parseDate(s));
                  if (
                    (e.utc || (r = a.getDate(a.parseDateWithTimezone(s))),
                    void 0 === i.config.xaxis.labels.format)
                  ) {
                    var o = "dd MMM",
                      l = i.config.xaxis.labels.datetimeFormatter;
                    "year" === t.unit && (o = l.year),
                      "month" === t.unit && (o = l.month),
                      "day" === t.unit && (o = l.day),
                      "hour" === t.unit && (o = l.hour),
                      "minute" === t.unit && (o = l.minute),
                      "second" === t.unit && (o = l.second),
                      (n = a.formatDate(r, o));
                  } else n = a.formatDate(r, i.config.xaxis.labels.format);
                  return {
                    dateString: s,
                    position: t.position,
                    value: n,
                    unit: t.unit,
                    year: t.year,
                    month: t.month,
                  };
                });
              },
            },
            {
              key: "removeOverlappingTS",
              value: function (t) {
                var e,
                  i = this,
                  n = new m(this.ctx),
                  a = !1;
                t.length > 0 &&
                  t[0].value &&
                  t.every(function (e) {
                    return e.value.length === t[0].value.length;
                  }) &&
                  ((a = !0), (e = n.getTextRects(t[0].value).width));
                var s = 0,
                  r = t.map(function (r, o) {
                    if (
                      o > 0 &&
                      i.w.config.xaxis.labels.hideOverlappingLabels
                    ) {
                      var l = a ? e : n.getTextRects(t[s].value).width,
                        c = t[s].position;
                      return r.position > c + l + 10 ? ((s = o), r) : null;
                    }
                    return r;
                  });
                return r.filter(function (t) {
                  return null !== t;
                });
              },
            },
            {
              key: "_getYear",
              value: function (t, e, i) {
                return t + Math.floor(e / 12) + i;
              },
            },
          ]),
          t
        );
      })(),
      It = (function () {
        function t(i, n) {
          e(this, t), (this.ctx = n), (this.w = n.w), (this.el = i);
        }
        return (
          n(t, [
            {
              key: "setupElements",
              value: function () {
                var t = this.w.globals,
                  e = this.w.config,
                  i = e.chart.type;
                (t.axisCharts =
                  [
                    "line",
                    "area",
                    "bar",
                    "rangeBar",
                    "candlestick",
                    "boxPlot",
                    "scatter",
                    "bubble",
                    "radar",
                    "heatmap",
                    "treemap",
                  ].indexOf(i) > -1),
                  (t.xyCharts =
                    [
                      "line",
                      "area",
                      "bar",
                      "rangeBar",
                      "candlestick",
                      "boxPlot",
                      "scatter",
                      "bubble",
                    ].indexOf(i) > -1),
                  (t.isBarHorizontal =
                    ("bar" === e.chart.type || "rangeBar" === e.chart.type) &&
                    e.plotOptions.bar.horizontal),
                  (t.chartClass = ".apexcharts" + t.chartID),
                  (t.dom.baseEl = this.el),
                  (t.dom.elWrap = document.createElement("div")),
                  m.setAttrs(t.dom.elWrap, {
                    id: t.chartClass.substring(1),
                    class: "apexcharts-canvas " + t.chartClass.substring(1),
                  }),
                  this.el.appendChild(t.dom.elWrap),
                  (t.dom.Paper = new window.SVG.Doc(t.dom.elWrap)),
                  t.dom.Paper.attr({
                    class: "apexcharts-svg",
                    "xmlns:data": "ApexChartsNS",
                    transform: "translate("
                      .concat(e.chart.offsetX, ", ")
                      .concat(e.chart.offsetY, ")"),
                  }),
                  (t.dom.Paper.node.style.background = e.chart.background),
                  this.setSVGDimensions(),
                  (t.dom.elGraphical = t.dom.Paper.group().attr({
                    class: "apexcharts-inner apexcharts-graphical",
                  })),
                  (t.dom.elAnnotations = t.dom.Paper.group().attr({
                    class: "apexcharts-annotations",
                  })),
                  (t.dom.elDefs = t.dom.Paper.defs()),
                  (t.dom.elLegendWrap = document.createElement("div")),
                  t.dom.elLegendWrap.classList.add("apexcharts-legend"),
                  t.dom.elWrap.appendChild(t.dom.elLegendWrap),
                  t.dom.Paper.add(t.dom.elGraphical),
                  t.dom.elGraphical.add(t.dom.elDefs);
              },
            },
            {
              key: "plotChartType",
              value: function (t, e) {
                var i = this.w,
                  n = i.config,
                  a = i.globals,
                  s = { series: [], i: [] },
                  r = { series: [], i: [] },
                  o = { series: [], i: [] },
                  l = { series: [], i: [] },
                  c = { series: [], i: [] },
                  h = { series: [], i: [] },
                  d = { series: [], i: [] };
                a.series.map(function (e, u) {
                  var f = 0;
                  void 0 !== t[u].type
                    ? ("column" === t[u].type || "bar" === t[u].type
                        ? (a.series.length > 1 &&
                            n.plotOptions.bar.horizontal &&
                            console.warn(
                              "Horizontal bars are not supported in a mixed/combo chart. Please turn off `plotOptions.bar.horizontal`"
                            ),
                          c.series.push(e),
                          c.i.push(u),
                          f++,
                          (i.globals.columnSeries = c.series))
                        : "area" === t[u].type
                        ? (r.series.push(e), r.i.push(u), f++)
                        : "line" === t[u].type
                        ? (s.series.push(e), s.i.push(u), f++)
                        : "scatter" === t[u].type
                        ? (o.series.push(e), o.i.push(u))
                        : "bubble" === t[u].type
                        ? (l.series.push(e), l.i.push(u), f++)
                        : "candlestick" === t[u].type
                        ? (h.series.push(e), h.i.push(u), f++)
                        : "boxPlot" === t[u].type
                        ? (d.series.push(e), d.i.push(u), f++)
                        : console.warn(
                            "You have specified an unrecognized chart type. Available types for this property are line/area/column/bar/scatter/bubble"
                          ),
                      f > 1 && (a.comboCharts = !0))
                    : (s.series.push(e), s.i.push(u));
                });
                var u = new Et(this.ctx, e),
                  f = new bt(this.ctx, e);
                this.ctx.pie = new At(this.ctx);
                var p = new Ct(this.ctx);
                this.ctx.rangeBar = new z(this.ctx, e);
                var g = new St(this.ctx),
                  x = [];
                if (a.comboCharts) {
                  if (
                    (r.series.length > 0 &&
                      x.push(u.draw(r.series, "area", r.i)),
                    c.series.length > 0)
                  )
                    if (i.config.chart.stacked) {
                      var m = new vt(this.ctx, e);
                      x.push(m.draw(c.series, c.i));
                    } else
                      (this.ctx.bar = new O(this.ctx, e)),
                        x.push(this.ctx.bar.draw(c.series, c.i));
                  if (
                    (s.series.length > 0 &&
                      x.push(u.draw(s.series, "line", s.i)),
                    h.series.length > 0 && x.push(f.draw(h.series, h.i)),
                    d.series.length > 0 && x.push(f.draw(d.series, d.i)),
                    o.series.length > 0)
                  ) {
                    var v = new Et(this.ctx, e, !0);
                    x.push(v.draw(o.series, "scatter", o.i));
                  }
                  if (l.series.length > 0) {
                    var b = new Et(this.ctx, e, !0);
                    x.push(b.draw(l.series, "bubble", l.i));
                  }
                } else
                  switch (n.chart.type) {
                    case "line":
                      x = u.draw(a.series, "line");
                      break;
                    case "area":
                      x = u.draw(a.series, "area");
                      break;
                    case "bar":
                      n.chart.stacked
                        ? (x = new vt(this.ctx, e).draw(a.series))
                        : ((this.ctx.bar = new O(this.ctx, e)),
                          (x = this.ctx.bar.draw(a.series)));
                      break;
                    case "candlestick":
                    case "boxPlot":
                      x = new bt(this.ctx, e).draw(a.series);
                      break;
                    case "rangeBar":
                      x = this.ctx.rangeBar.draw(a.series);
                      break;
                    case "heatmap":
                      x = new wt(this.ctx, e).draw(a.series);
                      break;
                    case "treemap":
                      x = new Pt(this.ctx, e).draw(a.series);
                      break;
                    case "pie":
                    case "donut":
                    case "polarArea":
                      x = this.ctx.pie.draw(a.series);
                      break;
                    case "radialBar":
                      x = p.draw(a.series);
                      break;
                    case "radar":
                      x = g.draw(a.series);
                      break;
                    default:
                      x = u.draw(a.series);
                  }
                return x;
              },
            },
            {
              key: "setSVGDimensions",
              value: function () {
                var t = this.w.globals,
                  e = this.w.config;
                (t.svgWidth = e.chart.width), (t.svgHeight = e.chart.height);
                var i = p.getDimensions(this.el),
                  n = e.chart.width
                    .toString()
                    .split(/[0-9]+/g)
                    .pop();
                "%" === n
                  ? p.isNumber(i[0]) &&
                    (0 === i[0].width &&
                      (i = p.getDimensions(this.el.parentNode)),
                    (t.svgWidth = (i[0] * parseInt(e.chart.width, 10)) / 100))
                  : ("px" !== n && "" !== n) ||
                    (t.svgWidth = parseInt(e.chart.width, 10));
                var a = e.chart.height
                  .toString()
                  .split(/[0-9]+/g)
                  .pop();
                if ("auto" !== t.svgHeight && "" !== t.svgHeight)
                  if ("%" === a) {
                    var s = p.getDimensions(this.el.parentNode);
                    t.svgHeight = (s[1] * parseInt(e.chart.height, 10)) / 100;
                  } else t.svgHeight = parseInt(e.chart.height, 10);
                else
                  t.axisCharts
                    ? (t.svgHeight = t.svgWidth / 1.61)
                    : (t.svgHeight = t.svgWidth / 1.2);
                if (
                  (t.svgWidth < 0 && (t.svgWidth = 0),
                  t.svgHeight < 0 && (t.svgHeight = 0),
                  m.setAttrs(t.dom.Paper.node, {
                    width: t.svgWidth,
                    height: t.svgHeight,
                  }),
                  "%" !== a)
                ) {
                  var r = e.chart.sparkline.enabled
                    ? 0
                    : t.axisCharts
                    ? e.chart.parentHeightOffset
                    : 0;
                  t.dom.Paper.node.parentNode.parentNode.style.minHeight =
                    t.svgHeight + r + "px";
                }
                (t.dom.elWrap.style.width = t.svgWidth + "px"),
                  (t.dom.elWrap.style.height = t.svgHeight + "px");
              },
            },
            {
              key: "shiftGraphPosition",
              value: function () {
                var t = this.w.globals,
                  e = t.translateY,
                  i = {
                    transform: "translate(" + t.translateX + ", " + e + ")",
                  };
                m.setAttrs(t.dom.elGraphical.node, i);
              },
            },
            {
              key: "resizeNonAxisCharts",
              value: function () {
                var t = this.w,
                  e = t.globals,
                  i = 0,
                  n = t.config.chart.sparkline.enabled ? 1 : 15;
                (n += t.config.grid.padding.bottom),
                  ("top" !== t.config.legend.position &&
                    "bottom" !== t.config.legend.position) ||
                    !t.config.legend.show ||
                    t.config.legend.floating ||
                    (i =
                      new lt(this.ctx).legendHelpers.getLegendBBox().clwh + 10);
                var a = t.globals.dom.baseEl.querySelector(
                    ".apexcharts-radialbar, .apexcharts-pie"
                  ),
                  s = 2.05 * t.globals.radialSize;
                if (a && !t.config.chart.sparkline.enabled) {
                  var r = p.getBoundingClientRect(a);
                  s = r.bottom;
                  var o = r.bottom - r.top;
                  s = Math.max(2.05 * t.globals.radialSize, o);
                }
                var l = s + e.translateY + i + n;
                e.dom.elLegendForeign &&
                  e.dom.elLegendForeign.setAttribute("height", l),
                  (e.dom.elWrap.style.height = l + "px"),
                  m.setAttrs(e.dom.Paper.node, { height: l }),
                  (e.dom.Paper.node.parentNode.parentNode.style.minHeight =
                    l + "px");
              },
            },
            {
              key: "coreCalculations",
              value: function () {
                new q(this.ctx).init();
              },
            },
            {
              key: "resetGlobals",
              value: function () {
                var t = this,
                  e = function () {
                    return t.w.config.series.map(function (t) {
                      return [];
                    });
                  },
                  i = new H(),
                  n = this.w.globals;
                i.initGlobalVars(n),
                  (n.seriesXvalues = e()),
                  (n.seriesYvalues = e());
              },
            },
            {
              key: "isMultipleY",
              value: function () {
                if (
                  this.w.config.yaxis.constructor === Array &&
                  this.w.config.yaxis.length > 1
                )
                  return (this.w.globals.isMultipleYAxis = !0), !0;
              },
            },
            {
              key: "xySettings",
              value: function () {
                var t = null,
                  e = this.w;
                if (e.globals.axisCharts) {
                  if (
                    ("back" === e.config.xaxis.crosshairs.position &&
                      new K(this.ctx).drawXCrosshairs(),
                    "back" === e.config.yaxis[0].crosshairs.position &&
                      new K(this.ctx).drawYCrosshairs(),
                    "datetime" === e.config.xaxis.type &&
                      void 0 === e.config.xaxis.labels.formatter)
                  ) {
                    this.ctx.timeScale = new Mt(this.ctx);
                    var i = [];
                    isFinite(e.globals.minX) &&
                    isFinite(e.globals.maxX) &&
                    !e.globals.isBarHorizontal
                      ? (i = this.ctx.timeScale.calculateTimeScaleTicks(
                          e.globals.minX,
                          e.globals.maxX
                        ))
                      : e.globals.isBarHorizontal &&
                        (i = this.ctx.timeScale.calculateTimeScaleTicks(
                          e.globals.minY,
                          e.globals.maxY
                        )),
                      this.ctx.timeScale.recalcDimensionsBasedOnFormat(i);
                  }
                  t = new y(this.ctx).getCalculatedRatios();
                }
                return t;
              },
            },
            {
              key: "updateSourceChart",
              value: function (t) {
                (this.ctx.w.globals.selection = void 0),
                  this.ctx.updateHelpers._updateOptions(
                    {
                      chart: {
                        selection: {
                          xaxis: {
                            min: t.w.globals.minX,
                            max: t.w.globals.maxX,
                          },
                        },
                      },
                    },
                    !1,
                    !1
                  );
              },
            },
            {
              key: "setupBrushHandler",
              value: function () {
                var t = this,
                  e = this.w;
                if (
                  e.config.chart.brush.enabled &&
                  "function" != typeof e.config.chart.events.selection
                ) {
                  var i = e.config.chart.brush.targets || [
                    e.config.chart.brush.target,
                  ];
                  i.forEach(function (e) {
                    var i = ApexCharts.getChartByID(e);
                    (i.w.globals.brushSource = t.ctx),
                      "function" != typeof i.w.config.chart.events.zoomed &&
                        (i.w.config.chart.events.zoomed = function () {
                          t.updateSourceChart(i);
                        }),
                      "function" != typeof i.w.config.chart.events.scrolled &&
                        (i.w.config.chart.events.scrolled = function () {
                          t.updateSourceChart(i);
                        });
                  }),
                    (e.config.chart.events.selection = function (t, n) {
                      i.forEach(function (t) {
                        var i = ApexCharts.getChartByID(t),
                          a = p.clone(e.config.yaxis);
                        if (
                          e.config.chart.brush.autoScaleYaxis &&
                          1 === i.w.globals.series.length
                        ) {
                          var s = new G(i);
                          a = s.autoScaleY(i, a, n);
                        }
                        var o = i.w.config.yaxis.reduce(function (t, e, n) {
                          return [].concat(u(t), [
                            r(
                              r({}, i.w.config.yaxis[n]),
                              {},
                              { min: a[0].min, max: a[0].max }
                            ),
                          ]);
                        }, []);
                        i.ctx.updateHelpers._updateOptions(
                          {
                            xaxis: { min: n.xaxis.min, max: n.xaxis.max },
                            yaxis: o,
                          },
                          !1,
                          !1,
                          !1,
                          !1
                        );
                      });
                    });
                }
              },
            },
          ]),
          t
        );
      })(),
      Ot = (function () {
        function i(t) {
          e(this, i), (this.ctx = t), (this.w = t.w);
        }
        return (
          n(i, [
            {
              key: "_updateOptions",
              value: function (e) {
                var i = this,
                  n =
                    arguments.length > 1 &&
                    void 0 !== arguments[1] &&
                    arguments[1],
                  a =
                    !(arguments.length > 2 && void 0 !== arguments[2]) ||
                    arguments[2],
                  s =
                    !(arguments.length > 3 && void 0 !== arguments[3]) ||
                    arguments[3],
                  r =
                    arguments.length > 4 &&
                    void 0 !== arguments[4] &&
                    arguments[4],
                  o = [this.ctx];
                s && (o = this.ctx.getSyncedCharts()),
                  this.ctx.w.globals.isExecCalled &&
                    ((o = [this.ctx]), (this.ctx.w.globals.isExecCalled = !1)),
                  o.forEach(function (s) {
                    var o = s.w;
                    return (
                      (o.globals.shouldAnimate = a),
                      n ||
                        ((o.globals.resized = !0),
                        (o.globals.dataChanged = !0),
                        a && s.series.getPreviousPaths()),
                      e &&
                        "object" === t(e) &&
                        ((s.config = new X(e)),
                        (e = y.extendArrayProps(s.config, e, o)),
                        s.w.globals.chartID !== i.ctx.w.globals.chartID &&
                          delete e.series,
                        (o.config = p.extend(o.config, e)),
                        r &&
                          ((o.globals.lastXAxis = e.xaxis
                            ? p.clone(e.xaxis)
                            : []),
                          (o.globals.lastYAxis = e.yaxis
                            ? p.clone(e.yaxis)
                            : []),
                          (o.globals.initialConfig = p.extend({}, o.config)),
                          (o.globals.initialSeries = p.clone(
                            o.config.series
                          )))),
                      s.update(e)
                    );
                  });
              },
            },
            {
              key: "_updateSeries",
              value: function (t, e) {
                var i,
                  n = this,
                  a =
                    arguments.length > 2 &&
                    void 0 !== arguments[2] &&
                    arguments[2],
                  s = this.w;
                return (
                  (s.globals.shouldAnimate = e),
                  (s.globals.dataChanged = !0),
                  e && this.ctx.series.getPreviousPaths(),
                  s.globals.axisCharts
                    ? (0 ===
                        (i = t.map(function (t, e) {
                          return n._extendSeries(t, e);
                        })).length && (i = [{ data: [] }]),
                      (s.config.series = i))
                    : (s.config.series = t.slice()),
                  a && (s.globals.initialSeries = p.clone(s.config.series)),
                  this.ctx.update()
                );
              },
            },
            {
              key: "_extendSeries",
              value: function (t, e) {
                var i = this.w,
                  n = i.config.series[e];
                return r(
                  r({}, i.config.series[e]),
                  {},
                  {
                    name: t.name ? t.name : n && n.name,
                    color: t.color ? t.color : n && n.color,
                    type: t.type ? t.type : n && n.type,
                    data: t.data ? t.data : n && n.data,
                  }
                );
              },
            },
            {
              key: "toggleDataPointSelection",
              value: function (t, e) {
                var i = this.w,
                  n = null,
                  a = ".apexcharts-series[data\\:realIndex='".concat(t, "']");
                return (
                  i.globals.axisCharts
                    ? (n = i.globals.dom.Paper.select(
                        ""
                          .concat(a, " path[j='")
                          .concat(e, "'], ")
                          .concat(a, " circle[j='")
                          .concat(e, "'], ")
                          .concat(a, " rect[j='")
                          .concat(e, "']")
                      ).members[0])
                    : void 0 === e &&
                      ((n = i.globals.dom.Paper.select(
                        "".concat(a, " path[j='").concat(t, "']")
                      ).members[0]),
                      ("pie" !== i.config.chart.type &&
                        "polarArea" !== i.config.chart.type &&
                        "donut" !== i.config.chart.type) ||
                        this.ctx.pie.pieClicked(t)),
                  n
                    ? (new m(this.ctx).pathMouseDown(n, null),
                      n.node ? n.node : null)
                    : (console.warn(
                        "toggleDataPointSelection: Element not found"
                      ),
                      null)
                );
              },
            },
            {
              key: "forceXAxisUpdate",
              value: function (t) {
                var e = this.w;
                if (
                  (["min", "max"].forEach(function (i) {
                    void 0 !== t.xaxis[i] &&
                      ((e.config.xaxis[i] = t.xaxis[i]),
                      (e.globals.lastXAxis[i] = t.xaxis[i]));
                  }),
                  t.xaxis.categories &&
                    t.xaxis.categories.length &&
                    (e.config.xaxis.categories = t.xaxis.categories),
                  e.config.xaxis.convertedCatToNumeric)
                ) {
                  var i = new N(t);
                  t = i.convertCatToNumericXaxis(t, this.ctx);
                }
                return t;
              },
            },
            {
              key: "forceYAxisUpdate",
              value: function (t) {
                var e = this.w;
                return (
                  e.config.chart.stacked &&
                    "100%" === e.config.chart.stackType &&
                    (Array.isArray(t.yaxis)
                      ? t.yaxis.forEach(function (e, i) {
                          (t.yaxis[i].min = 0), (t.yaxis[i].max = 100);
                        })
                      : ((t.yaxis.min = 0), (t.yaxis.max = 100))),
                  t
                );
              },
            },
            {
              key: "revertDefaultAxisMinMax",
              value: function (t) {
                var e = this,
                  i = this.w,
                  n = i.globals.lastXAxis,
                  a = i.globals.lastYAxis;
                t && t.xaxis && (n = t.xaxis),
                  t && t.yaxis && (a = t.yaxis),
                  (i.config.xaxis.min = n.min),
                  (i.config.xaxis.max = n.max);
                i.config.yaxis.map(function (t, n) {
                  i.globals.zoomed || void 0 !== a[n]
                    ? (function (t) {
                        void 0 !== a[t] &&
                          ((i.config.yaxis[t].min = a[t].min),
                          (i.config.yaxis[t].max = a[t].max));
                      })(n)
                    : void 0 !== e.ctx.opts.yaxis[n] &&
                      ((t.min = e.ctx.opts.yaxis[n].min),
                      (t.max = e.ctx.opts.yaxis[n].max));
                });
              },
            },
          ]),
          i
        );
      })();
    (_t = "undefined" != typeof window ? window : void 0),
      (Lt = function (e, i) {
        var n = ((void 0 !== this ? this : e).SVG = function (t) {
          if (n.supported)
            return (t = new n.Doc(t)), n.parser.draw || n.prepare(), t;
        });
        if (
          ((n.ns = "http://www.w3.org/2000/svg"),
          (n.xmlns = "http://www.w3.org/2000/xmlns/"),
          (n.xlink = "http://www.w3.org/1999/xlink"),
          (n.svgjs = "http://svgjs.dev"),
          (n.supported = !0),
          !n.supported)
        )
          return !1;
        (n.did = 1e3),
          (n.eid = function (t) {
            return "Svgjs" + d(t) + n.did++;
          }),
          (n.create = function (t) {
            var e = i.createElementNS(this.ns, t);
            return e.setAttribute("id", this.eid(t)), e;
          }),
          (n.extend = function () {
            var t, e;
            e = (t = [].slice.call(arguments)).pop();
            for (var i = t.length - 1; i >= 0; i--)
              if (t[i]) for (var a in e) t[i].prototype[a] = e[a];
            n.Set && n.Set.inherit && n.Set.inherit();
          }),
          (n.invent = function (t) {
            var e =
              "function" == typeof t.create
                ? t.create
                : function () {
                    this.constructor.call(this, n.create(t.create));
                  };
            return (
              t.inherit && (e.prototype = new t.inherit()),
              t.extend && n.extend(e, t.extend),
              t.construct && n.extend(t.parent || n.Container, t.construct),
              e
            );
          }),
          (n.adopt = function (t) {
            return t
              ? t.instance
                ? t.instance
                : (((i =
                    "svg" == t.nodeName
                      ? t.parentNode instanceof e.SVGElement
                        ? new n.Nested()
                        : new n.Doc()
                      : "linearGradient" == t.nodeName
                      ? new n.Gradient("linear")
                      : "radialGradient" == t.nodeName
                      ? new n.Gradient("radial")
                      : n[d(t.nodeName)]
                      ? new n[d(t.nodeName)]()
                      : new n.Element(t)).type = t.nodeName),
                  (i.node = t),
                  (t.instance = i),
                  i instanceof n.Doc && i.namespace().defs(),
                  i.setData(JSON.parse(t.getAttribute("svgjs:data")) || {}),
                  i)
              : null;
            var i;
          }),
          (n.prepare = function () {
            var t = i.getElementsByTagName("body")[0],
              e = (t ? new n.Doc(t) : n.adopt(i.documentElement).nested()).size(
                2,
                0
              );
            n.parser = {
              body: t || i.documentElement,
              draw: e.style(
                "opacity:0;position:absolute;left:-100%;top:-100%;overflow:hidden"
              ).node,
              poly: e.polyline().node,
              path: e.path().node,
              native: n.create("svg"),
            };
          }),
          (n.parser = { native: n.create("svg") }),
          i.addEventListener(
            "DOMContentLoaded",
            function () {
              n.parser.draw || n.prepare();
            },
            !1
          ),
          (n.regex = {
            numberAndUnit: /^([+-]?(\d+(\.\d*)?|\.\d+)(e[+-]?\d+)?)([a-z%]*)$/i,
            hex: /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i,
            rgb: /rgb\((\d+),(\d+),(\d+)\)/,
            reference: /#([a-z0-9\-_]+)/i,
            transforms: /\)\s*,?\s*/,
            whitespace: /\s/g,
            isHex: /^#[a-f0-9]{3,6}$/i,
            isRgb: /^rgb\(/,
            isCss: /[^:]+:[^;]+;?/,
            isBlank: /^(\s+)?$/,
            isNumber: /^[+-]?(\d+(\.\d*)?|\.\d+)(e[+-]?\d+)?$/i,
            isPercent: /^-?[\d\.]+%$/,
            isImage: /\.(jpg|jpeg|png|gif|svg)(\?[^=]+.*)?/i,
            delimiter: /[\s,]+/,
            hyphen: /([^e])\-/gi,
            pathLetters: /[MLHVCSQTAZ]/gi,
            isPathLetter: /[MLHVCSQTAZ]/i,
            numbersWithDots:
              /((\d?\.\d+(?:e[+-]?\d+)?)((?:\.\d+(?:e[+-]?\d+)?)+))+/gi,
            dots: /\./g,
          }),
          (n.utils = {
            map: function (t, e) {
              for (var i = t.length, n = [], a = 0; a < i; a++) n.push(e(t[a]));
              return n;
            },
            filter: function (t, e) {
              for (var i = t.length, n = [], a = 0; a < i; a++)
                e(t[a]) && n.push(t[a]);
              return n;
            },
            filterSVGElements: function (t) {
              return this.filter(t, function (t) {
                return t instanceof e.SVGElement;
              });
            },
          }),
          (n.defaults = {
            attrs: {
              "fill-opacity": 1,
              "stroke-opacity": 1,
              "stroke-width": 0,
              "stroke-linejoin": "miter",
              "stroke-linecap": "butt",
              fill: "#000000",
              stroke: "#000000",
              opacity: 1,
              x: 0,
              y: 0,
              cx: 0,
              cy: 0,
              width: 0,
              height: 0,
              r: 0,
              rx: 0,
              ry: 0,
              offset: 0,
              "stop-opacity": 1,
              "stop-color": "#000000",
              "font-size": 16,
              "font-family": "Helvetica, Arial, sans-serif",
              "text-anchor": "start",
            },
          }),
          (n.Color = function (e) {
            var i, a;
            (this.r = 0),
              (this.g = 0),
              (this.b = 0),
              e &&
                ("string" == typeof e
                  ? n.regex.isRgb.test(e)
                    ? ((i = n.regex.rgb.exec(
                        e.replace(n.regex.whitespace, "")
                      )),
                      (this.r = parseInt(i[1])),
                      (this.g = parseInt(i[2])),
                      (this.b = parseInt(i[3])))
                    : n.regex.isHex.test(e) &&
                      ((i = n.regex.hex.exec(
                        4 == (a = e).length
                          ? [
                              "#",
                              a.substring(1, 2),
                              a.substring(1, 2),
                              a.substring(2, 3),
                              a.substring(2, 3),
                              a.substring(3, 4),
                              a.substring(3, 4),
                            ].join("")
                          : a
                      )),
                      (this.r = parseInt(i[1], 16)),
                      (this.g = parseInt(i[2], 16)),
                      (this.b = parseInt(i[3], 16)))
                  : "object" === t(e) &&
                    ((this.r = e.r), (this.g = e.g), (this.b = e.b)));
          }),
          n.extend(n.Color, {
            toString: function () {
              return this.toHex();
            },
            toHex: function () {
              return "#" + u(this.r) + u(this.g) + u(this.b);
            },
            toRgb: function () {
              return "rgb(" + [this.r, this.g, this.b].join() + ")";
            },
            brightness: function () {
              return (
                (this.r / 255) * 0.3 +
                (this.g / 255) * 0.59 +
                (this.b / 255) * 0.11
              );
            },
            morph: function (t) {
              return (this.destination = new n.Color(t)), this;
            },
            at: function (t) {
              return this.destination
                ? ((t = t < 0 ? 0 : t > 1 ? 1 : t),
                  new n.Color({
                    r: ~~(this.r + (this.destination.r - this.r) * t),
                    g: ~~(this.g + (this.destination.g - this.g) * t),
                    b: ~~(this.b + (this.destination.b - this.b) * t),
                  }))
                : this;
            },
          }),
          (n.Color.test = function (t) {
            return (t += ""), n.regex.isHex.test(t) || n.regex.isRgb.test(t);
          }),
          (n.Color.isRgb = function (t) {
            return (
              t &&
              "number" == typeof t.r &&
              "number" == typeof t.g &&
              "number" == typeof t.b
            );
          }),
          (n.Color.isColor = function (t) {
            return n.Color.isRgb(t) || n.Color.test(t);
          }),
          (n.Array = function (t, e) {
            0 == (t = (t || []).valueOf()).length && e && (t = e.valueOf()),
              (this.value = this.parse(t));
          }),
          n.extend(n.Array, {
            toString: function () {
              return this.value.join(" ");
            },
            valueOf: function () {
              return this.value;
            },
            parse: function (t) {
              return (t = t.valueOf()), Array.isArray(t) ? t : this.split(t);
            },
          }),
          (n.PointArray = function (t, e) {
            n.Array.call(this, t, e || [[0, 0]]);
          }),
          (n.PointArray.prototype = new n.Array()),
          (n.PointArray.prototype.constructor = n.PointArray);
        for (
          var a = {
              M: function (t, e, i) {
                return (e.x = i.x = t[0]), (e.y = i.y = t[1]), ["M", e.x, e.y];
              },
              L: function (t, e) {
                return (e.x = t[0]), (e.y = t[1]), ["L", t[0], t[1]];
              },
              H: function (t, e) {
                return (e.x = t[0]), ["H", t[0]];
              },
              V: function (t, e) {
                return (e.y = t[0]), ["V", t[0]];
              },
              C: function (t, e) {
                return (
                  (e.x = t[4]),
                  (e.y = t[5]),
                  ["C", t[0], t[1], t[2], t[3], t[4], t[5]]
                );
              },
              Q: function (t, e) {
                return (
                  (e.x = t[2]), (e.y = t[3]), ["Q", t[0], t[1], t[2], t[3]]
                );
              },
              Z: function (t, e, i) {
                return (e.x = i.x), (e.y = i.y), ["Z"];
              },
            },
            s = "mlhvqtcsaz".split(""),
            r = 0,
            o = s.length;
          r < o;
          ++r
        )
          a[s[r]] = (function (t) {
            return function (e, i, n) {
              if ("H" == t) e[0] = e[0] + i.x;
              else if ("V" == t) e[0] = e[0] + i.y;
              else if ("A" == t) (e[5] = e[5] + i.x), (e[6] = e[6] + i.y);
              else
                for (var s = 0, r = e.length; s < r; ++s)
                  e[s] = e[s] + (s % 2 ? i.y : i.x);
              return a[t](e, i, n);
            };
          })(s[r].toUpperCase());
        (n.PathArray = function (t, e) {
          n.Array.call(this, t, e || [["M", 0, 0]]);
        }),
          (n.PathArray.prototype = new n.Array()),
          (n.PathArray.prototype.constructor = n.PathArray),
          n.extend(n.PathArray, {
            toString: function () {
              return (function (t) {
                for (var e = 0, i = t.length, n = ""; e < i; e++)
                  (n += t[e][0]),
                    null != t[e][1] &&
                      ((n += t[e][1]),
                      null != t[e][2] &&
                        ((n += " "),
                        (n += t[e][2]),
                        null != t[e][3] &&
                          ((n += " "),
                          (n += t[e][3]),
                          (n += " "),
                          (n += t[e][4]),
                          null != t[e][5] &&
                            ((n += " "),
                            (n += t[e][5]),
                            (n += " "),
                            (n += t[e][6]),
                            null != t[e][7] && ((n += " "), (n += t[e][7]))))));
                return n + " ";
              })(this.value);
            },
            move: function (t, e) {
              var i = this.bbox();
              return i.x, i.y, this;
            },
            at: function (t) {
              if (!this.destination) return this;
              for (
                var e = this.value,
                  i = this.destination.value,
                  a = [],
                  s = new n.PathArray(),
                  r = 0,
                  o = e.length;
                r < o;
                r++
              ) {
                a[r] = [e[r][0]];
                for (var l = 1, c = e[r].length; l < c; l++)
                  a[r][l] = e[r][l] + (i[r][l] - e[r][l]) * t;
                "A" === a[r][0] &&
                  ((a[r][4] = +(0 != a[r][4])), (a[r][5] = +(0 != a[r][5])));
              }
              return (s.value = a), s;
            },
            parse: function (t) {
              if (t instanceof n.PathArray) return t.valueOf();
              var e,
                i = {
                  M: 2,
                  L: 2,
                  H: 1,
                  V: 1,
                  C: 6,
                  S: 4,
                  Q: 4,
                  T: 2,
                  A: 7,
                  Z: 0,
                };
              t =
                "string" == typeof t
                  ? t
                      .replace(n.regex.numbersWithDots, c)
                      .replace(n.regex.pathLetters, " $& ")
                      .replace(n.regex.hyphen, "$1 -")
                      .trim()
                      .split(n.regex.delimiter)
                  : t.reduce(function (t, e) {
                      return [].concat.call(t, e);
                    }, []);
              var s = [],
                r = new n.Point(),
                o = new n.Point(),
                l = 0,
                h = t.length;
              do {
                n.regex.isPathLetter.test(t[l])
                  ? ((e = t[l]), ++l)
                  : "M" == e
                  ? (e = "L")
                  : "m" == e && (e = "l"),
                  s.push(
                    a[e].call(
                      null,
                      t.slice(l, (l += i[e.toUpperCase()])).map(parseFloat),
                      r,
                      o
                    )
                  );
              } while (h > l);
              return s;
            },
            bbox: function () {
              return (
                n.parser.draw || n.prepare(),
                n.parser.path.setAttribute("d", this.toString()),
                n.parser.path.getBBox()
              );
            },
          }),
          (n.Number = n.invent({
            create: function (t, e) {
              (this.value = 0),
                (this.unit = e || ""),
                "number" == typeof t
                  ? (this.value = isNaN(t)
                      ? 0
                      : isFinite(t)
                      ? t
                      : t < 0
                      ? -34e37
                      : 34e37)
                  : "string" == typeof t
                  ? (e = t.match(n.regex.numberAndUnit)) &&
                    ((this.value = parseFloat(e[1])),
                    "%" == e[5]
                      ? (this.value /= 100)
                      : "s" == e[5] && (this.value *= 1e3),
                    (this.unit = e[5]))
                  : t instanceof n.Number &&
                    ((this.value = t.valueOf()), (this.unit = t.unit));
            },
            extend: {
              toString: function () {
                return (
                  ("%" == this.unit
                    ? ~~(1e8 * this.value) / 1e6
                    : "s" == this.unit
                    ? this.value / 1e3
                    : this.value) + this.unit
                );
              },
              toJSON: function () {
                return this.toString();
              },
              valueOf: function () {
                return this.value;
              },
              plus: function (t) {
                return (
                  (t = new n.Number(t)),
                  new n.Number(this + t, this.unit || t.unit)
                );
              },
              minus: function (t) {
                return (
                  (t = new n.Number(t)),
                  new n.Number(this - t, this.unit || t.unit)
                );
              },
              times: function (t) {
                return (
                  (t = new n.Number(t)),
                  new n.Number(this * t, this.unit || t.unit)
                );
              },
              divide: function (t) {
                return (
                  (t = new n.Number(t)),
                  new n.Number(this / t, this.unit || t.unit)
                );
              },
              to: function (t) {
                var e = new n.Number(this);
                return "string" == typeof t && (e.unit = t), e;
              },
              morph: function (t) {
                return (
                  (this.destination = new n.Number(t)),
                  t.relative && (this.destination.value += this.value),
                  this
                );
              },
              at: function (t) {
                return this.destination
                  ? new n.Number(this.destination)
                      .minus(this)
                      .times(t)
                      .plus(this)
                  : this;
              },
            },
          })),
          (n.Element = n.invent({
            create: function (t) {
              (this._stroke = n.defaults.attrs.stroke),
                (this._event = null),
                (this.dom = {}),
                (this.node = t) &&
                  ((this.type = t.nodeName),
                  (this.node.instance = this),
                  (this._stroke = t.getAttribute("stroke") || this._stroke));
            },
            extend: {
              x: function (t) {
                return this.attr("x", t);
              },
              y: function (t) {
                return this.attr("y", t);
              },
              cx: function (t) {
                return null == t
                  ? this.x() + this.width() / 2
                  : this.x(t - this.width() / 2);
              },
              cy: function (t) {
                return null == t
                  ? this.y() + this.height() / 2
                  : this.y(t - this.height() / 2);
              },
              move: function (t, e) {
                return this.x(t).y(e);
              },
              center: function (t, e) {
                return this.cx(t).cy(e);
              },
              width: function (t) {
                return this.attr("width", t);
              },
              height: function (t) {
                return this.attr("height", t);
              },
              size: function (t, e) {
                var i = f(this, t, e);
                return this.width(new n.Number(i.width)).height(
                  new n.Number(i.height)
                );
              },
              clone: function (t) {
                this.writeDataToDom();
                var e = x(this.node.cloneNode(!0));
                return t ? t.add(e) : this.after(e), e;
              },
              remove: function () {
                return this.parent() && this.parent().removeElement(this), this;
              },
              replace: function (t) {
                return this.after(t).remove(), t;
              },
              addTo: function (t) {
                return t.put(this);
              },
              putIn: function (t) {
                return t.add(this);
              },
              id: function (t) {
                return this.attr("id", t);
              },
              show: function () {
                return this.style("display", "");
              },
              hide: function () {
                return this.style("display", "none");
              },
              visible: function () {
                return "none" != this.style("display");
              },
              toString: function () {
                return this.attr("id");
              },
              classes: function () {
                var t = this.attr("class");
                return null == t ? [] : t.trim().split(n.regex.delimiter);
              },
              hasClass: function (t) {
                return -1 != this.classes().indexOf(t);
              },
              addClass: function (t) {
                if (!this.hasClass(t)) {
                  var e = this.classes();
                  e.push(t), this.attr("class", e.join(" "));
                }
                return this;
              },
              removeClass: function (t) {
                return (
                  this.hasClass(t) &&
                    this.attr(
                      "class",
                      this.classes()
                        .filter(function (e) {
                          return e != t;
                        })
                        .join(" ")
                    ),
                  this
                );
              },
              toggleClass: function (t) {
                return this.hasClass(t)
                  ? this.removeClass(t)
                  : this.addClass(t);
              },
              reference: function (t) {
                return n.get(this.attr(t));
              },
              parent: function (t) {
                var i = this;
                if (!i.node.parentNode) return null;
                if (((i = n.adopt(i.node.parentNode)), !t)) return i;
                for (; i && i.node instanceof e.SVGElement; ) {
                  if ("string" == typeof t ? i.matches(t) : i instanceof t)
                    return i;
                  if (
                    !i.node.parentNode ||
                    "#document" == i.node.parentNode.nodeName
                  )
                    return null;
                  i = n.adopt(i.node.parentNode);
                }
              },
              doc: function () {
                return this instanceof n.Doc ? this : this.parent(n.Doc);
              },
              parents: function (t) {
                var e = [],
                  i = this;
                do {
                  if (!(i = i.parent(t)) || !i.node) break;
                  e.push(i);
                } while (i.parent);
                return e;
              },
              matches: function (t) {
                return (function (t, e) {
                  return (
                    t.matches ||
                    t.matchesSelector ||
                    t.msMatchesSelector ||
                    t.mozMatchesSelector ||
                    t.webkitMatchesSelector ||
                    t.oMatchesSelector
                  ).call(t, e);
                })(this.node, t);
              },
              native: function () {
                return this.node;
              },
              svg: function (t) {
                var e = i.createElement("svg");
                if (!(t && this instanceof n.Parent))
                  return (
                    e.appendChild((t = i.createElement("svg"))),
                    this.writeDataToDom(),
                    t.appendChild(this.node.cloneNode(!0)),
                    e.innerHTML.replace(/^<svg>/, "").replace(/<\/svg>$/, "")
                  );
                e.innerHTML =
                  "<svg>" +
                  t
                    .replace(/\n/, "")
                    .replace(/<([\w:-]+)([^<]+?)\/>/g, "<$1$2></$1>") +
                  "</svg>";
                for (var a = 0, s = e.firstChild.childNodes.length; a < s; a++)
                  this.node.appendChild(e.firstChild.firstChild);
                return this;
              },
              writeDataToDom: function () {
                return (
                  (this.each || this.lines) &&
                    (this.each ? this : this.lines()).each(function () {
                      this.writeDataToDom();
                    }),
                  this.node.removeAttribute("svgjs:data"),
                  Object.keys(this.dom).length &&
                    this.node.setAttribute(
                      "svgjs:data",
                      JSON.stringify(this.dom)
                    ),
                  this
                );
              },
              setData: function (t) {
                return (this.dom = t), this;
              },
              is: function (t) {
                return (function (t, e) {
                  return t instanceof e;
                })(this, t);
              },
            },
          })),
          (n.easing = {
            "-": function (t) {
              return t;
            },
            "<>": function (t) {
              return -Math.cos(t * Math.PI) / 2 + 0.5;
            },
            ">": function (t) {
              return Math.sin((t * Math.PI) / 2);
            },
            "<": function (t) {
              return 1 - Math.cos((t * Math.PI) / 2);
            },
          }),
          (n.morph = function (t) {
            return function (e, i) {
              return new n.MorphObj(e, i).at(t);
            };
          }),
          (n.Situation = n.invent({
            create: function (t) {
              (this.init = !1),
                (this.reversed = !1),
                (this.reversing = !1),
                (this.duration = new n.Number(t.duration).valueOf()),
                (this.delay = new n.Number(t.delay).valueOf()),
                (this.start = +new Date() + this.delay),
                (this.finish = this.start + this.duration),
                (this.ease = t.ease),
                (this.loop = 0),
                (this.loops = !1),
                (this.animations = {}),
                (this.attrs = {}),
                (this.styles = {}),
                (this.transforms = []),
                (this.once = {});
            },
          })),
          (n.FX = n.invent({
            create: function (t) {
              (this._target = t),
                (this.situations = []),
                (this.active = !1),
                (this.situation = null),
                (this.paused = !1),
                (this.lastPos = 0),
                (this.pos = 0),
                (this.absPos = 0),
                (this._speed = 1);
            },
            extend: {
              animate: function (e, i, a) {
                "object" === t(e) &&
                  ((i = e.ease), (a = e.delay), (e = e.duration));
                var s = new n.Situation({
                  duration: e || 1e3,
                  delay: a || 0,
                  ease: n.easing[i || "-"] || i,
                });
                return this.queue(s), this;
              },
              target: function (t) {
                return t && t instanceof n.Element
                  ? ((this._target = t), this)
                  : this._target;
              },
              timeToAbsPos: function (t) {
                return (
                  (t - this.situation.start) /
                  (this.situation.duration / this._speed)
                );
              },
              absPosToTime: function (t) {
                return (
                  (this.situation.duration / this._speed) * t +
                  this.situation.start
                );
              },
              startAnimFrame: function () {
                this.stopAnimFrame(),
                  (this.animationFrame = e.requestAnimationFrame(
                    function () {
                      this.step();
                    }.bind(this)
                  ));
              },
              stopAnimFrame: function () {
                e.cancelAnimationFrame(this.animationFrame);
              },
              start: function () {
                return (
                  !this.active &&
                    this.situation &&
                    ((this.active = !0), this.startCurrent()),
                  this
                );
              },
              startCurrent: function () {
                return (
                  (this.situation.start =
                    +new Date() + this.situation.delay / this._speed),
                  (this.situation.finish =
                    this.situation.start +
                    this.situation.duration / this._speed),
                  this.initAnimations().step()
                );
              },
              queue: function (t) {
                return (
                  ("function" == typeof t || t instanceof n.Situation) &&
                    this.situations.push(t),
                  this.situation || (this.situation = this.situations.shift()),
                  this
                );
              },
              dequeue: function () {
                return (
                  this.stop(),
                  (this.situation = this.situations.shift()),
                  this.situation &&
                    (this.situation instanceof n.Situation
                      ? this.start()
                      : this.situation.call(this)),
                  this
                );
              },
              initAnimations: function () {
                var t,
                  e = this.situation;
                if (e.init) return this;
                for (var i in e.animations) {
                  (t = this.target()[i]()),
                    Array.isArray(t) || (t = [t]),
                    Array.isArray(e.animations[i]) ||
                      (e.animations[i] = [e.animations[i]]);
                  for (var a = t.length; a--; )
                    e.animations[i][a] instanceof n.Number &&
                      (t[a] = new n.Number(t[a])),
                      (e.animations[i][a] = t[a].morph(e.animations[i][a]));
                }
                for (var i in e.attrs)
                  e.attrs[i] = new n.MorphObj(
                    this.target().attr(i),
                    e.attrs[i]
                  );
                for (var i in e.styles)
                  e.styles[i] = new n.MorphObj(
                    this.target().style(i),
                    e.styles[i]
                  );
                return (
                  (e.initialTransformation = this.target().matrixify()),
                  (e.init = !0),
                  this
                );
              },
              clearQueue: function () {
                return (this.situations = []), this;
              },
              clearCurrent: function () {
                return (this.situation = null), this;
              },
              stop: function (t, e) {
                var i = this.active;
                return (
                  (this.active = !1),
                  e && this.clearQueue(),
                  t &&
                    this.situation &&
                    (!i && this.startCurrent(), this.atEnd()),
                  this.stopAnimFrame(),
                  this.clearCurrent()
                );
              },
              after: function (t) {
                var e = this.last();
                return (
                  this.target().on("finished.fx", function i(n) {
                    n.detail.situation == e &&
                      (t.call(this, e), this.off("finished.fx", i));
                  }),
                  this._callStart()
                );
              },
              during: function (t) {
                var e = this.last(),
                  i = function (i) {
                    i.detail.situation == e &&
                      t.call(
                        this,
                        i.detail.pos,
                        n.morph(i.detail.pos),
                        i.detail.eased,
                        e
                      );
                  };
                return (
                  this.target().off("during.fx", i).on("during.fx", i),
                  this.after(function () {
                    this.off("during.fx", i);
                  }),
                  this._callStart()
                );
              },
              afterAll: function (t) {
                var e = function e(i) {
                  t.call(this), this.off("allfinished.fx", e);
                };
                return (
                  this.target()
                    .off("allfinished.fx", e)
                    .on("allfinished.fx", e),
                  this._callStart()
                );
              },
              last: function () {
                return this.situations.length
                  ? this.situations[this.situations.length - 1]
                  : this.situation;
              },
              add: function (t, e, i) {
                return (
                  (this.last()[i || "animations"][t] = e), this._callStart()
                );
              },
              step: function (t) {
                var e, i, n;
                t || (this.absPos = this.timeToAbsPos(+new Date())),
                  !1 !== this.situation.loops
                    ? ((e = Math.max(this.absPos, 0)),
                      (i = Math.floor(e)),
                      !0 === this.situation.loops || i < this.situation.loops
                        ? ((this.pos = e - i),
                          (n = this.situation.loop),
                          (this.situation.loop = i))
                        : ((this.absPos = this.situation.loops),
                          (this.pos = 1),
                          (n = this.situation.loop - 1),
                          (this.situation.loop = this.situation.loops)),
                      this.situation.reversing &&
                        (this.situation.reversed =
                          this.situation.reversed !=
                          Boolean((this.situation.loop - n) % 2)))
                    : ((this.absPos = Math.min(this.absPos, 1)),
                      (this.pos = this.absPos)),
                  this.pos < 0 && (this.pos = 0),
                  this.situation.reversed && (this.pos = 1 - this.pos);
                var a = this.situation.ease(this.pos);
                for (var s in this.situation.once)
                  s > this.lastPos &&
                    s <= a &&
                    (this.situation.once[s].call(this.target(), this.pos, a),
                    delete this.situation.once[s]);
                return (
                  this.active &&
                    this.target().fire("during", {
                      pos: this.pos,
                      eased: a,
                      fx: this,
                      situation: this.situation,
                    }),
                  this.situation
                    ? (this.eachAt(),
                      (1 == this.pos && !this.situation.reversed) ||
                      (this.situation.reversed && 0 == this.pos)
                        ? (this.stopAnimFrame(),
                          this.target().fire("finished", {
                            fx: this,
                            situation: this.situation,
                          }),
                          this.situations.length ||
                            (this.target().fire("allfinished"),
                            this.situations.length ||
                              (this.target().off(".fx"), (this.active = !1))),
                          this.active ? this.dequeue() : this.clearCurrent())
                        : !this.paused && this.active && this.startAnimFrame(),
                      (this.lastPos = a),
                      this)
                    : this
                );
              },
              eachAt: function () {
                var t,
                  e = this,
                  i = this.target(),
                  a = this.situation;
                for (var s in a.animations)
                  (t = [].concat(a.animations[s]).map(function (t) {
                    return "string" != typeof t && t.at
                      ? t.at(a.ease(e.pos), e.pos)
                      : t;
                  })),
                    i[s].apply(i, t);
                for (var s in a.attrs)
                  (t = [s].concat(a.attrs[s]).map(function (t) {
                    return "string" != typeof t && t.at
                      ? t.at(a.ease(e.pos), e.pos)
                      : t;
                  })),
                    i.attr.apply(i, t);
                for (var s in a.styles)
                  (t = [s].concat(a.styles[s]).map(function (t) {
                    return "string" != typeof t && t.at
                      ? t.at(a.ease(e.pos), e.pos)
                      : t;
                  })),
                    i.style.apply(i, t);
                if (a.transforms.length) {
                  (t = a.initialTransformation), (s = 0);
                  for (var r = a.transforms.length; s < r; s++) {
                    var o = a.transforms[s];
                    o instanceof n.Matrix
                      ? (t = o.relative
                          ? t.multiply(
                              new n.Matrix().morph(o).at(a.ease(this.pos))
                            )
                          : t.morph(o).at(a.ease(this.pos)))
                      : (o.relative || o.undo(t.extract()),
                        (t = t.multiply(o.at(a.ease(this.pos)))));
                  }
                  i.matrix(t);
                }
                return this;
              },
              once: function (t, e, i) {
                var n = this.last();
                return i || (t = n.ease(t)), (n.once[t] = e), this;
              },
              _callStart: function () {
                return (
                  setTimeout(
                    function () {
                      this.start();
                    }.bind(this),
                    0
                  ),
                  this
                );
              },
            },
            parent: n.Element,
            construct: {
              animate: function (t, e, i) {
                return (this.fx || (this.fx = new n.FX(this))).animate(t, e, i);
              },
              delay: function (t) {
                return (this.fx || (this.fx = new n.FX(this))).delay(t);
              },
              stop: function (t, e) {
                return this.fx && this.fx.stop(t, e), this;
              },
              finish: function () {
                return this.fx && this.fx.finish(), this;
              },
            },
          })),
          (n.MorphObj = n.invent({
            create: function (t, e) {
              return n.Color.isColor(e)
                ? new n.Color(t).morph(e)
                : n.regex.delimiter.test(t)
                ? n.regex.pathLetters.test(t)
                  ? new n.PathArray(t).morph(e)
                  : new n.Array(t).morph(e)
                : n.regex.numberAndUnit.test(e)
                ? new n.Number(t).morph(e)
                : ((this.value = t), void (this.destination = e));
            },
            extend: {
              at: function (t, e) {
                return e < 1 ? this.value : this.destination;
              },
              valueOf: function () {
                return this.value;
              },
            },
          })),
          n.extend(n.FX, {
            attr: function (e, i, n) {
              if ("object" === t(e)) for (var a in e) this.attr(a, e[a]);
              else this.add(e, i, "attrs");
              return this;
            },
            plot: function (t, e, i, n) {
              return 4 == arguments.length
                ? this.plot([t, e, i, n])
                : this.add("plot", new (this.target().morphArray)(t));
            },
          }),
          (n.Box = n.invent({
            create: function (e, i, a, s) {
              if (!("object" !== t(e) || e instanceof n.Element))
                return n.Box.call(
                  this,
                  null != e.left ? e.left : e.x,
                  null != e.top ? e.top : e.y,
                  e.width,
                  e.height
                );
              4 == arguments.length &&
                ((this.x = e),
                (this.y = i),
                (this.width = a),
                (this.height = s)),
                m(this);
            },
          })),
          (n.BBox = n.invent({
            create: function (t) {
              if (
                (n.Box.apply(this, [].slice.call(arguments)),
                t instanceof n.Element)
              ) {
                var e;
                try {
                  if (!i.documentElement.contains) {
                    for (var a = t.node; a.parentNode; ) a = a.parentNode;
                    if (a != i) throw new Error("Element not in the dom");
                  }
                  e = t.node.getBBox();
                } catch (i) {
                  if (t instanceof n.Shape) {
                    n.parser.draw || n.prepare();
                    var s = t.clone(n.parser.draw.instance).show();
                    (e = s.node.getBBox()), s.remove();
                  } else
                    e = {
                      x: t.node.clientLeft,
                      y: t.node.clientTop,
                      width: t.node.clientWidth,
                      height: t.node.clientHeight,
                    };
                }
                n.Box.call(this, e);
              }
            },
            inherit: n.Box,
            parent: n.Element,
            construct: {
              bbox: function () {
                return new n.BBox(this);
              },
            },
          })),
          (n.BBox.prototype.constructor = n.BBox),
          (n.Matrix = n.invent({
            create: function (e) {
              var i = g([1, 0, 0, 1, 0, 0]);
              e =
                null === e
                  ? i
                  : e instanceof n.Element
                  ? e.matrixify()
                  : "string" == typeof e
                  ? g(e.split(n.regex.delimiter).map(parseFloat))
                  : 6 == arguments.length
                  ? g([].slice.call(arguments))
                  : Array.isArray(e)
                  ? g(e)
                  : e && "object" === t(e)
                  ? e
                  : i;
              for (var a = b.length - 1; a >= 0; --a)
                this[b[a]] = null != e[b[a]] ? e[b[a]] : i[b[a]];
            },
            extend: {
              extract: function () {
                var t = p(this, 0, 1);
                p(this, 1, 0);
                var e = (180 / Math.PI) * Math.atan2(t.y, t.x) - 90;
                return {
                  x: this.e,
                  y: this.f,
                  transformedX:
                    (this.e * Math.cos((e * Math.PI) / 180) +
                      this.f * Math.sin((e * Math.PI) / 180)) /
                    Math.sqrt(this.a * this.a + this.b * this.b),
                  transformedY:
                    (this.f * Math.cos((e * Math.PI) / 180) +
                      this.e * Math.sin((-e * Math.PI) / 180)) /
                    Math.sqrt(this.c * this.c + this.d * this.d),
                  rotation: e,
                  a: this.a,
                  b: this.b,
                  c: this.c,
                  d: this.d,
                  e: this.e,
                  f: this.f,
                  matrix: new n.Matrix(this),
                };
              },
              clone: function () {
                return new n.Matrix(this);
              },
              morph: function (t) {
                return (this.destination = new n.Matrix(t)), this;
              },
              multiply: function (t) {
                return new n.Matrix(
                  this.native().multiply(
                    (function (t) {
                      return t instanceof n.Matrix || (t = new n.Matrix(t)), t;
                    })(t).native()
                  )
                );
              },
              inverse: function () {
                return new n.Matrix(this.native().inverse());
              },
              translate: function (t, e) {
                return new n.Matrix(this.native().translate(t || 0, e || 0));
              },
              native: function () {
                for (
                  var t = n.parser.native.createSVGMatrix(), e = b.length - 1;
                  e >= 0;
                  e--
                )
                  t[b[e]] = this[b[e]];
                return t;
              },
              toString: function () {
                return (
                  "matrix(" +
                  v(this.a) +
                  "," +
                  v(this.b) +
                  "," +
                  v(this.c) +
                  "," +
                  v(this.d) +
                  "," +
                  v(this.e) +
                  "," +
                  v(this.f) +
                  ")"
                );
              },
            },
            parent: n.Element,
            construct: {
              ctm: function () {
                return new n.Matrix(this.node.getCTM());
              },
              screenCTM: function () {
                if (this instanceof n.Nested) {
                  var t = this.rect(1, 1),
                    e = t.node.getScreenCTM();
                  return t.remove(), new n.Matrix(e);
                }
                return new n.Matrix(this.node.getScreenCTM());
              },
            },
          })),
          (n.Point = n.invent({
            create: function (e, i) {
              var n;
              (n = Array.isArray(e)
                ? { x: e[0], y: e[1] }
                : "object" === t(e)
                ? { x: e.x, y: e.y }
                : null != e
                ? { x: e, y: null != i ? i : e }
                : { x: 0, y: 0 }),
                (this.x = n.x),
                (this.y = n.y);
            },
            extend: {
              clone: function () {
                return new n.Point(this);
              },
              morph: function (t, e) {
                return (this.destination = new n.Point(t, e)), this;
              },
            },
          })),
          n.extend(n.Element, {
            point: function (t, e) {
              return new n.Point(t, e).transform(this.screenCTM().inverse());
            },
          }),
          n.extend(n.Element, {
            attr: function (e, i, a) {
              if (null == e) {
                for (
                  e = {}, a = (i = this.node.attributes).length - 1;
                  a >= 0;
                  a--
                )
                  e[i[a].nodeName] = n.regex.isNumber.test(i[a].nodeValue)
                    ? parseFloat(i[a].nodeValue)
                    : i[a].nodeValue;
                return e;
              }
              if ("object" === t(e)) for (var s in e) this.attr(s, e[s]);
              else if (null === i) this.node.removeAttribute(e);
              else {
                if (null == i)
                  return null == (i = this.node.getAttribute(e))
                    ? n.defaults.attrs[e]
                    : n.regex.isNumber.test(i)
                    ? parseFloat(i)
                    : i;
                "stroke-width" == e
                  ? this.attr("stroke", parseFloat(i) > 0 ? this._stroke : null)
                  : "stroke" == e && (this._stroke = i),
                  ("fill" != e && "stroke" != e) ||
                    (n.regex.isImage.test(i) &&
                      (i = this.doc().defs().image(i, 0, 0)),
                    i instanceof n.Image &&
                      (i = this.doc()
                        .defs()
                        .pattern(0, 0, function () {
                          this.add(i);
                        }))),
                  "number" == typeof i
                    ? (i = new n.Number(i))
                    : n.Color.isColor(i)
                    ? (i = new n.Color(i))
                    : Array.isArray(i) && (i = new n.Array(i)),
                  "leading" == e
                    ? this.leading && this.leading(i)
                    : "string" == typeof a
                    ? this.node.setAttributeNS(a, e, i.toString())
                    : this.node.setAttribute(e, i.toString()),
                  !this.rebuild ||
                    ("font-size" != e && "x" != e) ||
                    this.rebuild(e, i);
              }
              return this;
            },
          }),
          n.extend(n.Element, {
            transform: function (e, i) {
              var a;
              return "object" !== t(e)
                ? ((a = new n.Matrix(this).extract()),
                  "string" == typeof e ? a[e] : a)
                : ((a = new n.Matrix(this)),
                  (i = !!i || !!e.relative),
                  null != e.a &&
                    (a = i ? a.multiply(new n.Matrix(e)) : new n.Matrix(e)),
                  this.attr("transform", a));
            },
          }),
          n.extend(n.Element, {
            untransform: function () {
              return this.attr("transform", null);
            },
            matrixify: function () {
              return (this.attr("transform") || "")
                .split(n.regex.transforms)
                .slice(0, -1)
                .map(function (t) {
                  var e = t.trim().split("(");
                  return [
                    e[0],
                    e[1].split(n.regex.delimiter).map(function (t) {
                      return parseFloat(t);
                    }),
                  ];
                })
                .reduce(function (t, e) {
                  return "matrix" == e[0]
                    ? t.multiply(g(e[1]))
                    : t[e[0]].apply(t, e[1]);
                }, new n.Matrix());
            },
            toParent: function (t) {
              if (this == t) return this;
              var e = this.screenCTM(),
                i = t.screenCTM().inverse();
              return this.addTo(t).untransform().transform(i.multiply(e)), this;
            },
            toDoc: function () {
              return this.toParent(this.doc());
            },
          }),
          (n.Transformation = n.invent({
            create: function (e, i) {
              if (arguments.length > 1 && "boolean" != typeof i)
                return this.constructor.call(this, [].slice.call(arguments));
              if (Array.isArray(e))
                for (var n = 0, a = this.arguments.length; n < a; ++n)
                  this[this.arguments[n]] = e[n];
              else if (e && "object" === t(e))
                for (n = 0, a = this.arguments.length; n < a; ++n)
                  this[this.arguments[n]] = e[this.arguments[n]];
              (this.inversed = !1), !0 === i && (this.inversed = !0);
            },
          })),
          (n.Translate = n.invent({
            parent: n.Matrix,
            inherit: n.Transformation,
            create: function (t, e) {
              this.constructor.apply(this, [].slice.call(arguments));
            },
            extend: {
              arguments: ["transformedX", "transformedY"],
              method: "translate",
            },
          })),
          n.extend(n.Element, {
            style: function (e, i) {
              if (0 == arguments.length) return this.node.style.cssText || "";
              if (arguments.length < 2)
                if ("object" === t(e)) for (var a in e) this.style(a, e[a]);
                else {
                  if (!n.regex.isCss.test(e)) return this.node.style[h(e)];
                  for (
                    e = e
                      .split(/\s*;\s*/)
                      .filter(function (t) {
                        return !!t;
                      })
                      .map(function (t) {
                        return t.split(/\s*:\s*/);
                      });
                    (i = e.pop());

                  )
                    this.style(i[0], i[1]);
                }
              else
                this.node.style[h(e)] =
                  null === i || n.regex.isBlank.test(i) ? "" : i;
              return this;
            },
          }),
          (n.Parent = n.invent({
            create: function (t) {
              this.constructor.call(this, t);
            },
            inherit: n.Element,
            extend: {
              children: function () {
                return n.utils.map(
                  n.utils.filterSVGElements(this.node.childNodes),
                  function (t) {
                    return n.adopt(t);
                  }
                );
              },
              add: function (t, e) {
                return (
                  null == e
                    ? this.node.appendChild(t.node)
                    : t.node != this.node.childNodes[e] &&
                      this.node.insertBefore(t.node, this.node.childNodes[e]),
                  this
                );
              },
              put: function (t, e) {
                return this.add(t, e), t;
              },
              has: function (t) {
                return this.index(t) >= 0;
              },
              index: function (t) {
                return [].slice.call(this.node.childNodes).indexOf(t.node);
              },
              get: function (t) {
                return n.adopt(this.node.childNodes[t]);
              },
              first: function () {
                return this.get(0);
              },
              last: function () {
                return this.get(this.node.childNodes.length - 1);
              },
              each: function (t, e) {
                for (var i = this.children(), a = 0, s = i.length; a < s; a++)
                  i[a] instanceof n.Element && t.apply(i[a], [a, i]),
                    e && i[a] instanceof n.Container && i[a].each(t, e);
                return this;
              },
              removeElement: function (t) {
                return this.node.removeChild(t.node), this;
              },
              clear: function () {
                for (; this.node.hasChildNodes(); )
                  this.node.removeChild(this.node.lastChild);
                return delete this._defs, this;
              },
              defs: function () {
                return this.doc().defs();
              },
            },
          })),
          n.extend(n.Parent, {
            ungroup: function (t, e) {
              return (
                0 === e ||
                  this instanceof n.Defs ||
                  this.node == n.parser.draw ||
                  ((t =
                    t ||
                    (this instanceof n.Doc ? this : this.parent(n.Parent))),
                  (e = e || 1 / 0),
                  this.each(function () {
                    return this instanceof n.Defs
                      ? this
                      : this instanceof n.Parent
                      ? this.ungroup(t, e - 1)
                      : this.toParent(t);
                  }),
                  this.node.firstChild || this.remove()),
                this
              );
            },
            flatten: function (t, e) {
              return this.ungroup(t, e);
            },
          }),
          (n.Container = n.invent({
            create: function (t) {
              this.constructor.call(this, t);
            },
            inherit: n.Parent,
          })),
          (n.ViewBox = n.invent({ parent: n.Container, construct: {} })),
          [
            "click",
            "dblclick",
            "mousedown",
            "mouseup",
            "mouseover",
            "mouseout",
            "mousemove",
            "touchstart",
            "touchmove",
            "touchleave",
            "touchend",
            "touchcancel",
          ].forEach(function (t) {
            n.Element.prototype[t] = function (e) {
              return n.on(this.node, t, e), this;
            };
          }),
          (n.listeners = []),
          (n.handlerMap = []),
          (n.listenerId = 0),
          (n.on = function (t, e, i, a, s) {
            var r = i.bind(a || t.instance || t),
              o = (n.handlerMap.indexOf(t) + 1 || n.handlerMap.push(t)) - 1,
              l = e.split(".")[0],
              c = e.split(".")[1] || "*";
            (n.listeners[o] = n.listeners[o] || {}),
              (n.listeners[o][l] = n.listeners[o][l] || {}),
              (n.listeners[o][l][c] = n.listeners[o][l][c] || {}),
              i._svgjsListenerId || (i._svgjsListenerId = ++n.listenerId),
              (n.listeners[o][l][c][i._svgjsListenerId] = r),
              t.addEventListener(l, r, s || { passive: !0 });
          }),
          (n.off = function (t, e, i) {
            var a = n.handlerMap.indexOf(t),
              s = e && e.split(".")[0],
              r = e && e.split(".")[1],
              o = "";
            if (-1 != a)
              if (i) {
                if (("function" == typeof i && (i = i._svgjsListenerId), !i))
                  return;
                n.listeners[a][s] &&
                  n.listeners[a][s][r || "*"] &&
                  (t.removeEventListener(s, n.listeners[a][s][r || "*"][i], !1),
                  delete n.listeners[a][s][r || "*"][i]);
              } else if (r && s) {
                if (n.listeners[a][s] && n.listeners[a][s][r]) {
                  for (var l in n.listeners[a][s][r])
                    n.off(t, [s, r].join("."), l);
                  delete n.listeners[a][s][r];
                }
              } else if (r)
                for (var c in n.listeners[a])
                  for (var o in n.listeners[a][c])
                    r === o && n.off(t, [c, r].join("."));
              else if (s) {
                if (n.listeners[a][s]) {
                  for (var o in n.listeners[a][s]) n.off(t, [s, o].join("."));
                  delete n.listeners[a][s];
                }
              } else {
                for (var c in n.listeners[a]) n.off(t, c);
                delete n.listeners[a], delete n.handlerMap[a];
              }
          }),
          n.extend(n.Element, {
            on: function (t, e, i, a) {
              return n.on(this.node, t, e, i, a), this;
            },
            off: function (t, e) {
              return n.off(this.node, t, e), this;
            },
            fire: function (t, i) {
              return (
                t instanceof e.Event
                  ? this.node.dispatchEvent(t)
                  : this.node.dispatchEvent(
                      (t = new n.CustomEvent(t, { detail: i, cancelable: !0 }))
                    ),
                (this._event = t),
                this
              );
            },
            event: function () {
              return this._event;
            },
          }),
          (n.Defs = n.invent({ create: "defs", inherit: n.Container })),
          (n.G = n.invent({
            create: "g",
            inherit: n.Container,
            extend: {
              x: function (t) {
                return null == t
                  ? this.transform("x")
                  : this.transform({ x: t - this.x() }, !0);
              },
            },
            construct: {
              group: function () {
                return this.put(new n.G());
              },
            },
          })),
          (n.Doc = n.invent({
            create: function (t) {
              t &&
                ("svg" ==
                (t = "string" == typeof t ? i.getElementById(t) : t).nodeName
                  ? this.constructor.call(this, t)
                  : (this.constructor.call(this, n.create("svg")),
                    t.appendChild(this.node),
                    this.size("100%", "100%")),
                this.namespace().defs());
            },
            inherit: n.Container,
            extend: {
              namespace: function () {
                return this.attr({ xmlns: n.ns, version: "1.1" })
                  .attr("xmlns:xlink", n.xlink, n.xmlns)
                  .attr("xmlns:svgjs", n.svgjs, n.xmlns);
              },
              defs: function () {
                var t;
                return (
                  this._defs ||
                    ((t = this.node.getElementsByTagName("defs")[0])
                      ? (this._defs = n.adopt(t))
                      : (this._defs = new n.Defs()),
                    this.node.appendChild(this._defs.node)),
                  this._defs
                );
              },
              parent: function () {
                return this.node.parentNode &&
                  "#document" != this.node.parentNode.nodeName
                  ? this.node.parentNode
                  : null;
              },
              remove: function () {
                return (
                  this.parent() && this.parent().removeChild(this.node), this
                );
              },
              clear: function () {
                for (; this.node.hasChildNodes(); )
                  this.node.removeChild(this.node.lastChild);
                return (
                  delete this._defs,
                  n.parser.draw &&
                    !n.parser.draw.parentNode &&
                    this.node.appendChild(n.parser.draw),
                  this
                );
              },
              clone: function (t) {
                this.writeDataToDom();
                var e = this.node,
                  i = x(e.cloneNode(!0));
                return (
                  t
                    ? (t.node || t).appendChild(i.node)
                    : e.parentNode.insertBefore(i.node, e.nextSibling),
                  i
                );
              },
            },
          })),
          n.extend(n.Element, {}),
          (n.Gradient = n.invent({
            create: function (t) {
              this.constructor.call(this, n.create(t + "Gradient")),
                (this.type = t);
            },
            inherit: n.Container,
            extend: {
              at: function (t, e, i) {
                return this.put(new n.Stop()).update(t, e, i);
              },
              update: function (t) {
                return (
                  this.clear(),
                  "function" == typeof t && t.call(this, this),
                  this
                );
              },
              fill: function () {
                return "url(#" + this.id() + ")";
              },
              toString: function () {
                return this.fill();
              },
              attr: function (t, e, i) {
                return (
                  "transform" == t && (t = "gradientTransform"),
                  n.Container.prototype.attr.call(this, t, e, i)
                );
              },
            },
            construct: {
              gradient: function (t, e) {
                return this.defs().gradient(t, e);
              },
            },
          })),
          n.extend(n.Gradient, n.FX, {
            from: function (t, e) {
              return "radial" == (this._target || this).type
                ? this.attr({ fx: new n.Number(t), fy: new n.Number(e) })
                : this.attr({ x1: new n.Number(t), y1: new n.Number(e) });
            },
            to: function (t, e) {
              return "radial" == (this._target || this).type
                ? this.attr({ cx: new n.Number(t), cy: new n.Number(e) })
                : this.attr({ x2: new n.Number(t), y2: new n.Number(e) });
            },
          }),
          n.extend(n.Defs, {
            gradient: function (t, e) {
              return this.put(new n.Gradient(t)).update(e);
            },
          }),
          (n.Stop = n.invent({
            create: "stop",
            inherit: n.Element,
            extend: {
              update: function (t) {
                return (
                  ("number" == typeof t || t instanceof n.Number) &&
                    (t = {
                      offset: arguments[0],
                      color: arguments[1],
                      opacity: arguments[2],
                    }),
                  null != t.opacity && this.attr("stop-opacity", t.opacity),
                  null != t.color && this.attr("stop-color", t.color),
                  null != t.offset &&
                    this.attr("offset", new n.Number(t.offset)),
                  this
                );
              },
            },
          })),
          (n.Pattern = n.invent({
            create: "pattern",
            inherit: n.Container,
            extend: {
              fill: function () {
                return "url(#" + this.id() + ")";
              },
              update: function (t) {
                return (
                  this.clear(),
                  "function" == typeof t && t.call(this, this),
                  this
                );
              },
              toString: function () {
                return this.fill();
              },
              attr: function (t, e, i) {
                return (
                  "transform" == t && (t = "patternTransform"),
                  n.Container.prototype.attr.call(this, t, e, i)
                );
              },
            },
            construct: {
              pattern: function (t, e, i) {
                return this.defs().pattern(t, e, i);
              },
            },
          })),
          n.extend(n.Defs, {
            pattern: function (t, e, i) {
              return this.put(new n.Pattern())
                .update(i)
                .attr({
                  x: 0,
                  y: 0,
                  width: t,
                  height: e,
                  patternUnits: "userSpaceOnUse",
                });
            },
          }),
          (n.Shape = n.invent({
            create: function (t) {
              this.constructor.call(this, t);
            },
            inherit: n.Element,
          })),
          (n.Symbol = n.invent({
            create: "symbol",
            inherit: n.Container,
            construct: {
              symbol: function () {
                return this.put(new n.Symbol());
              },
            },
          })),
          (n.Use = n.invent({
            create: "use",
            inherit: n.Shape,
            extend: {
              element: function (t, e) {
                return this.attr("href", (e || "") + "#" + t, n.xlink);
              },
            },
            construct: {
              use: function (t, e) {
                return this.put(new n.Use()).element(t, e);
              },
            },
          })),
          (n.Rect = n.invent({
            create: "rect",
            inherit: n.Shape,
            construct: {
              rect: function (t, e) {
                return this.put(new n.Rect()).size(t, e);
              },
            },
          })),
          (n.Circle = n.invent({
            create: "circle",
            inherit: n.Shape,
            construct: {
              circle: function (t) {
                return this.put(new n.Circle())
                  .rx(new n.Number(t).divide(2))
                  .move(0, 0);
              },
            },
          })),
          n.extend(n.Circle, n.FX, {
            rx: function (t) {
              return this.attr("r", t);
            },
            ry: function (t) {
              return this.rx(t);
            },
          }),
          (n.Ellipse = n.invent({
            create: "ellipse",
            inherit: n.Shape,
            construct: {
              ellipse: function (t, e) {
                return this.put(new n.Ellipse()).size(t, e).move(0, 0);
              },
            },
          })),
          n.extend(n.Ellipse, n.Rect, n.FX, {
            rx: function (t) {
              return this.attr("rx", t);
            },
            ry: function (t) {
              return this.attr("ry", t);
            },
          }),
          n.extend(n.Circle, n.Ellipse, {
            x: function (t) {
              return null == t ? this.cx() - this.rx() : this.cx(t + this.rx());
            },
            y: function (t) {
              return null == t ? this.cy() - this.ry() : this.cy(t + this.ry());
            },
            cx: function (t) {
              return null == t ? this.attr("cx") : this.attr("cx", t);
            },
            cy: function (t) {
              return null == t ? this.attr("cy") : this.attr("cy", t);
            },
            width: function (t) {
              return null == t
                ? 2 * this.rx()
                : this.rx(new n.Number(t).divide(2));
            },
            height: function (t) {
              return null == t
                ? 2 * this.ry()
                : this.ry(new n.Number(t).divide(2));
            },
            size: function (t, e) {
              var i = f(this, t, e);
              return this.rx(new n.Number(i.width).divide(2)).ry(
                new n.Number(i.height).divide(2)
              );
            },
          }),
          (n.Line = n.invent({
            create: "line",
            inherit: n.Shape,
            extend: {
              array: function () {
                return new n.PointArray([
                  [this.attr("x1"), this.attr("y1")],
                  [this.attr("x2"), this.attr("y2")],
                ]);
              },
              plot: function (t, e, i, a) {
                return null == t
                  ? this.array()
                  : ((t =
                      void 0 !== e
                        ? { x1: t, y1: e, x2: i, y2: a }
                        : new n.PointArray(t).toLine()),
                    this.attr(t));
              },
              move: function (t, e) {
                return this.attr(this.array().move(t, e).toLine());
              },
              size: function (t, e) {
                var i = f(this, t, e);
                return this.attr(this.array().size(i.width, i.height).toLine());
              },
            },
            construct: {
              line: function (t, e, i, a) {
                return n.Line.prototype.plot.apply(
                  this.put(new n.Line()),
                  null != t ? [t, e, i, a] : [0, 0, 0, 0]
                );
              },
            },
          })),
          (n.Polyline = n.invent({
            create: "polyline",
            inherit: n.Shape,
            construct: {
              polyline: function (t) {
                return this.put(new n.Polyline()).plot(t || new n.PointArray());
              },
            },
          })),
          (n.Polygon = n.invent({
            create: "polygon",
            inherit: n.Shape,
            construct: {
              polygon: function (t) {
                return this.put(new n.Polygon()).plot(t || new n.PointArray());
              },
            },
          })),
          n.extend(n.Polyline, n.Polygon, {
            array: function () {
              return (
                this._array ||
                (this._array = new n.PointArray(this.attr("points")))
              );
            },
            plot: function (t) {
              return null == t
                ? this.array()
                : this.clear().attr(
                    "points",
                    "string" == typeof t
                      ? t
                      : (this._array = new n.PointArray(t))
                  );
            },
            clear: function () {
              return delete this._array, this;
            },
            move: function (t, e) {
              return this.attr("points", this.array().move(t, e));
            },
            size: function (t, e) {
              var i = f(this, t, e);
              return this.attr("points", this.array().size(i.width, i.height));
            },
          }),
          n.extend(n.Line, n.Polyline, n.Polygon, {
            morphArray: n.PointArray,
            x: function (t) {
              return null == t ? this.bbox().x : this.move(t, this.bbox().y);
            },
            y: function (t) {
              return null == t ? this.bbox().y : this.move(this.bbox().x, t);
            },
            width: function (t) {
              var e = this.bbox();
              return null == t ? e.width : this.size(t, e.height);
            },
            height: function (t) {
              var e = this.bbox();
              return null == t ? e.height : this.size(e.width, t);
            },
          }),
          (n.Path = n.invent({
            create: "path",
            inherit: n.Shape,
            extend: {
              morphArray: n.PathArray,
              array: function () {
                return (
                  this._array || (this._array = new n.PathArray(this.attr("d")))
                );
              },
              plot: function (t) {
                return null == t
                  ? this.array()
                  : this.clear().attr(
                      "d",
                      "string" == typeof t
                        ? t
                        : (this._array = new n.PathArray(t))
                    );
              },
              clear: function () {
                return delete this._array, this;
              },
            },
            construct: {
              path: function (t) {
                return this.put(new n.Path()).plot(t || new n.PathArray());
              },
            },
          })),
          (n.Image = n.invent({
            create: "image",
            inherit: n.Shape,
            extend: {
              load: function (t) {
                if (!t) return this;
                var i = this,
                  a = new e.Image();
                return (
                  n.on(a, "load", function () {
                    n.off(a);
                    var e = i.parent(n.Pattern);
                    null !== e &&
                      (0 == i.width() &&
                        0 == i.height() &&
                        i.size(a.width, a.height),
                      e &&
                        0 == e.width() &&
                        0 == e.height() &&
                        e.size(i.width(), i.height()),
                      "function" == typeof i._loaded &&
                        i._loaded.call(i, {
                          width: a.width,
                          height: a.height,
                          ratio: a.width / a.height,
                          url: t,
                        }));
                  }),
                  n.on(a, "error", function (t) {
                    n.off(a),
                      "function" == typeof i._error && i._error.call(i, t);
                  }),
                  this.attr("href", (a.src = this.src = t), n.xlink)
                );
              },
              loaded: function (t) {
                return (this._loaded = t), this;
              },
              error: function (t) {
                return (this._error = t), this;
              },
            },
            construct: {
              image: function (t, e, i) {
                return this.put(new n.Image())
                  .load(t)
                  .size(e || 0, i || e || 0);
              },
            },
          })),
          (n.Text = n.invent({
            create: function () {
              this.constructor.call(this, n.create("text")),
                (this.dom.leading = new n.Number(1.3)),
                (this._rebuild = !0),
                (this._build = !1),
                this.attr("font-family", n.defaults.attrs["font-family"]);
            },
            inherit: n.Shape,
            extend: {
              x: function (t) {
                return null == t ? this.attr("x") : this.attr("x", t);
              },
              text: function (t) {
                if (void 0 === t) {
                  t = "";
                  for (
                    var e = this.node.childNodes, i = 0, a = e.length;
                    i < a;
                    ++i
                  )
                    0 != i &&
                      3 != e[i].nodeType &&
                      1 == n.adopt(e[i]).dom.newLined &&
                      (t += "\n"),
                      (t += e[i].textContent);
                  return t;
                }
                if ((this.clear().build(!0), "function" == typeof t))
                  t.call(this, this);
                else {
                  i = 0;
                  for (var s = (t = t.split("\n")).length; i < s; i++)
                    this.tspan(t[i]).newLine();
                }
                return this.build(!1).rebuild();
              },
              size: function (t) {
                return this.attr("font-size", t).rebuild();
              },
              leading: function (t) {
                return null == t
                  ? this.dom.leading
                  : ((this.dom.leading = new n.Number(t)), this.rebuild());
              },
              lines: function () {
                var t = ((this.textPath && this.textPath()) || this).node,
                  e = n.utils.map(
                    n.utils.filterSVGElements(t.childNodes),
                    function (t) {
                      return n.adopt(t);
                    }
                  );
                return new n.Set(e);
              },
              rebuild: function (t) {
                if (
                  ("boolean" == typeof t && (this._rebuild = t), this._rebuild)
                ) {
                  var e = this,
                    i = 0,
                    a = this.dom.leading * new n.Number(this.attr("font-size"));
                  this.lines().each(function () {
                    this.dom.newLined &&
                      (e.textPath() || this.attr("x", e.attr("x")),
                      "\n" == this.text()
                        ? (i += a)
                        : (this.attr("dy", a + i), (i = 0)));
                  }),
                    this.fire("rebuild");
                }
                return this;
              },
              build: function (t) {
                return (this._build = !!t), this;
              },
              setData: function (t) {
                return (
                  (this.dom = t),
                  (this.dom.leading = new n.Number(t.leading || 1.3)),
                  this
                );
              },
            },
            construct: {
              text: function (t) {
                return this.put(new n.Text()).text(t);
              },
              plain: function (t) {
                return this.put(new n.Text()).plain(t);
              },
            },
          })),
          (n.Tspan = n.invent({
            create: "tspan",
            inherit: n.Shape,
            extend: {
              text: function (t) {
                return null == t
                  ? this.node.textContent + (this.dom.newLined ? "\n" : "")
                  : ("function" == typeof t
                      ? t.call(this, this)
                      : this.plain(t),
                    this);
              },
              dx: function (t) {
                return this.attr("dx", t);
              },
              dy: function (t) {
                return this.attr("dy", t);
              },
              newLine: function () {
                var t = this.parent(n.Text);
                return (
                  (this.dom.newLined = !0),
                  this.dy(t.dom.leading * t.attr("font-size")).attr("x", t.x())
                );
              },
            },
          })),
          n.extend(n.Text, n.Tspan, {
            plain: function (t) {
              return (
                !1 === this._build && this.clear(),
                this.node.appendChild(i.createTextNode(t)),
                this
              );
            },
            tspan: function (t) {
              var e = ((this.textPath && this.textPath()) || this).node,
                i = new n.Tspan();
              return (
                !1 === this._build && this.clear(),
                e.appendChild(i.node),
                i.text(t)
              );
            },
            clear: function () {
              for (
                var t = ((this.textPath && this.textPath()) || this).node;
                t.hasChildNodes();

              )
                t.removeChild(t.lastChild);
              return this;
            },
            length: function () {
              return this.node.getComputedTextLength();
            },
          }),
          (n.TextPath = n.invent({
            create: "textPath",
            inherit: n.Parent,
            parent: n.Text,
            construct: {
              morphArray: n.PathArray,
              array: function () {
                var t = this.track();
                return t ? t.array() : null;
              },
              plot: function (t) {
                var e = this.track(),
                  i = null;
                return e && (i = e.plot(t)), null == t ? i : this;
              },
              track: function () {
                var t = this.textPath();
                if (t) return t.reference("href");
              },
              textPath: function () {
                if (
                  this.node.firstChild &&
                  "textPath" == this.node.firstChild.nodeName
                )
                  return n.adopt(this.node.firstChild);
              },
            },
          })),
          (n.Nested = n.invent({
            create: function () {
              this.constructor.call(this, n.create("svg")),
                this.style("overflow", "visible");
            },
            inherit: n.Container,
            construct: {
              nested: function () {
                return this.put(new n.Nested());
              },
            },
          }));
        var l = {
          stroke: [
            "color",
            "width",
            "opacity",
            "linecap",
            "linejoin",
            "miterlimit",
            "dasharray",
            "dashoffset",
          ],
          fill: ["color", "opacity", "rule"],
          prefix: function (t, e) {
            return "color" == e ? t : t + "-" + e;
          },
        };
        function c(t, e, i, a) {
          return i + a.replace(n.regex.dots, " .");
        }
        function h(t) {
          return t.toLowerCase().replace(/-(.)/g, function (t, e) {
            return e.toUpperCase();
          });
        }
        function d(t) {
          return t.charAt(0).toUpperCase() + t.slice(1);
        }
        function u(t) {
          var e = t.toString(16);
          return 1 == e.length ? "0" + e : e;
        }
        function f(t, e, i) {
          if (null == e || null == i) {
            var n = t.bbox();
            null == e
              ? (e = (n.width / n.height) * i)
              : null == i && (i = (n.height / n.width) * e);
          }
          return { width: e, height: i };
        }
        function p(t, e, i) {
          return { x: e * t.a + i * t.c + 0, y: e * t.b + i * t.d + 0 };
        }
        function g(t) {
          return { a: t[0], b: t[1], c: t[2], d: t[3], e: t[4], f: t[5] };
        }
        function x(t) {
          for (var i = t.childNodes.length - 1; i >= 0; i--)
            t.childNodes[i] instanceof e.SVGElement && x(t.childNodes[i]);
          return n.adopt(t).id(n.eid(t.nodeName));
        }
        function m(t) {
          return (
            null == t.x &&
              ((t.x = 0), (t.y = 0), (t.width = 0), (t.height = 0)),
            (t.w = t.width),
            (t.h = t.height),
            (t.x2 = t.x + t.width),
            (t.y2 = t.y + t.height),
            (t.cx = t.x + t.width / 2),
            (t.cy = t.y + t.height / 2),
            t
          );
        }
        function v(t) {
          return Math.abs(t) > 1e-37 ? t : 0;
        }
        ["fill", "stroke"].forEach(function (t) {
          var e = {};
          (e[t] = function (e) {
            if (void 0 === e) return this;
            if (
              "string" == typeof e ||
              n.Color.isRgb(e) ||
              (e && "function" == typeof e.fill)
            )
              this.attr(t, e);
            else
              for (var i = l[t].length - 1; i >= 0; i--)
                null != e[l[t][i]] &&
                  this.attr(l.prefix(t, l[t][i]), e[l[t][i]]);
            return this;
          }),
            n.extend(n.Element, n.FX, e);
        }),
          n.extend(n.Element, n.FX, {
            translate: function (t, e) {
              return this.transform({ x: t, y: e });
            },
            matrix: function (t) {
              return this.attr(
                "transform",
                new n.Matrix(
                  6 == arguments.length ? [].slice.call(arguments) : t
                )
              );
            },
            opacity: function (t) {
              return this.attr("opacity", t);
            },
            dx: function (t) {
              return this.x(
                new n.Number(t).plus(this instanceof n.FX ? 0 : this.x()),
                !0
              );
            },
            dy: function (t) {
              return this.y(
                new n.Number(t).plus(this instanceof n.FX ? 0 : this.y()),
                !0
              );
            },
          }),
          n.extend(n.Path, {
            length: function () {
              return this.node.getTotalLength();
            },
            pointAt: function (t) {
              return this.node.getPointAtLength(t);
            },
          }),
          (n.Set = n.invent({
            create: function (t) {
              Array.isArray(t) ? (this.members = t) : this.clear();
            },
            extend: {
              add: function () {
                for (
                  var t = [].slice.call(arguments), e = 0, i = t.length;
                  e < i;
                  e++
                )
                  this.members.push(t[e]);
                return this;
              },
              remove: function (t) {
                var e = this.index(t);
                return e > -1 && this.members.splice(e, 1), this;
              },
              each: function (t) {
                for (var e = 0, i = this.members.length; e < i; e++)
                  t.apply(this.members[e], [e, this.members]);
                return this;
              },
              clear: function () {
                return (this.members = []), this;
              },
              length: function () {
                return this.members.length;
              },
              has: function (t) {
                return this.index(t) >= 0;
              },
              index: function (t) {
                return this.members.indexOf(t);
              },
              get: function (t) {
                return this.members[t];
              },
              first: function () {
                return this.get(0);
              },
              last: function () {
                return this.get(this.members.length - 1);
              },
              valueOf: function () {
                return this.members;
              },
            },
            construct: {
              set: function (t) {
                return new n.Set(t);
              },
            },
          })),
          (n.FX.Set = n.invent({
            create: function (t) {
              this.set = t;
            },
          })),
          (n.Set.inherit = function () {
            var t = [];
            for (var e in n.Shape.prototype)
              "function" == typeof n.Shape.prototype[e] &&
                "function" != typeof n.Set.prototype[e] &&
                t.push(e);
            for (var e in (t.forEach(function (t) {
              n.Set.prototype[t] = function () {
                for (var e = 0, i = this.members.length; e < i; e++)
                  this.members[e] &&
                    "function" == typeof this.members[e][t] &&
                    this.members[e][t].apply(this.members[e], arguments);
                return "animate" == t
                  ? this.fx || (this.fx = new n.FX.Set(this))
                  : this;
              };
            }),
            (t = []),
            n.FX.prototype))
              "function" == typeof n.FX.prototype[e] &&
                "function" != typeof n.FX.Set.prototype[e] &&
                t.push(e);
            t.forEach(function (t) {
              n.FX.Set.prototype[t] = function () {
                for (var e = 0, i = this.set.members.length; e < i; e++)
                  this.set.members[e].fx[t].apply(
                    this.set.members[e].fx,
                    arguments
                  );
                return this;
              };
            });
          }),
          n.extend(n.Element, {}),
          n.extend(n.Element, {
            remember: function (e, i) {
              if ("object" === t(arguments[0]))
                for (var n in e) this.remember(n, e[n]);
              else {
                if (1 == arguments.length) return this.memory()[e];
                this.memory()[e] = i;
              }
              return this;
            },
            forget: function () {
              if (0 == arguments.length) this._memory = {};
              else
                for (var t = arguments.length - 1; t >= 0; t--)
                  delete this.memory()[arguments[t]];
              return this;
            },
            memory: function () {
              return this._memory || (this._memory = {});
            },
          }),
          (n.get = function (t) {
            var e = i.getElementById(
              (function (t) {
                var e = (t || "").toString().match(n.regex.reference);
                if (e) return e[1];
              })(t) || t
            );
            return n.adopt(e);
          }),
          (n.select = function (t, e) {
            return new n.Set(
              n.utils.map((e || i).querySelectorAll(t), function (t) {
                return n.adopt(t);
              })
            );
          }),
          n.extend(n.Parent, {
            select: function (t) {
              return n.select(t, this.node);
            },
          });
        var b = "abcdef".split("");
        if ("function" != typeof e.CustomEvent) {
          var y = function (t, e) {
            e = e || { bubbles: !1, cancelable: !1, detail: void 0 };
            var n = i.createEvent("CustomEvent");
            return n.initCustomEvent(t, e.bubbles, e.cancelable, e.detail), n;
          };
          (y.prototype = e.Event.prototype), (n.CustomEvent = y);
        } else n.CustomEvent = e.CustomEvent;
        return n;
      }),
      "function" == typeof define && define.amd
        ? define(function () {
            return Lt(_t, _t.document);
          })
        : "object" ===
            ("undefined" == typeof exports ? "undefined" : t(exports)) &&
          "undefined" != typeof module
        ? (module.exports = _t.document
            ? Lt(_t, _t.document)
            : function (t) {
                return Lt(t, t.document);
              })
        : (_t.SVG = Lt(_t, _t.document)),
      /*! svg.filter.js - v2.0.2 - 2016-02-24
       * https://github.com/wout/svg.filter.js
       * Copyright (c) 2016 Wout Fierens; Licensed MIT */
      function () {
        (SVG.Filter = SVG.invent({
          create: "filter",
          inherit: SVG.Parent,
          extend: {
            source: "SourceGraphic",
            sourceAlpha: "SourceAlpha",
            background: "BackgroundImage",
            backgroundAlpha: "BackgroundAlpha",
            fill: "FillPaint",
            stroke: "StrokePaint",
            autoSetIn: !0,
            put: function (t, e) {
              return (
                this.add(t, e),
                !t.attr("in") && this.autoSetIn && t.attr("in", this.source),
                t.attr("result") || t.attr("result", t),
                t
              );
            },
            blend: function (t, e, i) {
              return this.put(new SVG.BlendEffect(t, e, i));
            },
            colorMatrix: function (t, e) {
              return this.put(new SVG.ColorMatrixEffect(t, e));
            },
            convolveMatrix: function (t) {
              return this.put(new SVG.ConvolveMatrixEffect(t));
            },
            componentTransfer: function (t) {
              return this.put(new SVG.ComponentTransferEffect(t));
            },
            composite: function (t, e, i) {
              return this.put(new SVG.CompositeEffect(t, e, i));
            },
            flood: function (t, e) {
              return this.put(new SVG.FloodEffect(t, e));
            },
            offset: function (t, e) {
              return this.put(new SVG.OffsetEffect(t, e));
            },
            image: function (t) {
              return this.put(new SVG.ImageEffect(t));
            },
            merge: function () {
              var t = [void 0];
              for (var e in arguments) t.push(arguments[e]);
              return this.put(
                new (SVG.MergeEffect.bind.apply(SVG.MergeEffect, t))()
              );
            },
            gaussianBlur: function (t, e) {
              return this.put(new SVG.GaussianBlurEffect(t, e));
            },
            morphology: function (t, e) {
              return this.put(new SVG.MorphologyEffect(t, e));
            },
            diffuseLighting: function (t, e, i) {
              return this.put(new SVG.DiffuseLightingEffect(t, e, i));
            },
            displacementMap: function (t, e, i, n, a) {
              return this.put(new SVG.DisplacementMapEffect(t, e, i, n, a));
            },
            specularLighting: function (t, e, i, n) {
              return this.put(new SVG.SpecularLightingEffect(t, e, i, n));
            },
            tile: function () {
              return this.put(new SVG.TileEffect());
            },
            turbulence: function (t, e, i, n, a) {
              return this.put(new SVG.TurbulenceEffect(t, e, i, n, a));
            },
            toString: function () {
              return "url(#" + this.attr("id") + ")";
            },
          },
        })),
          SVG.extend(SVG.Defs, {
            filter: function (t) {
              var e = this.put(new SVG.Filter());
              return "function" == typeof t && t.call(e, e), e;
            },
          }),
          SVG.extend(SVG.Container, {
            filter: function (t) {
              return this.defs().filter(t);
            },
          }),
          SVG.extend(SVG.Element, SVG.G, SVG.Nested, {
            filter: function (t) {
              return (
                (this.filterer =
                  t instanceof SVG.Element ? t : this.doc().filter(t)),
                this.doc() &&
                  this.filterer.doc() !== this.doc() &&
                  this.doc().defs().add(this.filterer),
                this.attr("filter", this.filterer),
                this.filterer
              );
            },
            unfilter: function (t) {
              return (
                this.filterer && !0 === t && this.filterer.remove(),
                delete this.filterer,
                this.attr("filter", null)
              );
            },
          }),
          (SVG.Effect = SVG.invent({
            create: function () {
              this.constructor.call(this);
            },
            inherit: SVG.Element,
            extend: {
              in: function (t) {
                return null == t
                  ? (this.parent() &&
                      this.parent()
                        .select('[result="' + this.attr("in") + '"]')
                        .get(0)) ||
                      this.attr("in")
                  : this.attr("in", t);
              },
              result: function (t) {
                return null == t ? this.attr("result") : this.attr("result", t);
              },
              toString: function () {
                return this.result();
              },
            },
          })),
          (SVG.ParentEffect = SVG.invent({
            create: function () {
              this.constructor.call(this);
            },
            inherit: SVG.Parent,
            extend: {
              in: function (t) {
                return null == t
                  ? (this.parent() &&
                      this.parent()
                        .select('[result="' + this.attr("in") + '"]')
                        .get(0)) ||
                      this.attr("in")
                  : this.attr("in", t);
              },
              result: function (t) {
                return null == t ? this.attr("result") : this.attr("result", t);
              },
              toString: function () {
                return this.result();
              },
            },
          }));
        var t = {
          blend: function (t, e) {
            return this.parent() && this.parent().blend(this, t, e);
          },
          colorMatrix: function (t, e) {
            return this.parent() && this.parent().colorMatrix(t, e).in(this);
          },
          convolveMatrix: function (t) {
            return this.parent() && this.parent().convolveMatrix(t).in(this);
          },
          componentTransfer: function (t) {
            return this.parent() && this.parent().componentTransfer(t).in(this);
          },
          composite: function (t, e) {
            return this.parent() && this.parent().composite(this, t, e);
          },
          flood: function (t, e) {
            return this.parent() && this.parent().flood(t, e);
          },
          offset: function (t, e) {
            return this.parent() && this.parent().offset(t, e).in(this);
          },
          image: function (t) {
            return this.parent() && this.parent().image(t);
          },
          merge: function () {
            return (
              this.parent() &&
              this.parent().merge.apply(this.parent(), [this].concat(arguments))
            );
          },
          gaussianBlur: function (t, e) {
            return this.parent() && this.parent().gaussianBlur(t, e).in(this);
          },
          morphology: function (t, e) {
            return this.parent() && this.parent().morphology(t, e).in(this);
          },
          diffuseLighting: function (t, e, i) {
            return (
              this.parent() && this.parent().diffuseLighting(t, e, i).in(this)
            );
          },
          displacementMap: function (t, e, i, n) {
            return (
              this.parent() && this.parent().displacementMap(this, t, e, i, n)
            );
          },
          specularLighting: function (t, e, i, n) {
            return (
              this.parent() &&
              this.parent().specularLighting(t, e, i, n).in(this)
            );
          },
          tile: function () {
            return this.parent() && this.parent().tile().in(this);
          },
          turbulence: function (t, e, i, n, a) {
            return (
              this.parent() && this.parent().turbulence(t, e, i, n, a).in(this)
            );
          },
        };
        SVG.extend(SVG.Effect, t),
          SVG.extend(SVG.ParentEffect, t),
          (SVG.ChildEffect = SVG.invent({
            create: function () {
              this.constructor.call(this);
            },
            inherit: SVG.Element,
            extend: {
              in: function (t) {
                this.attr("in", t);
              },
            },
          }));
        var e = {
            blend: function (t, e, i) {
              this.attr({ in: t, in2: e, mode: i || "normal" });
            },
            colorMatrix: function (t, e) {
              "matrix" == t && (e = a(e)),
                this.attr({ type: t, values: void 0 === e ? null : e });
            },
            convolveMatrix: function (t) {
              (t = a(t)),
                this.attr({
                  order: Math.sqrt(t.split(" ").length),
                  kernelMatrix: t,
                });
            },
            composite: function (t, e, i) {
              this.attr({ in: t, in2: e, operator: i });
            },
            flood: function (t, e) {
              this.attr("flood-color", t),
                null != e && this.attr("flood-opacity", e);
            },
            offset: function (t, e) {
              this.attr({ dx: t, dy: e });
            },
            image: function (t) {
              this.attr("href", t, SVG.xlink);
            },
            displacementMap: function (t, e, i, n, a) {
              this.attr({
                in: t,
                in2: e,
                scale: i,
                xChannelSelector: n,
                yChannelSelector: a,
              });
            },
            gaussianBlur: function (t, e) {
              null != t || null != e
                ? this.attr(
                    "stdDeviation",
                    s(Array.prototype.slice.call(arguments))
                  )
                : this.attr("stdDeviation", "0 0");
            },
            morphology: function (t, e) {
              this.attr({ operator: t, radius: e });
            },
            tile: function () {},
            turbulence: function (t, e, i, n, a) {
              this.attr({
                numOctaves: e,
                seed: i,
                stitchTiles: n,
                baseFrequency: t,
                type: a,
              });
            },
          },
          i = {
            merge: function () {
              var t;
              if (arguments[0] instanceof SVG.Set) {
                var e = this;
                arguments[0].each(function (t) {
                  this instanceof SVG.MergeNode
                    ? e.put(this)
                    : (this instanceof SVG.Effect ||
                        this instanceof SVG.ParentEffect) &&
                      e.put(new SVG.MergeNode(this));
                });
              } else {
                t = Array.isArray(arguments[0]) ? arguments[0] : arguments;
                for (var i = 0; i < t.length; i++)
                  t[i] instanceof SVG.MergeNode
                    ? this.put(t[i])
                    : this.put(new SVG.MergeNode(t[i]));
              }
            },
            componentTransfer: function (t) {
              if (
                ((this.rgb = new SVG.Set()),
                ["r", "g", "b", "a"].forEach(
                  function (t) {
                    (this[t] = new SVG["Func" + t.toUpperCase()]("identity")),
                      this.rgb.add(this[t]),
                      this.node.appendChild(this[t].node);
                  }.bind(this)
                ),
                t)
              )
                for (var e in (t.rgb &&
                  (["r", "g", "b"].forEach(
                    function (e) {
                      this[e].attr(t.rgb);
                    }.bind(this)
                  ),
                  delete t.rgb),
                t))
                  this[e].attr(t[e]);
            },
            diffuseLighting: function (t, e, i) {
              this.attr({
                surfaceScale: t,
                diffuseConstant: e,
                kernelUnitLength: i,
              });
            },
            specularLighting: function (t, e, i, n) {
              this.attr({
                surfaceScale: t,
                diffuseConstant: e,
                specularExponent: i,
                kernelUnitLength: n,
              });
            },
          },
          n = {
            distantLight: function (t, e) {
              this.attr({ azimuth: t, elevation: e });
            },
            pointLight: function (t, e, i) {
              this.attr({ x: t, y: e, z: i });
            },
            spotLight: function (t, e, i, n, a, s) {
              this.attr({
                x: t,
                y: e,
                z: i,
                pointsAtX: n,
                pointsAtY: a,
                pointsAtZ: s,
              });
            },
            mergeNode: function (t) {
              this.attr("in", t);
            },
          };
        function a(t) {
          return (
            Array.isArray(t) && (t = new SVG.Array(t)),
            t
              .toString()
              .replace(/^\s+/, "")
              .replace(/\s+$/, "")
              .replace(/\s+/g, " ")
          );
        }
        function s(t) {
          if (!Array.isArray(t)) return t;
          for (var e = 0, i = t.length, n = []; e < i; e++) n.push(t[e]);
          return n.join(" ");
        }
        function r() {
          var t = function () {};
          for (var e in ("function" == typeof arguments[arguments.length - 1] &&
            ((t = arguments[arguments.length - 1]),
            Array.prototype.splice.call(arguments, arguments.length - 1, 1)),
          arguments))
            for (var i in arguments[e]) t(arguments[e][i], i, arguments[e]);
        }
        ["r", "g", "b", "a"].forEach(function (t) {
          n["Func" + t.toUpperCase()] = function (t) {
            switch ((this.attr("type", t), t)) {
              case "table":
                this.attr("tableValues", arguments[1]);
                break;
              case "linear":
                this.attr("slope", arguments[1]),
                  this.attr("intercept", arguments[2]);
                break;
              case "gamma":
                this.attr("amplitude", arguments[1]),
                  this.attr("exponent", arguments[2]),
                  this.attr("offset", arguments[2]);
            }
          };
        }),
          r(e, function (t, e) {
            var i = e.charAt(0).toUpperCase() + e.slice(1);
            SVG[i + "Effect"] = SVG.invent({
              create: function () {
                this.constructor.call(this, SVG.create("fe" + i)),
                  t.apply(this, arguments),
                  this.result(this.attr("id") + "Out");
              },
              inherit: SVG.Effect,
              extend: {},
            });
          }),
          r(i, function (t, e) {
            var i = e.charAt(0).toUpperCase() + e.slice(1);
            SVG[i + "Effect"] = SVG.invent({
              create: function () {
                this.constructor.call(this, SVG.create("fe" + i)),
                  t.apply(this, arguments),
                  this.result(this.attr("id") + "Out");
              },
              inherit: SVG.ParentEffect,
              extend: {},
            });
          }),
          r(n, function (t, e) {
            var i = e.charAt(0).toUpperCase() + e.slice(1);
            SVG[i] = SVG.invent({
              create: function () {
                this.constructor.call(this, SVG.create("fe" + i)),
                  t.apply(this, arguments);
              },
              inherit: SVG.ChildEffect,
              extend: {},
            });
          }),
          SVG.extend(SVG.MergeEffect, {
            in: function (t) {
              return (
                t instanceof SVG.MergeNode
                  ? this.add(t, 0)
                  : this.add(new SVG.MergeNode(t), 0),
                this
              );
            },
          }),
          SVG.extend(
            SVG.CompositeEffect,
            SVG.BlendEffect,
            SVG.DisplacementMapEffect,
            {
              in2: function (t) {
                return null == t
                  ? (this.parent() &&
                      this.parent()
                        .select('[result="' + this.attr("in2") + '"]')
                        .get(0)) ||
                      this.attr("in2")
                  : this.attr("in2", t);
              },
            }
          ),
          (SVG.filter = {
            sepiatone: [
              0.343, 0.669, 0.119, 0, 0, 0.249, 0.626, 0.13, 0, 0, 0.172, 0.334,
              0.111, 0, 0, 0, 0, 0, 1, 0,
            ],
          });
      }.call(void 0),
      (function () {
        function t(t, a, s, r, o, l, c) {
          for (
            var h = t.slice(a, s || c),
              d = r.slice(o, l || c),
              u = 0,
              f = { pos: [0, 0], start: [0, 0] },
              p = { pos: [0, 0], start: [0, 0] };
            (h[u] = e.call(f, h[u])),
              (d[u] = e.call(p, d[u])),
              h[u][0] != d[u][0] ||
              "M" == h[u][0] ||
              ("A" == h[u][0] && (h[u][4] != d[u][4] || h[u][5] != d[u][5]))
                ? (Array.prototype.splice.apply(
                    h,
                    [u, 1].concat(n.call(f, h[u]))
                  ),
                  Array.prototype.splice.apply(
                    d,
                    [u, 1].concat(n.call(p, d[u]))
                  ))
                : ((h[u] = i.call(f, h[u])), (d[u] = i.call(p, d[u]))),
              ++u != h.length || u != d.length;

          )
            u == h.length &&
              h.push([
                "C",
                f.pos[0],
                f.pos[1],
                f.pos[0],
                f.pos[1],
                f.pos[0],
                f.pos[1],
              ]),
              u == d.length &&
                d.push([
                  "C",
                  p.pos[0],
                  p.pos[1],
                  p.pos[0],
                  p.pos[1],
                  p.pos[0],
                  p.pos[1],
                ]);
          return { start: h, dest: d };
        }
        function e(t) {
          switch (t[0]) {
            case "z":
            case "Z":
              (t[0] = "L"), (t[1] = this.start[0]), (t[2] = this.start[1]);
              break;
            case "H":
              (t[0] = "L"), (t[2] = this.pos[1]);
              break;
            case "V":
              (t[0] = "L"), (t[2] = t[1]), (t[1] = this.pos[0]);
              break;
            case "T":
              (t[0] = "Q"),
                (t[3] = t[1]),
                (t[4] = t[2]),
                (t[1] = this.reflection[1]),
                (t[2] = this.reflection[0]);
              break;
            case "S":
              (t[0] = "C"),
                (t[6] = t[4]),
                (t[5] = t[3]),
                (t[4] = t[2]),
                (t[3] = t[1]),
                (t[2] = this.reflection[1]),
                (t[1] = this.reflection[0]);
          }
          return t;
        }
        function i(t) {
          var e = t.length;
          return (
            (this.pos = [t[e - 2], t[e - 1]]),
            -1 != "SCQT".indexOf(t[0]) &&
              (this.reflection = [
                2 * this.pos[0] - t[e - 4],
                2 * this.pos[1] - t[e - 3],
              ]),
            t
          );
        }
        function n(t) {
          var e = [t];
          switch (t[0]) {
            case "M":
              return (this.pos = this.start = [t[1], t[2]]), e;
            case "L":
              (t[5] = t[3] = t[1]),
                (t[6] = t[4] = t[2]),
                (t[1] = this.pos[0]),
                (t[2] = this.pos[1]);
              break;
            case "Q":
              (t[6] = t[4]),
                (t[5] = t[3]),
                (t[4] = (1 * t[4]) / 3 + (2 * t[2]) / 3),
                (t[3] = (1 * t[3]) / 3 + (2 * t[1]) / 3),
                (t[2] = (1 * this.pos[1]) / 3 + (2 * t[2]) / 3),
                (t[1] = (1 * this.pos[0]) / 3 + (2 * t[1]) / 3);
              break;
            case "A":
              t = (e = (function (t, e) {
                var i,
                  n,
                  a,
                  s,
                  r,
                  o,
                  l,
                  c,
                  h,
                  d,
                  u,
                  f,
                  p,
                  g,
                  x,
                  m,
                  v,
                  b,
                  y,
                  w,
                  k,
                  A,
                  S,
                  C,
                  T,
                  E,
                  _ = Math.abs(e[1]),
                  L = Math.abs(e[2]),
                  P = e[3] % 360,
                  M = e[4],
                  I = e[5],
                  O = e[6],
                  D = e[7],
                  z = new SVG.Point(t),
                  N = new SVG.Point(O, D),
                  X = [];
                if (0 === _ || 0 === L || (z.x === N.x && z.y === N.y))
                  return [["C", z.x, z.y, N.x, N.y, N.x, N.y]];
                for (
                  (n =
                    ((i = new SVG.Point(
                      (z.x - N.x) / 2,
                      (z.y - N.y) / 2
                    ).transform(new SVG.Matrix().rotate(P))).x *
                      i.x) /
                      (_ * _) +
                    (i.y * i.y) / (L * L)) > 1 &&
                    ((_ *= n = Math.sqrt(n)), (L *= n)),
                    a = new SVG.Matrix()
                      .rotate(P)
                      .scale(1 / _, 1 / L)
                      .rotate(-P),
                    z = z.transform(a),
                    o =
                      (s = [(N = N.transform(a)).x - z.x, N.y - z.y])[0] *
                        s[0] +
                      s[1] * s[1],
                    r = Math.sqrt(o),
                    s[0] /= r,
                    s[1] /= r,
                    l = o < 4 ? Math.sqrt(1 - o / 4) : 0,
                    M === I && (l *= -1),
                    c = new SVG.Point(
                      (N.x + z.x) / 2 + l * -s[1],
                      (N.y + z.y) / 2 + l * s[0]
                    ),
                    h = new SVG.Point(z.x - c.x, z.y - c.y),
                    d = new SVG.Point(N.x - c.x, N.y - c.y),
                    u = Math.acos(h.x / Math.sqrt(h.x * h.x + h.y * h.y)),
                    h.y < 0 && (u *= -1),
                    f = Math.acos(d.x / Math.sqrt(d.x * d.x + d.y * d.y)),
                    d.y < 0 && (f *= -1),
                    I && u > f && (f += 2 * Math.PI),
                    !I && u < f && (f -= 2 * Math.PI),
                    m = [],
                    v = u,
                    p =
                      (f - u) /
                      (g = Math.ceil((2 * Math.abs(u - f)) / Math.PI)),
                    x = (4 * Math.tan(p / 4)) / 3,
                    k = 0;
                  k <= g;
                  k++
                )
                  (y = Math.cos(v)),
                    (b = Math.sin(v)),
                    (w = new SVG.Point(c.x + y, c.y + b)),
                    (m[k] = [
                      new SVG.Point(w.x + x * b, w.y - x * y),
                      w,
                      new SVG.Point(w.x - x * b, w.y + x * y),
                    ]),
                    (v += p);
                for (
                  m[0][0] = m[0][1].clone(),
                    m[m.length - 1][2] = m[m.length - 1][1].clone(),
                    a = new SVG.Matrix().rotate(P).scale(_, L).rotate(-P),
                    k = 0,
                    A = m.length;
                  k < A;
                  k++
                )
                  (m[k][0] = m[k][0].transform(a)),
                    (m[k][1] = m[k][1].transform(a)),
                    (m[k][2] = m[k][2].transform(a));
                for (k = 1, A = m.length; k < A; k++)
                  (S = (w = m[k - 1][2]).x),
                    (C = w.y),
                    (T = (w = m[k][0]).x),
                    (E = w.y),
                    (O = (w = m[k][1]).x),
                    (D = w.y),
                    X.push(["C", S, C, T, E, O, D]);
                return X;
              })(this.pos, t))[0];
          }
          return (
            (t[0] = "C"),
            (this.pos = [t[5], t[6]]),
            (this.reflection = [2 * t[5] - t[3], 2 * t[6] - t[4]]),
            e
          );
        }
        function a(t, e) {
          if (!1 === e) return !1;
          for (var i = e, n = t.length; i < n; ++i)
            if ("M" == t[i][0]) return i;
          return !1;
        }
        SVG.extend(SVG.PathArray, {
          morph: function (e) {
            for (
              var i = this.value,
                n = this.parse(e),
                s = 0,
                r = 0,
                o = !1,
                l = !1;
              !1 !== s || !1 !== r;

            ) {
              var c;
              (o = a(i, !1 !== s && s + 1)),
                (l = a(n, !1 !== r && r + 1)),
                !1 === s &&
                  (s =
                    0 == (c = new SVG.PathArray(h.start).bbox()).height ||
                    0 == c.width
                      ? i.push(i[0]) - 1
                      : i.push(["M", c.x + c.width / 2, c.y + c.height / 2]) -
                        1),
                !1 === r &&
                  (r =
                    0 == (c = new SVG.PathArray(h.dest).bbox()).height ||
                    0 == c.width
                      ? n.push(n[0]) - 1
                      : n.push(["M", c.x + c.width / 2, c.y + c.height / 2]) -
                        1);
              var h = t(i, s, o, n, r, l);
              (i = i.slice(0, s).concat(h.start, !1 === o ? [] : i.slice(o))),
                (n = n.slice(0, r).concat(h.dest, !1 === l ? [] : n.slice(l))),
                (s = !1 !== o && s + h.start.length),
                (r = !1 !== l && r + h.dest.length);
            }
            return (
              (this.value = i),
              (this.destination = new SVG.PathArray()),
              (this.destination.value = n),
              this
            );
          },
        });
      })(),
      /*! svg.draggable.js - v2.2.2 - 2019-01-08
       * https://github.com/svgdotjs/svg.draggable.js
       * Copyright (c) 2019 Wout Fierens; Licensed MIT */
      function () {
        function t(t) {
          t.remember("_draggable", this), (this.el = t);
        }
        (t.prototype.init = function (t, e) {
          var i = this;
          (this.constraint = t),
            (this.value = e),
            this.el.on("mousedown.drag", function (t) {
              i.start(t);
            }),
            this.el.on("touchstart.drag", function (t) {
              i.start(t);
            });
        }),
          (t.prototype.transformPoint = function (t, e) {
            var i =
              ((t = t || window.event).changedTouches && t.changedTouches[0]) ||
              t;
            return (
              (this.p.x = i.clientX - (e || 0)),
              (this.p.y = i.clientY),
              this.p.matrixTransform(this.m)
            );
          }),
          (t.prototype.getBBox = function () {
            var t = this.el.bbox();
            return (
              this.el instanceof SVG.Nested && (t = this.el.rbox()),
              (this.el instanceof SVG.G ||
                this.el instanceof SVG.Use ||
                this.el instanceof SVG.Nested) &&
                ((t.x = this.el.x()), (t.y = this.el.y())),
              t
            );
          }),
          (t.prototype.start = function (t) {
            if (
              ("click" != t.type &&
                "mousedown" != t.type &&
                "mousemove" != t.type) ||
              1 == (t.which || t.buttons)
            ) {
              var e = this;
              if (
                (this.el.fire("beforedrag", { event: t, handler: this }),
                !this.el.event().defaultPrevented)
              ) {
                t.preventDefault(),
                  t.stopPropagation(),
                  (this.parent =
                    this.parent ||
                    this.el.parent(SVG.Nested) ||
                    this.el.parent(SVG.Doc)),
                  (this.p = this.parent.node.createSVGPoint()),
                  (this.m = this.el.node.getScreenCTM().inverse());
                var i,
                  n = this.getBBox();
                if (this.el instanceof SVG.Text)
                  switch (
                    ((i = this.el.node.getComputedTextLength()),
                    this.el.attr("text-anchor"))
                  ) {
                    case "middle":
                      i /= 2;
                      break;
                    case "start":
                      i = 0;
                  }
                (this.startPoints = {
                  point: this.transformPoint(t, i),
                  box: n,
                  transform: this.el.transform(),
                }),
                  SVG.on(window, "mousemove.drag", function (t) {
                    e.drag(t);
                  }),
                  SVG.on(window, "touchmove.drag", function (t) {
                    e.drag(t);
                  }),
                  SVG.on(window, "mouseup.drag", function (t) {
                    e.end(t);
                  }),
                  SVG.on(window, "touchend.drag", function (t) {
                    e.end(t);
                  }),
                  this.el.fire("dragstart", {
                    event: t,
                    p: this.startPoints.point,
                    m: this.m,
                    handler: this,
                  });
              }
            }
          }),
          (t.prototype.drag = function (t) {
            var e = this.getBBox(),
              i = this.transformPoint(t),
              n = this.startPoints.box.x + i.x - this.startPoints.point.x,
              a = this.startPoints.box.y + i.y - this.startPoints.point.y,
              s = this.constraint,
              r = i.x - this.startPoints.point.x,
              o = i.y - this.startPoints.point.y;
            if (
              (this.el.fire("dragmove", {
                event: t,
                p: i,
                m: this.m,
                handler: this,
              }),
              this.el.event().defaultPrevented)
            )
              return i;
            if ("function" == typeof s) {
              var l = s.call(this.el, n, a, this.m);
              "boolean" == typeof l && (l = { x: l, y: l }),
                !0 === l.x ? this.el.x(n) : !1 !== l.x && this.el.x(l.x),
                !0 === l.y ? this.el.y(a) : !1 !== l.y && this.el.y(l.y);
            } else
              "object" == typeof s &&
                (null != s.minX && n < s.minX
                  ? (r = (n = s.minX) - this.startPoints.box.x)
                  : null != s.maxX &&
                    n > s.maxX - e.width &&
                    (r = (n = s.maxX - e.width) - this.startPoints.box.x),
                null != s.minY && a < s.minY
                  ? (o = (a = s.minY) - this.startPoints.box.y)
                  : null != s.maxY &&
                    a > s.maxY - e.height &&
                    (o = (a = s.maxY - e.height) - this.startPoints.box.y),
                null != s.snapToGrid &&
                  ((n -= n % s.snapToGrid),
                  (a -= a % s.snapToGrid),
                  (r -= r % s.snapToGrid),
                  (o -= o % s.snapToGrid)),
                this.el instanceof SVG.G
                  ? this.el
                      .matrix(this.startPoints.transform)
                      .transform({ x: r, y: o }, !0)
                  : this.el.move(n, a));
            return i;
          }),
          (t.prototype.end = function (t) {
            var e = this.drag(t);
            this.el.fire("dragend", {
              event: t,
              p: e,
              m: this.m,
              handler: this,
            }),
              SVG.off(window, "mousemove.drag"),
              SVG.off(window, "touchmove.drag"),
              SVG.off(window, "mouseup.drag"),
              SVG.off(window, "touchend.drag");
          }),
          SVG.extend(SVG.Element, {
            draggable: function (e, i) {
              ("function" != typeof e && "object" != typeof e) ||
                ((i = e), (e = !0));
              var n = this.remember("_draggable") || new t(this);
              return (
                (e = void 0 === e || e)
                  ? n.init(i || {}, e)
                  : (this.off("mousedown.drag"), this.off("touchstart.drag")),
                this
              );
            },
          });
      }.call(void 0),
      (function () {
        function t(t) {
          (this.el = t),
            t.remember("_selectHandler", this),
            (this.pointSelection = { isSelected: !1 }),
            (this.rectSelection = { isSelected: !1 }),
            (this.pointsList = {
              lt: [0, 0],
              rt: ["width", 0],
              rb: ["width", "height"],
              lb: [0, "height"],
              t: ["width", 0],
              r: ["width", "height"],
              b: ["width", "height"],
              l: [0, "height"],
            }),
            (this.pointCoord = function (t, e, i) {
              var n = "string" != typeof t ? t : e[t];
              return i ? n / 2 : n;
            }),
            (this.pointCoords = function (t, e) {
              var i = this.pointsList[t];
              return {
                x: this.pointCoord(i[0], e, "t" === t || "b" === t),
                y: this.pointCoord(i[1], e, "r" === t || "l" === t),
              };
            });
        }
        (t.prototype.init = function (t, e) {
          var i = this.el.bbox();
          this.options = {};
          var n = this.el.selectize.defaults.points;
          for (var a in this.el.selectize.defaults)
            (this.options[a] = this.el.selectize.defaults[a]),
              void 0 !== e[a] && (this.options[a] = e[a]);
          var s = ["points", "pointsExclude"];
          for (var a in s) {
            var r = this.options[s[a]];
            "string" == typeof r
              ? (r = r.length > 0 ? r.split(/\s*,\s*/i) : [])
              : "boolean" == typeof r && "points" === s[a] && (r = r ? n : []),
              (this.options[s[a]] = r);
          }
          (this.options.points = [n, this.options.points].reduce(function (
            t,
            e
          ) {
            return t.filter(function (t) {
              return e.indexOf(t) > -1;
            });
          })),
            (this.options.points = [
              this.options.points,
              this.options.pointsExclude,
            ].reduce(function (t, e) {
              return t.filter(function (t) {
                return e.indexOf(t) < 0;
              });
            })),
            (this.parent = this.el.parent()),
            (this.nested = this.nested || this.parent.group()),
            this.nested.matrix(new SVG.Matrix(this.el).translate(i.x, i.y)),
            this.options.deepSelect &&
            -1 !== ["line", "polyline", "polygon"].indexOf(this.el.type)
              ? this.selectPoints(t)
              : this.selectRect(t),
            this.observe(),
            this.cleanup();
        }),
          (t.prototype.selectPoints = function (t) {
            return (
              (this.pointSelection.isSelected = t),
              this.pointSelection.set ||
                ((this.pointSelection.set = this.parent.set()),
                this.drawPoints()),
              this
            );
          }),
          (t.prototype.getPointArray = function () {
            var t = this.el.bbox();
            return this.el
              .array()
              .valueOf()
              .map(function (e) {
                return [e[0] - t.x, e[1] - t.y];
              });
          }),
          (t.prototype.drawPoints = function () {
            for (
              var t = this, e = this.getPointArray(), i = 0, n = e.length;
              i < n;
              ++i
            ) {
              var a = (function (e) {
                  return function (i) {
                    (i = i || window.event).preventDefault
                      ? i.preventDefault()
                      : (i.returnValue = !1),
                      i.stopPropagation();
                    var n = i.pageX || i.touches[0].pageX,
                      a = i.pageY || i.touches[0].pageY;
                    t.el.fire("point", { x: n, y: a, i: e, event: i });
                  };
                })(i),
                s = this.drawPoint(e[i][0], e[i][1])
                  .addClass(this.options.classPoints)
                  .addClass(this.options.classPoints + "_point")
                  .on("touchstart", a)
                  .on("mousedown", a);
              this.pointSelection.set.add(s);
            }
          }),
          (t.prototype.drawPoint = function (t, e) {
            var i = this.options.pointType;
            switch (i) {
              case "circle":
                return this.drawCircle(t, e);
              case "rect":
                return this.drawRect(t, e);
              default:
                if ("function" == typeof i) return i.call(this, t, e);
                throw new Error("Unknown " + i + " point type!");
            }
          }),
          (t.prototype.drawCircle = function (t, e) {
            return this.nested.circle(this.options.pointSize).center(t, e);
          }),
          (t.prototype.drawRect = function (t, e) {
            return this.nested
              .rect(this.options.pointSize, this.options.pointSize)
              .center(t, e);
          }),
          (t.prototype.updatePointSelection = function () {
            var t = this.getPointArray();
            this.pointSelection.set.each(function (e) {
              (this.cx() === t[e][0] && this.cy() === t[e][1]) ||
                this.center(t[e][0], t[e][1]);
            });
          }),
          (t.prototype.updateRectSelection = function () {
            var t = this,
              e = this.el.bbox();
            if (
              (this.rectSelection.set
                .get(0)
                .attr({ width: e.width, height: e.height }),
              this.options.points.length &&
                this.options.points.map(function (i, n) {
                  var a = t.pointCoords(i, e);
                  t.rectSelection.set.get(n + 1).center(a.x, a.y);
                }),
              this.options.rotationPoint)
            ) {
              var i = this.rectSelection.set.length();
              this.rectSelection.set.get(i - 1).center(e.width / 2, 20);
            }
          }),
          (t.prototype.selectRect = function (t) {
            var e = this,
              i = this.el.bbox();
            function n(t) {
              return function (i) {
                (i = i || window.event).preventDefault
                  ? i.preventDefault()
                  : (i.returnValue = !1),
                  i.stopPropagation();
                var n = i.pageX || i.touches[0].pageX,
                  a = i.pageY || i.touches[0].pageY;
                e.el.fire(t, { x: n, y: a, event: i });
              };
            }
            if (
              ((this.rectSelection.isSelected = t),
              (this.rectSelection.set =
                this.rectSelection.set || this.parent.set()),
              this.rectSelection.set.get(0) ||
                this.rectSelection.set.add(
                  this.nested
                    .rect(i.width, i.height)
                    .addClass(this.options.classRect)
                ),
              this.options.points.length &&
                this.rectSelection.set.length() < 2 &&
                (this.options.points.map(function (t, a) {
                  var s = e.pointCoords(t, i),
                    r = e
                      .drawPoint(s.x, s.y)
                      .attr("class", e.options.classPoints + "_" + t)
                      .on("mousedown", n(t))
                      .on("touchstart", n(t));
                  e.rectSelection.set.add(r);
                }),
                this.rectSelection.set.each(function () {
                  this.addClass(e.options.classPoints);
                })),
              this.options.rotationPoint &&
                ((this.options.points && !this.rectSelection.set.get(9)) ||
                  (!this.options.points && !this.rectSelection.set.get(1))))
            ) {
              var a = function (t) {
                  (t = t || window.event).preventDefault
                    ? t.preventDefault()
                    : (t.returnValue = !1),
                    t.stopPropagation();
                  var i = t.pageX || t.touches[0].pageX,
                    n = t.pageY || t.touches[0].pageY;
                  e.el.fire("rot", { x: i, y: n, event: t });
                },
                s = this.drawPoint(i.width / 2, 20)
                  .attr("class", this.options.classPoints + "_rot")
                  .on("touchstart", a)
                  .on("mousedown", a);
              this.rectSelection.set.add(s);
            }
          }),
          (t.prototype.handler = function () {
            var t = this.el.bbox();
            this.nested.matrix(new SVG.Matrix(this.el).translate(t.x, t.y)),
              this.rectSelection.isSelected && this.updateRectSelection(),
              this.pointSelection.isSelected && this.updatePointSelection();
          }),
          (t.prototype.observe = function () {
            var t = this;
            if (MutationObserver)
              if (
                this.rectSelection.isSelected ||
                this.pointSelection.isSelected
              )
                (this.observerInst =
                  this.observerInst ||
                  new MutationObserver(function () {
                    t.handler();
                  })),
                  this.observerInst.observe(this.el.node, { attributes: !0 });
              else
                try {
                  this.observerInst.disconnect(), delete this.observerInst;
                } catch (t) {}
            else
              this.el.off("DOMAttrModified.select"),
                (this.rectSelection.isSelected ||
                  this.pointSelection.isSelected) &&
                  this.el.on("DOMAttrModified.select", function () {
                    t.handler();
                  });
          }),
          (t.prototype.cleanup = function () {
            !this.rectSelection.isSelected &&
              this.rectSelection.set &&
              (this.rectSelection.set.each(function () {
                this.remove();
              }),
              this.rectSelection.set.clear(),
              delete this.rectSelection.set),
              !this.pointSelection.isSelected &&
                this.pointSelection.set &&
                (this.pointSelection.set.each(function () {
                  this.remove();
                }),
                this.pointSelection.set.clear(),
                delete this.pointSelection.set),
              this.pointSelection.isSelected ||
                this.rectSelection.isSelected ||
                (this.nested.remove(), delete this.nested);
          }),
          SVG.extend(SVG.Element, {
            selectize: function (e, i) {
              return (
                "object" == typeof e && ((i = e), (e = !0)),
                (this.remember("_selectHandler") || new t(this)).init(
                  void 0 === e || e,
                  i || {}
                ),
                this
              );
            },
          }),
          (SVG.Element.prototype.selectize.defaults = {
            points: ["lt", "rt", "rb", "lb", "t", "r", "b", "l"],
            pointsExclude: [],
            classRect: "svg_select_boundingRect",
            classPoints: "svg_select_points",
            pointSize: 7,
            rotationPoint: !0,
            deepSelect: !1,
            pointType: "circle",
          });
      })(),
      (function () {
        (function () {
          function t(t) {
            t.remember("_resizeHandler", this),
              (this.el = t),
              (this.parameters = {}),
              (this.lastUpdateCall = null),
              (this.p = t.doc().node.createSVGPoint());
          }
          (t.prototype.transformPoint = function (t, e, i) {
            return (
              (this.p.x = t - (this.offset.x - window.pageXOffset)),
              (this.p.y = e - (this.offset.y - window.pageYOffset)),
              this.p.matrixTransform(i || this.m)
            );
          }),
            (t.prototype._extractPosition = function (t) {
              return {
                x: null != t.clientX ? t.clientX : t.touches[0].clientX,
                y: null != t.clientY ? t.clientY : t.touches[0].clientY,
              };
            }),
            (t.prototype.init = function (t) {
              var e = this;
              if ((this.stop(), "stop" !== t)) {
                for (var i in ((this.options = {}), this.el.resize.defaults))
                  (this.options[i] = this.el.resize.defaults[i]),
                    void 0 !== t[i] && (this.options[i] = t[i]);
                this.el.on("lt.resize", function (t) {
                  e.resize(t || window.event);
                }),
                  this.el.on("rt.resize", function (t) {
                    e.resize(t || window.event);
                  }),
                  this.el.on("rb.resize", function (t) {
                    e.resize(t || window.event);
                  }),
                  this.el.on("lb.resize", function (t) {
                    e.resize(t || window.event);
                  }),
                  this.el.on("t.resize", function (t) {
                    e.resize(t || window.event);
                  }),
                  this.el.on("r.resize", function (t) {
                    e.resize(t || window.event);
                  }),
                  this.el.on("b.resize", function (t) {
                    e.resize(t || window.event);
                  }),
                  this.el.on("l.resize", function (t) {
                    e.resize(t || window.event);
                  }),
                  this.el.on("rot.resize", function (t) {
                    e.resize(t || window.event);
                  }),
                  this.el.on("point.resize", function (t) {
                    e.resize(t || window.event);
                  }),
                  this.update();
              }
            }),
            (t.prototype.stop = function () {
              return (
                this.el.off("lt.resize"),
                this.el.off("rt.resize"),
                this.el.off("rb.resize"),
                this.el.off("lb.resize"),
                this.el.off("t.resize"),
                this.el.off("r.resize"),
                this.el.off("b.resize"),
                this.el.off("l.resize"),
                this.el.off("rot.resize"),
                this.el.off("point.resize"),
                this
              );
            }),
            (t.prototype.resize = function (t) {
              var e = this;
              (this.m = this.el.node.getScreenCTM().inverse()),
                (this.offset = {
                  x: window.pageXOffset,
                  y: window.pageYOffset,
                });
              var i = this._extractPosition(t.detail.event);
              if (
                ((this.parameters = {
                  type: this.el.type,
                  p: this.transformPoint(i.x, i.y),
                  x: t.detail.x,
                  y: t.detail.y,
                  box: this.el.bbox(),
                  rotation: this.el.transform().rotation,
                }),
                "text" === this.el.type &&
                  (this.parameters.fontSize = this.el.attr()["font-size"]),
                void 0 !== t.detail.i)
              ) {
                var n = this.el.array().valueOf();
                (this.parameters.i = t.detail.i),
                  (this.parameters.pointCoords = [
                    n[t.detail.i][0],
                    n[t.detail.i][1],
                  ]);
              }
              switch (t.type) {
                case "lt":
                  this.calc = function (t, e) {
                    var i = this.snapToGrid(t, e);
                    if (
                      this.parameters.box.width - i[0] > 0 &&
                      this.parameters.box.height - i[1] > 0
                    ) {
                      if ("text" === this.parameters.type)
                        return (
                          this.el.move(
                            this.parameters.box.x + i[0],
                            this.parameters.box.y
                          ),
                          void this.el.attr(
                            "font-size",
                            this.parameters.fontSize - i[0]
                          )
                        );
                      (i = this.checkAspectRatio(i)),
                        this.el
                          .move(
                            this.parameters.box.x + i[0],
                            this.parameters.box.y + i[1]
                          )
                          .size(
                            this.parameters.box.width - i[0],
                            this.parameters.box.height - i[1]
                          );
                    }
                  };
                  break;
                case "rt":
                  this.calc = function (t, e) {
                    var i = this.snapToGrid(t, e, 2);
                    if (
                      this.parameters.box.width + i[0] > 0 &&
                      this.parameters.box.height - i[1] > 0
                    ) {
                      if ("text" === this.parameters.type)
                        return (
                          this.el.move(
                            this.parameters.box.x - i[0],
                            this.parameters.box.y
                          ),
                          void this.el.attr(
                            "font-size",
                            this.parameters.fontSize + i[0]
                          )
                        );
                      (i = this.checkAspectRatio(i, !0)),
                        this.el
                          .move(
                            this.parameters.box.x,
                            this.parameters.box.y + i[1]
                          )
                          .size(
                            this.parameters.box.width + i[0],
                            this.parameters.box.height - i[1]
                          );
                    }
                  };
                  break;
                case "rb":
                  this.calc = function (t, e) {
                    var i = this.snapToGrid(t, e, 0);
                    if (
                      this.parameters.box.width + i[0] > 0 &&
                      this.parameters.box.height + i[1] > 0
                    ) {
                      if ("text" === this.parameters.type)
                        return (
                          this.el.move(
                            this.parameters.box.x - i[0],
                            this.parameters.box.y
                          ),
                          void this.el.attr(
                            "font-size",
                            this.parameters.fontSize + i[0]
                          )
                        );
                      (i = this.checkAspectRatio(i)),
                        this.el
                          .move(this.parameters.box.x, this.parameters.box.y)
                          .size(
                            this.parameters.box.width + i[0],
                            this.parameters.box.height + i[1]
                          );
                    }
                  };
                  break;
                case "lb":
                  this.calc = function (t, e) {
                    var i = this.snapToGrid(t, e, 1);
                    if (
                      this.parameters.box.width - i[0] > 0 &&
                      this.parameters.box.height + i[1] > 0
                    ) {
                      if ("text" === this.parameters.type)
                        return (
                          this.el.move(
                            this.parameters.box.x + i[0],
                            this.parameters.box.y
                          ),
                          void this.el.attr(
                            "font-size",
                            this.parameters.fontSize - i[0]
                          )
                        );
                      (i = this.checkAspectRatio(i, !0)),
                        this.el
                          .move(
                            this.parameters.box.x + i[0],
                            this.parameters.box.y
                          )
                          .size(
                            this.parameters.box.width - i[0],
                            this.parameters.box.height + i[1]
                          );
                    }
                  };
                  break;
                case "t":
                  this.calc = function (t, e) {
                    var i = this.snapToGrid(t, e, 2);
                    if (this.parameters.box.height - i[1] > 0) {
                      if ("text" === this.parameters.type) return;
                      this.el
                        .move(
                          this.parameters.box.x,
                          this.parameters.box.y + i[1]
                        )
                        .height(this.parameters.box.height - i[1]);
                    }
                  };
                  break;
                case "r":
                  this.calc = function (t, e) {
                    var i = this.snapToGrid(t, e, 0);
                    if (this.parameters.box.width + i[0] > 0) {
                      if ("text" === this.parameters.type) return;
                      this.el
                        .move(this.parameters.box.x, this.parameters.box.y)
                        .width(this.parameters.box.width + i[0]);
                    }
                  };
                  break;
                case "b":
                  this.calc = function (t, e) {
                    var i = this.snapToGrid(t, e, 0);
                    if (this.parameters.box.height + i[1] > 0) {
                      if ("text" === this.parameters.type) return;
                      this.el
                        .move(this.parameters.box.x, this.parameters.box.y)
                        .height(this.parameters.box.height + i[1]);
                    }
                  };
                  break;
                case "l":
                  this.calc = function (t, e) {
                    var i = this.snapToGrid(t, e, 1);
                    if (this.parameters.box.width - i[0] > 0) {
                      if ("text" === this.parameters.type) return;
                      this.el
                        .move(
                          this.parameters.box.x + i[0],
                          this.parameters.box.y
                        )
                        .width(this.parameters.box.width - i[0]);
                    }
                  };
                  break;
                case "rot":
                  this.calc = function (t, e) {
                    var i = t + this.parameters.p.x,
                      n = e + this.parameters.p.y,
                      a = Math.atan2(
                        this.parameters.p.y -
                          this.parameters.box.y -
                          this.parameters.box.height / 2,
                        this.parameters.p.x -
                          this.parameters.box.x -
                          this.parameters.box.width / 2
                      ),
                      s = Math.atan2(
                        n -
                          this.parameters.box.y -
                          this.parameters.box.height / 2,
                        i -
                          this.parameters.box.x -
                          this.parameters.box.width / 2
                      ),
                      r =
                        this.parameters.rotation +
                        (180 * (s - a)) / Math.PI +
                        this.options.snapToAngle / 2;
                    this.el
                      .center(this.parameters.box.cx, this.parameters.box.cy)
                      .rotate(
                        r - (r % this.options.snapToAngle),
                        this.parameters.box.cx,
                        this.parameters.box.cy
                      );
                  };
                  break;
                case "point":
                  this.calc = function (t, e) {
                    var i = this.snapToGrid(
                        t,
                        e,
                        this.parameters.pointCoords[0],
                        this.parameters.pointCoords[1]
                      ),
                      n = this.el.array().valueOf();
                    (n[this.parameters.i][0] =
                      this.parameters.pointCoords[0] + i[0]),
                      (n[this.parameters.i][1] =
                        this.parameters.pointCoords[1] + i[1]),
                      this.el.plot(n);
                  };
              }
              this.el.fire("resizestart", {
                dx: this.parameters.x,
                dy: this.parameters.y,
                event: t,
              }),
                SVG.on(window, "touchmove.resize", function (t) {
                  e.update(t || window.event);
                }),
                SVG.on(window, "touchend.resize", function () {
                  e.done();
                }),
                SVG.on(window, "mousemove.resize", function (t) {
                  e.update(t || window.event);
                }),
                SVG.on(window, "mouseup.resize", function () {
                  e.done();
                });
            }),
            (t.prototype.update = function (t) {
              if (t) {
                var e = this._extractPosition(t),
                  i = this.transformPoint(e.x, e.y),
                  n = i.x - this.parameters.p.x,
                  a = i.y - this.parameters.p.y;
                (this.lastUpdateCall = [n, a]),
                  this.calc(n, a),
                  this.el.fire("resizing", { dx: n, dy: a, event: t });
              } else
                this.lastUpdateCall &&
                  this.calc(this.lastUpdateCall[0], this.lastUpdateCall[1]);
            }),
            (t.prototype.done = function () {
              (this.lastUpdateCall = null),
                SVG.off(window, "mousemove.resize"),
                SVG.off(window, "mouseup.resize"),
                SVG.off(window, "touchmove.resize"),
                SVG.off(window, "touchend.resize"),
                this.el.fire("resizedone");
            }),
            (t.prototype.snapToGrid = function (t, e, i, n) {
              var a;
              return (
                void 0 !== n
                  ? (a = [
                      (i + t) % this.options.snapToGrid,
                      (n + e) % this.options.snapToGrid,
                    ])
                  : ((i = null == i ? 3 : i),
                    (a = [
                      (this.parameters.box.x +
                        t +
                        (1 & i ? 0 : this.parameters.box.width)) %
                        this.options.snapToGrid,
                      (this.parameters.box.y +
                        e +
                        (2 & i ? 0 : this.parameters.box.height)) %
                        this.options.snapToGrid,
                    ])),
                t < 0 && (a[0] -= this.options.snapToGrid),
                e < 0 && (a[1] -= this.options.snapToGrid),
                (t -=
                  Math.abs(a[0]) < this.options.snapToGrid / 2
                    ? a[0]
                    : a[0] -
                      (t < 0
                        ? -this.options.snapToGrid
                        : this.options.snapToGrid)),
                (e -=
                  Math.abs(a[1]) < this.options.snapToGrid / 2
                    ? a[1]
                    : a[1] -
                      (e < 0
                        ? -this.options.snapToGrid
                        : this.options.snapToGrid)),
                this.constraintToBox(t, e, i, n)
              );
            }),
            (t.prototype.constraintToBox = function (t, e, i, n) {
              var a,
                s,
                r = this.options.constraint || {};
              return (
                void 0 !== n
                  ? ((a = i), (s = n))
                  : ((a =
                      this.parameters.box.x +
                      (1 & i ? 0 : this.parameters.box.width)),
                    (s =
                      this.parameters.box.y +
                      (2 & i ? 0 : this.parameters.box.height))),
                void 0 !== r.minX && a + t < r.minX && (t = r.minX - a),
                void 0 !== r.maxX && a + t > r.maxX && (t = r.maxX - a),
                void 0 !== r.minY && s + e < r.minY && (e = r.minY - s),
                void 0 !== r.maxY && s + e > r.maxY && (e = r.maxY - s),
                [t, e]
              );
            }),
            (t.prototype.checkAspectRatio = function (t, e) {
              if (!this.options.saveAspectRatio) return t;
              var i = t.slice(),
                n = this.parameters.box.width / this.parameters.box.height,
                a = this.parameters.box.width + t[0],
                s = this.parameters.box.height - t[1],
                r = a / s;
              return (
                r < n
                  ? ((i[1] = a / n - this.parameters.box.height),
                    e && (i[1] = -i[1]))
                  : r > n &&
                    ((i[0] = this.parameters.box.width - s * n),
                    e && (i[0] = -i[0])),
                i
              );
            }),
            SVG.extend(SVG.Element, {
              resize: function (e) {
                return (
                  (this.remember("_resizeHandler") || new t(this)).init(
                    e || {}
                  ),
                  this
                );
              },
            }),
            (SVG.Element.prototype.resize.defaults = {
              snapToAngle: 0.1,
              snapToGrid: 1,
              constraint: {},
              saveAspectRatio: !1,
            });
        }.call(this));
      })(),
      (function (t, e) {
        void 0 === e && (e = {});
        var i = e.insertAt;
        if ("undefined" != typeof document) {
          var n = document.head || document.getElementsByTagName("head")[0],
            a = document.createElement("style");
          (a.type = "text/css"),
            "top" === i && n.firstChild
              ? n.insertBefore(a, n.firstChild)
              : n.appendChild(a),
            a.styleSheet
              ? (a.styleSheet.cssText = t)
              : a.appendChild(document.createTextNode(t));
        }
      })(
        '.apexcharts-canvas {\n  position: relative;\n  user-select: none;\n  /* cannot give overflow: hidden as it will crop tooltips which overflow outside chart area */\n}\n\n\n/* scrollbar is not visible by default for legend, hence forcing the visibility */\n.apexcharts-canvas ::-webkit-scrollbar {\n  -webkit-appearance: none;\n  width: 6px;\n}\n\n.apexcharts-canvas ::-webkit-scrollbar-thumb {\n  border-radius: 4px;\n  background-color: rgba(0, 0, 0, .5);\n  box-shadow: 0 0 1px rgba(255, 255, 255, .5);\n  -webkit-box-shadow: 0 0 1px rgba(255, 255, 255, .5);\n}\n\n\n.apexcharts-inner {\n  position: relative;\n}\n\n.apexcharts-text tspan {\n  font-family: inherit;\n}\n\n.legend-mouseover-inactive {\n  transition: 0.15s ease all;\n  opacity: 0.20;\n}\n\n.apexcharts-series-collapsed {\n  opacity: 0;\n}\n\n.apexcharts-tooltip {\n  border-radius: 5px;\n  box-shadow: 2px 2px 6px -4px #999;\n  cursor: default;\n  font-size: 14px;\n  left: 62px;\n  opacity: 0;\n  pointer-events: none;\n  position: absolute;\n  top: 20px;\n  display: flex;\n  flex-direction: column;\n  overflow: hidden;\n  white-space: nowrap;\n  z-index: 12;\n  transition: 0.15s ease all;\n}\n\n.apexcharts-tooltip.apexcharts-active {\n  opacity: 1;\n  transition: 0.15s ease all;\n}\n\n.apexcharts-tooltip.apexcharts-theme-light {\n  border: 1px solid #e3e3e3;\n  background: rgba(255, 255, 255, 0.96);\n}\n\n.apexcharts-tooltip.apexcharts-theme-dark {\n  color: #fff;\n  background: rgba(30, 30, 30, 0.8);\n}\n\n.apexcharts-tooltip * {\n  font-family: inherit;\n}\n\n\n.apexcharts-tooltip-title {\n  padding: 6px;\n  font-size: 15px;\n  margin-bottom: 4px;\n}\n\n.apexcharts-tooltip.apexcharts-theme-light .apexcharts-tooltip-title {\n  background: #ECEFF1;\n  border-bottom: 1px solid #ddd;\n}\n\n.apexcharts-tooltip.apexcharts-theme-dark .apexcharts-tooltip-title {\n  background: rgba(0, 0, 0, 0.7);\n  border-bottom: 1px solid #333;\n}\n\n.apexcharts-tooltip-text-y-value,\n.apexcharts-tooltip-text-goals-value,\n.apexcharts-tooltip-text-z-value {\n  display: inline-block;\n  font-weight: 600;\n  margin-left: 5px;\n}\n\n.apexcharts-tooltip-text-y-label:empty,\n.apexcharts-tooltip-text-y-value:empty,\n.apexcharts-tooltip-text-goals-label:empty,\n.apexcharts-tooltip-text-goals-value:empty,\n.apexcharts-tooltip-text-z-value:empty {\n  display: none;\n}\n\n.apexcharts-tooltip-text-y-value,\n.apexcharts-tooltip-text-goals-value,\n.apexcharts-tooltip-text-z-value {\n  font-weight: 600;\n}\n\n.apexcharts-tooltip-text-goals-label, \n.apexcharts-tooltip-text-goals-value {\n  padding: 6px 0 5px;\n}\n\n.apexcharts-tooltip-goals-group, \n.apexcharts-tooltip-text-goals-label, \n.apexcharts-tooltip-text-goals-value {\n  display: flex;\n}\n.apexcharts-tooltip-text-goals-label:not(:empty),\n.apexcharts-tooltip-text-goals-value:not(:empty) {\n  margin-top: -6px;\n}\n\n.apexcharts-tooltip-marker {\n  width: 12px;\n  height: 12px;\n  position: relative;\n  top: 0px;\n  margin-right: 10px;\n  border-radius: 50%;\n}\n\n.apexcharts-tooltip-series-group {\n  padding: 0 10px;\n  display: none;\n  text-align: left;\n  justify-content: left;\n  align-items: center;\n}\n\n.apexcharts-tooltip-series-group.apexcharts-active .apexcharts-tooltip-marker {\n  opacity: 1;\n}\n\n.apexcharts-tooltip-series-group.apexcharts-active,\n.apexcharts-tooltip-series-group:last-child {\n  padding-bottom: 4px;\n}\n\n.apexcharts-tooltip-series-group-hidden {\n  opacity: 0;\n  height: 0;\n  line-height: 0;\n  padding: 0 !important;\n}\n\n.apexcharts-tooltip-y-group {\n  padding: 6px 0 5px;\n}\n\n.apexcharts-tooltip-box, .apexcharts-custom-tooltip {\n  padding: 4px 8px;\n}\n\n.apexcharts-tooltip-boxPlot {\n  display: flex;\n  flex-direction: column-reverse;\n}\n\n.apexcharts-tooltip-box>div {\n  margin: 4px 0;\n}\n\n.apexcharts-tooltip-box span.value {\n  font-weight: bold;\n}\n\n.apexcharts-tooltip-rangebar {\n  padding: 5px 8px;\n}\n\n.apexcharts-tooltip-rangebar .category {\n  font-weight: 600;\n  color: #777;\n}\n\n.apexcharts-tooltip-rangebar .series-name {\n  font-weight: bold;\n  display: block;\n  margin-bottom: 5px;\n}\n\n.apexcharts-xaxistooltip {\n  opacity: 0;\n  padding: 9px 10px;\n  pointer-events: none;\n  color: #373d3f;\n  font-size: 13px;\n  text-align: center;\n  border-radius: 2px;\n  position: absolute;\n  z-index: 10;\n  background: #ECEFF1;\n  border: 1px solid #90A4AE;\n  transition: 0.15s ease all;\n}\n\n.apexcharts-xaxistooltip.apexcharts-theme-dark {\n  background: rgba(0, 0, 0, 0.7);\n  border: 1px solid rgba(0, 0, 0, 0.5);\n  color: #fff;\n}\n\n.apexcharts-xaxistooltip:after,\n.apexcharts-xaxistooltip:before {\n  left: 50%;\n  border: solid transparent;\n  content: " ";\n  height: 0;\n  width: 0;\n  position: absolute;\n  pointer-events: none;\n}\n\n.apexcharts-xaxistooltip:after {\n  border-color: rgba(236, 239, 241, 0);\n  border-width: 6px;\n  margin-left: -6px;\n}\n\n.apexcharts-xaxistooltip:before {\n  border-color: rgba(144, 164, 174, 0);\n  border-width: 7px;\n  margin-left: -7px;\n}\n\n.apexcharts-xaxistooltip-bottom:after,\n.apexcharts-xaxistooltip-bottom:before {\n  bottom: 100%;\n}\n\n.apexcharts-xaxistooltip-top:after,\n.apexcharts-xaxistooltip-top:before {\n  top: 100%;\n}\n\n.apexcharts-xaxistooltip-bottom:after {\n  border-bottom-color: #ECEFF1;\n}\n\n.apexcharts-xaxistooltip-bottom:before {\n  border-bottom-color: #90A4AE;\n}\n\n.apexcharts-xaxistooltip-bottom.apexcharts-theme-dark:after {\n  border-bottom-color: rgba(0, 0, 0, 0.5);\n}\n\n.apexcharts-xaxistooltip-bottom.apexcharts-theme-dark:before {\n  border-bottom-color: rgba(0, 0, 0, 0.5);\n}\n\n.apexcharts-xaxistooltip-top:after {\n  border-top-color: #ECEFF1\n}\n\n.apexcharts-xaxistooltip-top:before {\n  border-top-color: #90A4AE;\n}\n\n.apexcharts-xaxistooltip-top.apexcharts-theme-dark:after {\n  border-top-color: rgba(0, 0, 0, 0.5);\n}\n\n.apexcharts-xaxistooltip-top.apexcharts-theme-dark:before {\n  border-top-color: rgba(0, 0, 0, 0.5);\n}\n\n.apexcharts-xaxistooltip.apexcharts-active {\n  opacity: 1;\n  transition: 0.15s ease all;\n}\n\n.apexcharts-yaxistooltip {\n  opacity: 0;\n  padding: 4px 10px;\n  pointer-events: none;\n  color: #373d3f;\n  font-size: 13px;\n  text-align: center;\n  border-radius: 2px;\n  position: absolute;\n  z-index: 10;\n  background: #ECEFF1;\n  border: 1px solid #90A4AE;\n}\n\n.apexcharts-yaxistooltip.apexcharts-theme-dark {\n  background: rgba(0, 0, 0, 0.7);\n  border: 1px solid rgba(0, 0, 0, 0.5);\n  color: #fff;\n}\n\n.apexcharts-yaxistooltip:after,\n.apexcharts-yaxistooltip:before {\n  top: 50%;\n  border: solid transparent;\n  content: " ";\n  height: 0;\n  width: 0;\n  position: absolute;\n  pointer-events: none;\n}\n\n.apexcharts-yaxistooltip:after {\n  border-color: rgba(236, 239, 241, 0);\n  border-width: 6px;\n  margin-top: -6px;\n}\n\n.apexcharts-yaxistooltip:before {\n  border-color: rgba(144, 164, 174, 0);\n  border-width: 7px;\n  margin-top: -7px;\n}\n\n.apexcharts-yaxistooltip-left:after,\n.apexcharts-yaxistooltip-left:before {\n  left: 100%;\n}\n\n.apexcharts-yaxistooltip-right:after,\n.apexcharts-yaxistooltip-right:before {\n  right: 100%;\n}\n\n.apexcharts-yaxistooltip-left:after {\n  border-left-color: #ECEFF1;\n}\n\n.apexcharts-yaxistooltip-left:before {\n  border-left-color: #90A4AE;\n}\n\n.apexcharts-yaxistooltip-left.apexcharts-theme-dark:after {\n  border-left-color: rgba(0, 0, 0, 0.5);\n}\n\n.apexcharts-yaxistooltip-left.apexcharts-theme-dark:before {\n  border-left-color: rgba(0, 0, 0, 0.5);\n}\n\n.apexcharts-yaxistooltip-right:after {\n  border-right-color: #ECEFF1;\n}\n\n.apexcharts-yaxistooltip-right:before {\n  border-right-color: #90A4AE;\n}\n\n.apexcharts-yaxistooltip-right.apexcharts-theme-dark:after {\n  border-right-color: rgba(0, 0, 0, 0.5);\n}\n\n.apexcharts-yaxistooltip-right.apexcharts-theme-dark:before {\n  border-right-color: rgba(0, 0, 0, 0.5);\n}\n\n.apexcharts-yaxistooltip.apexcharts-active {\n  opacity: 1;\n}\n\n.apexcharts-yaxistooltip-hidden {\n  display: none;\n}\n\n.apexcharts-xcrosshairs,\n.apexcharts-ycrosshairs {\n  pointer-events: none;\n  opacity: 0;\n  transition: 0.15s ease all;\n}\n\n.apexcharts-xcrosshairs.apexcharts-active,\n.apexcharts-ycrosshairs.apexcharts-active {\n  opacity: 1;\n  transition: 0.15s ease all;\n}\n\n.apexcharts-ycrosshairs-hidden {\n  opacity: 0;\n}\n\n.apexcharts-selection-rect {\n  cursor: move;\n}\n\n.svg_select_boundingRect, .svg_select_points_rot {\n  pointer-events: none;\n  opacity: 0;\n  visibility: hidden;\n}\n.apexcharts-selection-rect + g .svg_select_boundingRect,\n.apexcharts-selection-rect + g .svg_select_points_rot {\n  opacity: 0;\n  visibility: hidden;\n}\n\n.apexcharts-selection-rect + g .svg_select_points_l,\n.apexcharts-selection-rect + g .svg_select_points_r {\n  cursor: ew-resize;\n  opacity: 1;\n  visibility: visible;\n}\n\n.svg_select_points {\n  fill: #efefef;\n  stroke: #333;\n  rx: 2;\n}\n\n.apexcharts-svg.apexcharts-zoomable.hovering-zoom {\n  cursor: crosshair\n}\n\n.apexcharts-svg.apexcharts-zoomable.hovering-pan {\n  cursor: move\n}\n\n.apexcharts-zoom-icon,\n.apexcharts-zoomin-icon,\n.apexcharts-zoomout-icon,\n.apexcharts-reset-icon,\n.apexcharts-pan-icon,\n.apexcharts-selection-icon,\n.apexcharts-menu-icon,\n.apexcharts-toolbar-custom-icon {\n  cursor: pointer;\n  width: 20px;\n  height: 20px;\n  line-height: 24px;\n  color: #6E8192;\n  text-align: center;\n}\n\n.apexcharts-zoom-icon svg,\n.apexcharts-zoomin-icon svg,\n.apexcharts-zoomout-icon svg,\n.apexcharts-reset-icon svg,\n.apexcharts-menu-icon svg {\n  fill: #6E8192;\n}\n\n.apexcharts-selection-icon svg {\n  fill: #444;\n  transform: scale(0.76)\n}\n\n.apexcharts-theme-dark .apexcharts-zoom-icon svg,\n.apexcharts-theme-dark .apexcharts-zoomin-icon svg,\n.apexcharts-theme-dark .apexcharts-zoomout-icon svg,\n.apexcharts-theme-dark .apexcharts-reset-icon svg,\n.apexcharts-theme-dark .apexcharts-pan-icon svg,\n.apexcharts-theme-dark .apexcharts-selection-icon svg,\n.apexcharts-theme-dark .apexcharts-menu-icon svg,\n.apexcharts-theme-dark .apexcharts-toolbar-custom-icon svg {\n  fill: #f3f4f5;\n}\n\n.apexcharts-canvas .apexcharts-zoom-icon.apexcharts-selected svg,\n.apexcharts-canvas .apexcharts-selection-icon.apexcharts-selected svg,\n.apexcharts-canvas .apexcharts-reset-zoom-icon.apexcharts-selected svg {\n  fill: #008FFB;\n}\n\n.apexcharts-theme-light .apexcharts-selection-icon:not(.apexcharts-selected):hover svg,\n.apexcharts-theme-light .apexcharts-zoom-icon:not(.apexcharts-selected):hover svg,\n.apexcharts-theme-light .apexcharts-zoomin-icon:hover svg,\n.apexcharts-theme-light .apexcharts-zoomout-icon:hover svg,\n.apexcharts-theme-light .apexcharts-reset-icon:hover svg,\n.apexcharts-theme-light .apexcharts-menu-icon:hover svg {\n  fill: #333;\n}\n\n.apexcharts-selection-icon,\n.apexcharts-menu-icon {\n  position: relative;\n}\n\n.apexcharts-reset-icon {\n  margin-left: 5px;\n}\n\n.apexcharts-zoom-icon,\n.apexcharts-reset-icon,\n.apexcharts-menu-icon {\n  transform: scale(0.85);\n}\n\n.apexcharts-zoomin-icon,\n.apexcharts-zoomout-icon {\n  transform: scale(0.7)\n}\n\n.apexcharts-zoomout-icon {\n  margin-right: 3px;\n}\n\n.apexcharts-pan-icon {\n  transform: scale(0.62);\n  position: relative;\n  left: 1px;\n  top: 0px;\n}\n\n.apexcharts-pan-icon svg {\n  fill: #fff;\n  stroke: #6E8192;\n  stroke-width: 2;\n}\n\n.apexcharts-pan-icon.apexcharts-selected svg {\n  stroke: #008FFB;\n}\n\n.apexcharts-pan-icon:not(.apexcharts-selected):hover svg {\n  stroke: #333;\n}\n\n.apexcharts-toolbar {\n  position: absolute;\n  z-index: 11;\n  max-width: 176px;\n  text-align: right;\n  border-radius: 3px;\n  padding: 0px 6px 2px 6px;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n}\n\n.apexcharts-menu {\n  background: #fff;\n  position: absolute;\n  top: 100%;\n  border: 1px solid #ddd;\n  border-radius: 3px;\n  padding: 3px;\n  right: 10px;\n  opacity: 0;\n  min-width: 110px;\n  transition: 0.15s ease all;\n  pointer-events: none;\n}\n\n.apexcharts-menu.apexcharts-menu-open {\n  opacity: 1;\n  pointer-events: all;\n  transition: 0.15s ease all;\n}\n\n.apexcharts-menu-item {\n  padding: 6px 7px;\n  font-size: 12px;\n  cursor: pointer;\n}\n\n.apexcharts-theme-light .apexcharts-menu-item:hover {\n  background: #eee;\n}\n\n.apexcharts-theme-dark .apexcharts-menu {\n  background: rgba(0, 0, 0, 0.7);\n  color: #fff;\n}\n\n@media screen and (min-width: 768px) {\n  .apexcharts-canvas:hover .apexcharts-toolbar {\n    opacity: 1;\n  }\n}\n\n.apexcharts-datalabel.apexcharts-element-hidden {\n  opacity: 0;\n}\n\n.apexcharts-pie-label,\n.apexcharts-datalabels,\n.apexcharts-datalabel,\n.apexcharts-datalabel-label,\n.apexcharts-datalabel-value {\n  cursor: default;\n  pointer-events: none;\n}\n\n.apexcharts-pie-label-delay {\n  opacity: 0;\n  animation-name: opaque;\n  animation-duration: 0.3s;\n  animation-fill-mode: forwards;\n  animation-timing-function: ease;\n}\n\n.apexcharts-canvas .apexcharts-element-hidden {\n  opacity: 0;\n}\n\n.apexcharts-hide .apexcharts-series-points {\n  opacity: 0;\n}\n\n.apexcharts-gridline,\n.apexcharts-annotation-rect,\n.apexcharts-tooltip .apexcharts-marker,\n.apexcharts-area-series .apexcharts-area,\n.apexcharts-line,\n.apexcharts-zoom-rect,\n.apexcharts-toolbar svg,\n.apexcharts-area-series .apexcharts-series-markers .apexcharts-marker.no-pointer-events,\n.apexcharts-line-series .apexcharts-series-markers .apexcharts-marker.no-pointer-events,\n.apexcharts-radar-series path,\n.apexcharts-radar-series polygon {\n  pointer-events: none;\n}\n\n\n/* markers */\n\n.apexcharts-marker {\n  transition: 0.15s ease all;\n}\n\n@keyframes opaque {\n  0% {\n    opacity: 0;\n  }\n  100% {\n    opacity: 1;\n  }\n}\n\n\n/* Resize generated styles */\n\n@keyframes resizeanim {\n  from {\n    opacity: 0;\n  }\n  to {\n    opacity: 0;\n  }\n}\n\n.resize-triggers {\n  animation: 1ms resizeanim;\n  visibility: hidden;\n  opacity: 0;\n}\n\n.resize-triggers,\n.resize-triggers>div,\n.contract-trigger:before {\n  content: " ";\n  display: block;\n  position: absolute;\n  top: 0;\n  left: 0;\n  height: 100%;\n  width: 100%;\n  overflow: hidden;\n}\n\n.resize-triggers>div {\n  background: #eee;\n  overflow: auto;\n}\n\n.contract-trigger:before {\n  width: 200%;\n  height: 200%;\n}'
      ),
      (function () {
        function t(t) {
          var e = t.__resizeTriggers__,
            i = e.firstElementChild,
            n = e.lastElementChild,
            a = i ? i.firstElementChild : null;
          n && ((n.scrollLeft = n.scrollWidth), (n.scrollTop = n.scrollHeight)),
            a &&
              ((a.style.width = i.offsetWidth + 1 + "px"),
              (a.style.height = i.offsetHeight + 1 + "px")),
            i &&
              ((i.scrollLeft = i.scrollWidth), (i.scrollTop = i.scrollHeight));
        }
        function e(e) {
          var i = this;
          t(this),
            this.__resizeRAF__ && s(this.__resizeRAF__),
            (this.__resizeRAF__ = a(function () {
              (function (t) {
                return (
                  t.offsetWidth != t.__resizeLast__.width ||
                  t.offsetHeight != t.__resizeLast__.height
                );
              })(i) &&
                ((i.__resizeLast__.width = i.offsetWidth),
                (i.__resizeLast__.height = i.offsetHeight),
                i.__resizeListeners__.forEach(function (t) {
                  t.call(e);
                }));
            }));
        }
        var i,
          n,
          a =
            ((i =
              window.requestAnimationFrame ||
              window.mozRequestAnimationFrame ||
              window.webkitRequestAnimationFrame ||
              function (t) {
                return window.setTimeout(t, 20);
              }),
            function (t) {
              return i(t);
            }),
          s =
            ((n =
              window.cancelAnimationFrame ||
              window.mozCancelAnimationFrame ||
              window.webkitCancelAnimationFrame ||
              window.clearTimeout),
            function (t) {
              return n(t);
            }),
          r = !1,
          o = "animationstart",
          l = "Webkit Moz O ms".split(" "),
          c =
            "webkitAnimationStart animationstart oAnimationStart MSAnimationStart".split(
              " "
            ),
          h = document.createElement("fakeelement");
        if ((void 0 !== h.style.animationName && (r = !0), !1 === r))
          for (var d = 0; d < l.length; d++)
            if (void 0 !== h.style[l[d] + "AnimationName"]) {
              o = c[d];
              break;
            }
        (window.addResizeListener = function (i, n) {
          i.__resizeTriggers__ ||
            ("static" == getComputedStyle(i).position &&
              (i.style.position = "relative"),
            (i.__resizeLast__ = {}),
            (i.__resizeListeners__ = []),
            ((i.__resizeTriggers__ = document.createElement("div")).className =
              "resize-triggers"),
            (i.__resizeTriggers__.innerHTML =
              '<div class="expand-trigger"><div></div></div><div class="contract-trigger"></div>'),
            i.appendChild(i.__resizeTriggers__),
            t(i),
            i.addEventListener("scroll", e, !0),
            o &&
              i.__resizeTriggers__.addEventListener(o, function (e) {
                "resizeanim" == e.animationName && t(i);
              })),
            i.__resizeListeners__.push(n);
        }),
          (window.removeResizeListener = function (t, i) {
            t &&
              (t.__resizeListeners__.splice(
                t.__resizeListeners__.indexOf(i),
                1
              ),
              t.__resizeListeners__.length ||
                (t.removeEventListener("scroll", e),
                t.__resizeTriggers__.parentNode &&
                  (t.__resizeTriggers__ = !t.removeChild(
                    t.__resizeTriggers__
                  ))));
          });
      })(),
      void 0 === window.Apex && (window.Apex = {});
    var Dt = (function () {
        function t(i) {
          e(this, t), (this.ctx = i), (this.w = i.w);
        }
        return (
          n(t, [
            {
              key: "initModules",
              value: function () {
                (this.ctx.publicMethods = [
                  "updateOptions",
                  "updateSeries",
                  "appendData",
                  "appendSeries",
                  "toggleSeries",
                  "showSeries",
                  "hideSeries",
                  "setLocale",
                  "resetSeries",
                  "zoomX",
                  "toggleDataPointSelection",
                  "dataURI",
                  "addXaxisAnnotation",
                  "addYaxisAnnotation",
                  "addPointAnnotation",
                  "clearAnnotations",
                  "removeAnnotation",
                  "paper",
                  "destroy",
                ]),
                  (this.ctx.eventList = [
                    "click",
                    "mousedown",
                    "mousemove",
                    "mouseleave",
                    "touchstart",
                    "touchmove",
                    "touchleave",
                    "mouseup",
                    "touchend",
                  ]),
                  (this.ctx.animations = new g(this.ctx)),
                  (this.ctx.axes = new Q(this.ctx)),
                  (this.ctx.core = new It(this.ctx.el, this.ctx)),
                  (this.ctx.config = new X({})),
                  (this.ctx.data = new F(this.ctx)),
                  (this.ctx.grid = new V(this.ctx)),
                  (this.ctx.graphics = new m(this.ctx)),
                  (this.ctx.coreUtils = new y(this.ctx)),
                  (this.ctx.crosshairs = new K(this.ctx)),
                  (this.ctx.events = new $(this.ctx)),
                  (this.ctx.exports = new B(this.ctx)),
                  (this.ctx.localization = new Z(this.ctx)),
                  (this.ctx.options = new S()),
                  (this.ctx.responsive = new J(this.ctx)),
                  (this.ctx.series = new M(this.ctx)),
                  (this.ctx.theme = new tt(this.ctx)),
                  (this.ctx.formatters = new Y(this.ctx)),
                  (this.ctx.titleSubtitle = new et(this.ctx)),
                  (this.ctx.legend = new lt(this.ctx)),
                  (this.ctx.toolbar = new ct(this.ctx)),
                  (this.ctx.dimensions = new rt(this.ctx)),
                  (this.ctx.updateHelpers = new Ot(this.ctx)),
                  (this.ctx.zoomPanSelection = new ht(this.ctx)),
                  (this.ctx.w.globals.tooltip = new mt(this.ctx));
              },
            },
          ]),
          t
        );
      })(),
      zt = (function () {
        function t(i) {
          e(this, t), (this.ctx = i), (this.w = i.w);
        }
        return (
          n(t, [
            {
              key: "clear",
              value: function (t) {
                var e = t.isUpdating;
                this.ctx.zoomPanSelection &&
                  this.ctx.zoomPanSelection.destroy(),
                  this.ctx.toolbar && this.ctx.toolbar.destroy(),
                  (this.ctx.animations = null),
                  (this.ctx.axes = null),
                  (this.ctx.annotations = null),
                  (this.ctx.core = null),
                  (this.ctx.data = null),
                  (this.ctx.grid = null),
                  (this.ctx.series = null),
                  (this.ctx.responsive = null),
                  (this.ctx.theme = null),
                  (this.ctx.formatters = null),
                  (this.ctx.titleSubtitle = null),
                  (this.ctx.legend = null),
                  (this.ctx.dimensions = null),
                  (this.ctx.options = null),
                  (this.ctx.crosshairs = null),
                  (this.ctx.zoomPanSelection = null),
                  (this.ctx.updateHelpers = null),
                  (this.ctx.toolbar = null),
                  (this.ctx.localization = null),
                  (this.ctx.w.globals.tooltip = null),
                  this.clearDomElements({ isUpdating: e });
              },
            },
            {
              key: "killSVG",
              value: function (t) {
                t.each(function (t, e) {
                  this.removeClass("*"), this.off(), this.stop();
                }, !0),
                  t.ungroup(),
                  t.clear();
              },
            },
            {
              key: "clearDomElements",
              value: function (t) {
                var e = this,
                  i = t.isUpdating,
                  n = this.w.globals.dom.Paper.node;
                n.parentNode &&
                  n.parentNode.parentNode &&
                  !i &&
                  (n.parentNode.parentNode.style.minHeight = "unset");
                var a = this.w.globals.dom.baseEl;
                a &&
                  this.ctx.eventList.forEach(function (t) {
                    a.removeEventListener(t, e.ctx.events.documentEvent);
                  });
                var s = this.w.globals.dom;
                if (null !== this.ctx.el)
                  for (; this.ctx.el.firstChild; )
                    this.ctx.el.removeChild(this.ctx.el.firstChild);
                this.killSVG(s.Paper),
                  s.Paper.remove(),
                  (s.elWrap = null),
                  (s.elGraphical = null),
                  (s.elAnnotations = null),
                  (s.elLegendWrap = null),
                  (s.baseEl = null),
                  (s.elGridRect = null),
                  (s.elGridRectMask = null),
                  (s.elGridRectMarkerMask = null),
                  (s.elForecastMask = null),
                  (s.elNonForecastMask = null),
                  (s.elDefs = null);
              },
            },
          ]),
          t
        );
      })();
    return (function () {
      function t(i, n) {
        e(this, t),
          (this.opts = n),
          (this.ctx = this),
          (this.w = new R(n).init()),
          (this.el = i),
          (this.w.globals.cuid = p.randomId()),
          (this.w.globals.chartID = this.w.config.chart.id
            ? p.escapeString(this.w.config.chart.id)
            : this.w.globals.cuid),
          new Dt(this).initModules(),
          (this.create = p.bind(this.create, this)),
          (this.windowResizeHandler = this._windowResizeHandler.bind(this)),
          (this.parentResizeHandler = this._parentResizeCallback.bind(this));
      }
      return (
        n(
          t,
          [
            {
              key: "render",
              value: function () {
                var t = this;
                return new Promise(function (e, i) {
                  if (null !== t.el) {
                    void 0 === Apex._chartInstances &&
                      (Apex._chartInstances = []),
                      t.w.config.chart.id &&
                        Apex._chartInstances.push({
                          id: t.w.globals.chartID,
                          group: t.w.config.chart.group,
                          chart: t,
                        }),
                      t.setLocale(t.w.config.chart.defaultLocale);
                    var n = t.w.config.chart.events.beforeMount;
                    "function" == typeof n && n(t, t.w),
                      t.events.fireEvent("beforeMount", [t, t.w]),
                      window.addEventListener("resize", t.windowResizeHandler),
                      window.addResizeListener(
                        t.el.parentNode,
                        t.parentResizeHandler
                      );
                    var a = t.create(t.w.config.series, {});
                    if (!a) return e(t);
                    t.mount(a)
                      .then(function () {
                        "function" == typeof t.w.config.chart.events.mounted &&
                          t.w.config.chart.events.mounted(t, t.w),
                          t.events.fireEvent("mounted", [t, t.w]),
                          e(a);
                      })
                      .catch(function (t) {
                        i(t);
                      });
                  } else i(new Error("Element not found"));
                });
              },
            },
            {
              key: "create",
              value: function (t, e) {
                var i = this.w;
                new Dt(this).initModules();
                var n = this.w.globals;
                if (
                  ((n.noData = !1),
                  (n.animationEnded = !1),
                  this.responsive.checkResponsiveConfig(e),
                  i.config.xaxis.convertedCatToNumeric &&
                    new N(i.config).convertCatToNumericXaxis(
                      i.config,
                      this.ctx
                    ),
                  null === this.el)
                )
                  return (n.animationEnded = !0), null;
                if (
                  (this.core.setupElements(),
                  "treemap" === i.config.chart.type &&
                    ((i.config.grid.show = !1), (i.config.yaxis[0].show = !1)),
                  0 === n.svgWidth)
                )
                  return (n.animationEnded = !0), null;
                var a = y.checkComboSeries(t);
                (n.comboCharts = a.comboCharts),
                  (n.comboBarCount = a.comboBarCount);
                var s = t.every(function (t) {
                  return t.data && 0 === t.data.length;
                });
                (0 === t.length || s) && this.series.handleNoData(),
                  this.events.setupEventHandlers(),
                  this.data.parseData(t),
                  this.theme.init(),
                  new E(this).setGlobalMarkerSize(),
                  this.formatters.setLabelFormatters(),
                  this.titleSubtitle.draw(),
                  (n.noData &&
                    n.collapsedSeries.length !== n.series.length &&
                    !i.config.legend.showForSingleSeries) ||
                    this.legend.init(),
                  this.series.hasAllSeriesEqualX(),
                  n.axisCharts &&
                    (this.core.coreCalculations(),
                    "category" !== i.config.xaxis.type &&
                      this.formatters.setLabelFormatters(),
                    (this.ctx.toolbar.minX = i.globals.minX),
                    (this.ctx.toolbar.maxX = i.globals.maxX)),
                  this.formatters.heatmapLabelFormatters(),
                  this.dimensions.plotCoords();
                var r = this.core.xySettings();
                this.grid.createGridMask();
                var o = this.core.plotChartType(t, r),
                  l = new L(this);
                l.bringForward(),
                  i.config.dataLabels.background.enabled &&
                    l.dataLabelsBackground(),
                  this.core.shiftGraphPosition();
                var c = {
                  plot: {
                    left: i.globals.translateX,
                    top: i.globals.translateY,
                    width: i.globals.gridWidth,
                    height: i.globals.gridHeight,
                  },
                };
                return {
                  elGraph: o,
                  xyRatios: r,
                  elInner: i.globals.dom.elGraphical,
                  dimensions: c,
                };
              },
            },
            {
              key: "mount",
              value: function () {
                var t = this,
                  e =
                    arguments.length > 0 && void 0 !== arguments[0]
                      ? arguments[0]
                      : null,
                  i = this,
                  n = i.w;
                return new Promise(function (a, s) {
                  if (null === i.el)
                    return s(
                      new Error(
                        "Not enough data to display or target element not found"
                      )
                    );
                  (null === e || n.globals.allSeriesCollapsed) &&
                    i.series.handleNoData(),
                    "treemap" !== n.config.chart.type &&
                      i.axes.drawAxis(n.config.chart.type, e.xyRatios),
                    (i.grid = new V(i));
                  var r = i.grid.drawGrid();
                  (i.annotations = new C(i)),
                    i.annotations.drawImageAnnos(),
                    i.annotations.drawTextAnnos(),
                    "back" === n.config.grid.position &&
                      r &&
                      n.globals.dom.elGraphical.add(r.el);
                  var o = new j(t.ctx),
                    l = new U(t.ctx);
                  if (
                    (null !== r &&
                      (o.xAxisLabelCorrections(r.xAxisTickWidth),
                      l.setYAxisTextAlignments(),
                      n.config.yaxis.map(function (t, e) {
                        -1 === n.globals.ignoreYAxisIndexes.indexOf(e) &&
                          l.yAxisTitleRotate(e, t.opposite);
                      })),
                    "back" === n.config.annotations.position &&
                      (n.globals.dom.Paper.add(n.globals.dom.elAnnotations),
                      i.annotations.drawAxesAnnotations()),
                    Array.isArray(e.elGraph))
                  )
                    for (var c = 0; c < e.elGraph.length; c++)
                      n.globals.dom.elGraphical.add(e.elGraph[c]);
                  else n.globals.dom.elGraphical.add(e.elGraph);
                  if (
                    ("front" === n.config.grid.position &&
                      r &&
                      n.globals.dom.elGraphical.add(r.el),
                    "front" === n.config.xaxis.crosshairs.position &&
                      i.crosshairs.drawXCrosshairs(),
                    "front" === n.config.yaxis[0].crosshairs.position &&
                      i.crosshairs.drawYCrosshairs(),
                    "front" === n.config.annotations.position &&
                      (n.globals.dom.Paper.add(n.globals.dom.elAnnotations),
                      i.annotations.drawAxesAnnotations()),
                    !n.globals.noData)
                  ) {
                    if (
                      (n.config.tooltip.enabled &&
                        !n.globals.noData &&
                        i.w.globals.tooltip.drawTooltip(e.xyRatios),
                      n.globals.axisCharts &&
                        (n.globals.isXNumeric ||
                          n.config.xaxis.convertedCatToNumeric ||
                          n.globals.isTimelineBar))
                    )
                      (n.config.chart.zoom.enabled ||
                        (n.config.chart.selection &&
                          n.config.chart.selection.enabled) ||
                        (n.config.chart.pan && n.config.chart.pan.enabled)) &&
                        i.zoomPanSelection.init({ xyRatios: e.xyRatios });
                    else {
                      var h = n.config.chart.toolbar.tools;
                      [
                        "zoom",
                        "zoomin",
                        "zoomout",
                        "selection",
                        "pan",
                        "reset",
                      ].forEach(function (t) {
                        h[t] = !1;
                      });
                    }
                    n.config.chart.toolbar.show &&
                      !n.globals.allSeriesCollapsed &&
                      i.toolbar.createToolbar();
                  }
                  n.globals.memory.methodsToExec.length > 0 &&
                    n.globals.memory.methodsToExec.forEach(function (t) {
                      t.method(t.params, !1, t.context);
                    }),
                    n.globals.axisCharts ||
                      n.globals.noData ||
                      i.core.resizeNonAxisCharts(),
                    a(i);
                });
              },
            },
            {
              key: "destroy",
              value: function () {
                window.removeEventListener("resize", this.windowResizeHandler),
                  window.removeResizeListener(
                    this.el.parentNode,
                    this.parentResizeHandler
                  );
                var t = this.w.config.chart.id;
                t &&
                  Apex._chartInstances.forEach(function (e, i) {
                    e.id === p.escapeString(t) &&
                      Apex._chartInstances.splice(i, 1);
                  }),
                  new zt(this.ctx).clear({ isUpdating: !1 });
              },
            },
            {
              key: "updateOptions",
              value: function (t) {
                var e = this,
                  i =
                    arguments.length > 1 &&
                    void 0 !== arguments[1] &&
                    arguments[1],
                  n =
                    !(arguments.length > 2 && void 0 !== arguments[2]) ||
                    arguments[2],
                  a =
                    !(arguments.length > 3 && void 0 !== arguments[3]) ||
                    arguments[3],
                  s =
                    !(arguments.length > 4 && void 0 !== arguments[4]) ||
                    arguments[4],
                  r = this.w;
                return (
                  (r.globals.selection = void 0),
                  t.series &&
                    (this.series.resetSeries(!1, !0, !1),
                    t.series.length &&
                      t.series[0].data &&
                      (t.series = t.series.map(function (t, i) {
                        return e.updateHelpers._extendSeries(t, i);
                      })),
                    this.updateHelpers.revertDefaultAxisMinMax()),
                  t.xaxis && (t = this.updateHelpers.forceXAxisUpdate(t)),
                  t.yaxis && (t = this.updateHelpers.forceYAxisUpdate(t)),
                  r.globals.collapsedSeriesIndices.length > 0 &&
                    this.series.clearPreviousPaths(),
                  t.theme && (t = this.theme.updateThemeOptions(t)),
                  this.updateHelpers._updateOptions(t, i, n, a, s)
                );
              },
            },
            {
              key: "updateSeries",
              value: function () {
                var t =
                    arguments.length > 0 && void 0 !== arguments[0]
                      ? arguments[0]
                      : [],
                  e =
                    !(arguments.length > 1 && void 0 !== arguments[1]) ||
                    arguments[1],
                  i =
                    !(arguments.length > 2 && void 0 !== arguments[2]) ||
                    arguments[2];
                return (
                  this.series.resetSeries(!1),
                  this.updateHelpers.revertDefaultAxisMinMax(),
                  this.updateHelpers._updateSeries(t, e, i)
                );
              },
            },
            {
              key: "appendSeries",
              value: function (t) {
                var e =
                    !(arguments.length > 1 && void 0 !== arguments[1]) ||
                    arguments[1],
                  i =
                    !(arguments.length > 2 && void 0 !== arguments[2]) ||
                    arguments[2],
                  n = this.w.config.series.slice();
                return (
                  n.push(t),
                  this.series.resetSeries(!1),
                  this.updateHelpers.revertDefaultAxisMinMax(),
                  this.updateHelpers._updateSeries(n, e, i)
                );
              },
            },
            {
              key: "appendData",
              value: function (t) {
                var e =
                    !(arguments.length > 1 && void 0 !== arguments[1]) ||
                    arguments[1],
                  i = this;
                (i.w.globals.dataChanged = !0), i.series.getPreviousPaths();
                for (
                  var n = i.w.config.series.slice(), a = 0;
                  a < n.length;
                  a++
                )
                  if (null !== t[a] && void 0 !== t[a])
                    for (var s = 0; s < t[a].data.length; s++)
                      n[a].data.push(t[a].data[s]);
                return (
                  (i.w.config.series = n),
                  e && (i.w.globals.initialSeries = p.clone(i.w.config.series)),
                  this.update()
                );
              },
            },
            {
              key: "update",
              value: function (t) {
                var e = this;
                return new Promise(function (i, n) {
                  new zt(e.ctx).clear({ isUpdating: !0 });
                  var a = e.create(e.w.config.series, t);
                  if (!a) return i(e);
                  e.mount(a)
                    .then(function () {
                      "function" == typeof e.w.config.chart.events.updated &&
                        e.w.config.chart.events.updated(e, e.w),
                        e.events.fireEvent("updated", [e, e.w]),
                        (e.w.globals.isDirty = !0),
                        i(e);
                    })
                    .catch(function (t) {
                      n(t);
                    });
                });
              },
            },
            {
              key: "getSyncedCharts",
              value: function () {
                var t = this.getGroupedCharts(),
                  e = [this];
                return (
                  t.length &&
                    ((e = []),
                    t.forEach(function (t) {
                      e.push(t);
                    })),
                  e
                );
              },
            },
            {
              key: "getGroupedCharts",
              value: function () {
                var t = this;
                return Apex._chartInstances
                  .filter(function (t) {
                    if (t.group) return !0;
                  })
                  .map(function (e) {
                    return t.w.config.chart.group === e.group ? e.chart : t;
                  });
              },
            },
            {
              key: "toggleSeries",
              value: function (t) {
                return this.series.toggleSeries(t);
              },
            },
            {
              key: "showSeries",
              value: function (t) {
                this.series.showSeries(t);
              },
            },
            {
              key: "hideSeries",
              value: function (t) {
                this.series.hideSeries(t);
              },
            },
            {
              key: "resetSeries",
              value: function () {
                var t =
                    !(arguments.length > 0 && void 0 !== arguments[0]) ||
                    arguments[0],
                  e =
                    !(arguments.length > 1 && void 0 !== arguments[1]) ||
                    arguments[1];
                this.series.resetSeries(t, e);
              },
            },
            {
              key: "addEventListener",
              value: function (t, e) {
                this.events.addEventListener(t, e);
              },
            },
            {
              key: "removeEventListener",
              value: function (t, e) {
                this.events.removeEventListener(t, e);
              },
            },
            {
              key: "addXaxisAnnotation",
              value: function (t) {
                var e =
                    !(arguments.length > 1 && void 0 !== arguments[1]) ||
                    arguments[1],
                  i =
                    arguments.length > 2 && void 0 !== arguments[2]
                      ? arguments[2]
                      : void 0,
                  n = this;
                i && (n = i), n.annotations.addXaxisAnnotationExternal(t, e, n);
              },
            },
            {
              key: "addYaxisAnnotation",
              value: function (t) {
                var e =
                    !(arguments.length > 1 && void 0 !== arguments[1]) ||
                    arguments[1],
                  i =
                    arguments.length > 2 && void 0 !== arguments[2]
                      ? arguments[2]
                      : void 0,
                  n = this;
                i && (n = i), n.annotations.addYaxisAnnotationExternal(t, e, n);
              },
            },
            {
              key: "addPointAnnotation",
              value: function (t) {
                var e =
                    !(arguments.length > 1 && void 0 !== arguments[1]) ||
                    arguments[1],
                  i =
                    arguments.length > 2 && void 0 !== arguments[2]
                      ? arguments[2]
                      : void 0,
                  n = this;
                i && (n = i), n.annotations.addPointAnnotationExternal(t, e, n);
              },
            },
            {
              key: "clearAnnotations",
              value: function () {
                var t =
                    arguments.length > 0 && void 0 !== arguments[0]
                      ? arguments[0]
                      : void 0,
                  e = this;
                t && (e = t), e.annotations.clearAnnotations(e);
              },
            },
            {
              key: "removeAnnotation",
              value: function (t) {
                var e =
                    arguments.length > 1 && void 0 !== arguments[1]
                      ? arguments[1]
                      : void 0,
                  i = this;
                e && (i = e), i.annotations.removeAnnotation(i, t);
              },
            },
            {
              key: "getChartArea",
              value: function () {
                return this.w.globals.dom.baseEl.querySelector(
                  ".apexcharts-inner"
                );
              },
            },
            {
              key: "getSeriesTotalXRange",
              value: function (t, e) {
                return this.coreUtils.getSeriesTotalsXRange(t, e);
              },
            },
            {
              key: "getHighestValueInSeries",
              value: function () {
                var t =
                    arguments.length > 0 && void 0 !== arguments[0]
                      ? arguments[0]
                      : 0,
                  e = new q(this.ctx);
                return e.getMinYMaxY(t).highestY;
              },
            },
            {
              key: "getLowestValueInSeries",
              value: function () {
                var t =
                    arguments.length > 0 && void 0 !== arguments[0]
                      ? arguments[0]
                      : 0,
                  e = new q(this.ctx);
                return e.getMinYMaxY(t).lowestY;
              },
            },
            {
              key: "getSeriesTotal",
              value: function () {
                return this.w.globals.seriesTotals;
              },
            },
            {
              key: "toggleDataPointSelection",
              value: function (t, e) {
                return this.updateHelpers.toggleDataPointSelection(t, e);
              },
            },
            {
              key: "zoomX",
              value: function (t, e) {
                this.ctx.toolbar.zoomUpdateOptions(t, e);
              },
            },
            {
              key: "setLocale",
              value: function (t) {
                this.localization.setCurrentLocaleValues(t);
              },
            },
            {
              key: "dataURI",
              value: function (t) {
                return new B(this.ctx).dataURI(t);
              },
            },
            {
              key: "paper",
              value: function () {
                return this.w.globals.dom.Paper;
              },
            },
            {
              key: "_parentResizeCallback",
              value: function () {
                this.w.globals.animationEnded &&
                  this.w.config.chart.redrawOnParentResize &&
                  this._windowResize();
              },
            },
            {
              key: "_windowResize",
              value: function () {
                var t = this;
                clearTimeout(this.w.globals.resizeTimer),
                  (this.w.globals.resizeTimer = window.setTimeout(function () {
                    (t.w.globals.resized = !0),
                      (t.w.globals.dataChanged = !1),
                      t.ctx.update();
                  }, 150));
              },
            },
            {
              key: "_windowResizeHandler",
              value: function () {
                var t = this.w.config.chart.redrawOnWindowResize;
                "function" == typeof t && (t = t()), t && this._windowResize();
              },
            },
          ],
          [
            {
              key: "getChartByID",
              value: function (t) {
                var e = p.escapeString(t),
                  i = Apex._chartInstances.filter(function (t) {
                    return t.id === e;
                  })[0];
                return i && i.chart;
              },
            },
            {
              key: "initOnLoad",
              value: function () {
                for (
                  var e = document.querySelectorAll("[data-apexcharts]"), i = 0;
                  i < e.length;
                  i++
                )
                  new t(
                    e[i],
                    JSON.parse(e[i].getAttribute("data-options"))
                  ).render();
              },
            },
            {
              key: "exec",
              value: function (t, e) {
                var i = this.getChartByID(t);
                if (i) {
                  i.w.globals.isExecCalled = !0;
                  var n = null;
                  if (-1 !== i.publicMethods.indexOf(e)) {
                    for (
                      var a = arguments.length,
                        s = new Array(a > 2 ? a - 2 : 0),
                        r = 2;
                      r < a;
                      r++
                    )
                      s[r - 2] = arguments[r];
                    n = i[e].apply(i, s);
                  }
                  return n;
                }
              },
            },
            {
              key: "merge",
              value: function (t, e) {
                return p.extend(t, e);
              },
            },
          ]
        ),
        t
      );
    })();
  });
